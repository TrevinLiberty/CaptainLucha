#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/IndexBufferObject.cpp"
#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/IndexBufferObject.cpp"
#line 1 "<built-in>"
#line 1 "<built-in>"
#line 159 "<built-in>"
#line 1 "<command line>"
#line 1 "<built-in>"
#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/IndexBufferObject.cpp"
#line 29 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/IndexBufferObject.cpp"
#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/IndexBufferObject.h"
#line 32 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/IndexBufferObject.h"
#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/VertexBufferObject.h"
#line 32 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/VertexBufferObject.h"
#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/RendererUtils.h"
#line 34 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/RendererUtils.h"
#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/MatrixStack.h"
#line 32 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/MatrixStack.h"
#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix4D.h"
#line 32 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix4D.h"
#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Vector4D.h"
#line 32 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Vector4D.h"
#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Vector3D.h"
#line 32 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Vector3D.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cmath"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 56 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\sal.h"
#line 160 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\sal.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include/codeanalysis\\sourceannotations.h"
#line 29 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include/codeanalysis\\sourceannotations.h"
typedef __w64 unsigned int size_t;
#line 52 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include/codeanalysis\\sourceannotations.h"
namespace vc_attributes
{


enum YesNoMaybe
{

 No = 0x0fff0001,
 Maybe = 0x0fff0010,
 Yes = 0x0fff0100
};

typedef enum YesNoMaybe YesNoMaybe;

enum AccessType
{
 NoAccess = 0,
 Read = 1,
 Write = 2,
 ReadWrite = 3
};

typedef enum AccessType AccessType;



[repeatable]
[source_annotation_attribute( Parameter )]
struct PreAttribute
{

 PreAttribute();


 unsigned int Deref;
 YesNoMaybe Valid;
 YesNoMaybe Null;
 YesNoMaybe Tainted;
 AccessType Access;
 size_t ValidElementsConst;
 size_t ValidBytesConst;
 const wchar_t* ValidElements;
 const wchar_t* ValidBytes;
 const wchar_t* ValidElementsLength;
 const wchar_t* ValidBytesLength;
 size_t WritableElementsConst;
 size_t WritableBytesConst;
 const wchar_t* WritableElements;
 const wchar_t* WritableBytes;
 const wchar_t* WritableElementsLength;
 const wchar_t* WritableBytesLength;
 size_t ElementSizeConst;
 const wchar_t* ElementSize;
 YesNoMaybe NullTerminated;
 const wchar_t* Condition;
};

[repeatable]
[source_annotation_attribute( Parameter|ReturnValue )]
struct PostAttribute
{

 PostAttribute();


 unsigned int Deref;
 YesNoMaybe Valid;
 YesNoMaybe Null;
 YesNoMaybe Tainted;
 AccessType Access;
 size_t ValidElementsConst;
 size_t ValidBytesConst;
 const wchar_t* ValidElements;
 const wchar_t* ValidBytes;
 const wchar_t* ValidElementsLength;
 const wchar_t* ValidBytesLength;
 size_t WritableElementsConst;
 size_t WritableBytesConst;
 const wchar_t* WritableElements;
 const wchar_t* WritableBytes;
 const wchar_t* WritableElementsLength;
 const wchar_t* WritableBytesLength;
 size_t ElementSizeConst;
 const wchar_t* ElementSize;
 YesNoMaybe NullTerminated;
 YesNoMaybe MustCheck;
 const wchar_t* Condition;
};

[source_annotation_attribute( Parameter )]
struct FormatStringAttribute
{

 FormatStringAttribute();


 const wchar_t* Style;
 const wchar_t* UnformattedAlternative;
};

[repeatable]
[source_annotation_attribute( ReturnValue )]
struct InvalidCheckAttribute
{

 InvalidCheckAttribute();


 long Value;
};

[source_annotation_attribute( Method )]
struct SuccessAttribute
{

 SuccessAttribute();


 const wchar_t* Condition;
};

[repeatable]
[source_annotation_attribute( Parameter )]
struct PreBoundAttribute
{

 PreBoundAttribute();

 unsigned int Deref;
};

[repeatable]
[source_annotation_attribute( Parameter|ReturnValue )]
struct PostBoundAttribute
{

 PostBoundAttribute();

 unsigned int Deref;
};

[repeatable]
[source_annotation_attribute( Parameter )]
struct PreRangeAttribute
{

 PreRangeAttribute();

 unsigned int Deref;
 const char* MinVal;
 const char* MaxVal;
};

[repeatable]
[source_annotation_attribute( Parameter|ReturnValue )]
struct PostRangeAttribute
{

 PostRangeAttribute();

 unsigned int Deref;
 const char* MinVal;
 const char* MaxVal;
};




};
#line 244 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include/codeanalysis\\sourceannotations.h"
typedef ::vc_attributes::YesNoMaybe SA_YesNoMaybe;
const ::vc_attributes::YesNoMaybe SA_Yes = ::vc_attributes::Yes;
const ::vc_attributes::YesNoMaybe SA_No = ::vc_attributes::No;
const ::vc_attributes::YesNoMaybe SA_Maybe = ::vc_attributes::Maybe;

typedef ::vc_attributes::AccessType SA_AccessType;
const ::vc_attributes::AccessType SA_NoAccess = ::vc_attributes::NoAccess;
const ::vc_attributes::AccessType SA_Read = ::vc_attributes::Read;
const ::vc_attributes::AccessType SA_Write = ::vc_attributes::Write;
const ::vc_attributes::AccessType SA_ReadWrite = ::vc_attributes::ReadWrite;


typedef ::vc_attributes::PreAttribute SA_Pre;
typedef ::vc_attributes::PostAttribute SA_Post;
typedef ::vc_attributes::FormatStringAttribute SA_FormatString;
typedef ::vc_attributes::InvalidCheckAttribute SA_InvalidCheck;
typedef ::vc_attributes::SuccessAttribute SA_Success;
typedef ::vc_attributes::PreBoundAttribute SA_PreBound;
typedef ::vc_attributes::PostBoundAttribute SA_PostBound;
typedef ::vc_attributes::PreRangeAttribute SA_PreRange;
typedef ::vc_attributes::PostRangeAttribute SA_PostRange;
#line 160 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\sal.h"
#line 1494 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\sal.h"
extern "C" {
#line 1995 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\sal.h"
}
#line 56 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"





#pragma pack(push,_CRT_PACKING)


#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\vadefs.h"
#line 29 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\vadefs.h"
#pragma pack(push,_CRT_PACKING)


extern "C" {
#line 48 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\vadefs.h"
typedef __w64 unsigned int uintptr_t;
#line 57 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\vadefs.h"
typedef char * va_list;
#line 143 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\vadefs.h"
}


#pragma pack(pop)
#line 63 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"



extern "C" {
#line 409 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
typedef size_t rsize_t;
#line 418 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
typedef __w64 int intptr_t;
#line 436 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
typedef __w64 int ptrdiff_t;
#line 447 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
#line 469 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
typedef int errno_t;



typedef __w64 long __time32_t;




typedef __int64 __time64_t;







typedef __time64_t time_t;
#line 543 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
 __declspec(dllimport) void __cdecl _invalid_parameter( const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);





__declspec(dllimport) __declspec(noreturn)
void __cdecl _invoke_watson( const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);
#line 1953 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;


typedef struct tagLC_ID {
        unsigned short wLanguage;
        unsigned short wCountry;
        unsigned short wCodePage;
} LC_ID, *LPLC_ID;




typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned long lc_handle[6];
        LC_ID lc_id[6];
        struct {
            char *locale;
            wchar_t *wlocale;
            int *refcount;
            int *wrefcount;
        } lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
} threadlocinfo;




}
#line 2036 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"


#pragma pack(push,_CRT_PACKING)
#line 194 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
#pragma detect_mismatch("_MSC_VER", "1600")








#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "2")
#line 357 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\use_ansi.h"
#line 27 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\use_ansi.h"
#pragma comment(lib, "msvcprtd")
#line 357 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
#line 535 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
namespace std {
typedef bool _Bool;
}
#line 553 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
typedef __int64 _Longlong;
typedef unsigned __int64 _ULonglong;
#line 576 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
typedef unsigned short char16_t;
typedef unsigned int char32_t;
#line 591 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
namespace std {
enum _Uninitialized
 {
 _Noinit
 };



#pragma warning(push)
#pragma warning(disable:4412)
class __declspec(dllimport) _Lockit
 {
public:
#line 624 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
 __thiscall _Lockit();
 explicit __thiscall _Lockit(int);
 __thiscall ~_Lockit();


    static void __cdecl _Lockit_ctor(int);
    static void __cdecl _Lockit_dtor(int);

private:
    static void __cdecl _Lockit_ctor(_Lockit *);
    static void __cdecl _Lockit_ctor(_Lockit *, int);
    static void __cdecl _Lockit_dtor(_Lockit *);

                    _Lockit(const _Lockit&);
 _Lockit& operator=(const _Lockit&);

 int _Locktype;
#line 655 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
 };
#line 742 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
class __declspec(dllimport) _Mutex
 {
public:
#line 773 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
    __thiscall _Mutex(_Uninitialized)
  {
  }

    __thiscall _Mutex();
 __thiscall ~_Mutex();
 void __thiscall _Lock();
 void __thiscall _Unlock();


private:
    static void __cdecl _Mutex_ctor(_Mutex *);
    static void __cdecl _Mutex_dtor(_Mutex *);
    static void __cdecl _Mutex_Lock(_Mutex *);
    static void __cdecl _Mutex_Unlock(_Mutex *);

                    _Mutex(const _Mutex&);
 _Mutex& operator=(const _Mutex&);
 void *_Mtx;
#line 802 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
 };

class __declspec(dllimport) _Init_locks
 {
public:
#line 820 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
    __thiscall _Init_locks();
 __thiscall ~_Init_locks();


private:
    static void __cdecl _Init_locks_ctor(_Init_locks *);
    static void __cdecl _Init_locks_dtor(_Init_locks *);
#line 837 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
 };

#pragma warning(pop)
}
#line 849 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\yvals.h"
__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void));

typedef int _Mbstatet;
typedef unsigned long _Uint32t;







#pragma pack(pop)
#line 5 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cmath"








#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\math.h"
#line 18 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\math.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 18 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\math.h"






#pragma pack(push,_CRT_PACKING)


extern "C" {
#line 37 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\math.h"
struct _exception {
        int type;
        char *name;
        double arg1;
        double arg2;
        double retval;
        } ;
#line 54 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\math.h"
struct _complex {
        double x,y;
        } ;
#line 88 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\math.h"
__declspec(dllimport) extern double _HUGE;
#line 101 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\math.h"
        int __cdecl abs( int _X);
        long __cdecl labs( long _X);
        long long __cdecl llabs( long long _X);


        double __cdecl acos( double _X);
        double __cdecl asin( double _X);
        double __cdecl atan( double _X);
        double __cdecl atan2( double _Y, double _X);

               __declspec(dllimport) double __cdecl _copysign ( double _Number, double _Sign);
               __declspec(dllimport) double __cdecl _chgsign ( double _X);


        double __cdecl cos( double _X);
        double __cdecl cosh( double _X);
        double __cdecl exp( double _X);
                   double __cdecl fabs( double _X);
        double __cdecl fmod( double _X, double _Y);
        double __cdecl log( double _X);
        double __cdecl log10( double _X);
        double __cdecl pow( double _X, double _Y);
        double __cdecl sin( double _X);
        double __cdecl sinh( double _X);
        double __cdecl tan( double _X);
        double __cdecl tanh( double _X);
        double __cdecl sqrt( double _X);


               __declspec(dllimport) double __cdecl atof( const char *_String);
               __declspec(dllimport) double __cdecl _atof_l( const char *_String, _locale_t _Locale);


__declspec(dllimport) double __cdecl _cabs( struct _complex _Complex_value);
__declspec(dllimport) double __cdecl ceil( double _X);
__declspec(dllimport) double __cdecl floor( double _X);
__declspec(dllimport) double __cdecl frexp( double _X, int * _Y);
__declspec(dllimport) double __cdecl _hypot( double _X, double _Y);
__declspec(dllimport) float __cdecl _hypotf( float _X, float _Y);
__declspec(dllimport) double __cdecl _j0( double _X );
__declspec(dllimport) double __cdecl _j1( double _X );
__declspec(dllimport) double __cdecl _jn(int _X, double _Y);
__declspec(dllimport) double __cdecl ldexp( double _X, int _Y);





        int __cdecl _matherr( struct _exception * _Except);


__declspec(dllimport) double __cdecl modf( double _X, double * _Y);

__declspec(dllimport) double __cdecl _y0( double _X);
__declspec(dllimport) double __cdecl _y1( double _X);
__declspec(dllimport) double __cdecl _yn( int _X, double _Y);




static __inline double __cdecl hypot( double _X, double _Y)
{
    return _hypot(_X, _Y);
}

static __inline float __cdecl hypotf( float _X, float _Y)
{
    return _hypotf(_X, _Y);
}





__declspec(dllimport) int __cdecl _set_SSE2_enable( int _Flag);
#line 328 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\math.h"
inline long double acosl( long double _X)
        {return (acos((double)_X)); }
inline long double asinl( long double _X)
        {return (asin((double)_X)); }
inline long double atanl( long double _X)
        {return (atan((double)_X)); }
inline long double atan2l( long double _Y, long double _X)
        {return (atan2((double)_Y, (double)_X)); }
inline long double ceill( long double _X)
        {return (ceil((double)_X)); }
inline long double cosl( long double _X)
        {return (cos((double)_X)); }
inline long double coshl( long double _X)
        {return (cosh((double)_X)); }
inline long double expl( long double _X)
        {return (exp((double)_X)); }
inline long double fabsl( long double _X)
        {return (fabs((double)_X)); }
inline long double floorl( long double _X)
        {return (floor((double)_X)); }
inline long double fmodl( long double _X, long double _Y)
        {return (fmod((double)_X, (double)_Y)); }
inline long double frexpl( long double _X, int *_Y)
        {return (frexp((double)_X, _Y)); }
inline long double ldexpl( long double _X, int _Y)
        {return (ldexp((double)_X, _Y)); }
inline long double logl( long double _X)
        {return (log((double)_X)); }
inline long double log10l( long double _X)
        {return (log10((double)_X)); }
inline long double modfl( long double _X, long double *_Y)
        {double _Di, _Df = modf((double)_X, &_Di);
        *_Y = (long double)_Di;
        return (_Df); }
inline long double powl( long double _X, long double _Y)
        {return (pow((double)_X, (double)_Y)); }
inline long double sinl( long double _X)
        {return (sin((double)_X)); }
inline long double sinhl( long double _X)
        {return (sinh((double)_X)); }
inline long double sqrtl( long double _X)
        {return (sqrt((double)_X)); }

inline long double tanl( long double _X)
        {return (tan((double)_X)); }




inline long double tanhl( long double _X)
        {return (tanh((double)_X)); }

inline long double _chgsignl( long double _Number)
{
    return _chgsign(static_cast<double>(_Number));
}

inline long double _copysignl( long double _Number, long double _Sign)
{
    return _copysign(static_cast<double>(_Number), static_cast<double>(_Sign));
}

inline float frexpf( float _X, int *_Y)
        {return ((float)frexp((double)_X, _Y)); }


inline float fabsf( float _X)
        {return ((float)fabs((double)_X)); }
inline float ldexpf( float _X, int _Y)
        {return ((float)ldexp((double)_X, _Y)); }

inline float acosf( float _X)
        {return ((float)acos((double)_X)); }
inline float asinf( float _X)
        {return ((float)asin((double)_X)); }
inline float atanf( float _X)
        {return ((float)atan((double)_X)); }
inline float atan2f( float _Y, float _X)
        {return ((float)atan2((double)_Y, (double)_X)); }
inline float ceilf( float _X)
        {return ((float)ceil((double)_X)); }
inline float cosf( float _X)
        {return ((float)cos((double)_X)); }
inline float coshf( float _X)
        {return ((float)cosh((double)_X)); }
inline float expf( float _X)
        {return ((float)exp((double)_X)); }
inline float floorf( float _X)
        {return ((float)floor((double)_X)); }
inline float fmodf( float _X, float _Y)
        {return ((float)fmod((double)_X, (double)_Y)); }
inline float logf( float _X)
        {return ((float)log((double)_X)); }
inline float log10f( float _X)
        {return ((float)log10((double)_X)); }
inline float modff( float _X, float *_Y)
        { double _Di, _Df = modf((double)_X, &_Di);
        *_Y = (float)_Di;
        return ((float)_Df); }
inline float powf( float _X, float _Y)
        {return ((float)pow((double)_X, (double)_Y)); }
inline float sinf( float _X)
        {return ((float)sin((double)_X)); }
inline float sinhf( float _X)
        {return ((float)sinh((double)_X)); }
inline float sqrtf( float _X)
        {return ((float)sqrt((double)_X)); }
inline float tanf( float _X)
        {return ((float)tan((double)_X)); }
inline float tanhf( float _X)
        {return ((float)tanh((double)_X)); }
#line 460 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\math.h"
__declspec(dllimport) extern double HUGE;




__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_cabs" ". See online help for details.")) __declspec(dllimport) double __cdecl cabs( struct _complex _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_j0" ". See online help for details.")) __declspec(dllimport) double __cdecl j0( double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_j1" ". See online help for details.")) __declspec(dllimport) double __cdecl j1( double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_jn" ". See online help for details.")) __declspec(dllimport) double __cdecl jn( int _X, double _Y);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_y0" ". See online help for details.")) __declspec(dllimport) double __cdecl y0( double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_y1" ". See online help for details.")) __declspec(dllimport) double __cdecl y1( double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_yn" ". See online help for details.")) __declspec(dllimport) double __cdecl yn( int _X, double _Y);






}

extern "C++" {

template<class _Ty> inline
        _Ty _Pow_int(_Ty _X, int _Y)
        {unsigned int _N;
        if (_Y >= 0)
                _N = (unsigned int)_Y;
        else
                _N = (unsigned int)(-_Y);
        for (_Ty _Z = _Ty(1); ; _X *= _X)
                {if ((_N & 1) != 0)
                        _Z *= _X;
                if ((_N >>= 1) == 0)
                        return (_Y < 0 ? _Ty(1) / _Z : _Z); }}

inline double __cdecl abs( double _X)
        {return (fabs(_X)); }
inline double __cdecl pow( double _X, int _Y)
        {return (_Pow_int(_X, _Y)); }
inline float __cdecl abs( float _X)
        {return (fabsf(_X)); }
inline float __cdecl acos( float _X)
        {return (acosf(_X)); }
inline float __cdecl asin( float _X)
        {return (asinf(_X)); }
inline float __cdecl atan( float _X)
        {return (atanf(_X)); }
inline float __cdecl atan2( float _Y, float _X)
        {return (atan2f(_Y, _X)); }
inline float __cdecl ceil( float _X)
        {return (ceilf(_X)); }
inline float __cdecl cos( float _X)
        {return (cosf(_X)); }
inline float __cdecl cosh( float _X)
        {return (coshf(_X)); }
inline float __cdecl exp( float _X)
        {return (expf(_X)); }
inline float __cdecl fabs( float _X)
        {return (fabsf(_X)); }
inline float __cdecl floor( float _X)
        {return (floorf(_X)); }
inline float __cdecl fmod( float _X, float _Y)
        {return (fmodf(_X, _Y)); }
inline float __cdecl frexp( float _X, int * _Y)
        {return (frexpf(_X, _Y)); }
inline float __cdecl ldexp( float _X, int _Y)
        {return (ldexpf(_X, _Y)); }
inline float __cdecl log( float _X)
        {return (logf(_X)); }
inline float __cdecl log10( float _X)
        {return (log10f(_X)); }
inline float __cdecl modf( float _X, float * _Y)
        {return (modff(_X, _Y)); }
inline float __cdecl pow( float _X, float _Y)
        {return (powf(_X, _Y)); }
inline float __cdecl pow( float _X, int _Y)
        {return (_Pow_int(_X, _Y)); }
inline float __cdecl sin( float _X)
        {return (sinf(_X)); }
inline float __cdecl sinh( float _X)
        {return (sinhf(_X)); }
inline float __cdecl sqrt( float _X)
        {return (sqrtf(_X)); }
inline float __cdecl tan( float _X)
        {return (tanf(_X)); }
inline float __cdecl tanh( float _X)
        {return (tanhf(_X)); }
inline long double __cdecl abs( long double _X)
        {return (fabsl(_X)); }
inline long double __cdecl acos( long double _X)
        {return (acosl(_X)); }
inline long double __cdecl asin( long double _X)
        {return (asinl(_X)); }
inline long double __cdecl atan( long double _X)
        {return (atanl(_X)); }
inline long double __cdecl atan2( long double _Y, long double _X)
        {return (atan2l(_Y, _X)); }
inline long double __cdecl ceil( long double _X)
        {return (ceill(_X)); }
inline long double __cdecl cos( long double _X)
        {return (cosl(_X)); }
inline long double __cdecl cosh( long double _X)
        {return (coshl(_X)); }
inline long double __cdecl exp( long double _X)
        {return (expl(_X)); }
inline long double __cdecl fabs( long double _X)
        {return (fabsl(_X)); }
inline long double __cdecl floor( long double _X)
        {return (floorl(_X)); }
inline long double __cdecl fmod( long double _X, long double _Y)
        {return (fmodl(_X, _Y)); }
inline long double __cdecl frexp( long double _X, int * _Y)
        {return (frexpl(_X, _Y)); }
inline long double __cdecl ldexp( long double _X, int _Y)
        {return (ldexpl(_X, _Y)); }
inline long double __cdecl log( long double _X)
        {return (logl(_X)); }
inline long double __cdecl log10( long double _X)
        {return (log10l(_X)); }
inline long double __cdecl modf( long double _X, long double * _Y)
        {return (modfl(_X, _Y)); }
inline long double __cdecl pow( long double _X, long double _Y)
        {return (powl(_X, _Y)); }
inline long double __cdecl pow( long double _X, int _Y)
        {return (_Pow_int(_X, _Y)); }
inline long double __cdecl sin( long double _X)
        {return (sinl(_X)); }
inline long double __cdecl sinh( long double _X)
        {return (sinhl(_X)); }
inline long double __cdecl sqrt( long double _X)
        {return (sqrtl(_X)); }
inline long double __cdecl tan( long double _X)
        {return (tanl(_X)); }
inline long double __cdecl tanh( long double _X)
        {return (tanhl(_X)); }

}


#pragma pack(pop)
#line 13 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cmath"





namespace std {
using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: abs;

using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;
}
#line 32 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Vector3D.h"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\iostream"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\istream"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ostream"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ios"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\climits"






#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\limits.h"
#line 17 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\limits.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 17 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\limits.h"
#line 7 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\climits"
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum"


#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cstdio"
#line 13 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cstdio"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"






#pragma pack(push,_CRT_PACKING)


extern "C" {
#line 56 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
struct _iobuf {
        char *_ptr;
        int _cnt;
        char *_base;
        int _flag;
        int _file;
        int _charbuf;
        int _bufsiz;
        char *_tmpfname;
        };
typedef struct _iobuf FILE;
#line 129 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
__declspec(dllimport) FILE * __cdecl __iob_func(void);
#line 145 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
typedef __int64 fpos_t;
#line 186 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
               __declspec(dllimport) int __cdecl _filbuf( FILE * _File );
                   __declspec(dllimport) int __cdecl _flsbuf( int _Ch, FILE * _File);




               __declspec(dllimport) FILE * __cdecl _fsopen( const char * _Filename, const char * _Mode, int _ShFlag);


__declspec(dllimport) void __cdecl clearerr( FILE * _File);

                   __declspec(dllimport) errno_t __cdecl clearerr_s( FILE * _File );

                   __declspec(dllimport) int __cdecl fclose( FILE * _File);
                   __declspec(dllimport) int __cdecl _fcloseall(void);




               __declspec(dllimport) FILE * __cdecl _fdopen( int _FileHandle, const char * _Mode);


               __declspec(dllimport) int __cdecl feof( FILE * _File);
               __declspec(dllimport) int __cdecl ferror( FILE * _File);
                   __declspec(dllimport) int __cdecl fflush( FILE * _File);
                   __declspec(dllimport) int __cdecl fgetc( FILE * _File);
                   __declspec(dllimport) int __cdecl _fgetchar(void);
                   __declspec(dllimport) int __cdecl fgetpos( FILE * _File , fpos_t * _Pos);
                   __declspec(dllimport) char * __cdecl fgets( char * _Buf, int _MaxCount, FILE * _File);




               __declspec(dllimport) int __cdecl _fileno( FILE * _File);







               __declspec(dllimport) char * __cdecl _tempnam( const char * _DirName, const char * _FilePrefix);





                   __declspec(dllimport) int __cdecl _flushall(void);
                                                __declspec(dllimport) FILE * __cdecl fopen( const char * _Filename, const char * _Mode);

                   __declspec(dllimport) errno_t __cdecl fopen_s( FILE ** _File, const char * _Filename, const char * _Mode);

                   __declspec(dllimport) int __cdecl fprintf( FILE * _File, const char * _Format, ...);

                   __declspec(dllimport) int __cdecl fprintf_s( FILE * _File, const char * _Format, ...);

                   __declspec(dllimport) int __cdecl fputc( int _Ch, FILE * _File);
                   __declspec(dllimport) int __cdecl _fputchar( int _Ch);
                   __declspec(dllimport) int __cdecl fputs( const char * _Str, FILE * _File);
                   __declspec(dllimport) size_t __cdecl fread( void * _DstBuf, size_t _ElementSize, size_t _Count, FILE * _File);

                   __declspec(dllimport) size_t __cdecl fread_s( void * _DstBuf, size_t _DstSize, size_t _ElementSize, size_t _Count, FILE * _File);

                                                  __declspec(dllimport) FILE * __cdecl freopen( const char * _Filename, const char * _Mode, FILE * _File);

                   __declspec(dllimport) errno_t __cdecl freopen_s( FILE ** _File, const char * _Filename, const char * _Mode, FILE * _OldFile);

                                                 __declspec(dllimport) int __cdecl fscanf( FILE * _File, const char * _Format, ...);
                                                        __declspec(dllimport) int __cdecl _fscanf_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

 __declspec(dllimport) int __cdecl fscanf_s( FILE * _File, const char * _Format, ...);

                   __declspec(dllimport) int __cdecl _fscanf_s_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
#pragma warning(pop)
 __declspec(dllimport) int __cdecl fsetpos( FILE * _File, const fpos_t * _Pos);
                   __declspec(dllimport) int __cdecl fseek( FILE * _File, long _Offset, int _Origin);
               __declspec(dllimport) long __cdecl ftell( FILE * _File);

                   __declspec(dllimport) int __cdecl _fseeki64( FILE * _File, __int64 _Offset, int _Origin);
               __declspec(dllimport) __int64 __cdecl _ftelli64( FILE * _File);

                   __declspec(dllimport) size_t __cdecl fwrite( const void * _Str, size_t _Size, size_t _Count, FILE * _File);
               __declspec(dllimport) int __cdecl getc( FILE * _File);
               __declspec(dllimport) int __cdecl getchar(void);
               __declspec(dllimport) int __cdecl _getmaxstdio(void);

__declspec(dllimport) char * __cdecl gets_s( char * _Buf, rsize_t _Size);

extern "C++" { template <size_t _Size> inline char * __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
__declspec(dllimport) char * __cdecl gets( char *_Buffer);
               int __cdecl _getw( FILE * _File);


__declspec(dllimport) void __cdecl perror( const char * _ErrMsg);

                   __declspec(dllimport) int __cdecl _pclose( FILE * _File);
               __declspec(dllimport) FILE * __cdecl _popen( const char * _Command, const char * _Mode);
                   __declspec(dllimport) int __cdecl printf( const char * _Format, ...);

                   __declspec(dllimport) int __cdecl printf_s( const char * _Format, ...);

                   __declspec(dllimport) int __cdecl putc( int _Ch, FILE * _File);
                   __declspec(dllimport) int __cdecl putchar( int _Ch);
                   __declspec(dllimport) int __cdecl puts( const char * _Str);
                   __declspec(dllimport) int __cdecl _putw( int _Word, FILE * _File);


__declspec(dllimport) int __cdecl remove( const char * _Filename);
               __declspec(dllimport) int __cdecl rename( const char * _OldFilename, const char * _NewFilename);
__declspec(dllimport) int __cdecl _unlink( const char * _Filename);

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_unlink" ". See online help for details.")) __declspec(dllimport) int __cdecl unlink( const char * _Filename);


__declspec(dllimport) void __cdecl rewind( FILE * _File);
                   __declspec(dllimport) int __cdecl _rmtmp(void);
                                                __declspec(dllimport) int __cdecl scanf( const char * _Format, ...);
                                                       __declspec(dllimport) int __cdecl _scanf_l( const char * _Format, _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

 __declspec(dllimport) int __cdecl scanf_s( const char * _Format, ...);

                   __declspec(dllimport) int __cdecl _scanf_s_l( const char * _Format, _locale_t _Locale, ...);
#pragma warning(pop)
 __declspec(dllimport) void __cdecl setbuf( FILE * _File, char * _Buffer);
                   __declspec(dllimport) int __cdecl _setmaxstdio( int _Max);
                   __declspec(dllimport) unsigned int __cdecl _set_output_format( unsigned int _Format);
                   __declspec(dllimport) unsigned int __cdecl _get_output_format(void);
                   __declspec(dllimport) int __cdecl setvbuf( FILE * _File, char * _Buf, int _Mode, size_t _Size);
                   __declspec(dllimport) int __cdecl _snprintf_s( char * _DstBuf, size_t _SizeInBytes, size_t _MaxCount, const char * _Format, ...);
extern "C++" {
#line 319 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#pragma warning(push)
#line 319 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
;
#line 319 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#pragma warning(disable: 4793)
#line 319 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
; template <size_t _Size> inline int __cdecl _snprintf_s(char (&_Dest)[_Size], size_t _MaxCount, const char * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return _vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _ArgList); }
#line 319 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#pragma warning(pop)
#line 319 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
; }

                   __declspec(dllimport) int __cdecl sprintf_s( char * _DstBuf, size_t _SizeInBytes, const char * _Format, ...);

extern "C++" {
#line 323 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#pragma warning(push)
#line 323 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
;
#line 323 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#pragma warning(disable: 4793)
#line 323 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
; template <size_t _Size> inline int __cdecl sprintf_s(char (&_Dest)[_Size], const char * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return vsprintf_s(_Dest, _Size, _Format, _ArgList); }
#line 323 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#pragma warning(pop)
#line 323 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
; }
               __declspec(dllimport) int __cdecl _scprintf( const char * _Format, ...);
                                                 __declspec(dllimport) int __cdecl sscanf( const char * _Src, const char * _Format, ...);
                                                        __declspec(dllimport) int __cdecl _sscanf_l( const char * _Src, const char * _Format, _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

 __declspec(dllimport) int __cdecl sscanf_s( const char * _Src, const char * _Format, ...);

                   __declspec(dllimport) int __cdecl _sscanf_s_l( const char * _Src, const char * _Format, _locale_t _Locale, ...);
                                                       __declspec(dllimport) int __cdecl _snscanf( const char * _Src, size_t _MaxCount, const char * _Format, ...);
                                                         __declspec(dllimport) int __cdecl _snscanf_l( const char * _Src, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snscanf_s( const char * _Src, size_t _MaxCount, const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _snscanf_s_l( const char * _Src, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
#pragma warning(pop)
 __declspec(dllimport) FILE * __cdecl tmpfile(void);

                   __declspec(dllimport) errno_t __cdecl tmpfile_s( FILE ** _File);
                   __declspec(dllimport) errno_t __cdecl tmpnam_s( char * _Buf, rsize_t _Size);

extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(char (&_Buf)[_Size]) throw() { return tmpnam_s(_Buf, _Size); } }
__declspec(dllimport) char * __cdecl tmpnam( char *_Buffer);
                   __declspec(dllimport) int __cdecl ungetc( int _Ch, FILE * _File);
                   __declspec(dllimport) int __cdecl vfprintf( FILE * _File, const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vfprintf_s( FILE * _File, const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vprintf( const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vprintf_s( const char * _Format, va_list _ArgList);

                                                        __declspec(dllimport) int __cdecl vsnprintf( char * _DstBuf, size_t _MaxCount, const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vsnprintf_s( char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsnprintf_s(char (&_Dest)[_Size], size_t _MaxCount, const char * _Format, va_list _Args) throw() { return vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _Args); } }

                   __declspec(dllimport) int __cdecl _vsnprintf_s( char * _DstBuf, size_t _SizeInBytes, size_t _MaxCount, const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl _vsnprintf_s(char (&_Dest)[_Size], size_t _MaxCount, const char * _Format, va_list _Args) throw() { return _vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _Args); } }
#pragma warning(push)
#pragma warning(disable:4793)
 __declspec(dllimport) int __cdecl _snprintf( char *_Dest, size_t _Count, const char * _Format, ...); __declspec(dllimport) int __cdecl _vsnprintf( char *_Dest, size_t _Count, const char * _Format, va_list _Args);
#pragma warning(pop)

__declspec(dllimport) int __cdecl vsprintf_s( char * _DstBuf, size_t _SizeInBytes, const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsprintf_s(char (&_Dest)[_Size], const char * _Format, va_list _Args) throw() { return vsprintf_s(_Dest, _Size, _Format, _Args); } }

#pragma warning(push)
#pragma warning(disable:4793)
 __declspec(dllimport) int __cdecl sprintf( char *_Dest, const char * _Format, ...); __declspec(dllimport) int __cdecl vsprintf( char *_Dest, const char * _Format, va_list _Args);
#pragma warning(pop)
 __declspec(dllimport) int __cdecl _vscprintf( const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _snprintf_c( char * _DstBuf, size_t _MaxCount, const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _vsnprintf_c( char *_DstBuf, size_t _MaxCount, const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _fprintf_p( FILE * _File, const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _printf_p( const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _sprintf_p( char * _Dst, size_t _MaxCount, const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _vfprintf_p( FILE * _File, const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vprintf_p( const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsprintf_p( char * _Dst, size_t _MaxCount, const char * _Format, va_list _ArgList);
               __declspec(dllimport) int __cdecl _scprintf_p( const char * _Format, ...);
               __declspec(dllimport) int __cdecl _vscprintf_p( const char * _Format, va_list _ArgList);
__declspec(dllimport) int __cdecl _set_printf_count_output( int _Value);
__declspec(dllimport) int __cdecl _get_printf_count_output(void);

                   __declspec(dllimport) int __cdecl _printf_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _printf_p_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _printf_s_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vprintf_l( const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vprintf_p_l( const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vprintf_s_l( const char * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _fprintf_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _fprintf_p_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _fprintf_s_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vfprintf_l( FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vfprintf_p_l( FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vfprintf_s_l( FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList);

                                                         __declspec(dllimport) int __cdecl _sprintf_l( char * _DstBuf, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _sprintf_p_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _sprintf_s_l( char * _DstBuf, size_t _DstSize, const char * _Format, _locale_t _Locale, ...);
                                                          __declspec(dllimport) int __cdecl _vsprintf_l( char * _DstBuf, const char * _Format, _locale_t, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsprintf_p_l( char * _DstBuf, size_t _MaxCount, const char* _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsprintf_s_l( char * _DstBuf, size_t _DstSize, const char * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _scprintf_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _scprintf_p_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vscprintf_l( const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vscprintf_p_l( const char * _Format, _locale_t _Locale, va_list _ArgList);

                                                          __declspec(dllimport) int __cdecl _snprintf_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snprintf_c_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snprintf_s_l( char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                                                           __declspec(dllimport) int __cdecl _vsnprintf_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsnprintf_c_l( char * _DstBuf, size_t _MaxCount, const char *, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsnprintf_s_l( char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char* _Format, _locale_t _Locale, va_list _ArgList);
#line 432 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
               __declspec(dllimport) FILE * __cdecl _wfsopen( const wchar_t * _Filename, const wchar_t * _Mode, int _ShFlag);


                   __declspec(dllimport) wint_t __cdecl fgetwc( FILE * _File);
                   __declspec(dllimport) wint_t __cdecl _fgetwchar(void);
                   __declspec(dllimport) wint_t __cdecl fputwc( wchar_t _Ch, FILE * _File);
                   __declspec(dllimport) wint_t __cdecl _fputwchar( wchar_t _Ch);
               __declspec(dllimport) wint_t __cdecl getwc( FILE * _File);
               __declspec(dllimport) wint_t __cdecl getwchar(void);
                   __declspec(dllimport) wint_t __cdecl putwc( wchar_t _Ch, FILE * _File);
                   __declspec(dllimport) wint_t __cdecl putwchar( wchar_t _Ch);
                   __declspec(dllimport) wint_t __cdecl ungetwc( wint_t _Ch, FILE * _File);

                   __declspec(dllimport) wchar_t * __cdecl fgetws( wchar_t * _Dst, int _SizeInWords, FILE * _File);
                   __declspec(dllimport) int __cdecl fputws( const wchar_t * _Str, FILE * _File);
                   __declspec(dllimport) wchar_t * __cdecl _getws_s( wchar_t * _Str, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline wchar_t * __cdecl _getws_s(wchar_t (&_String)[_Size]) throw() { return _getws_s(_String, _Size); } }
__declspec(dllimport) wchar_t * __cdecl _getws( wchar_t *_String);
                   __declspec(dllimport) int __cdecl _putws( const wchar_t * _Str);

                   __declspec(dllimport) int __cdecl fwprintf( FILE * _File, const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl fwprintf_s( FILE * _File, const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl wprintf( const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl wprintf_s( const wchar_t * _Format, ...);

               __declspec(dllimport) int __cdecl _scwprintf( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl vfwprintf( FILE * _File, const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vfwprintf_s( FILE * _File, const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vwprintf( const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vwprintf_s( const wchar_t * _Format, va_list _ArgList);



__declspec(dllimport) int __cdecl swprintf_s( wchar_t * _Dst, size_t _SizeInWords, const wchar_t * _Format, ...);

extern "C++" {
#line 473 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#pragma warning(push)
#line 473 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
;
#line 473 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#pragma warning(disable: 4793)
#line 473 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
; template <size_t _Size> inline int __cdecl swprintf_s(wchar_t (&_Dest)[_Size], const wchar_t * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return vswprintf_s(_Dest, _Size, _Format, _ArgList); }
#line 473 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#pragma warning(pop)
#line 473 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
; }

__declspec(dllimport) int __cdecl vswprintf_s( wchar_t * _Dst, size_t _SizeInWords, const wchar_t * _Format, va_list _ArgList);

extern "C++" { template <size_t _Size> inline int __cdecl vswprintf_s(wchar_t (&_Dest)[_Size], const wchar_t * _Format, va_list _Args) throw() { return vswprintf_s(_Dest, _Size, _Format, _Args); } }

                   __declspec(dllimport) int __cdecl _swprintf_c( wchar_t * _DstBuf, size_t _SizeInWords, const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _vswprintf_c( wchar_t * _DstBuf, size_t _SizeInWords, const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _snwprintf_s( wchar_t * _DstBuf, size_t _SizeInWords, size_t _MaxCount, const wchar_t * _Format, ...);
extern "C++" {
#line 483 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#pragma warning(push)
#line 483 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
;
#line 483 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#pragma warning(disable: 4793)
#line 483 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
; template <size_t _Size> inline int __cdecl _snwprintf_s(wchar_t (&_Dest)[_Size], size_t _Count, const wchar_t * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return _vsnwprintf_s(_Dest, _Size, _Count, _Format, _ArgList); }
#line 483 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#pragma warning(pop)
#line 483 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
; }
                   __declspec(dllimport) int __cdecl _vsnwprintf_s( wchar_t * _DstBuf, size_t _SizeInWords, size_t _MaxCount, const wchar_t * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl _vsnwprintf_s(wchar_t (&_Dest)[_Size], size_t _Count, const wchar_t * _Format, va_list _Args) throw() { return _vsnwprintf_s(_Dest, _Size, _Count, _Format, _Args); } }
#pragma warning(push)
#pragma warning(disable:4793)
 __declspec(dllimport) int __cdecl _snwprintf( wchar_t *_Dest, size_t _Count, const wchar_t * _Format, ...); __declspec(dllimport) int __cdecl _vsnwprintf( wchar_t *_Dest, size_t _Count, const wchar_t * _Format, va_list _Args);
#pragma warning(pop)

 __declspec(dllimport) int __cdecl _fwprintf_p( FILE * _File, const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _wprintf_p( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _vfwprintf_p( FILE * _File, const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vwprintf_p( const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _swprintf_p( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _vswprintf_p( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, va_list _ArgList);
               __declspec(dllimport) int __cdecl _scwprintf_p( const wchar_t * _Format, ...);
               __declspec(dllimport) int __cdecl _vscwprintf_p( const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _wprintf_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _wprintf_p_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _wprintf_s_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vwprintf_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vwprintf_s_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _fwprintf_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _fwprintf_p_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _fwprintf_s_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vfwprintf_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vfwprintf_p_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vfwprintf_s_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _swprintf_c_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _swprintf_p_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _swprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vswprintf_c_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vswprintf_p_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vswprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

               __declspec(dllimport) int __cdecl _scwprintf_l( const wchar_t * _Format, _locale_t _Locale, ...);
               __declspec(dllimport) int __cdecl _scwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, ...);
               __declspec(dllimport) int __cdecl _vscwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

                                                           __declspec(dllimport) int __cdecl _snwprintf_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snwprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                                                            __declspec(dllimport) int __cdecl _vsnwprintf_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsnwprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
#line 542 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#pragma warning(push)
#pragma warning(disable:4141 4996 4793)
 __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl _swprintf( wchar_t *_Dest, const wchar_t * _Format, ...); __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl _vswprintf( wchar_t *_Dest, const wchar_t * _Format, va_list _Args);
__declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl __swprintf_l( wchar_t *_Dest, const wchar_t * _Format, _locale_t _Plocinfo, ...); __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl __vswprintf_l( wchar_t *_Dest, const wchar_t * _Format, _locale_t _Plocinfo, va_list _Args);
#pragma warning(pop)



#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\swprintf.inl"
#line 34 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\swprintf.inl"
#pragma warning( push )
#pragma warning( disable : 4793 4412 )
static __inline int swprintf(wchar_t * _String, size_t _Count, const wchar_t * _Format, ...)
{
    va_list _Arglist;
    int _Ret;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, 0, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4412 )
static __inline int __cdecl vswprintf(wchar_t * _String, size_t _Count, const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, 0, _Ap);
}
#pragma warning( pop )




#pragma warning( push )
#pragma warning( disable : 4793 4412 )
static __inline int _swprintf_l(wchar_t * _String, size_t _Count, const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    int _Ret;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Plocinfo) ) + ( (sizeof(_Plocinfo) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4412 )
static __inline int __cdecl _vswprintf_l(wchar_t * _String, size_t _Count, const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Ap);
}
#pragma warning( pop )


#pragma warning( push )
#pragma warning( disable : 4996 )

#pragma warning( push )
#pragma warning( disable : 4793 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __inline int swprintf( wchar_t * _String, const wchar_t * _Format, ...)
{
    va_list _Arglist;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    int _Ret = _vswprintf(_String, _Format, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __inline int __cdecl vswprintf( wchar_t * _String, const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf(_String, _Format, _Ap);
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4793 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __inline int _swprintf_l( wchar_t * _String, const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Plocinfo) ) + ( (sizeof(_Plocinfo) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    int _Ret = __vswprintf_l(_String, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __inline int __cdecl _vswprintf_l( wchar_t * _String, const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return __vswprintf_l(_String, _Format, _Plocinfo, _Ap);
}
#pragma warning( pop )

#pragma warning( pop )
#line 549 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
#line 566 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
               __declspec(dllimport) wchar_t * __cdecl _wtempnam( const wchar_t * _Directory, const wchar_t * _FilePrefix);





               __declspec(dllimport) int __cdecl _vscwprintf( const wchar_t * _Format, va_list _ArgList);
               __declspec(dllimport) int __cdecl _vscwprintf_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                                                  __declspec(dllimport) int __cdecl fwscanf( FILE * _File, const wchar_t * _Format, ...);
                                                         __declspec(dllimport) int __cdecl _fwscanf_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

 __declspec(dllimport) int __cdecl fwscanf_s( FILE * _File, const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl _fwscanf_s_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
                                                  __declspec(dllimport) int __cdecl swscanf( const wchar_t * _Src, const wchar_t * _Format, ...);
                                                         __declspec(dllimport) int __cdecl _swscanf_l( const wchar_t * _Src, const wchar_t * _Format, _locale_t _Locale, ...);

                   __declspec(dllimport) int __cdecl swscanf_s( const wchar_t *_Src, const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl _swscanf_s_l( const wchar_t * _Src, const wchar_t * _Format, _locale_t _Locale, ...);
                                                        __declspec(dllimport) int __cdecl _snwscanf( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, ...);
                                                          __declspec(dllimport) int __cdecl _snwscanf_l( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snwscanf_s( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _snwscanf_s_l( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                                                 __declspec(dllimport) int __cdecl wscanf( const wchar_t * _Format, ...);
                                                        __declspec(dllimport) int __cdecl _wscanf_l( const wchar_t * _Format, _locale_t _Locale, ...);

                   __declspec(dllimport) int __cdecl wscanf_s( const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl _wscanf_s_l( const wchar_t * _Format, _locale_t _Locale, ...);
#pragma warning(pop)

 __declspec(dllimport) FILE * __cdecl _wfdopen( int _FileHandle , const wchar_t * _Mode);
                                                  __declspec(dllimport) FILE * __cdecl _wfopen( const wchar_t * _Filename, const wchar_t * _Mode);
                   __declspec(dllimport) errno_t __cdecl _wfopen_s( FILE ** _File, const wchar_t * _Filename, const wchar_t * _Mode);
                                                    __declspec(dllimport) FILE * __cdecl _wfreopen( const wchar_t * _Filename, const wchar_t * _Mode, FILE * _OldFile);
                   __declspec(dllimport) errno_t __cdecl _wfreopen_s( FILE ** _File, const wchar_t * _Filename, const wchar_t * _Mode, FILE * _OldFile);



__declspec(dllimport) void __cdecl _wperror( const wchar_t * _ErrMsg);

               __declspec(dllimport) FILE * __cdecl _wpopen( const wchar_t *_Command, const wchar_t * _Mode);
__declspec(dllimport) int __cdecl _wremove( const wchar_t * _Filename);
                   __declspec(dllimport) errno_t __cdecl _wtmpnam_s( wchar_t * _DstBuf, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
__declspec(dllimport) wchar_t * __cdecl _wtmpnam( wchar_t *_Buffer);

                   __declspec(dllimport) wint_t __cdecl _fgetwc_nolock( FILE * _File);
                   __declspec(dllimport) wint_t __cdecl _fputwc_nolock( wchar_t _Ch, FILE * _File);
                   __declspec(dllimport) wint_t __cdecl _ungetwc_nolock( wint_t _Ch, FILE * _File);







inline wint_t __cdecl getwchar()
        {return (fgetwc((&__iob_func()[0]))); }
inline wint_t __cdecl putwchar(wchar_t _C)
        {return (fputwc(_C, (&__iob_func()[1]))); }
#line 675 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
__declspec(dllimport) void __cdecl _lock_file( FILE * _File);
__declspec(dllimport) void __cdecl _unlock_file( FILE * _File);

                   __declspec(dllimport) int __cdecl _fclose_nolock( FILE * _File);
                   __declspec(dllimport) int __cdecl _fflush_nolock( FILE * _File);
                   __declspec(dllimport) size_t __cdecl _fread_nolock( void * _DstBuf, size_t _ElementSize, size_t _Count, FILE * _File);
                   __declspec(dllimport) size_t __cdecl _fread_nolock_s( void * _DstBuf, size_t _DstSize, size_t _ElementSize, size_t _Count, FILE * _File);
                   __declspec(dllimport) int __cdecl _fseek_nolock( FILE * _File, long _Offset, int _Origin);
               __declspec(dllimport) long __cdecl _ftell_nolock( FILE * _File);
                   __declspec(dllimport) int __cdecl _fseeki64_nolock( FILE * _File, __int64 _Offset, int _Origin);
               __declspec(dllimport) __int64 __cdecl _ftelli64_nolock( FILE * _File);
                   __declspec(dllimport) size_t __cdecl _fwrite_nolock( const void * _DstBuf, size_t _Size, size_t _Count, FILE * _File);
                   __declspec(dllimport) int __cdecl _ungetc_nolock( int _Ch, FILE * _File);
#line 714 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdio.h"
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_tempnam" ". See online help for details.")) __declspec(dllimport) char * __cdecl tempnam( const char * _Directory, const char * _FilePrefix);





                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fcloseall" ". See online help for details.")) __declspec(dllimport) int __cdecl fcloseall(void);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fdopen" ". See online help for details.")) __declspec(dllimport) FILE * __cdecl fdopen( int _FileHandle, const char * _Format);
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fgetchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fgetchar(void);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fileno" ". See online help for details.")) __declspec(dllimport) int __cdecl fileno( FILE * _File);
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_flushall" ". See online help for details.")) __declspec(dllimport) int __cdecl flushall(void);
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fputchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fputchar( int _Ch);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_getw" ". See online help for details.")) __declspec(dllimport) int __cdecl getw( FILE * _File);
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_putw" ". See online help for details.")) __declspec(dllimport) int __cdecl putw( int _Ch, FILE * _File);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_rmtmp" ". See online help for details.")) __declspec(dllimport) int __cdecl rmtmp(void);




}


#pragma pack(pop)
#line 13 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cstdio"
#line 34 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cstdio"
typedef FILE _iobuf;


namespace std {
using :: _iobuf;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: gets; using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;
}
#line 8 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cstdlib"
#line 13 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cstdlib"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
#line 21 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 21 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"







#pragma pack(push,_CRT_PACKING)


extern "C" {
#line 52 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
typedef int (__cdecl * _onexit_t)(void);
#line 75 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
typedef struct _div_t {
        int quot;
        int rem;
} div_t;

typedef struct _ldiv_t {
        long quot;
        long rem;
} ldiv_t;

typedef struct _lldiv_t {
        long long quot;
        long long rem;
} lldiv_t;
#line 102 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
#pragma pack(4)
typedef struct {
    unsigned char ld[10];
} _LDOUBLE;
#pragma pack()
#line 122 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
typedef struct {
        double x;
} _CRT_DOUBLE;

typedef struct {
    float f;
} _CRT_FLOAT;





typedef struct {



        long double x;
} _LONGDOUBLE;



#pragma pack(4)
typedef struct {
    unsigned char ld12[12];
} _LDBL12;
#pragma pack()
#line 163 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
__declspec(dllimport) extern int __mb_cur_max;




__declspec(dllimport) int __cdecl ___mb_cur_max_func(void);
__declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t);
#line 208 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
typedef void (__cdecl *_purecall_handler)(void);


__declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler( _purecall_handler _Handler);
__declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(void);



extern "C++"
{





}




typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);


__declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler( _invalid_parameter_handler _Handler);
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);



extern "C++"
{





}





__declspec(dllimport) extern int * __cdecl _errno(void);


errno_t __cdecl _set_errno( int _Value);
errno_t __cdecl _get_errno( int * _Value);


__declspec(dllimport) unsigned long * __cdecl __doserrno(void);


errno_t __cdecl _set_doserrno( unsigned long _Value);
errno_t __cdecl _get_doserrno( unsigned long * _Value);


__declspec(dllimport) char ** __cdecl __sys_errlist(void);


__declspec(dllimport) int * __cdecl __sys_nerr(void);




__declspec(dllimport) int * __cdecl __p___argc(void);
__declspec(dllimport) char *** __cdecl __p___argv(void);
__declspec(dllimport) wchar_t *** __cdecl __p___wargv(void);
__declspec(dllimport) char *** __cdecl __p__environ(void);
__declspec(dllimport) wchar_t *** __cdecl __p__wenviron(void);
__declspec(dllimport) char ** __cdecl __p__pgmptr(void);
__declspec(dllimport) wchar_t ** __cdecl __p__wpgmptr(void);





__declspec(dllimport) extern int __argc;
__declspec(dllimport) extern char ** __argv;
__declspec(dllimport) extern wchar_t ** __wargv;
#line 299 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
__declspec(dllimport) extern char ** _environ;
__declspec(dllimport) extern wchar_t ** _wenviron;


                                             __declspec(dllimport) extern char * _pgmptr;
                                              __declspec(dllimport) extern wchar_t * _wpgmptr;
#line 321 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
errno_t __cdecl _get_pgmptr( char ** _Value);
errno_t __cdecl _get_wpgmptr( wchar_t ** _Value);



                                            __declspec(dllimport) extern int _fmode;





__declspec(dllimport) errno_t __cdecl _set_fmode( int _Mode);
__declspec(dllimport) errno_t __cdecl _get_fmode( int * _PMode);






extern "C++"
{
template <typename _CountofType, size_t _SizeOfArray>
char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

}







__declspec(dllimport) __declspec(noreturn) void __cdecl exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit( int _Code);
__declspec(dllimport) void __cdecl abort(void);


__declspec(dllimport) unsigned int __cdecl _set_abort_behavior( unsigned int _Flags, unsigned int _Mask);
#line 367 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
        __int64 __cdecl _abs64(__int64);
#line 398 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
        int __cdecl atexit(void (__cdecl *)(void));






               __declspec(dllimport) int __cdecl atoi( const char *_Str);
               __declspec(dllimport) int __cdecl _atoi_l( const char *_Str, _locale_t _Locale);
               __declspec(dllimport) long __cdecl atol( const char *_Str);
               __declspec(dllimport) long __cdecl _atol_l( const char *_Str, _locale_t _Locale);



               __declspec(dllimport) void * __cdecl bsearch_s( const void * _Key, const void * _Base,
             rsize_t _NumOfElements, rsize_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context);

               __declspec(dllimport) void * __cdecl bsearch( const void * _Key, const void * _Base,
             size_t _NumOfElements, size_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(const void *, const void *));


__declspec(dllimport) void __cdecl qsort_s( void * _Base,
             rsize_t _NumOfElements, rsize_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void *_Context);

__declspec(dllimport) void __cdecl qsort( void * _Base,
      size_t _NumOfElements, size_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(const void *, const void *));

                       unsigned short __cdecl _byteswap_ushort( unsigned short _Short);
                       unsigned long __cdecl _byteswap_ulong ( unsigned long _Long);
                       unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64 _Int64);
               __declspec(dllimport) div_t __cdecl div( int _Numerator, int _Denominator);
               __declspec(dllimport) char * __cdecl getenv( const char * _VarName);

                   __declspec(dllimport) errno_t __cdecl getenv_s( size_t * _ReturnSize, char * _DstBuf, rsize_t _DstSize, const char * _VarName);

extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(size_t * _ReturnSize, char (&_Dest)[_Size], const char * _VarName) throw() { return getenv_s(_ReturnSize, _Dest, _Size, _VarName); } }





                   __declspec(dllimport) errno_t __cdecl _dupenv_s( char **_PBuffer, size_t * _PBufferSizeInBytes, const char * _VarName);





                   __declspec(dllimport) errno_t __cdecl _itoa_s( int _Value, char * _DstBuf, size_t _Size, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itoa_s(int _Value, char (&_Dest)[_Size], int _Radix) throw() { return _itoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(dllimport) char * __cdecl _itoa(int _Value, char *_Dest, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _i64toa_s( __int64 _Val, char * _DstBuf, size_t _Size, int _Radix);
__declspec(dllimport) char * __cdecl _i64toa( __int64 _Val, char * _DstBuf, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _ui64toa_s( unsigned __int64 _Val, char * _DstBuf, size_t _Size, int _Radix);
__declspec(dllimport) char * __cdecl _ui64toa( unsigned __int64 _Val, char * _DstBuf, int _Radix);
               __declspec(dllimport) __int64 __cdecl _atoi64( const char * _String);
               __declspec(dllimport) __int64 __cdecl _atoi64_l( const char * _String, _locale_t _Locale);
               __declspec(dllimport) __int64 __cdecl _strtoi64( const char * _String, char ** _EndPtr, int _Radix);
               __declspec(dllimport) __int64 __cdecl _strtoi64_l( const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) unsigned __int64 __cdecl _strtoui64( const char * _String, char ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l( const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) ldiv_t __cdecl ldiv( long _Numerator, long _Denominator);
               __declspec(dllimport) lldiv_t __cdecl lldiv( long long _Numerator, long long _Denominator);

extern "C++"
{
    inline long abs(long _X)
    {
        return labs(_X);
    }
    inline long long abs(long long _X)
    {
        return llabs(_X);
    }
    inline ldiv_t div(long _A1, long _A2)
    {
        return ldiv(_A1, _A2);
    }
    inline lldiv_t div(long long _A1, long long _A2)
    {
        return lldiv(_A1, _A2);
    }
}

                   __declspec(dllimport) errno_t __cdecl _ltoa_s( long _Val, char * _DstBuf, size_t _Size, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(long _Value, char (&_Dest)[_Size], int _Radix) throw() { return _ltoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(dllimport) char * __cdecl _ltoa(long _Value, char *_Dest, int _Radix);
               __declspec(dllimport) int __cdecl mblen( const char * _Ch, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _mblen_l( const char * _Ch, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) size_t __cdecl _mbstrlen( const char * _Str);
               __declspec(dllimport) size_t __cdecl _mbstrlen_l( const char *_Str, _locale_t _Locale);
               __declspec(dllimport) size_t __cdecl _mbstrnlen( const char *_Str, size_t _MaxCount);
               __declspec(dllimport) size_t __cdecl _mbstrnlen_l( const char *_Str, size_t _MaxCount, _locale_t _Locale);
__declspec(dllimport) int __cdecl mbtowc( wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes);
__declspec(dllimport) int __cdecl _mbtowc_l( wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale);
                   __declspec(dllimport) errno_t __cdecl mbstowcs_s( size_t * _PtNumOfCharConverted, wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount );
extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], const char * _Source, size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
__declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest, const char * _Source, size_t _MaxCount);

                   __declspec(dllimport) errno_t __cdecl _mbstowcs_s_l( size_t * _PtNumOfCharConverted, wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], const char * _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
__declspec(dllimport) size_t __cdecl _mbstowcs_l( wchar_t *_Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale);

               __declspec(dllimport) int __cdecl rand(void);




                   __declspec(dllimport) int __cdecl _set_error_mode( int _Mode);

__declspec(dllimport) void __cdecl srand( unsigned int _Seed);
               __declspec(dllimport) double __cdecl strtod( const char * _Str, char ** _EndPtr);
               __declspec(dllimport) double __cdecl _strtod_l( const char * _Str, char ** _EndPtr, _locale_t _Locale);
               __declspec(dllimport) long __cdecl strtol( const char * _Str, char ** _EndPtr, int _Radix );
               __declspec(dllimport) long __cdecl _strtol_l( const char *_Str, char **_EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) unsigned long __cdecl strtoul( const char * _Str, char ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned long __cdecl _strtoul_l(const char * _Str, char **_EndPtr, int _Radix, _locale_t _Locale);


__declspec(dllimport) int __cdecl system( const char * _Command);

                   __declspec(dllimport) errno_t __cdecl _ultoa_s( unsigned long _Val, char * _DstBuf, size_t _Size, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(unsigned long _Value, char (&_Dest)[_Size], int _Radix) throw() { return _ultoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(dllimport) char * __cdecl _ultoa(unsigned long _Value, char *_Dest, int _Radix);
__declspec(dllimport) int __cdecl wctomb( char * _MbCh, wchar_t _WCh);
__declspec(dllimport) int __cdecl _wctomb_l( char * _MbCh, wchar_t _WCh, _locale_t _Locale);

                   __declspec(dllimport) errno_t __cdecl wctomb_s( int * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, wchar_t _WCh);

                   __declspec(dllimport) errno_t __cdecl _wctomb_s_l( int * _SizeConverted, char * _MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale);
                   __declspec(dllimport) errno_t __cdecl wcstombs_s( size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const wchar_t * _Src, size_t _MaxCountInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(size_t * _PtNumOfCharConverted, char (&_Dest)[_Size], const wchar_t * _Source, size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
__declspec(dllimport) size_t __cdecl wcstombs( char *_Dest, const wchar_t * _Source, size_t _MaxCount);
                   __declspec(dllimport) errno_t __cdecl _wcstombs_s_l( size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(size_t * _PtNumOfCharConverted, char (&_Dest)[_Size], const wchar_t * _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
__declspec(dllimport) size_t __cdecl _wcstombs_l( char *_Dest, const wchar_t * _Source, size_t _MaxCount, _locale_t _Locale);
#line 598 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
                                                 __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl calloc( size_t _Count, size_t _Size);
__declspec(dllimport) __declspec(noalias) void __cdecl free( void * _Memory);
                                        __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl malloc( size_t _Size);

                                           __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl realloc( void * _Memory, size_t _NewSize);

                                                 __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _recalloc( void * _Memory, size_t _Count, size_t _Size);
__declspec(dllimport) __declspec(noalias) void __cdecl _aligned_free( void * _Memory);
                                        __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_malloc( size_t _Size, size_t _Alignment);
                                        __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_offset_malloc( size_t _Size, size_t _Alignment, size_t _Offset);

                                           __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_realloc( void * _Memory, size_t _NewSize, size_t _Alignment);

                                                 __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_recalloc( void * _Memory, size_t _Count, size_t _Size, size_t _Alignment);

                                           __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_offset_realloc( void * _Memory, size_t _NewSize, size_t _Alignment, size_t _Offset);

                                                 __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_offset_recalloc( void * _Memory, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset);
               __declspec(dllimport) size_t __cdecl _aligned_msize( void * _Memory, size_t _Alignment, size_t _Offset);
#line 643 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
                   __declspec(dllimport) errno_t __cdecl _itow_s ( int _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(int _Value, wchar_t (&_Dest)[_Size], int _Radix) throw() { return _itow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(dllimport) wchar_t * __cdecl _itow(int _Value, wchar_t *_Dest, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _ltow_s ( long _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(long _Value, wchar_t (&_Dest)[_Size], int _Radix) throw() { return _ltow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(dllimport) wchar_t * __cdecl _ltow(long _Value, wchar_t *_Dest, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _ultow_s ( unsigned long _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(unsigned long _Value, wchar_t (&_Dest)[_Size], int _Radix) throw() { return _ultow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(dllimport) wchar_t * __cdecl _ultow(unsigned long _Value, wchar_t *_Dest, int _Radix);
               __declspec(dllimport) double __cdecl wcstod( const wchar_t * _Str, wchar_t ** _EndPtr);
               __declspec(dllimport) double __cdecl _wcstod_l( const wchar_t *_Str, wchar_t ** _EndPtr, _locale_t _Locale);
               __declspec(dllimport) long __cdecl wcstol( const wchar_t *_Str, wchar_t ** _EndPtr, int _Radix);
               __declspec(dllimport) long __cdecl _wcstol_l( const wchar_t *_Str, wchar_t **_EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) unsigned long __cdecl wcstoul( const wchar_t *_Str, wchar_t ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned long __cdecl _wcstoul_l( const wchar_t *_Str, wchar_t **_EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) wchar_t * __cdecl _wgetenv( const wchar_t * _VarName);
                   __declspec(dllimport) errno_t __cdecl _wgetenv_s( size_t * _ReturnSize, wchar_t * _DstBuf, size_t _DstSizeInWords, const wchar_t * _VarName);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wgetenv_s(size_t * _ReturnSize, wchar_t (&_Dest)[_Size], const wchar_t * _VarName) throw() { return _wgetenv_s(_ReturnSize, _Dest, _Size, _VarName); } }






                   __declspec(dllimport) errno_t __cdecl _wdupenv_s( wchar_t **_Buffer, size_t *_BufferSizeInWords, const wchar_t *_VarName);







__declspec(dllimport) int __cdecl _wsystem( const wchar_t * _Command);

               __declspec(dllimport) double __cdecl _wtof( const wchar_t *_Str);
               __declspec(dllimport) double __cdecl _wtof_l( const wchar_t *_Str, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wtoi( const wchar_t *_Str);
               __declspec(dllimport) int __cdecl _wtoi_l( const wchar_t *_Str, _locale_t _Locale);
               __declspec(dllimport) long __cdecl _wtol( const wchar_t *_Str);
               __declspec(dllimport) long __cdecl _wtol_l( const wchar_t *_Str, _locale_t _Locale);

                   __declspec(dllimport) errno_t __cdecl _i64tow_s( __int64 _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
__declspec(dllimport) wchar_t * __cdecl _i64tow( __int64 _Val, wchar_t * _DstBuf, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _ui64tow_s( unsigned __int64 _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
__declspec(dllimport) wchar_t * __cdecl _ui64tow( unsigned __int64 _Val, wchar_t * _DstBuf, int _Radix);
               __declspec(dllimport) __int64 __cdecl _wtoi64( const wchar_t *_Str);
               __declspec(dllimport) __int64 __cdecl _wtoi64_l( const wchar_t *_Str, _locale_t _Locale);
               __declspec(dllimport) __int64 __cdecl _wcstoi64( const wchar_t * _Str, wchar_t ** _EndPtr, int _Radix);
               __declspec(dllimport) __int64 __cdecl _wcstoi64_l( const wchar_t * _Str, wchar_t ** _EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64( const wchar_t * _Str, wchar_t ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l( const wchar_t *_Str , wchar_t ** _EndPtr, int _Radix, _locale_t _Locale);
#line 713 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
               __declspec(dllimport) char * __cdecl _fullpath( char * _FullPath, const char * _Path, size_t _SizeInBytes);







                   __declspec(dllimport) errno_t __cdecl _ecvt_s( char * _DstBuf, size_t _Size, double _Val, int _NumOfDights, int * _PtDec, int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Dest)[_Size], double _Value, int _NumOfDigits, int * _PtDec, int * _PtSign) throw() { return _ecvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
               __declspec(dllimport) char * __cdecl _ecvt( double _Val, int _NumOfDigits, int * _PtDec, int * _PtSign);
                   __declspec(dllimport) errno_t __cdecl _fcvt_s( char * _DstBuf, size_t _Size, double _Val, int _NumOfDec, int * _PtDec, int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _fcvt_s(char (&_Dest)[_Size], double _Value, int _NumOfDigits, int * _PtDec, int * _PtSign) throw() { return _fcvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
               __declspec(dllimport) char * __cdecl _fcvt( double _Val, int _NumOfDec, int * _PtDec, int * _PtSign);
__declspec(dllimport) errno_t __cdecl _gcvt_s( char * _DstBuf, size_t _Size, double _Val, int _NumOfDigits);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _gcvt_s(char (&_Dest)[_Size], double _Value, int _NumOfDigits) throw() { return _gcvt_s(_Dest, _Size, _Value, _NumOfDigits); } }
__declspec(dllimport) char * __cdecl _gcvt( double _Val, int _NumOfDigits, char * _DstBuf);

               __declspec(dllimport) int __cdecl _atodbl( _CRT_DOUBLE * _Result, char * _Str);
               __declspec(dllimport) int __cdecl _atoldbl( _LDOUBLE * _Result, char * _Str);
               __declspec(dllimport) int __cdecl _atoflt( _CRT_FLOAT * _Result, char * _Str);
               __declspec(dllimport) int __cdecl _atodbl_l( _CRT_DOUBLE * _Result, char * _Str, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _atoldbl_l( _LDOUBLE * _Result, char * _Str, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _atoflt_l( _CRT_FLOAT * _Result, char * _Str, _locale_t _Locale);
                       unsigned long __cdecl _lrotl( unsigned long _Val, int _Shift);
                       unsigned long __cdecl _lrotr( unsigned long _Val, int _Shift);
                   __declspec(dllimport) errno_t __cdecl _makepath_s( char * _PathResult, size_t _SizeInWords, const char * _Drive, const char * _Dir, const char * _Filename,
                   const char * _Ext);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Path)[_Size], const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext) throw() { return _makepath_s(_Path, _Size, _Drive, _Dir, _Filename, _Ext); } }
__declspec(dllimport) void __cdecl _makepath( char *_Path, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext);
#line 769 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
        _onexit_t __cdecl _onexit( _onexit_t _Func);







#pragma warning (push)
#pragma warning (disable:6540)
 __declspec(dllimport) int __cdecl _putenv( const char * _EnvString);
                   __declspec(dllimport) errno_t __cdecl _putenv_s( const char * _Name, const char * _Value);
                       unsigned int __cdecl _rotl( unsigned int _Val, int _Shift);
                       unsigned __int64 __cdecl _rotl64( unsigned __int64 _Val, int _Shift);
                       unsigned int __cdecl _rotr( unsigned int _Val, int _Shift);
                       unsigned __int64 __cdecl _rotr64( unsigned __int64 _Val, int _Shift);
#pragma warning (pop)

__declspec(dllimport) errno_t __cdecl _searchenv_s( const char * _Filename, const char * _EnvVar, char * _ResultPath, size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(const char * _Filename, const char * _EnvVar, char (&_ResultPath)[_Size]) throw() { return _searchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
__declspec(dllimport) void __cdecl _searchenv(const char * _Filename, const char * _EnvVar, char *_ResultPath);

                                      __declspec(dllimport) void __cdecl _splitpath( const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext);
                   __declspec(dllimport) errno_t __cdecl _splitpath_s( const char * _FullPath,
                              char * _Drive, size_t _DriveSize,
                            char * _Dir, size_t _DirSize,
                                 char * _Filename, size_t _FilenameSize,
                            char * _Ext, size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s( const char *_Dest, char (&_Drive)[_DriveSize], char (&_Dir)[_DirSize], char (&_Name)[_NameSize], char (&_Ext)[_ExtSize]) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }

__declspec(dllimport) void __cdecl _swab( char * _Buf1, char * _Buf2, int _SizeInBytes);
#line 810 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
               __declspec(dllimport) wchar_t * __cdecl _wfullpath( wchar_t * _FullPath, const wchar_t * _Path, size_t _SizeInWords);





                   __declspec(dllimport) errno_t __cdecl _wmakepath_s( wchar_t * _PathResult, size_t _SIZE, const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename,
                   const wchar_t * _Ext);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_ResultPath)[_Size], const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename, const wchar_t * _Ext) throw() { return _wmakepath_s(_ResultPath, _Size, _Drive, _Dir, _Filename, _Ext); } }
__declspec(dllimport) void __cdecl _wmakepath( wchar_t *_ResultPath, const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename, const wchar_t * _Ext);




               __declspec(dllimport) int __cdecl _wputenv( const wchar_t * _EnvString);
                   __declspec(dllimport) errno_t __cdecl _wputenv_s( const wchar_t * _Name, const wchar_t * _Value);
__declspec(dllimport) errno_t __cdecl _wsearchenv_s( const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t * _ResultPath, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
__declspec(dllimport) void __cdecl _wsearchenv(const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t *_ResultPath);
                                       __declspec(dllimport) void __cdecl _wsplitpath( const wchar_t * _FullPath, wchar_t * _Drive, wchar_t * _Dir, wchar_t * _Filename, wchar_t * _Ext);
__declspec(dllimport) errno_t __cdecl _wsplitpath_s( const wchar_t * _FullPath,
                              wchar_t * _Drive, size_t _DriveSize,
                            wchar_t * _Dir, size_t _DirSize,
                                 wchar_t * _Filename, size_t _FilenameSize,
                            wchar_t * _Ext, size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s( const wchar_t *_Path, wchar_t (&_Drive)[_DriveSize], wchar_t (&_Dir)[_DirSize], wchar_t (&_Name)[_NameSize], wchar_t (&_Ext)[_ExtSize]) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }





__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "SetErrorMode" " instead. See online help for details.")) __declspec(dllimport) void __cdecl _seterrormode( int _Mode);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Beep" " instead. See online help for details.")) __declspec(dllimport) void __cdecl _beep( unsigned _Frequency, unsigned _Duration);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Sleep" " instead. See online help for details.")) __declspec(dllimport) void __cdecl _sleep( unsigned long _Duration);
#line 862 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4141)
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(dllimport) char * __cdecl ecvt( double _Val, int _NumOfDigits, int * _PtDec, int * _PtSign);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(dllimport) char * __cdecl fcvt( double _Val, int _NumOfDec, int * _PtDec, int * _PtSign);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(dllimport) char * __cdecl gcvt( double _Val, int _NumOfDigits, char * _DstBuf);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(dllimport) char * __cdecl itoa( int _Val, char * _DstBuf, int _Radix);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(dllimport) char * __cdecl ltoa( long _Val, char * _DstBuf, int _Radix);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_putenv" ". See online help for details.")) __declspec(dllimport) int __cdecl putenv( const char * _EnvString);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_swab" ". See online help for details.")) __declspec(dllimport) void __cdecl swab( char * _Buf1, char * _Buf2, int _SizeInBytes);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(dllimport) char * __cdecl ultoa( unsigned long _Val, char * _Dstbuf, int _Radix);
#pragma warning(pop)
_onexit_t __cdecl onexit( _onexit_t _Func);






}



#pragma pack(pop)
#line 13 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cstdlib"





namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;

using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free; using :: getenv;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul; using :: system;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;

using :: llabs; using :: lldiv;
}
#line 9 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\streambuf"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xiosbase"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale"






#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cstring"
#line 13 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cstring"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\string.h"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\string.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\string.h"



extern "C" {
#line 46 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\string.h"
__declspec(dllimport) void * __cdecl _memccpy( void * _Dst, const void * _Src, int _Val, size_t _MaxCount);
               __declspec(dllimport) const void * __cdecl memchr( const void * _Buf , int _Val, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _memicmp( const void * _Buf1, const void * _Buf2, size_t _Size);
               __declspec(dllimport) int __cdecl _memicmp_l( const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale);
                       int __cdecl memcmp( const void * _Buf1, const void * _Buf2, size_t _Size);
                                                 void * __cdecl memcpy( void * _Dst, const void * _Src, size_t _Size);

__declspec(dllimport) errno_t __cdecl memcpy_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);
#line 88 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\string.h"
        void * __cdecl memset( void * _Dst, int _Val, size_t _Size);



__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memccpy" ". See online help for details.")) __declspec(dllimport) void * __cdecl memccpy( void * _Dst, const void * _Src, int _Val, size_t _Size);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memicmp" ". See online help for details.")) __declspec(dllimport) int __cdecl memicmp( const void * _Buf1, const void * _Buf2, size_t _Size);




                   __declspec(dllimport) errno_t __cdecl _strset_s( char * _Dst, size_t _DstSize, int _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(char (&_Dest)[_Size], int _Value) throw() { return _strset_s(_Dest, _Size, _Value); } }
char * __cdecl _strset( char *_Dest, int _Value);

                   __declspec(dllimport) errno_t __cdecl strcpy_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(char (&_Dest)[_Size], const char * _Source) throw() { return strcpy_s(_Dest, _Size, _Source); } }
char * __cdecl strcpy( char *_Dest, const char * _Source);

                   __declspec(dllimport) errno_t __cdecl strcat_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Dest)[_Size], const char * _Source) throw() { return strcat_s(_Dest, _Size, _Source); } }
char * __cdecl strcat( char *_Dest, const char * _Source);
                       int __cdecl strcmp( const char * _Str1, const char * _Str2);
                       size_t __cdecl strlen( const char * _Str);
               __declspec(dllimport) size_t __cdecl strnlen( const char * _Str, size_t _MaxCount);

               static __inline size_t __cdecl strnlen_s( const char * _Str, size_t _MaxCount)
{
    return (_Str==0) ? 0 : strnlen(_Str, _MaxCount);
}


                   __declspec(dllimport) errno_t __cdecl memmove_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);





__declspec(dllimport) void * __cdecl memmove( void * _Dst, const void * _Src, size_t _Size);







               __declspec(dllimport) char * __cdecl _strdup( const char * _Src);





               __declspec(dllimport) const char * __cdecl strchr( const char * _Str, int _Val);
               __declspec(dllimport) int __cdecl _stricmp( const char * _Str1, const char * _Str2);
               __declspec(dllimport) int __cdecl _strcmpi( const char * _Str1, const char * _Str2);
               __declspec(dllimport) int __cdecl _stricmp_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl strcoll( const char * _Str1, const char * _Str2);
               __declspec(dllimport) int __cdecl _strcoll_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _stricoll( const char * _Str1, const char * _Str2);
               __declspec(dllimport) int __cdecl _stricoll_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _strncoll ( const char * _Str1, const char * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _strncoll_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _strnicoll ( const char * _Str1, const char * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _strnicoll_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) size_t __cdecl strcspn( const char * _Str, const char * _Control);
                                                    __declspec(dllimport) char * __cdecl _strerror( const char * _ErrMsg);
                   __declspec(dllimport) errno_t __cdecl _strerror_s( char * _Buf, size_t _SizeInBytes, const char * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size], const char * _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
                                                   __declspec(dllimport) char * __cdecl strerror( int);

                   __declspec(dllimport) errno_t __cdecl strerror_s( char * _Buf, size_t _SizeInBytes, int _ErrNum);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size], int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
                   __declspec(dllimport) errno_t __cdecl _strlwr_s( char * _Str, size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
__declspec(dllimport) char * __cdecl _strlwr( char *_String);
                   __declspec(dllimport) errno_t __cdecl _strlwr_s_l( char * _Str, size_t _Size, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
__declspec(dllimport) char * __cdecl _strlwr_l( char *_String, _locale_t _Locale);

                   __declspec(dllimport) errno_t __cdecl strncat_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src, rsize_t _MaxCount);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(char (&_Dest)[_Size], const char * _Source, size_t _Count) throw() { return strncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable:6059)

 __declspec(dllimport) char * __cdecl strncat( char *_Dest, const char * _Source, size_t _Count);
#pragma warning(pop)



 __declspec(dllimport) int __cdecl strncmp( const char * _Str1, const char * _Str2, size_t _MaxCount);

               __declspec(dllimport) int __cdecl _strnicmp( const char * _Str1, const char * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _strnicmp_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);

                   __declspec(dllimport) errno_t __cdecl strncpy_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src, rsize_t _MaxCount);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Dest)[_Size], const char * _Source, size_t _Count) throw() { return strncpy_s(_Dest, _Size, _Source, _Count); } }
__declspec(dllimport) char * __cdecl strncpy( char *_Dest, const char * _Source, size_t _Count);
                   __declspec(dllimport) errno_t __cdecl _strnset_s( char * _Str, size_t _SizeInBytes, int _Val, size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(char (&_Dest)[_Size], int _Val, size_t _Count) throw() { return _strnset_s(_Dest, _Size, _Val, _Count); } }
__declspec(dllimport) char * __cdecl _strnset( char *_Dest, int _Val, size_t _Count);
               __declspec(dllimport) const char * __cdecl strpbrk( const char * _Str, const char * _Control);
               __declspec(dllimport) const char * __cdecl strrchr( const char * _Str, int _Ch);
__declspec(dllimport) char * __cdecl _strrev( char * _Str);
               __declspec(dllimport) size_t __cdecl strspn( const char * _Str, const char * _Control);
               __declspec(dllimport) const char * __cdecl strstr( const char * _Str, const char * _SubStr);
                                                 __declspec(dllimport) char * __cdecl strtok( char * _Str, const char * _Delim);

               __declspec(dllimport) char * __cdecl strtok_s( char * _Str, const char * _Delim, char ** _Context);

                   __declspec(dllimport) errno_t __cdecl _strupr_s( char * _Str, size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
__declspec(dllimport) char * __cdecl _strupr( char *_String);
                   __declspec(dllimport) errno_t __cdecl _strupr_s_l( char * _Str, size_t _Size, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
__declspec(dllimport) char * __cdecl _strupr_l( char *_String, _locale_t _Locale);
                   __declspec(dllimport) size_t __cdecl strxfrm ( char * _Dst, const char * _Src, size_t _MaxCount);
                   __declspec(dllimport) size_t __cdecl _strxfrm_l( char * _Dst, const char * _Src, size_t _MaxCount, _locale_t _Locale);


extern "C++" {


               inline char * __cdecl strchr( char * _Str, int _Ch)
 { return (char*)strchr((const char*)_Str, _Ch); }
               inline char * __cdecl strpbrk( char * _Str, const char * _Control)
 { return (char*)strpbrk((const char*)_Str, _Control); }
               inline char * __cdecl strrchr( char * _Str, int _Ch)
 { return (char*)strrchr((const char*)_Str, _Ch); }
               inline char * __cdecl strstr( char * _Str, const char * _SubStr)
 { return (char*)strstr((const char*)_Str, _SubStr); }



               inline void * __cdecl memchr( void * _Pv, int _C, size_t _N)
 { return (void*)memchr((const void*)_Pv, _C, _N); }

}
#line 238 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\string.h"
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strdup" ". See online help for details.")) __declspec(dllimport) char * __cdecl strdup( const char * _Src);






               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strcmpi" ". See online help for details.")) __declspec(dllimport) int __cdecl strcmpi( const char * _Str1, const char * _Str2);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_stricmp" ". See online help for details.")) __declspec(dllimport) int __cdecl stricmp( const char * _Str1, const char * _Str2);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strlwr" ". See online help for details.")) __declspec(dllimport) char * __cdecl strlwr( char * _Str);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnicmp" ". See online help for details.")) __declspec(dllimport) int __cdecl strnicmp( const char * _Str1, const char * _Str, size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnset" ". See online help for details.")) __declspec(dllimport) char * __cdecl strnset( char * _Str, int _Val, size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strrev" ". See online help for details.")) __declspec(dllimport) char * __cdecl strrev( char * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strset" ". See online help for details.")) char * __cdecl strset( char * _Str, int _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strupr" ". See online help for details.")) __declspec(dllimport) char * __cdecl strupr( char * _Str);
#line 266 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\string.h"
               __declspec(dllimport) wchar_t * __cdecl _wcsdup( const wchar_t * _Str);






                   __declspec(dllimport) errno_t __cdecl wcscat_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src);

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Dest)[_Size], const wchar_t * _Source) throw() { return wcscat_s(_Dest, _Size, _Source); } }
__declspec(dllimport) wchar_t * __cdecl wcscat( wchar_t *_Dest, const wchar_t * _Source);
               __declspec(dllimport) const wchar_t * __cdecl wcschr( const wchar_t * _Str, wchar_t _Ch);
               __declspec(dllimport) int __cdecl wcscmp( const wchar_t * _Str1, const wchar_t * _Str2);

                   __declspec(dllimport) errno_t __cdecl wcscpy_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src);

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Dest)[_Size], const wchar_t * _Source) throw() { return wcscpy_s(_Dest, _Size, _Source); } }
__declspec(dllimport) wchar_t * __cdecl wcscpy( wchar_t *_Dest, const wchar_t * _Source);
               __declspec(dllimport) size_t __cdecl wcscspn( const wchar_t * _Str, const wchar_t * _Control);
               __declspec(dllimport) size_t __cdecl wcslen( const wchar_t * _Str);
               __declspec(dllimport) size_t __cdecl wcsnlen( const wchar_t * _Src, size_t _MaxCount);

               static __inline size_t __cdecl wcsnlen_s( const wchar_t * _Src, size_t _MaxCount)
{
    return (_Src == 0) ? 0 : wcsnlen(_Src, _MaxCount);
}


                   __declspec(dllimport) errno_t __cdecl wcsncat_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src, rsize_t _MaxCount);

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(wchar_t (&_Dest)[_Size], const wchar_t * _Source, size_t _Count) throw() { return wcsncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable:6059)
 __declspec(dllimport) wchar_t * __cdecl wcsncat( wchar_t *_Dest, const wchar_t * _Source, size_t _Count);
#pragma warning(pop)
 __declspec(dllimport) int __cdecl wcsncmp( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);

                   __declspec(dllimport) errno_t __cdecl wcsncpy_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src, rsize_t _MaxCount);

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Dest)[_Size], const wchar_t * _Source, size_t _Count) throw() { return wcsncpy_s(_Dest, _Size, _Source, _Count); } }
__declspec(dllimport) wchar_t * __cdecl wcsncpy( wchar_t *_Dest, const wchar_t * _Source, size_t _Count);
               __declspec(dllimport) const wchar_t * __cdecl wcspbrk( const wchar_t * _Str, const wchar_t * _Control);
               __declspec(dllimport) const wchar_t * __cdecl wcsrchr( const wchar_t * _Str, wchar_t _Ch);
               __declspec(dllimport) size_t __cdecl wcsspn( const wchar_t * _Str, const wchar_t * _Control);
               __declspec(dllimport) const wchar_t * __cdecl wcsstr( const wchar_t * _Str, const wchar_t * _SubStr);
                                                 __declspec(dllimport) wchar_t * __cdecl wcstok( wchar_t * _Str, const wchar_t * _Delim);

               __declspec(dllimport) wchar_t * __cdecl wcstok_s( wchar_t * _Str, const wchar_t * _Delim, wchar_t ** _Context);

                                                    __declspec(dllimport) wchar_t * __cdecl _wcserror( int _ErrNum);
                   __declspec(dllimport) errno_t __cdecl _wcserror_s( wchar_t * _Buf, size_t _SizeInWords, int _ErrNum);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size], int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
                                                     __declspec(dllimport) wchar_t * __cdecl __wcserror( const wchar_t * _Str);
                   __declspec(dllimport) errno_t __cdecl __wcserror_s( wchar_t * _Buffer, size_t _SizeInWords, const wchar_t * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size], const wchar_t * _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }

               __declspec(dllimport) int __cdecl _wcsicmp( const wchar_t * _Str1, const wchar_t * _Str2);
               __declspec(dllimport) int __cdecl _wcsicmp_l( const wchar_t * _Str1, const wchar_t * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wcsnicmp( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _wcsnicmp_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);
                   __declspec(dllimport) errno_t __cdecl _wcsnset_s( wchar_t * _Dst, size_t _SizeInWords, wchar_t _Val, size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(wchar_t (&_Dst)[_Size], wchar_t _Val, size_t _MaxCount) throw() { return _wcsnset_s(_Dst, _Size, _Val, _MaxCount); } }
__declspec(dllimport) wchar_t * __cdecl _wcsnset( wchar_t *_Str, wchar_t _Val, size_t _MaxCount);
__declspec(dllimport) wchar_t * __cdecl _wcsrev( wchar_t * _Str);
                   __declspec(dllimport) errno_t __cdecl _wcsset_s( wchar_t * _Dst, size_t _SizeInWords, wchar_t _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(wchar_t (&_Str)[_Size], wchar_t _Val) throw() { return _wcsset_s(_Str, _Size, _Val); } }
__declspec(dllimport) wchar_t * __cdecl _wcsset( wchar_t *_Str, wchar_t _Val);

                   __declspec(dllimport) errno_t __cdecl _wcslwr_s( wchar_t * _Str, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
__declspec(dllimport) wchar_t * __cdecl _wcslwr( wchar_t *_String);
                   __declspec(dllimport) errno_t __cdecl _wcslwr_s_l( wchar_t * _Str, size_t _SizeInWords, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
__declspec(dllimport) wchar_t * __cdecl _wcslwr_l( wchar_t *_String, _locale_t _Locale);
                   __declspec(dllimport) errno_t __cdecl _wcsupr_s( wchar_t * _Str, size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
__declspec(dllimport) wchar_t * __cdecl _wcsupr( wchar_t *_String);
                   __declspec(dllimport) errno_t __cdecl _wcsupr_s_l( wchar_t * _Str, size_t _Size, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
__declspec(dllimport) wchar_t * __cdecl _wcsupr_l( wchar_t *_String, _locale_t _Locale);
                   __declspec(dllimport) size_t __cdecl wcsxfrm( wchar_t * _Dst, const wchar_t * _Src, size_t _MaxCount);
                   __declspec(dllimport) size_t __cdecl _wcsxfrm_l( wchar_t * _Dst, const wchar_t *_Src, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) int __cdecl wcscoll( const wchar_t * _Str1, const wchar_t * _Str2);
               __declspec(dllimport) int __cdecl _wcscoll_l( const wchar_t * _Str1, const wchar_t * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wcsicoll( const wchar_t * _Str1, const wchar_t * _Str2);
               __declspec(dllimport) int __cdecl _wcsicoll_l( const wchar_t * _Str1, const wchar_t *_Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wcsncoll( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _wcsncoll_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wcsnicoll( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _wcsnicoll_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);




extern "C++" {
               inline wchar_t * __cdecl wcschr( wchar_t *_Str, wchar_t _Ch)
        {return ((wchar_t *)wcschr((const wchar_t *)_Str, _Ch)); }
               inline wchar_t * __cdecl wcspbrk( wchar_t *_Str, const wchar_t *_Control)
        {return ((wchar_t *)wcspbrk((const wchar_t *)_Str, _Control)); }
               inline wchar_t * __cdecl wcsrchr( wchar_t *_Str, wchar_t _Ch)
        {return ((wchar_t *)wcsrchr((const wchar_t *)_Str, _Ch)); }
               inline wchar_t * __cdecl wcsstr( wchar_t *_Str, const wchar_t *_SubStr)
        {return ((wchar_t *)wcsstr((const wchar_t *)_Str, _SubStr)); }
}
#line 380 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\string.h"
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsdup" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsdup( const wchar_t * _Str);
#line 390 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\string.h"
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicmp" ". See online help for details.")) __declspec(dllimport) int __cdecl wcsicmp( const wchar_t * _Str1, const wchar_t * _Str2);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnicmp" ". See online help for details.")) __declspec(dllimport) int __cdecl wcsnicmp( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnset" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsnset( wchar_t * _Str, wchar_t _Val, size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsrev" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsrev( wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsset" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsset( wchar_t * _Str, wchar_t _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcslwr" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcslwr( wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsupr" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsupr( wchar_t * _Str);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicoll" ". See online help for details.")) __declspec(dllimport) int __cdecl wcsicoll( const wchar_t * _Str1, const wchar_t * _Str2);
#line 406 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\string.h"
}
#line 13 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cstring"




namespace std {
using :: size_t; using :: memchr; using :: memcmp;

using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;
}
#line 7 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdexcept"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\exception"






#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstddef"
#line 14 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstddef"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cstddef"
#line 13 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cstddef"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stddef.h"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stddef.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stddef.h"



extern "C" {
#line 38 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stddef.h"
namespace std { typedef decltype(__nullptr) nullptr_t; }
using ::std::nullptr_t;
#line 73 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stddef.h"
__declspec(dllimport) extern unsigned long __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);


}
#line 13 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cstddef"




namespace std {
using :: ptrdiff_t; using :: size_t;
}
#line 14 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstddef"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)

namespace std {
#line 78 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstddef"
template<bool _Test,
 class _Ty1,
 class _Ty2>
 class _If
 {
public:
 typedef _Ty2 _Type;
 };

template<class _Ty1,
 class _Ty2>
 class _If<true, _Ty1, _Ty2>
 {
public:
 typedef _Ty1 _Type;
 };




 namespace tr1 {
typedef char (&_No)[1];
typedef char (&_Yes)[2];
 }






struct _Bool_struct
 {
 int _Member;
 };
#line 125 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstddef"
typedef int _Bool_struct::* _Bool_type;






template<class _Arg,
 class _Result>
 struct unary_function
 {
 typedef _Arg argument_type;
 typedef _Result result_type;
 };


template<class _Arg1,
 class _Arg2,
 class _Result>
 struct binary_function
 {
 typedef _Arg1 first_argument_type;
 typedef _Arg2 second_argument_type;
 typedef _Result result_type;
 };
}


#pragma warning(pop)
#pragma pack(pop)
#line 7 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\exception"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)
#line 21 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\exception"
namespace std {
#line 34 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\exception"
}




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\eh.h"
#line 15 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\eh.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 15 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\eh.h"
#line 24 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\eh.h"
#pragma pack(push,_CRT_PACKING)







typedef void (__cdecl *terminate_function)();
typedef void (__cdecl *terminate_handler)();
typedef void (__cdecl *unexpected_function)();
typedef void (__cdecl *unexpected_handler)();
#line 50 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\eh.h"
struct _EXCEPTION_POINTERS;

typedef void (__cdecl *_se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);


__declspec(dllimport) __declspec(noreturn) void __cdecl terminate(void);
__declspec(dllimport) void __cdecl unexpected(void);

__declspec(dllimport) int __cdecl _is_exception_typeof( const type_info &_Type, struct _EXCEPTION_POINTERS * _ExceptionPtr);



__declspec(dllimport) terminate_function __cdecl set_terminate( terminate_function _NewPtFunc);
extern "C" __declspec(dllimport) terminate_function __cdecl _get_terminate(void);
__declspec(dllimport) unexpected_function __cdecl set_unexpected( unexpected_function _NewPtFunc);
extern "C" __declspec(dllimport) unexpected_function __cdecl _get_unexpected(void);




__declspec(dllimport) _se_translator_function __cdecl _set_se_translator( _se_translator_function _NewPtFunc);

__declspec(dllimport) bool __cdecl __uncaught_exception();
#line 82 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\eh.h"
#pragma pack(pop)
#line 38 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\exception"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\malloc.h"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\malloc.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\malloc.h"






#pragma pack(push,_CRT_PACKING)


extern "C" {
#line 58 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\malloc.h"
typedef struct _heapinfo {
        int * _pentry;
        size_t _size;
        int _useflag;
        } _HEAPINFO;
#line 142 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\malloc.h"
__declspec(dllimport) int __cdecl _resetstkoflw (void);



__declspec(dllimport) unsigned long __cdecl _set_malloc_crt_max_wait( unsigned long _NewValue);
#line 157 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\malloc.h"
                                           __declspec(dllimport) void * __cdecl _expand( void * _Memory, size_t _NewSize);
               __declspec(dllimport) size_t __cdecl _msize( void * _Memory);






                     void * __cdecl _alloca( size_t _Size);
               __declspec(dllimport) int __cdecl _heapadd( void * _Memory, size_t _Size);
               __declspec(dllimport) int __cdecl _heapchk(void);
               __declspec(dllimport) int __cdecl _heapmin(void);
__declspec(dllimport) int __cdecl _heapset( unsigned int _Fill);
__declspec(dllimport) int __cdecl _heapwalk( _HEAPINFO * _EntryInfo);
__declspec(dllimport) size_t __cdecl _heapused(size_t * _Used, size_t * _Commit);

__declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);
#line 187 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\malloc.h"
typedef char __static_assert_t[ (sizeof(unsigned int) <= 8) ];


#pragma warning(push)
#pragma warning(disable:6540)
__inline void *_MarkAllocaS( void *_Ptr, unsigned int _Marker)
{
    if (_Ptr)
    {
        *((unsigned int*)_Ptr) = _Marker;
        _Ptr = (char*)_Ptr + 8;
    }
    return _Ptr;
}
#pragma warning(pop)
#line 227 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\malloc.h"
__declspec(noalias) __inline void __cdecl _freea( void * _Memory)
{
    unsigned int _Marker;
    if (_Memory)
    {
        _Memory = (char*)_Memory - 8;
        _Marker = *(unsigned int *)_Memory;
        if (_Marker == 0xDDDD)
        {
            free(_Memory);
        }






    }
}
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\malloc.h"
}


#pragma pack(pop)
#line 39 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\exception"
#line 84 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\exception"
 namespace std {
#line 93 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\exception"
class __declspec(dllimport) exception
    {
public:
                                         exception();
                      explicit exception(const char * const &);
                                         exception(const char * const &, int);
                                         exception(const exception&);
                      exception& operator=(const exception&);
                      virtual ~exception();
                      virtual const char * what() const;

private:
                      void _Copy_str(const char *);
                      void _Tidy();

    const char * _Mywhat;
    bool _Mydofree;
    };
#line 192 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\exception"
using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);

__declspec(dllimport) bool __cdecl uncaught_exception();

}
#line 310 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\exception"
namespace std {





class bad_exception : public exception
 {
public:
                    bad_exception(const char *_Message = "bad exception")
  throw ()
  : exception(_Message)
  {
  }

 virtual ~bad_exception() throw ()
  {
  }
#line 337 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\exception"
 };


class bad_alloc : public exception
 {
public:
                    bad_alloc(const char *_Message) throw ()
  : exception(_Message)
  {
  }

                    bad_alloc() throw ()
  : exception("bad allocation", 1)
  {
  }

 virtual ~bad_alloc() throw ()
  {
  }
#line 365 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\exception"
 };



class bad_array_new_length
 : public bad_alloc
 {
public:

 bad_array_new_length() throw ()
  : bad_alloc("bad array new length")
  {
  }
 };



}
#line 394 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrCreate( void* );
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy( void* );
__declspec(dllimport) void __cdecl __ExceptionPtrCopy( void*, const void* );
__declspec(dllimport) void __cdecl __ExceptionPtrAssign( void*, const void* );
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare( const void*, const void*);

__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException( void*);
__declspec(dllimport) void __cdecl __ExceptionPtrRethrow( const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException( void*, const void*, const void*);

namespace std {


typedef ::std:: nullptr_t _Null_type;




class _Exception_ptr
 {
public:
 _Exception_ptr()
  {
  __ExceptionPtrCreate(this);
  }
 _Exception_ptr(_Null_type)
  {
  __ExceptionPtrCreate(this);
  }
 ~_Exception_ptr()
  {
  __ExceptionPtrDestroy(this);
  }
 _Exception_ptr( const _Exception_ptr& _Rhs)
  {
  __ExceptionPtrCopy(this, const_cast<_Exception_ptr*>(&_Rhs));
  }
 _Exception_ptr& operator=( const _Exception_ptr& _Rhs)
  {
  __ExceptionPtrAssign(this, const_cast<_Exception_ptr*>(&_Rhs));
  return *this;
  }
 _Exception_ptr& operator=(_Null_type)
  {
  _Exception_ptr _Ptr;
  __ExceptionPtrAssign(this, &_Ptr);
  return *this;
  }

 void _RethrowException() const
  {
  __ExceptionPtrRethrow(const_cast<_Exception_ptr*>(this));
  }

 static _Exception_ptr _Current_exception()
  {
  _Exception_ptr _Retval;
  __ExceptionPtrCurrentException(&_Retval);
  return _Retval;
  }
 static _Exception_ptr _Copy_exception( void* _Except, const void* _Ptr)
  {
  _Exception_ptr _Retval = 0;
  if (!_Ptr)
   {

   return _Retval;
   }
  __ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
  return _Retval;
  }
private:
 void* _Data1;
 void* _Data2;
 };

inline bool operator==( const _Exception_ptr& _Lhs, const _Exception_ptr& _Rhs)
 {
 return __ExceptionPtrCompare(const_cast<_Exception_ptr*>(&_Lhs),const_cast<_Exception_ptr*>(&_Rhs));
 }

inline bool operator==(_Null_type, const _Exception_ptr& _Rhs)
 {
 _Exception_ptr _Ptr;
 return __ExceptionPtrCompare(&_Ptr,const_cast<_Exception_ptr*>(&_Rhs));
 }

inline bool operator==( const _Exception_ptr& _Lhs, _Null_type)
 {
 return operator==(0,_Lhs);
 }

typedef _Exception_ptr exception_ptr;

inline exception_ptr current_exception()
 {
 return _Exception_ptr::_Current_exception();
 }

inline void rethrow_exception( exception_ptr _P)
 {
 _P._RethrowException();
 }

template <class _E> void *__GetExceptionInfo(_E);

template<class _E> exception_ptr copy_exception(_E _Except)
 {
 return _Exception_ptr::_Copy_exception(&_Except, __GetExceptionInfo(_Except));
 }

}







#pragma warning(pop)
#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdexcept"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmemory"






#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\new"







#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)
#line 23 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\new"
namespace std {







typedef void (__cdecl * new_handler) ();




struct nothrow_t
 {
 };

extern const nothrow_t nothrow;



__declspec(dllimport) new_handler __cdecl set_new_handler( new_handler)
 throw ();
}


void __cdecl operator delete(void *) throw ();
#pragma warning (suppress: 4985)
 void *__cdecl operator new(size_t _Size) throw (...);



inline void *__cdecl operator new(size_t, void *_Where) throw ()
 {
 return (_Where);
 }

inline void __cdecl operator delete(void *, void *) throw ()
 {
 }




inline void *__cdecl operator new[](size_t, void *_Where) throw ()
 {
 return (_Where);
 }

inline void __cdecl operator delete[](void *, void *) throw ()
 {
 }


void __cdecl operator delete[](void *) throw ();

                     void *__cdecl operator new[](size_t _Size)
 throw (...);



                         void *__cdecl operator new(size_t _Size, const ::std:: nothrow_t&)
 throw ();

                         void *__cdecl operator new[](size_t _Size, const ::std:: nothrow_t&)
 throw ();

void __cdecl operator delete(void *, const ::std:: nothrow_t&)
 throw ();

void __cdecl operator delete[](void *, const ::std:: nothrow_t&)
 throw ();




using ::std:: new_handler;



#pragma warning(pop)
#pragma pack(pop)
#line 7 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmemory"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"







#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\utility"






#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\iosfwd"







#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cwchar"
#line 13 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cwchar"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"
#line 23 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 23 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"


#pragma pack(push,_CRT_PACKING)


extern "C" {
#line 83 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"
typedef unsigned long _fsize_t;





struct _wfinddata32_t {
        unsigned attrib;
        __time32_t time_create;
        __time32_t time_access;
        __time32_t time_write;
        _fsize_t size;
        wchar_t name[260];
};

struct _wfinddata32i64_t {
        unsigned attrib;
        __time32_t time_create;
        __time32_t time_access;
        __time32_t time_write;
        __int64 size;
        wchar_t name[260];
};

struct _wfinddata64i32_t {
        unsigned attrib;
        __time64_t time_create;
        __time64_t time_access;
        __time64_t time_write;
        _fsize_t size;
        wchar_t name[260];
};

struct _wfinddata64_t {
        unsigned attrib;
        __time64_t time_create;
        __time64_t time_access;
        __time64_t time_write;
        __int64 size;
        wchar_t name[260];
};
#line 182 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"
__declspec(dllimport) const unsigned short * __cdecl __pctype_func(void);

__declspec(dllimport) extern const unsigned short *_pctype;
#line 195 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"
__declspec(dllimport) extern const unsigned short _wctype[];


__declspec(dllimport) const wctype_t * __cdecl __pwctype_func(void);

__declspec(dllimport) extern const wctype_t *_pwctype;
#line 230 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"
               __declspec(dllimport) int __cdecl iswalpha( wint_t _C);
               __declspec(dllimport) int __cdecl _iswalpha_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswupper( wint_t _C);
               __declspec(dllimport) int __cdecl _iswupper_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswlower( wint_t _C);
               __declspec(dllimport) int __cdecl _iswlower_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswdigit( wint_t _C);
               __declspec(dllimport) int __cdecl _iswdigit_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswxdigit( wint_t _C);
               __declspec(dllimport) int __cdecl _iswxdigit_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswspace( wint_t _C);
               __declspec(dllimport) int __cdecl _iswspace_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswpunct( wint_t _C);
               __declspec(dllimport) int __cdecl _iswpunct_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswalnum( wint_t _C);
               __declspec(dllimport) int __cdecl _iswalnum_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswprint( wint_t _C);
               __declspec(dllimport) int __cdecl _iswprint_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswgraph( wint_t _C);
               __declspec(dllimport) int __cdecl _iswgraph_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswcntrl( wint_t _C);
               __declspec(dllimport) int __cdecl _iswcntrl_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswascii( wint_t _C);
               __declspec(dllimport) int __cdecl isleadbyte( int _C);
               __declspec(dllimport) int __cdecl _isleadbyte_l( int _C, _locale_t _Locale);

               __declspec(dllimport) wint_t __cdecl towupper( wint_t _C);
               __declspec(dllimport) wint_t __cdecl _towupper_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) wint_t __cdecl towlower( wint_t _C);
               __declspec(dllimport) wint_t __cdecl _towlower_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswctype( wint_t _C, wctype_t _Type);
               __declspec(dllimport) int __cdecl _iswctype_l( wint_t _C, wctype_t _Type, _locale_t _Locale);

               __declspec(dllimport) int __cdecl __iswcsymf( wint_t _C);
               __declspec(dllimport) int __cdecl _iswcsymf_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl __iswcsym( wint_t _C);
               __declspec(dllimport) int __cdecl _iswcsym_l( wint_t _C, _locale_t _Locale);

__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "iswctype" " instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype( wint_t _C, wctype_t _Type);
#line 286 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"
                           __declspec(dllimport) wchar_t * __cdecl _wgetcwd( wchar_t * _DstBuf, int _SizeInWords);
                           __declspec(dllimport) wchar_t * __cdecl _wgetdcwd( int _Drive, wchar_t * _DstBuf, int _SizeInWords);
                           wchar_t * __cdecl _wgetdcwd_nolock( int _Drive, wchar_t * _DstBuf, int _SizeInWords);







               __declspec(dllimport) int __cdecl _wchdir( const wchar_t * _Path);
               __declspec(dllimport) int __cdecl _wmkdir( const wchar_t * _Path);
               __declspec(dllimport) int __cdecl _wrmdir( const wchar_t * _Path);






               __declspec(dllimport) int __cdecl _waccess( const wchar_t * _Filename, int _AccessMode);
                   __declspec(dllimport) errno_t __cdecl _waccess_s( const wchar_t * _Filename, int _AccessMode);
               __declspec(dllimport) int __cdecl _wchmod( const wchar_t * _Filename, int _Mode);
                                                  __declspec(dllimport) int __cdecl _wcreat( const wchar_t * _Filename, int _PermissionMode);
               __declspec(dllimport) intptr_t __cdecl _wfindfirst32( const wchar_t * _Filename, struct _wfinddata32_t * _FindData);
               __declspec(dllimport) int __cdecl _wfindnext32( intptr_t _FindHandle, struct _wfinddata32_t * _FindData);
__declspec(dllimport) int __cdecl _wunlink( const wchar_t * _Filename);
               __declspec(dllimport) int __cdecl _wrename( const wchar_t * _OldFilename, const wchar_t * _NewFilename);
__declspec(dllimport) errno_t __cdecl _wmktemp_s( wchar_t * _TemplateName, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }
__declspec(dllimport) wchar_t * __cdecl _wmktemp( wchar_t *_TemplateName);

               __declspec(dllimport) intptr_t __cdecl _wfindfirst32i64( const wchar_t * _Filename, struct _wfinddata32i64_t * _FindData);
               __declspec(dllimport) intptr_t __cdecl _wfindfirst64i32( const wchar_t * _Filename, struct _wfinddata64i32_t * _FindData);
               __declspec(dllimport) intptr_t __cdecl _wfindfirst64( const wchar_t * _Filename, struct _wfinddata64_t * _FindData);
               __declspec(dllimport) int __cdecl _wfindnext32i64( intptr_t _FindHandle, struct _wfinddata32i64_t * _FindData);
               __declspec(dllimport) int __cdecl _wfindnext64i32( intptr_t _FindHandle, struct _wfinddata64i32_t * _FindData);
               __declspec(dllimport) int __cdecl _wfindnext64( intptr_t _FindHandle, struct _wfinddata64_t * _FindData);

                   __declspec(dllimport) errno_t __cdecl _wsopen_s( int * _FileHandle, const wchar_t * _Filename, int _OpenFlag, int _ShareFlag, int _PermissionFlag);
#line 334 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"
extern "C++" __declspec(dllimport) int __cdecl _wopen( const wchar_t * _Filename, int _OpenFlag, int _PermissionMode = 0);
extern "C++" __declspec(dllimport) int __cdecl _wsopen( const wchar_t * _Filename, int _OpenFlag, int _ShareFlag, int _PermissionMode = 0);
#line 346 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"
                   __declspec(dllimport) wchar_t * __cdecl _wsetlocale( int _Category, const wchar_t * _Locale);
#line 355 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"
__declspec(dllimport) intptr_t __cdecl _wexecl( const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexecle( const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexeclp( const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexeclpe( const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexecv( const wchar_t * _Filename, const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wexecve( const wchar_t * _Filename, const wchar_t * const * _ArgList,
                   const wchar_t * const * _Env);
__declspec(dllimport) intptr_t __cdecl _wexecvp( const wchar_t * _Filename, const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wexecvpe( const wchar_t * _Filename, const wchar_t * const * _ArgList,
                   const wchar_t * const * _Env);
__declspec(dllimport) intptr_t __cdecl _wspawnl( int _Mode, const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnle( int _Mode, const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnlp( int _Mode, const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnlpe( int _Mode, const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnv( int _Mode, const wchar_t * _Filename, const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wspawnve( int _Mode, const wchar_t * _Filename, const wchar_t * const * _ArgList,
                   const wchar_t * const * _Env);
__declspec(dllimport) intptr_t __cdecl _wspawnvp( int _Mode, const wchar_t * _Filename, const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wspawnvpe( int _Mode, const wchar_t * _Filename, const wchar_t * const * _ArgList,
                   const wchar_t * const * _Env);
#line 453 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"
typedef unsigned short _ino_t;


typedef unsigned short ino_t;





typedef unsigned int _dev_t;


typedef unsigned int dev_t;





typedef long _off_t;


typedef long off_t;






struct _stat32 {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        __time32_t st_atime;
        __time32_t st_mtime;
        __time32_t st_ctime;
        };



struct stat {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;
        time_t st_mtime;
        time_t st_ctime;
        };



struct _stat32i64 {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        __int64 st_size;
        __time32_t st_atime;
        __time32_t st_mtime;
        __time32_t st_ctime;
        };

struct _stat64i32 {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        __time64_t st_atime;
        __time64_t st_mtime;
        __time64_t st_ctime;
        };

struct _stat64 {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        __int64 st_size;
        __time64_t st_atime;
        __time64_t st_mtime;
        __time64_t st_ctime;
        };
#line 587 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"
__declspec(dllimport) int __cdecl _wstat32( const wchar_t * _Name, struct _stat32 * _Stat);

__declspec(dllimport) int __cdecl _wstat32i64( const wchar_t * _Name, struct _stat32i64 * _Stat);
__declspec(dllimport) int __cdecl _wstat64i32( const wchar_t * _Name, struct _stat64i32 * _Stat);
__declspec(dllimport) int __cdecl _wstat64( const wchar_t * _Name, struct _stat64 * _Stat);
#line 607 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"
                   __declspec(dllimport) errno_t __cdecl _cgetws_s( wchar_t * _Buffer, size_t _SizeInWords, size_t * _SizeRead);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _cgetws_s(wchar_t (&_Buffer)[_Size], size_t * _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }
__declspec(dllimport) wchar_t * __cdecl _cgetws( wchar_t *_Buffer);
               __declspec(dllimport) wint_t __cdecl _getwch(void);
               __declspec(dllimport) wint_t __cdecl _getwche(void);
               __declspec(dllimport) wint_t __cdecl _putwch(wchar_t _WCh);
               __declspec(dllimport) wint_t __cdecl _ungetwch(wint_t _WCh);
                   __declspec(dllimport) int __cdecl _cputws( const wchar_t * _String);
                   __declspec(dllimport) int __cdecl _cwprintf( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _cwprintf_s( const wchar_t * _Format, ...);
                                                       __declspec(dllimport) int __cdecl _cwscanf( const wchar_t * _Format, ...);
                                                         __declspec(dllimport) int __cdecl _cwscanf_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _cwscanf_s( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _cwscanf_s_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vcwprintf( const wchar_t *_Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vcwprintf_s( const wchar_t *_Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _cwprintf_p( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _vcwprintf_p( const wchar_t* _Format, va_list _ArgList);

__declspec(dllimport) int __cdecl _cwprintf_l( const wchar_t * _Format, _locale_t _Locale, ...);
__declspec(dllimport) int __cdecl _cwprintf_s_l( const wchar_t * _Format, _locale_t _Locale, ...);
__declspec(dllimport) int __cdecl _vcwprintf_l( const wchar_t *_Format, _locale_t _Locale, va_list _ArgList);
__declspec(dllimport) int __cdecl _vcwprintf_s_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
__declspec(dllimport) int __cdecl _cwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, ...);
__declspec(dllimport) int __cdecl _vcwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

                   wint_t __cdecl _putwch_nolock(wchar_t _WCh);
               wint_t __cdecl _getwch_nolock(void);
               wint_t __cdecl _getwche_nolock(void);
                   wint_t __cdecl _ungetwch_nolock(wint_t _WCh);
#line 1110 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"
struct tm {
        int tm_sec;
        int tm_min;
        int tm_hour;
        int tm_mday;
        int tm_mon;
        int tm_year;
        int tm_wday;
        int tm_yday;
        int tm_isdst;
        };







                                     __declspec(dllimport) wchar_t * __cdecl _wasctime( const struct tm * _Tm);
__declspec(dllimport) errno_t __cdecl _wasctime_s( wchar_t *_Buf, size_t _SizeInWords, const struct tm * _Tm);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wasctime_s(wchar_t (&_Buffer)[_Size], const struct tm * _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }

                                     __declspec(dllimport) wchar_t * __cdecl _wctime32( const __time32_t *_Time);
__declspec(dllimport) errno_t __cdecl _wctime32_s( wchar_t* _Buf, size_t _SizeInWords, const __time32_t * _Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(wchar_t (&_Buffer)[_Size], const __time32_t * _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }

__declspec(dllimport) size_t __cdecl wcsftime( wchar_t * _Buf, size_t _SizeInWords, const wchar_t * _Format, const struct tm * _Tm);
__declspec(dllimport) size_t __cdecl _wcsftime_l( wchar_t * _Buf, size_t _SizeInWords, const wchar_t *_Format, const struct tm *_Tm, _locale_t _Locale);

__declspec(dllimport) errno_t __cdecl _wstrdate_s( wchar_t * _Buf, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
__declspec(dllimport) wchar_t * __cdecl _wstrdate( wchar_t *_Buffer);

__declspec(dllimport) errno_t __cdecl _wstrtime_s( wchar_t * _Buf, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
__declspec(dllimport) wchar_t * __cdecl _wstrtime( wchar_t *_Buffer);

                                     __declspec(dllimport) wchar_t * __cdecl _wctime64( const __time64_t * _Time);
__declspec(dllimport) errno_t __cdecl _wctime64_s( wchar_t* _Buf, size_t _SizeInWords, const __time64_t *_Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(wchar_t (&_Buffer)[_Size], const __time64_t * _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }



#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wtime.inl"
#line 27 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wtime.inl"
#pragma warning(push)
#pragma warning(disable:4996)
#line 44 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wtime.inl"
static __inline wchar_t * __cdecl _wctime(const time_t * _Time)
{
#pragma warning( push )
#pragma warning( disable : 4996 )
 return _wctime64(_Time);
#pragma warning( pop )
}

static __inline errno_t __cdecl _wctime_s(wchar_t *_Buffer, size_t _SizeInWords, const time_t * _Time)
{
    return _wctime64_s(_Buffer, _SizeInWords, _Time);
}


#pragma warning(pop)
#line 1152 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wchar.h"







typedef int mbstate_t;
typedef wchar_t _Wint_t;

__declspec(dllimport) wint_t __cdecl btowc(int);
__declspec(dllimport) size_t __cdecl mbrlen( const char * _Ch, size_t _SizeInBytes,
                                        mbstate_t * _State);
__declspec(dllimport) size_t __cdecl mbrtowc( wchar_t * _DstCh, const char * _SrcCh,
                                    size_t _SizeInBytes, mbstate_t * _State);
__declspec(dllimport) errno_t __cdecl mbsrtowcs_s( size_t* _Retval, wchar_t * _Dst, size_t _Size, const char ** _PSrc, size_t _N, mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl mbsrtowcs_s(size_t * _Retval, wchar_t (&_Dest)[_Size], const char ** _PSource, size_t _Count, mbstate_t * _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
__declspec(dllimport) size_t __cdecl mbsrtowcs( wchar_t *_Dest, const char ** _PSrc, size_t _Count, mbstate_t * _State);

__declspec(dllimport) errno_t __cdecl wcrtomb_s( size_t * _Retval, char * _Dst,
             size_t _SizeInBytes, wchar_t _Ch, mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcrtomb_s(size_t * _Retval, char (&_Dest)[_Size], wchar_t _Source, mbstate_t * _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
__declspec(dllimport) size_t __cdecl wcrtomb( char *_Dest, wchar_t _Source, mbstate_t * _State);
__declspec(dllimport) errno_t __cdecl wcsrtombs_s( size_t * _Retval, char * _Dst,
             size_t _SizeInBytes, const wchar_t ** _Src, size_t _Size, mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsrtombs_s(size_t * _Retval, char (&_Dest)[_Size], const wchar_t ** _PSrc, size_t _Count, mbstate_t * _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
__declspec(dllimport) size_t __cdecl wcsrtombs( char *_Dest, const wchar_t ** _PSource, size_t _Count, mbstate_t * _State);
__declspec(dllimport) int __cdecl wctob( wint_t _WCh);







__declspec(dllimport) void * __cdecl memmove( void * _Dst, const void * _Src, size_t _Size);

                                         void * __cdecl memcpy( void * _Dst, const void * _Src, size_t _Size);

__declspec(dllimport) errno_t __cdecl memcpy_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);
__declspec(dllimport) errno_t __cdecl memmove_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);

__inline int __cdecl fwide( FILE * _F, int _M)
        {(void)_F; return (_M); }
__inline int __cdecl mbsinit( const mbstate_t *_P)
        {return (_P == 0 || *_P == 0); }
__inline const wchar_t * __cdecl wmemchr( const wchar_t *_S, wchar_t _C, size_t _N)
        {for (; 0 < _N; ++_S, --_N)
                if (*_S == _C)
                        return (const wchar_t *)(_S);
        return (0); }
__inline int __cdecl wmemcmp( const wchar_t *_S1, const wchar_t *_S2, size_t _N)
        {for (; 0 < _N; ++_S1, ++_S2, --_N)
                if (*_S1 != *_S2)
                        return (*_S1 < *_S2 ? -1 : +1);
        return (0); }

__inline wchar_t * __cdecl wmemcpy( wchar_t *_S1, const wchar_t *_S2, size_t _N)
        {
#pragma warning( push )
#pragma warning( disable : 4996 6386 )
 return (wchar_t *)memcpy(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning( pop )
 }

__inline wchar_t * __cdecl wmemmove( wchar_t *_S1, const wchar_t *_S2, size_t _N)
        {
#pragma warning( push )
#pragma warning( disable : 4996 6386 )
#pragma warning( disable : 6387)

 return (wchar_t *)memmove(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning( pop )
 }


errno_t __cdecl wmemcpy_s( wchar_t *_S1, rsize_t _N1, const wchar_t *_S2, rsize_t _N);
errno_t __cdecl wmemmove_s( wchar_t *_S1, rsize_t _N1, const wchar_t *_S2, rsize_t _N);


__inline wchar_t * __cdecl wmemset( wchar_t *_S, wchar_t _C, size_t _N)
        {
            wchar_t *_Su = _S;
            for (; 0 < _N; ++_Su, --_N)
            {
                *_Su = _C;
            }
            return (_S);
        }


extern "C++" {
inline wchar_t * __cdecl wmemchr( wchar_t *_S, wchar_t _C, size_t _N)
        { return (wchar_t *)wmemchr((const wchar_t *)_S, _C, _N); }
}




}


#pragma pack(pop)
#line 13 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cwchar"



typedef mbstate_t _Mbstatet;


namespace std {
using :: _Mbstatet;

using :: mbstate_t; using :: size_t;
using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;

using :: wcstod; using :: wcstoul; using :: wcsstr;

using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;
}
#line 8 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\iosfwd"



#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
#line 15 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 15 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"





#pragma pack(push,_CRT_PACKING)
#line 33 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
extern "C" {
#line 42 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
typedef void *_HFILE;
#line 69 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
typedef int (__cdecl * _CRT_REPORT_HOOK)(int, char *, int *);
typedef int (__cdecl * _CRT_REPORT_HOOKW)(int, wchar_t *, int *);
#line 101 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
typedef int (__cdecl * _CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int);
#line 162 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
typedef void (__cdecl * _CRT_DUMP_CLIENT)(void *, size_t);







struct _CrtMemBlockHeader;
typedef struct _CrtMemState
{
        struct _CrtMemBlockHeader * pBlockHeader;
        size_t lCounts[5];
        size_t lSizes[5];
        size_t lHighWaterCount;
        size_t lTotalCount;
} _CrtMemState;
#line 368 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
__declspec(dllimport) extern long _crtAssertBusy;



__declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtGetReportHook(
    void
    );







__declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtSetReportHook(
             _CRT_REPORT_HOOK _PFnNewHook
        );

__declspec(dllimport) int __cdecl _CrtSetReportHook2(
             int _Mode,
                 _CRT_REPORT_HOOK _PFnNewHook
        );

__declspec(dllimport) int __cdecl _CrtSetReportHookW2(
             int _Mode,
                 _CRT_REPORT_HOOKW _PFnNewHook
        );
#line 415 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtSetReportMode(
             int _ReportType,
             int _ReportMode
        );

__declspec(dllimport) _HFILE __cdecl _CrtSetReportFile(
             int _ReportType,
                 _HFILE _ReportFile
        );

__declspec(dllimport) int __cdecl _CrtDbgReport(
             int _ReportType,
                   const char * _Filename,
             int _Linenumber,
                   const char * _ModuleName,
                   const char * _Format,
        ...);

__declspec(dllimport) size_t __cdecl _CrtSetDebugFillThreshold(
             size_t _NewDebugFillThreshold
        );




__declspec(dllimport) int __cdecl _CrtDbgReportW(
             int _ReportType,
                   const wchar_t * _Filename,
             int _LineNumber,
                   const wchar_t * _ModuleName,
                   const wchar_t * _Format,
        ...);
#line 617 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
__declspec(dllimport) extern long _crtBreakAlloc;


__declspec(dllimport) long __cdecl _CrtSetBreakAlloc(
             long _BreakAlloc
        );





                                        __declspec(dllimport) void * __cdecl _malloc_dbg(
             size_t _Size,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                                                 __declspec(dllimport) void * __cdecl _calloc_dbg(
             size_t _Count,
             size_t _Size,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );


                                           __declspec(dllimport) void * __cdecl _realloc_dbg(
                           void * _Memory,
             size_t _NewSize,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );


                                                                   __declspec(dllimport) void * __cdecl _recalloc_dbg
(
                           void * _Memory,
             size_t _NumOfElements,
             size_t _SizeOfElements,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
);

                                           __declspec(dllimport) void * __cdecl _expand_dbg(
                      void * _Memory,
             size_t _NewSize,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

__declspec(dllimport) void __cdecl _free_dbg(
                           void * _Memory,
             int _BlockType
        );

__declspec(dllimport) size_t __cdecl _msize_dbg (
                      void * _Memory,
             int _BlockType
        );

__declspec(dllimport) size_t __cdecl _aligned_msize_dbg (
                      void * _Memory,
             size_t _Alignment,
             size_t _Offset
        );

                                        __declspec(dllimport) void * __cdecl _aligned_malloc_dbg(
             size_t _Size,
             size_t _Alignment,
                   const char * _Filename,
             int _LineNumber
        );


                                           __declspec(dllimport) void * __cdecl _aligned_realloc_dbg(
                           void * _Memory,
             size_t _NewSize,
             size_t _Alignment,
                   const char * _Filename,
             int _LineNumber
        );


                                                                   __declspec(dllimport) void * __cdecl _aligned_recalloc_dbg
(
                           void * _Memory,
             size_t _NumOfElements,
             size_t _SizeOfElements,
             size_t _Alignment,
                   const char * _Filename,
             int _LineNumber
);

                                        __declspec(dllimport) void * __cdecl _aligned_offset_malloc_dbg(
             size_t _Size,
             size_t _Alignment,
             size_t _Offset,
                   const char * _Filename,
             int _LineNumber
        );


                                           __declspec(dllimport) void * __cdecl _aligned_offset_realloc_dbg(
                           void * _Memory,
             size_t _NewSize,
             size_t _Alignment,
             size_t _Offset,
                   const char * _Filename,
             int _LineNumber
        );


                                                                   __declspec(dllimport) void * __cdecl _aligned_offset_recalloc_dbg
(
                           void * _Memory,
             size_t _NumOfElements,
             size_t _SizeOfElements,
             size_t _Alignment,
             size_t _Offset,
                   const char * _Filename,
             int _LineNumber
);

__declspec(dllimport) void __cdecl _aligned_free_dbg(
                           void * _Memory
        );

                           __declspec(dllimport) char * __cdecl _strdup_dbg(
                   const char * _Str,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                           __declspec(dllimport) wchar_t * __cdecl _wcsdup_dbg(
                   const wchar_t * _Str,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                           __declspec(dllimport) char * __cdecl _tempnam_dbg(
                   const char * _DirName,
                   const char * _FilePrefix,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                           __declspec(dllimport) wchar_t * __cdecl _wtempnam_dbg(
                   const wchar_t * _DirName,
                   const wchar_t * _FilePrefix,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                           __declspec(dllimport) char * __cdecl _fullpath_dbg(
                                      char * _FullPath,
               const char * _Path,
             size_t _SizeInBytes,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                           __declspec(dllimport) wchar_t * __cdecl _wfullpath_dbg(
                                      wchar_t * _FullPath,
               const wchar_t * _Path,
             size_t _SizeInWords,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                           __declspec(dllimport) char * __cdecl _getcwd_dbg(
                                      char * _DstBuf,
             int _SizeInBytes,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                           __declspec(dllimport) wchar_t * __cdecl _wgetcwd_dbg(
                                      wchar_t * _DstBuf,
             int _SizeInWords,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                           __declspec(dllimport) char * __cdecl _getdcwd_dbg(
             int _Drive,
                                      char * _DstBuf,
             int _SizeInBytes,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                           __declspec(dllimport) wchar_t * __cdecl _wgetdcwd_dbg(
             int _Drive,
                                      wchar_t * _DstBuf,
             int _SizeInWords,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                           char * __cdecl _getdcwd_lk_dbg(
             int _Drive,
                                      char * _DstBuf,
             int _SizeInBytes,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                           wchar_t * __cdecl _wgetdcwd_lk_dbg(
             int _Drive,
                                      wchar_t * _DstBuf,
             int _SizeInWords,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                   __declspec(dllimport) errno_t __cdecl _dupenv_s_dbg(
                                                           char ** _PBuffer,
                  size_t * _PBufferSizeInBytes,
               const char * _VarName,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                   __declspec(dllimport) errno_t __cdecl _wdupenv_s_dbg(
                                                           wchar_t ** _PBuffer,
                  size_t * _PBufferSizeInWords,
               const wchar_t * _VarName,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );
#line 882 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
__declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtGetAllocHook
(
    void
);







__declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtSetAllocHook
(
             _CRT_ALLOC_HOOK _PfnNewHook
);
#line 919 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
__declspec(dllimport) extern int _crtDbgFlag;


__declspec(dllimport) int __cdecl _CrtCheckMemory(
        void
        );

__declspec(dllimport) int __cdecl _CrtSetDbgFlag(
             int _NewFlag
        );

__declspec(dllimport) void __cdecl _CrtDoForAllClientObjects(
             void (__cdecl *_PFn)(void *, void *),
        void * _Context
        );

               __declspec(dllimport) int __cdecl _CrtIsValidPointer(
                 const void * _Ptr,
             unsigned int _Bytes,
             int _ReadWrite
        );

               __declspec(dllimport) int __cdecl _CrtIsValidHeapPointer(
                 const void * _HeapPtr
        );

__declspec(dllimport) int __cdecl _CrtIsMemoryBlock(
                 const void * _Memory,
             unsigned int _Bytes,
                  long * _RequestNumber,
                  char ** _Filename,
                  int * _LineNumber
        );

               __declspec(dllimport) int __cdecl _CrtReportBlockType(
                 const void * _Memory
        );
#line 965 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
__declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtGetDumpClient
(
    void
);







__declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtSetDumpClient
(
             _CRT_DUMP_CLIENT _PFnNewDump
);
#line 991 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
__declspec(dllimport) void __cdecl _CrtMemCheckpoint(
              _CrtMemState * _State
        );

__declspec(dllimport) int __cdecl _CrtMemDifference(
              _CrtMemState * _State,
             const _CrtMemState * _OldState,
             const _CrtMemState * _NewState
        );

__declspec(dllimport) void __cdecl _CrtMemDumpAllObjectsSince(
                 const _CrtMemState * _State
        );

__declspec(dllimport) void __cdecl _CrtMemDumpStatistics(
             const _CrtMemState * _State
        );

__declspec(dllimport) int __cdecl _CrtDumpMemoryLeaks(
        void
        );

__declspec(dllimport) int __cdecl _CrtSetCheckCount(
             int _CheckCount
        );

__declspec(dllimport) int __cdecl _CrtGetCheckCount(
        void
        );




}



extern "C++" {
#line 1077 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
#pragma warning(suppress: 4985)
 void * __cdecl operator new[](size_t _Size);

                     void * __cdecl operator new(
        size_t _Size,
        int,
        const char *,
        int
        );

#pragma warning(suppress: 4985)
 void * __cdecl operator new[](
        size_t _Size,
        int,
        const char *,
        int
        );

void __cdecl operator delete[](void *);

inline void __cdecl operator delete(void * _P, int, const char *, int)
        { ::operator delete(_P); }

inline void __cdecl operator delete[](void * _P, int, const char *, int)
        { ::operator delete[](_P); }
#line 1125 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdbg.h"
}





#pragma pack(pop)
#line 11 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\iosfwd"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)

namespace std {


typedef _Longlong streamoff;
typedef _Longlong streamsize;







extern __declspec(dllimport) const streamoff _BADOFF;



template<class _Statetype>
 class fpos
 {
 typedef fpos<_Statetype> _Myt;

public:
                    fpos(streamoff _Off = 0)
  : _Myoff(_Off), _Fpos(0), _Mystate(_Stz)
  {
  }

                    fpos(_Statetype _State, fpos_t _Fileposition)
  : _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
  {
  }

 _Statetype state() const
  {
  return (_Mystate);
  }

 void state(_Statetype _State)
  {
  _Mystate = _State;
  }

 fpos_t seekpos() const
  {
  return (_Fpos);
  }

                    operator streamoff() const
  {
  return ((streamoff)(_Myoff + ((long)(_Fpos))));
  }

 streamoff operator-(const _Myt& _Right) const
  {
  return ((streamoff)*this - (streamoff)_Right);
  }

 _Myt& operator+=(streamoff _Off)
  {
  _Myoff += _Off;
  return (*this);
  }

 _Myt& operator-=(streamoff _Off)
  {
  _Myoff -= _Off;
  return (*this);
  }

 _Myt operator+(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt operator-(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 bool operator==(const _Myt& _Right) const
  {
  return ((streamoff)*this == (streamoff)_Right);
  }

 bool operator==(streamoff _Right) const
  {
  return ((streamoff)*this == _Right);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

private:
          static const _Statetype _Stz;
 streamoff _Myoff;
 fpos_t _Fpos;
 _Statetype _Mystate;
 };


template<class _Statetype>
          const _Statetype fpos<_Statetype>::_Stz = _Statetype();






typedef fpos<_Mbstatet> streampos;

typedef streampos wstreampos;


template<class _Elem,
 class _Int_type>
 struct _Char_traits
 {
 typedef _Elem char_type;
 typedef _Int_type int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(
                     const _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  for (; 0 < _Count; --_Count, ++_First1, ++_First2)
   if (!eq(*_First1, *_First2))
    return (lt(*_First1, *_First2) ? -1 : +1);
  return (0);
  }

 static size_t __cdecl length( const _Elem *_First)
  {
  size_t _Count;
  for (_Count = 0; !eq(*_First, _Elem()); ++_First)
   ++_Count;
  return (_Count);
  }

 static _Elem *__cdecl copy(
                    _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  for (; 0 < _Count; --_Count, ++_Next, ++_First2)
   assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *__cdecl _Copy_s(
                        _Elem *_First1, size_t _Dest_size,
                     const _Elem *_First2, size_t _Count)
  {
  { if (!(_Dest_size >= _Count)) { (void) ((!!(("_Dest_size >= _Count" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\iosfwd", 175, 0, L"\"_Dest_size >= _Count\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"_Dest_size >= _Count", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\iosfwd", 175, 0); return (0); } };
  return (copy(_First1, _First2, _Count));
  }

 static const _Elem *__cdecl find(
                     const _Elem *_First,
  size_t _Count, const _Elem& _Ch)
  {
  for (; 0 < _Count; --_Count, ++_First)
   if (eq(*_First, _Ch))
    return (_First);
  return (0);
  }

 static _Elem *__cdecl move(
                    _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  if (_First2 < _Next && _Next < _First2 + _Count)
   for (_Next += _Count, _First2 += _Count; 0 < _Count; --_Count)
    assign(*--_Next, *--_First2);
  else
   for (; 0 < _Count; --_Count, ++_Next, ++_First2)
    assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *__cdecl assign(
                    _Elem *_First,
  size_t _Count, _Elem _Ch)
  {
  _Elem *_Next = _First;
  for (; 0 < _Count; --_Count, ++_Next)
   assign(*_Next, _Ch);
  return (_First);
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right)
  {
  _Left = _Right;
  }

 static bool __cdecl eq(const _Elem& _Left, const _Elem& _Right)
  {
  return (_Left == _Right);
  }

 static bool __cdecl lt(const _Elem& _Left, const _Elem& _Right)
  {
  return (_Left < _Right);
  }

 static _Elem __cdecl to_char_type(const int_type& _Meta)
  {
  return ((_Elem)_Meta);
  }

 static int_type __cdecl to_int_type(const _Elem& _Ch)
  {
  return ((int_type)_Ch);
  }

 static bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right)
  {
  return (_Left == _Right);
  }

 static int_type __cdecl not_eof(const int_type& _Meta)
  {
  return (_Meta != eof() ? (int_type)_Meta : (int_type)!eof());
  }

 static int_type __cdecl eof()
  {
  return ((int_type)(-1));
  }
 };


template<class _Elem>
 struct char_traits
  : public _Char_traits<_Elem, long>
 {
 };
#line 279 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\iosfwd"
template<>
 struct char_traits<wchar_t>
 {
 typedef wchar_t _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (:: wmemcmp(_First1, _First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (:: wcslen(_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return ((_Elem *):: wmemcpy(_First1, _First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                            _Elem *_First1, size_t _Size_in_words,
                     const _Elem *_First2, size_t _Count)
  {
  ::wmemcpy_s((_First1), (_Size_in_words), (_First2), (_Count));
  return _First1;
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return ((const _Elem *):: wmemchr(_First, _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return ((_Elem *):: wmemmove(_First1, _First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem _Ch)
  {
  return ((_Elem *):: wmemset(_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right)
  {
  _Left = _Right;
  }

 static bool __cdecl eq(const _Elem& _Left, const _Elem& _Right)
  {
  return (_Left == _Right);
  }

 static bool __cdecl lt(const _Elem& _Left, const _Elem& _Right)
  {
  return (_Left < _Right);
  }

 static _Elem __cdecl to_char_type(const int_type& _Meta)
  {
  return (_Meta);
  }

 static int_type __cdecl to_int_type(const _Elem& _Ch)
  {
  return (_Ch);
  }

 static bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right)
  {
  return (_Left == _Right);
  }

 static int_type __cdecl not_eof(const int_type& _Meta)
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static int_type __cdecl eof()
  {
  return ((wint_t)(0xFFFF));
  }
 };



template<> struct char_traits<unsigned short>
 {
 typedef unsigned short _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (:: wmemcmp((const wchar_t *)_First1,
   (const wchar_t *)_First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (:: wcslen((const wchar_t *)_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return ((_Elem *):: wmemcpy((wchar_t *)_First1,
   (const wchar_t *)_First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                            _Elem *_First1, size_t _Size_in_words,
                     const _Elem *_First2, size_t _Count)
  {
  ::wmemcpy_s(((wchar_t *)_First1), (_Size_in_words), ((const wchar_t *)_First2), (_Count));
  return _First1;
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return ((const _Elem *):: wmemchr((const wchar_t *)_First,
   _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return ((_Elem *):: wmemmove((wchar_t *)_First1,
   (const wchar_t *)_First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem _Ch)
  {
  return ((_Elem *):: wmemset((wchar_t *)_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right)
  {
  _Left = _Right;
  }

 static bool __cdecl eq(const _Elem& _Left, const _Elem& _Right)
  {
  return (_Left == _Right);
  }

 static bool __cdecl lt(const _Elem& _Left, const _Elem& _Right)
  {
  return (_Left < _Right);
  }

 static _Elem __cdecl to_char_type(const int_type& _Meta)
  {
  return (_Meta);
  }

 static int_type __cdecl to_int_type(const _Elem& _Ch)
  {
  return (_Ch);
  }

 static bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right)
  {
  return (_Left == _Right);
  }

 static int_type __cdecl not_eof(const int_type& _Meta)
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static int_type __cdecl eof()
  {
  return ((wint_t)(0xFFFF));
  }
 };



template<> struct char_traits<char>
 {
 typedef char _Elem;
 typedef _Elem char_type;
 typedef int int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (:: memcmp(_First1, _First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (:: strlen(_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return ((_Elem *):: memcpy(_First1, _First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                            _Elem *_First1, size_t _Size_in_bytes,
                     const _Elem *_First2, size_t _Count)
  {
  ::memcpy_s((_First1), (_Size_in_bytes), (_First2), (_Count));
  return _First1;
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return ((const _Elem *):: memchr(_First, _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return ((_Elem *):: memmove(_First1, _First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem _Ch)
  {
  return ((_Elem *):: memset(_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right)
  {
  _Left = _Right;
  }

 static bool __cdecl eq(const _Elem& _Left, const _Elem& _Right)
  {
  return (_Left == _Right);
  }

 static bool __cdecl lt(const _Elem& _Left, const _Elem& _Right)
  {
  return ((unsigned char)_Left < (unsigned char)_Right);
  }

 static _Elem __cdecl to_char_type(const int_type& _Meta)
  {
  return ((_Elem)_Meta);
  }

 static int_type __cdecl to_int_type(const _Elem& _Ch)
  {
  return ((unsigned char)_Ch);
  }

 static bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right)
  {
  return (_Left == _Right);
  }

 static int_type __cdecl not_eof(const int_type& _Meta)
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static int_type __cdecl eof()
  {
  return ((-1));
  }
 };


template<class _Ty>
 class allocator;
class ios_base;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ios;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class istreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class ostreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_streambuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_istream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ostream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_iostream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringbuf;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_istringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_ostringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_filebuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ifstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ofstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_fstream;


template<class _Elem,
 class _InIt >
 class num_get;
template<class _Elem,
 class _OutIt >
 class num_put;
template<class _Elem>
 class collate;



typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
 allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
 allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
 allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
 allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;


typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
 wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;



typedef num_get<char, istreambuf_iterator<char, char_traits<char> > >
 numget;
typedef num_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >
 wnumget;
typedef num_put<char, ostreambuf_iterator<char, char_traits<char> > >
 numput;
typedef num_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >
 wnumput;
typedef collate<char> ncollate;
typedef collate<wchar_t> wcollate;

}

#pragma warning(pop)
#pragma pack(pop)
#line 7 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\utility"


#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\type_traits"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\limits"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ymath.h"








extern "C" {



#pragma pack(push, _CRT_PACKING)
#line 29 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ymath.h"
typedef union
 {
 unsigned short _Word[8];
 float _Float;
 double _Double;
 long double _Long_double;
 } _Dconst;


void __cdecl _Feraise(int);


__declspec(dllimport) double __cdecl _Cosh(double, double);
__declspec(dllimport) short __cdecl _Dtest(double *);
__declspec(dllimport) short __cdecl _Exp(double *, double, short);
__declspec(dllimport) double __cdecl _Sinh(double, double);
extern __declspec(dllimport) _Dconst _Denorm, _Hugeval, _Inf,
 _Nan, _Snan;


__declspec(dllimport) float __cdecl _FCosh(float, float);
__declspec(dllimport) short __cdecl _FDtest(float *);
__declspec(dllimport) short __cdecl _FExp(float *, float, short);
__declspec(dllimport) float __cdecl _FSinh(float, float);
extern __declspec(dllimport) _Dconst _FDenorm, _FInf, _FNan, _FSnan;


__declspec(dllimport) long double __cdecl _LCosh(long double, long double);
__declspec(dllimport) short __cdecl _LDtest(long double *);
__declspec(dllimport) short __cdecl _LExp(long double *, long double, short);
__declspec(dllimport) long double __cdecl _LSinh(long double, long double);
extern __declspec(dllimport) _Dconst _LDenorm, _LInf, _LNan, _LSnan;


}



#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\limits"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cfloat"






#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\float.h"
#line 21 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\float.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 21 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\float.h"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtwrn.h"
#line 17 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtwrn.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 17 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtwrn.h"
#line 22 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\float.h"
#line 38 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\float.h"
extern "C" {
#line 83 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\float.h"
                          __declspec(dllimport) unsigned int __cdecl _clearfp(void);
#pragma warning(push)
#pragma warning(disable: 4141)
 __declspec(dllimport) unsigned int __cdecl _controlfp( unsigned int _NewValue, unsigned int _Mask);
#pragma warning(pop)
 __declspec(dllimport) void __cdecl _set_controlfp( unsigned int _NewValue, unsigned int _Mask);
                          __declspec(dllimport) errno_t __cdecl _controlfp_s( unsigned int *_CurrentState, unsigned int _NewValue, unsigned int _Mask);
                          __declspec(dllimport) unsigned int __cdecl _statusfp(void);
                          __declspec(dllimport) void __cdecl _fpreset(void);


                          __declspec(dllimport) void __cdecl _statusfp2( unsigned int *_X86_status, unsigned int *_SSE2_status);
#line 172 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\float.h"
                          __declspec(dllimport) unsigned int __cdecl _control87( unsigned int _NewValue, unsigned int _Mask);

                          __declspec(dllimport) int __cdecl __control87_2( unsigned int _NewValue, unsigned int _Mask,
                                            unsigned int* _X86_cw, unsigned int* _Sse2_cw);




               __declspec(dllimport) extern int * __cdecl __fpecode(void);
#line 216 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\float.h"
               __declspec(dllimport) double __cdecl _scalb( double _X, long _Y);
               __declspec(dllimport) double __cdecl _logb( double _X);
               __declspec(dllimport) double __cdecl _nextafter( double _X, double _Y);
               __declspec(dllimport) int __cdecl _finite( double _X);
               __declspec(dllimport) int __cdecl _isnan( double _X);
               __declspec(dllimport) int __cdecl _fpclass( double _X);
#line 247 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\float.h"
                          __declspec(dllimport) void __cdecl fpreset(void);
#line 312 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\float.h"
}
#line 7 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cfloat"
#line 7 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\limits"






#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)

namespace std {
#line 30 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\limits"
typedef enum
 {
 denorm_indeterminate = -1,
 denorm_absent = 0,
 denorm_present = 1}
  float_denorm_style;


typedef enum
 {
 round_indeterminate = -1,
 round_toward_zero = 0,
 round_to_nearest = 1,
 round_toward_infinity = 2,
 round_toward_neg_infinity = 3}
  float_round_style;


struct __declspec(dllimport) _Num_base
 {
 static const float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
 static const bool has_denorm_loss = (bool)(false);
 static const bool has_infinity = (bool)(false);
 static const bool has_quiet_NaN = (bool)(false);
 static const bool has_signaling_NaN = (bool)(false);
 static const bool is_bounded = (bool)(false);
 static const bool is_exact = (bool)(false);
 static const bool is_iec559 = (bool)(false);
 static const bool is_integer = (bool)(false);
 static const bool is_modulo = (bool)(false);
 static const bool is_signed = (bool)(false);
 static const bool is_specialized = (bool)(false);
 static const bool tinyness_before = (bool)(false);
 static const bool traps = (bool)(false);
 static const float_round_style round_style = (float_round_style)(round_toward_zero);
 static const int digits = (int)(0);
 static const int digits10 = (int)(0);


 static const int max_digits10 = (int)(0);


 static const int max_exponent = (int)(0);
 static const int max_exponent10 = (int)(0);
 static const int min_exponent = (int)(0);
 static const int min_exponent10 = (int)(0);
 static const int radix = (int)(0);
 };


template<class _Ty>
 class numeric_limits
  : public _Num_base
 {
public:
 static _Ty (__cdecl min)() throw ()
  {
  return (_Ty(0));
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (_Ty(0));
  }


 static _Ty __cdecl lowest() throw ()
  {
  return ((min)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (_Ty(0));
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (_Ty(0));
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (_Ty(0));
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (_Ty(0));
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (_Ty(0));
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (_Ty(0));
  }
 };

template<class _Ty>
 class numeric_limits<const _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<const volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };


struct __declspec(dllimport) _Num_int_base
 : public _Num_base
 {
 static const bool is_bounded = (bool)(true);
 static const bool is_exact = (bool)(true);
 static const bool is_integer = (bool)(true);
 static const bool is_modulo = (bool)(true);
 static const bool is_specialized = (bool)(true);
 static const int radix = (int)(2);
 };


struct __declspec(dllimport) _Num_float_base
 : public _Num_base
 {
 static const float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
 static const bool has_denorm_loss = (bool)(true);
 static const bool has_infinity = (bool)(true);
 static const bool has_quiet_NaN = (bool)(true);
 static const bool has_signaling_NaN = (bool)(true);
 static const bool is_bounded = (bool)(true);
 static const bool is_exact = (bool)(false);
 static const bool is_iec559 = (bool)(true);
 static const bool is_integer = (bool)(false);
 static const bool is_modulo = (bool)(false);
 static const bool is_signed = (bool)(true);
 static const bool is_specialized = (bool)(true);
 static const bool tinyness_before = (bool)(true);
 static const bool traps = (bool)(true);
 static const float_round_style round_style = (float_round_style)(round_to_nearest);
 static const int radix = (int)(2);
 };


template<> class __declspec(dllimport) numeric_limits<char>
 : public _Num_int_base
 {
public:
 typedef char _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return ((-128));
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (127);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return ((min)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (0);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (0);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (0);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)((-128) != 0);
 static const int digits = (int)(8 - ((-128) != 0 ? 1 : 0));
 static const int digits10 = (int)((8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);



 static const int max_digits10 = (int)(2 + (8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);


 };


template<> class __declspec(dllimport) numeric_limits<wchar_t>
 : public _Num_int_base
 {
public:
 typedef wchar_t _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return ((_Ty)0x0000);
  }

 static _Ty (__cdecl max)() throw ()
  {
  return ((_Ty)0xffff);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return ((min)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (0);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (0);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (0);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(0x0000 != 0);
 static const int digits = (int)(8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0));

 static const int digits10 = (int)((8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);



 static const int max_digits10 = (int)(2 + (8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);


 };


template<> class __declspec(dllimport) numeric_limits<_Bool>
 : public _Num_int_base
 {
public:
 typedef bool _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return (false);
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (true);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return ((min)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (0);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (0);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (0);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_modulo = (bool)(false);
 static const bool is_signed = (bool)(false);
 static const int digits = (int)(1);
 static const int digits10 = (int)(0);


 static const int max_digits10 = (int)(0);

 };


template<> class __declspec(dllimport) numeric_limits<signed char>
 : public _Num_int_base
 {
public:
 typedef signed char _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return ((-128));
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (127);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return ((min)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (0);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (0);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (0);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 - 1);
 static const int digits10 = (int)((8 - 1) * 301L / 1000);


 static const int max_digits10 = (int)(2 + (8 - 1) * 301L / 1000);

 };


template<> class __declspec(dllimport) numeric_limits<unsigned char>
 : public _Num_int_base
 {
public:
 typedef unsigned char _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return (0);
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (0xff);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return ((min)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (0);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (0);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (0);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8);
 static const int digits10 = (int)(8 * 301L / 1000);


 static const int max_digits10 = (int)(2 + (8) * 301L / 1000);

 };


template<> class __declspec(dllimport) numeric_limits<short>
 : public _Num_int_base
 {
public:
 typedef short _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return ((-32768));
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (32767);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return ((min)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (0);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (0);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (0);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (short) - 1);
 static const int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000);



 static const int max_digits10 = (int)(2 + (8 * sizeof (short) - 1) * 301L / 1000);


 };



template<> class __declspec(dllimport) numeric_limits<unsigned short>
 : public _Num_int_base
 {
public:
 typedef unsigned short _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return (0);
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (0xffff);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return ((min)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (0);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (0);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (0);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned short));
 static const int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000);



 static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned short)) * 301L / 1000);


 };
#line 701 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\limits"
template<> class __declspec(dllimport) numeric_limits<int>
 : public _Num_int_base
 {
public:
 typedef int _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return ((-2147483647 - 1));
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (2147483647);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return ((min)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (0);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (0);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (0);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (int) - 1);
 static const int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000);



 static const int max_digits10 = (int)(2 + (8 * sizeof (int) - 1) * 301L / 1000);


 };


template<> class __declspec(dllimport) numeric_limits<unsigned int>
 : public _Num_int_base
 {
public:
 typedef unsigned int _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return (0);
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (0xffffffff);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return ((min)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (0);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (0);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (0);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned int));
 static const int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000);



 static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned int)) * 301L / 1000);


 };


template<> class __declspec(dllimport) numeric_limits<long>
 : public _Num_int_base
 {
public:
 typedef long _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return ((-2147483647L - 1));
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (2147483647L);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return ((min)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (0);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (0);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (0);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (long) - 1);
 static const int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000);



 static const int max_digits10 = (int)(2 + (8 * sizeof (long) - 1) * 301L / 1000);


 };


template<> class __declspec(dllimport) numeric_limits<unsigned long>
 : public _Num_int_base
 {
public:
 typedef unsigned long _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return (0);
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (0xffffffffUL);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return ((min)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (0);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (0);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (0);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned long));
 static const int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000);



 static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned long)) * 301L / 1000);


 };
#line 1024 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\limits"
template<> class __declspec(dllimport) numeric_limits<__int64>
 : public _Num_int_base
 {
public:
 typedef __int64 _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return (-0x7fffffffffffffff - 1);
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (0x7fffffffffffffff);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return ((min)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (0);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (0);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (0);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (__int64) - 1);
 static const int digits10 = (int)((8 * sizeof (__int64) - 1) * 301L / 1000);



 static const int max_digits10 = (int)(2 + (8 * sizeof (__int64) - 1) * 301L / 1000);


 };


template<> class __declspec(dllimport) numeric_limits<unsigned __int64>
 : public _Num_int_base
 {
public:
 typedef unsigned __int64 _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return (0);
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (0xffffffffffffffff);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return ((min)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (0);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (0);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (0);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned __int64));
 static const int digits10 = (int)(8 * sizeof (unsigned __int64) * 301L / 1000);



 static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned __int64)) * 301L / 1000);


 };



template<> class __declspec(dllimport) numeric_limits<float>
 : public _Num_float_base
 {
public:
 typedef float _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return (1.175494351e-38F);
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (3.402823466e+38F);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return (-(max)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (1.192092896e-07F);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0.5);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (:: _FDenorm._Float);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (:: _FInf._Float);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (:: _FNan._Float);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (:: _FSnan._Float);
  }

 static const int digits = (int)(24);
 static const int digits10 = (int)(6);


 static const int max_digits10 = (int)(2 + 6);


 static const int max_exponent = (int)((int)128);
 static const int max_exponent10 = (int)((int)38);
 static const int min_exponent = (int)((int)(-125));
 static const int min_exponent10 = (int)((int)(-37));
 };


template<> class __declspec(dllimport) numeric_limits<double>
 : public _Num_float_base
 {
public:
 typedef double _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return (2.2250738585072014e-308);
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (1.7976931348623158e+308);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return (-(max)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (2.2204460492503131e-016);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0.5);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (:: _Denorm._Double);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (:: _Inf._Double);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (:: _Nan._Double);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (:: _Snan._Double);
  }

 static const int digits = (int)(53);
 static const int digits10 = (int)(15);


 static const int max_digits10 = (int)(2 + 15);


 static const int max_exponent = (int)((int)1024);
 static const int max_exponent10 = (int)((int)308);
 static const int min_exponent = (int)((int)(-1021));
 static const int min_exponent10 = (int)((int)(-307));
 };


template<> class __declspec(dllimport) numeric_limits<long double>
 : public _Num_float_base
 {
public:
 typedef long double _Ty;

 static _Ty (__cdecl min)() throw ()
  {
  return (2.2250738585072014e-308);
  }

 static _Ty (__cdecl max)() throw ()
  {
  return (1.7976931348623158e+308);
  }


 static _Ty __cdecl lowest() throw ()
  {
  return (-(max)());
  }


 static _Ty __cdecl epsilon() throw ()
  {
  return (2.2204460492503131e-016);
  }

 static _Ty __cdecl round_error() throw ()
  {
  return (0.5);
  }

 static _Ty __cdecl denorm_min() throw ()
  {
  return (:: _LDenorm._Long_double);
  }

 static _Ty __cdecl infinity() throw ()
  {
  return (:: _LInf._Long_double);
  }

 static _Ty __cdecl quiet_NaN() throw ()
  {
  return (:: _LNan._Long_double);
  }

 static _Ty __cdecl signaling_NaN() throw ()
  {
  return (:: _LSnan._Long_double);
  }

 static const int digits = (int)(53);
 static const int digits10 = (int)(15);


 static const int max_digits10 = (int)(2 + 15);


 static const int max_exponent = (int)((int)1024);
 static const int max_exponent10 = (int)((int)308);
 static const int min_exponent = (int)((int)(-1021));
 static const int min_exponent10 = (int)((int)(-307));
 };
#line 1637 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\limits"
}
#pragma warning(pop)
#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\type_traits"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xtr1common"







#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)
#line 151 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xtr1common"
namespace std {

template<class _T1,
 class _Ret>
 struct unary_function;


template<class _T1,
 class _T2,
 class _Ret>
 struct binary_function;

 namespace tr1 {

struct _Nil
 {
 };
static _Nil _Nil_obj;


template<class _Ty,
 _Ty _Val>
 struct integral_constant
 {
 static const _Ty value = _Val;

 typedef _Ty value_type;
 typedef integral_constant<_Ty, _Val> type;
 };

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;


template<bool _First,
 bool _Second>
 struct _Or;
template<>
 struct _Or<false, false>
  : false_type
  {
  };

template<>
 struct _Or<false, true>
  : true_type
  {
  };

template<>
 struct _Or<true, false>
  : true_type
  {
  };

template<>
 struct _Or<true, true>
  : true_type
  {
  };


template<bool>
 struct _Cat_base;
template<>
 struct _Cat_base<false>
 : false_type
 {
 };

template<>
 struct _Cat_base<true>
 : true_type
 {
 };


template<class _Ty>
 struct _Is_integral
  : false_type
 {
 };

template<>
 struct _Is_integral<bool>
  : true_type
 {
 };

template<>
 struct _Is_integral<char>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned char>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed char>
  : true_type
 {
 };


template<>
 struct _Is_integral<wchar_t>
  : true_type
 {
 };


template<>
 struct _Is_integral<unsigned short>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed short>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned int>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed int>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned long>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed long>
  : true_type
 {
 };


template<>
 struct _Is_integral<__int64>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned __int64>
  : true_type
 {
 };



template<class _Ty>
 struct _Is_floating_point
  : false_type
 {
 };

template<>
 struct _Is_floating_point<float>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<double>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<long double>
  : true_type
 {
 };


template<class _Ty>
 struct _Remove_reference
 {
 typedef _Ty _Type;
 };

template<class _Ty>
 struct _Remove_reference<_Ty&>
 {
 typedef _Ty _Type;
 };

template<class _Ty>
 struct _Remove_reference<_Ty&&>
 {
 typedef _Ty _Type;
 };


template<class _Ty>
 struct _Remove_rvalue_reference
 {
 typedef _Ty _Type;
 };

template<class _Ty>
 struct _Remove_rvalue_reference<_Ty&&>
 {
 typedef _Ty _Type;
 };


template<class _Tgt,
 class _Src>
 struct _Copy_cv
 {
 typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
 typedef _Tgtx& _Type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, const _Src>
 {
 typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
 typedef const _Tgtx& _Type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, volatile _Src>
 {
 typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
 typedef volatile _Tgtx& _Type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, const volatile _Src>
 {
 typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
 typedef const volatile _Tgtx& _Type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, _Src&>
 {
 typedef typename _Copy_cv<_Tgt, _Src>::_Type _Type;
 };
#line 422 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xtr1common"
_No _Has_result_type(...);

template<class _Ty>
 _Yes _Has_result_type(_Ty *,
  typename _Remove_reference<typename _Ty::result_type>::_Type * = 0);



 }
}
#pragma warning(pop)
#pragma pack(pop)
#line 7 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\type_traits"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)
#line 50 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\type_traits"
namespace std {
 namespace tr1 {

template<class _Ty>
 struct _Ptr_traits
 {
 };

template<class _Ty>
 struct _Ptr_traits<_Ty *>
 {
 static const bool _Is_const = false;
 static const bool _Is_volatile = false;
 };

template<class _Ty>
 struct _Ptr_traits<const _Ty *>
 {
 static const bool _Is_const = true;
 static const bool _Is_volatile = false;
 };

template<class _Ty>
 struct _Ptr_traits<volatile _Ty *>
 {
 static const bool _Is_const = false;
 static const bool _Is_volatile = true;
 };

template<class _Ty>
 struct _Ptr_traits<const volatile _Ty *>
 {
 static const bool _Is_const = true;
 static const bool _Is_volatile = true;
 };

template<class _Ty>
 struct _Is_funptr
  : false_type
 {
 };

template<class _Ty>
 struct _Is_memfunptr
  : false_type
 {
 };



#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"
#line 15 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxtype_traits"



template<class _Ret >
 struct _Is_funptr<_Ret (*)( )>
 : true_type
 {
 };

template<class _Ret >
 struct _Is_funptr<_Ret (*)( ...)>
 : true_type
 {
 };
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 15 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxtype_traits"



template<class _Ret , class _Arg0 >
 struct _Is_funptr<_Ret (*)(_Arg0 )>
 : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_funptr<_Ret (*)(_Arg0 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( )>
  : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( ) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( ) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( ) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( ...) const volatile>
  : true_type
 {
 };
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1 ...) const volatile>
  : true_type
 {
 };
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 24 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1 , _Arg2)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1 , _Arg2 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...) const volatile>
  : true_type
 {
 };
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 28 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2 , _Arg3)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2 , _Arg3 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...) const volatile>
  : true_type
 {
 };
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...) const volatile>
  : true_type
 {
 };
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 36 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...) const volatile>
  : true_type
 {
 };
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 40 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...) const volatile>
  : true_type
 {
 };
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 44 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...) const volatile>
  : true_type
 {
 };
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 48 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...) const volatile>
  : true_type
 {
 };
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 52 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...) const volatile>
  : true_type
 {
 };
#line 277 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 56 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"
#line 99 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\type_traits"




template<class _Ty>
 struct remove_const
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_const<const _Ty>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_const<const _Ty[]>
 {
 typedef _Ty type[];
 };

template<class _Ty, unsigned int _Nx>
 struct remove_const<const _Ty[_Nx]>
 {
 typedef _Ty type[_Nx];
 };


template<class _Ty>
 struct remove_volatile
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_volatile<volatile _Ty>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_volatile<volatile _Ty[]>
 {
 typedef _Ty type[];
 };

template<class _Ty, unsigned int _Nx>
 struct remove_volatile<volatile _Ty[_Nx]>
 {
 typedef _Ty type[_Nx];
 };


template<class _Ty>
 struct remove_cv
 {
 typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
  type;
 };


template<class _Ty>
 struct add_const
 {
 typedef const _Ty type;
 };

template<class _Ty>
 struct add_const<_Ty&>
 {
 typedef _Ty& type;
 };


template<class _Ty>
 struct add_volatile
 {
 typedef volatile _Ty type;
 };

template<class _Ty>
 struct add_volatile<_Ty&>
 {
 typedef _Ty& type;
 };


template<class _Ty>
 struct add_cv
 {
 typedef typename add_const<typename add_volatile<_Ty>::type>::type type;
 };


template<class _Ty>
 struct remove_reference
 : _Remove_reference<_Ty>
 {
 typedef typename _Remove_reference<_Ty>::_Type type;
 };


template<class _Ty>
 struct add_reference
 {
 typedef typename _Remove_reference<_Ty>::_Type& type;
 };

template<>
 struct add_reference<void>
 {
 typedef void type;
 };

template<>
 struct add_reference<const void>
 {
 typedef const void type;
 };

template<>
 struct add_reference<volatile void>
 {
 typedef volatile void type;
 };

template<>
 struct add_reference<const volatile void>
 {
 typedef const volatile void type;
 };


template<class _Ty>
 struct add_lvalue_reference
 {
 typedef typename add_reference<_Ty>::type type;
 };


template<class _Ty>
 struct add_rvalue_reference
 {
 typedef _Ty && type;
 };

template<class _Ty>
 struct add_rvalue_reference<_Ty&>
 {
 typedef _Ty& type;
 };

template<>
 struct add_rvalue_reference<void>
 {
 typedef void type;
 };

template<>
 struct add_rvalue_reference<const void>
 {
 typedef const void type;
 };

template<>
 struct add_rvalue_reference<volatile void>
 {
 typedef volatile void type;
 };

template<>
 struct add_rvalue_reference<const volatile void>
 {
 typedef const volatile void type;
 };


template<class _Ty>
 struct remove_extent
 {
 typedef _Ty type;
 };

template<class _Ty, unsigned int _Ix>
 struct remove_extent<_Ty[_Ix]>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_extent<_Ty[]>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct remove_all_extents
 {
 typedef _Ty type;
 };

template<class _Ty, unsigned int _Ix>
 struct remove_all_extents<_Ty[_Ix]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };

template<class _Ty>
 struct remove_all_extents<_Ty[]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };


template<class _Ty>
 struct remove_pointer
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_pointer<_Ty *>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_pointer<_Ty *const>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_pointer<_Ty *volatile>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_pointer<_Ty *const volatile>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct add_pointer
 {
 typedef typename remove_reference<_Ty>::type *type;
 };



template<class _Ty>
 struct _Is_void
 : false_type
 {
 };

template<>
 struct _Is_void<void>
 : true_type
 {
 };

template<class _Ty>
 struct is_void
 : _Is_void<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_integral
 : _Is_integral<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_floating_point
 : _Is_floating_point<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_array
 : false_type
 {
 };

template<class _Ty, size_t _Nx>
 struct is_array<_Ty[_Nx]>
 : true_type
 {
 };

template<class _Ty>
 struct is_array<_Ty[]>
 : true_type
 {
 };



template<class _Ty>
 struct is_lvalue_reference
 : false_type
 {
 };

template<class _Ty>
 struct is_lvalue_reference<_Ty&>
 : true_type
 {
 };


template<class _Ty>
 struct is_rvalue_reference
 : false_type
 {
 };

template<class _Ty>
 struct is_rvalue_reference<_Ty&&>
 : true_type
 {
 };


template<class _Ty>
 struct is_reference
 : _Cat_base<is_lvalue_reference<_Ty>::value
  || is_rvalue_reference<_Ty>::value>
 {
 };
#line 456 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\type_traits"
template<class _Ty>
 struct _Is_member_object_pointer
 : false_type
 {
 };

template<class _Ty1, class _Ty2>
 struct _Is_member_object_pointer<_Ty1 _Ty2::*>
 : _Cat_base<!_Is_memfunptr<_Ty1 _Ty2::*>::value>
 {
 };

template<class _Ty>
 struct is_member_object_pointer
 : _Is_member_object_pointer<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_member_function_pointer
 : _Cat_base<_Is_memfunptr<typename remove_cv<_Ty>::type>::value>
 {
 };


template<class _Ty>
 struct _Is_pointer
 : false_type
 {
 };

template<class _Ty>
 struct _Is_pointer<_Ty *>
 : _Cat_base<!is_member_object_pointer<_Ty *>::value
  && !is_member_function_pointer<_Ty *>::value>
 {
 };

template<class _Ty>
 struct is_pointer
 : _Is_pointer<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_union : _Cat_base<__is_union(_Ty)>
 {
 };


template<class _Ty>
 struct is_class : _Cat_base<__is_class(_Ty)>
 {
 };


template<class _Ty>
 struct is_function
 : _Cat_base<_Is_funptr<typename remove_cv<_Ty>::type *>::value>
 {
 };

template<class _Ty>
 struct is_function<_Ty&>
 : false_type
 {
 };


template<class _Ty>
 struct is_arithmetic
 : _Cat_base<is_integral<_Ty>::value
  || is_floating_point<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_fundamental
 : _Cat_base<is_arithmetic<_Ty>::value
  || is_void<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_object
 : _Cat_base<!is_function<_Ty>::value
  && !is_reference<_Ty>::value
  && !is_void<_Ty>::value>
 {
 };



template<class _From, class _To>
 struct is_convertible : _Cat_base<is_void<_From>::value && is_void<_To>::value || __is_convertible_to(_From, _To)>
 {
 };



template<class _Ty>
 struct is_enum : _Cat_base<__is_enum(_Ty)>
 {
 };


template<class _Ty>
 struct is_compound
 : _Cat_base<!is_fundamental<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_member_pointer
 : _Cat_base<is_member_object_pointer<_Ty>::value
  || is_member_function_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_scalar
 : _Cat_base<is_arithmetic<_Ty>::value
  || is_enum<_Ty>::value
  || is_pointer<_Ty>::value
  || is_member_pointer<_Ty>::value>
 {
 };

template<class _Ty>
 struct is_scalar<_Ty&>
 : false_type
 {
 };


template<class _Ty>
 struct is_const
 : _Cat_base<_Ptr_traits<_Ty *>::_Is_const
  && !is_function<_Ty>::value>
 {
 };

template<class _Ty, unsigned int _Nx>
 struct is_const<_Ty[_Nx]>
 : false_type
 {
 };

template<class _Ty, unsigned int _Nx>
 struct is_const<const _Ty[_Nx]>
 : true_type
 {
 };

template<class _Ty>
 struct is_const<_Ty&>
 : false_type
 {
 };


template<class _Ty>
 struct is_volatile
 : _Cat_base<_Ptr_traits<_Ty *>::_Is_volatile
  && !is_function<_Ty>::value>
 {
 };

template<class _Ty>
 struct is_volatile<_Ty&>
 : false_type
 {
 };


template<class _Ty>
 struct _Is_pod : _Cat_base<is_void<_Ty>::value || is_scalar<_Ty>::value || __has_trivial_constructor(_Ty) && __is_pod(_Ty)>
 {
 };

template<class _Ty>
 struct is_pod
 : _Is_pod<typename ::std:: tr1::remove_all_extents<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_empty : _Cat_base<__is_empty(_Ty)>
 {
 };


template<class _Ty>
 struct is_polymorphic : _Cat_base<__is_polymorphic(_Ty)>
 {
 };


template<class _Ty>
 struct is_abstract : _Cat_base<__is_abstract(_Ty)>
 {
 };



template<class _Ty>
 struct is_standard_layout : is_pod<_Ty>
 {
 };


template<class _Ty>
 struct is_trivial : is_pod<_Ty>
 {
 };



template<class _Ty>
 struct has_trivial_constructor : _Cat_base<is_pod<_Ty>::value || __has_trivial_constructor(_Ty)>
 {
 };


template<class _Ty>
 struct has_trivial_copy : _Cat_base<is_pod<_Ty>::value || __has_trivial_copy(_Ty)>
 {
 };



template<class _Ty>
 struct has_trivial_default_constructor : _Cat_base<is_pod<_Ty>::value || __has_trivial_constructor(_Ty)>
 {
 };


template<class _Ty>
 struct has_trivial_copy_constructor : _Cat_base<is_pod<_Ty>::value || __has_trivial_copy(_Ty)>
 {
 };



template<class _Ty>
 struct has_trivial_assign : _Cat_base<is_pod<_Ty>::value || __has_trivial_assign(_Ty)>
 {
 };


template<class _Ty>
 struct has_trivial_destructor : _Cat_base<!is_void<_Ty>::value && (is_pod<_Ty>::value || __has_trivial_destructor(_Ty))>
 {
 };


template<class _Ty>
 struct has_nothrow_constructor : _Cat_base<is_pod<_Ty>::value || __has_nothrow_constructor(_Ty)>
 {
 };


template<class _Ty>
 struct has_nothrow_copy : _Cat_base<is_pod<_Ty>::value || __has_nothrow_copy(_Ty)>
 {
 };



template<class _Ty>
 struct has_nothrow_default_constructor : _Cat_base<is_pod<_Ty>::value || __has_nothrow_constructor(_Ty)>
 {
 };


template<class _Ty>
 struct has_nothrow_copy_constructor : _Cat_base<is_pod<_Ty>::value || __has_nothrow_copy(_Ty)>
 {
 };



template<class _Ty>
 struct has_nothrow_assign : _Cat_base<is_pod<_Ty>::value || __has_nothrow_assign(_Ty)>
 {
 };


template<class _Ty>
 struct has_virtual_destructor : _Cat_base<__has_virtual_destructor(_Ty)>
 {
 };


template<class _Ty>
 struct _Has_signed_vals
 : _Cat_base<(typename remove_cv<_Ty>::type)(-1)
  < (typename remove_cv<_Ty>::type)(0)>
 {
 };

template<class _Ty>
 struct is_signed
 : _Cat_base<is_floating_point<_Ty>::value || is_integral<_Ty>::value
  && _Has_signed_vals<
   typename _If<is_integral<_Ty>::value, _Ty, int>::_Type>::value>
 {
 };


template<class _Ty>
 struct is_unsigned
 : _Cat_base<is_integral<_Ty>::value
  && !_Has_signed_vals<
   typename _If<is_integral<_Ty>::value, _Ty, int>::_Type>::value>
 {
 };


template<class _Ty>
 struct make_signed
 {
 static const size_t _Bytes = sizeof (_Ty);

 typedef typename _If<is_signed<_Ty>::value, _Ty,
  typename _If<_Bytes <= sizeof (char), signed char,
   typename _If<_Bytes <= sizeof (short), short,
    typename _If<_Bytes <= sizeof (int), int,
     typename _If<_Bytes <= sizeof (long), long,
      _Longlong>::_Type>::_Type>::_Type>
       ::_Type>::_Type type;
 };


template<class _Ty>
 struct make_unsigned
 {
 static const size_t _Bytes = sizeof (_Ty);

 typedef typename _If<is_unsigned<_Ty>::value, _Ty,
  typename _If<_Bytes <= sizeof (char), unsigned char,
   typename _If<_Bytes <= sizeof (short), unsigned short,
    typename _If<_Bytes <= sizeof (int), unsigned int,
     typename _If<_Bytes <= sizeof (long), unsigned long,
      _ULonglong>::_Type>::_Type>::_Type>
       ::_Type>::_Type type;
 };


template<class _Ty>
 struct _Get_align
 {
 _Ty _Elt0;
 char _Elt1;
 _Ty _Elt2;
 };



template<class _Ty>
 struct alignment_of
 : integral_constant<size_t, (sizeof(_Get_align<_Ty>) - 2 * sizeof(_Ty))>
 {
 };

template<class _Ty>
 struct alignment_of<_Ty&>
 : integral_constant<size_t, (sizeof(_Get_align<_Ty *>) - 2 * sizeof(_Ty *))>
 {
 };






template<class _Ty, size_t _Len> union _Align_type
 {
 _Ty _Val;
 char _Pad[_Len];
 };

template<size_t _Len, size_t _Align, class _Ty, bool _Ok>
 struct _Aligned;

template<size_t _Len, size_t _Align, class _Ty>
 struct _Aligned<_Len, _Align, _Ty, true>
 {
 typedef _Align_type<_Ty, _Len> _Type;
 };

template<size_t _Len, size_t _Align>
 struct _Aligned<_Len, _Align, long, false>
 {
 typedef _Align_type<double, _Len> _Type;
 };

template<size_t _Len, size_t _Align>
 struct _Aligned<_Len, _Align, int, false>
 {
 typedef typename _Aligned<_Len, _Align, long, _Align == (sizeof(_Get_align<long>) - 2 * sizeof(long))>::_Type _Type;
 };

template<size_t _Len, size_t _Align>
 struct _Aligned<_Len, _Align, short, false>
 {
 typedef typename _Aligned<_Len, _Align, int, _Align == (sizeof(_Get_align<int>) - 2 * sizeof(int))>::_Type _Type;
 };

template<size_t _Len, size_t _Align>
 struct _Aligned<_Len, _Align, char, false>
 {
 typedef typename _Aligned<_Len, _Align, short, _Align == (sizeof(_Get_align<short>) - 2 * sizeof(short))>::_Type _Type;
 };

template<size_t _Len, size_t _Align>
 struct aligned_storage
 {
 typedef typename _Aligned<_Len, _Align, char, _Align == (sizeof(_Get_align<char>) - 2 * sizeof(char))>::_Type type;
 };






template<class _Ty>
 struct rank
 : integral_constant<size_t, 0>
 {
 };

template<class _Ty, unsigned int _Ix>
 struct rank<_Ty[_Ix]>
 : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };

template<class _Ty>
 struct rank<_Ty[]>
 : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };


template<class _Ty, unsigned int _Nx>
 struct _Extent
 : integral_constant<size_t, 0>
 {
 };

template<class _Ty, unsigned int _Ix>
 struct _Extent<_Ty[_Ix], 0>
 : integral_constant<size_t, _Ix>
 {
 };

template<class _Ty, unsigned int _Nx, unsigned int _Ix>
 struct _Extent<_Ty[_Ix], _Nx>
 : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx>
 struct _Extent<_Ty[], _Nx>
 : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx = 0>
 struct extent
 : _Extent<_Ty, _Nx>
 {
 };


template<class _Ty1, class _Ty2>
 struct is_same
 : false_type
 {
 };

template<class _Ty1>
 struct is_same<_Ty1, _Ty1>
 : true_type
 {
 };


template<class _Base, class _Der>
 struct is_base_of : _Cat_base<__is_base_of(_Base, _Der)>
 {
 };



template<class _Ty>
 struct decay
 {
 typedef typename remove_reference<_Ty>::type _Ty1;

 typedef typename _If<is_array<_Ty1>::value,
  typename remove_extent<_Ty1>::type *,
  typename _If<is_function<_Ty1>::value,
   typename add_pointer<_Ty1>::type,
   typename remove_cv<_Ty1>::type>::_Type>::_Type type;
 };


template<bool _Test,
 class _Type = void>
 struct enable_if
 {
 };

template<class _Type>
 struct enable_if<true, _Type>
 {
 typedef _Type type;
 };


template<bool _Test,
 class _Ty1,
 class _Ty2>
 struct conditional
 {
 typedef _Ty2 type;
 };

template<class _Ty1,
 class _Ty2>
 struct conditional<true, _Ty1, _Ty2>
 {
 typedef _Ty1 type;
 };

 }


using tr1::add_const;
using tr1::add_cv;
using tr1::add_pointer;
using tr1::add_lvalue_reference;
using tr1::add_reference;
using tr1::add_rvalue_reference;
using tr1::add_volatile;
using tr1::aligned_storage;
using tr1::alignment_of;
using tr1::conditional;
using tr1::decay;
using tr1::enable_if;
using tr1::extent;
using tr1::false_type;
using tr1::has_nothrow_assign;
using tr1::has_nothrow_constructor;
using tr1::has_nothrow_copy;
using tr1::has_nothrow_copy_constructor;
using tr1::has_nothrow_default_constructor;
using tr1::has_trivial_assign;
using tr1::has_trivial_constructor;
using tr1::has_trivial_copy;
using tr1::has_trivial_copy_constructor;
using tr1::has_trivial_default_constructor;
using tr1::has_trivial_destructor;
using tr1::has_virtual_destructor;
using tr1::integral_constant;
using tr1::is_abstract;
using tr1::is_arithmetic;
using tr1::is_array;
using tr1::is_base_of;
using tr1::is_class;
using tr1::is_compound;
using tr1::is_const;
using tr1::is_convertible;
using tr1::is_empty;
using tr1::is_enum;
using tr1::is_floating_point;
using tr1::is_function;
using tr1::is_fundamental;
using tr1::is_integral;
using tr1::is_lvalue_reference;
using tr1::is_member_function_pointer;
using tr1::is_member_object_pointer;
using tr1::is_member_pointer;
using tr1::is_object;
using tr1::is_pod;
using tr1::is_pointer;
using tr1::is_polymorphic;
using tr1::is_reference;
using tr1::is_rvalue_reference;
using tr1::is_same;
using tr1::is_scalar;
using tr1::is_signed;
using tr1::is_standard_layout;
using tr1::is_trivial;
using tr1::is_union;
using tr1::is_unsigned;
using tr1::is_void;
using tr1::is_volatile;
using tr1::make_signed;
using tr1::make_unsigned;
using tr1::rank;
using tr1::remove_all_extents;
using tr1::remove_const;
using tr1::remove_cv;
using tr1::remove_extent;
using tr1::remove_pointer;
using tr1::remove_reference;
using tr1::_Remove_rvalue_reference;
using tr1::remove_volatile;
using tr1::true_type;




template<class _Ty>
 struct _Arithmetic_traits;

template<>
 struct _Arithmetic_traits<bool>
 {
 static const int _Rank = 1;
 };

template<>
 struct _Arithmetic_traits<char>
 {
 static const int _Rank = _Arithmetic_traits<bool>::_Rank + 1;
 };

template<>
 struct _Arithmetic_traits<signed char>
 {
 static const int _Rank = _Arithmetic_traits<char>::_Rank;
 };

template<>
 struct _Arithmetic_traits<unsigned char>
 {
 static const int _Rank = _Arithmetic_traits<char>::_Rank;
 };

template<>
 struct _Arithmetic_traits<short>
 {
 static const int _Rank = _Arithmetic_traits<char>::_Rank + 1;
 };

template<>
 struct _Arithmetic_traits<unsigned short>
 {
 static const int _Rank = _Arithmetic_traits<short>::_Rank;
 };

template<>
 struct _Arithmetic_traits<int>
 {
 static const int _Rank = _Arithmetic_traits<short>::_Rank + 1;
 };

template<>
 struct _Arithmetic_traits<unsigned int>
 {
 static const int _Rank = _Arithmetic_traits<int>::_Rank;
 };

template<>
 struct _Arithmetic_traits<long>
 {
 static const int _Rank = _Arithmetic_traits<int>::_Rank + 1;
 };

template<>
 struct _Arithmetic_traits<unsigned long>
 {
 static const int _Rank = _Arithmetic_traits<long>::_Rank;
 };

template<>
 struct _Arithmetic_traits<long long>
 {
 static const int _Rank = _Arithmetic_traits<long>::_Rank + 1;
 };

template<>
 struct _Arithmetic_traits<unsigned long long>
 {
 static const int _Rank = _Arithmetic_traits<long long>::_Rank;
 };

template<>
 struct _Arithmetic_traits<float>
 {
 static const int _Rank = _Arithmetic_traits<long long>::_Rank + 1;
 };

template<>
 struct _Arithmetic_traits<double>
 {
 static const int _Rank = _Arithmetic_traits<float>::_Rank + 1;
 };

template<>
 struct _Arithmetic_traits<long double>
 {
 static const int _Rank = _Arithmetic_traits<double>::_Rank + 1;
 };

template<bool _Unsigned> struct _Pickinteger
 {
 typedef int _Type;
 };

template<>
 struct _Pickinteger<true>
 {
 typedef unsigned int _Type;
 };

template<class _Ty,
 bool _Small>
 struct _Promote_to_int;

template<class _Ty>
 struct _Promote_to_int<_Ty, true>
 {
 typedef int _Type;
 };

template<class _Ty>
 struct _Promote_to_int<_Ty, false>
 {
 typedef typename _Pickinteger<tr1::is_unsigned<_Ty>::value>::_Type _Type;
 };

template<class _Ty,
 bool _Small>
 struct _Maybepromote;

template<class _Ty>
 struct _Maybepromote<_Ty, false>
 {
 typedef _Ty _Type;
 };

template<class _Ty>
 struct _Maybepromote<_Ty, true>
 {
 typedef typename _Promote_to_int<_Ty, sizeof(_Ty) < sizeof(int)>::_Type
  _Type;
 };

template<class _Ty>
 struct _Ipromo
 {
 static const bool _Lessthan =
  _Arithmetic_traits<_Ty>::_Rank < _Arithmetic_traits<int>::_Rank;
 typedef typename _Maybepromote<_Ty, _Lessthan>::_Type _Type;
 };

template<class _Ty0,
 class _Ty1,
 bool _Second>
 struct _Common_typeX
 {
 typedef _Ty1 _Type;
 };

template<class _Ty0,
 class _Ty1>
 struct _Common_typeX<_Ty0, _Ty1, false>
 {
 typedef _Ty0 _Type;
 };

template<class _Ty0,
 class _Ty1,
 bool _Uns0,
 bool _Uns1>
 struct _Common_typeY
 {
 typedef _Ty0 _Type;
 };

template<class _Ty0,
 class _Ty1>
 struct _Common_typeY<_Ty0, _Ty1, false, true>
 {
 typedef _Ty1 _Type;
 };

template<class _Ty0,
 class _Ty1,
 int _Rank0,
 int _Rank1>
 struct _Common_type
 {
 typedef typename _Common_typeX<_Ty0, _Ty1, _Rank0 < _Rank1>::_Type _Type;
 };

template<class _Ty0,
 class _Ty1,
 int _Rank>
 struct _Common_type<_Ty0, _Ty1, _Rank, _Rank>
 {
 typedef typename _Common_typeY<_Ty0, _Ty1,
  tr1::is_unsigned<_Ty0>::value,
  tr1::is_unsigned<_Ty1>::value>::_Type _Type;
 };

template<class _Ty0,
 class _Ty1>
 struct common_type
 {
 typedef typename _Ipromo<_Ty0>::_Type _PromoTy0;
 typedef typename _Ipromo<_Ty1>::_Type _PromoTy1;
 typedef typename _Common_type<_PromoTy0, _PromoTy1,
  _Arithmetic_traits<_PromoTy0>::_Rank,
  _Arithmetic_traits<_PromoTy1>::_Rank>::_Type type;
 };


}
#pragma warning(pop)
#pragma pack(pop)
#line 9 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\utility"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)

#pragma warning(disable: 4180 4512)

namespace std {
 namespace tr1 {

template<class _Type>
 class reference_wrapper;


template<class _Type>
 struct _Unrefwrap
 {
 typedef typename decay<_Type>::type type;
 };

template<class _Type>
 struct _Unrefwrap<reference_wrapper<_Type> >
 {
 typedef _Type& type;
 };

template<class _Type>
 struct _Unrefwrap<const reference_wrapper<_Type> >
 {
 typedef _Type& type;
 };

template<class _Type>
 struct _Unrefwrap<volatile reference_wrapper<_Type> >
 {
 typedef _Type& type;
 };

template<class _Type>
 struct _Unrefwrap<const volatile reference_wrapper<_Type> >
 {
 typedef _Type& type;
 };
#line 60 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\utility"
 }
using tr1::_Unrefwrap;


template<class _Ty>
 struct identity
 {
 typedef _Ty type;

 const _Ty& operator()(const _Ty& _Left) const
  {
  return (_Left);
  }
 };


template<class _Ty> inline
 _Ty&& forward(typename identity<_Ty>::type& _Arg)
 {
 return ((_Ty&&)_Arg);
 }


template<class _Ty> inline
 typename tr1::_Remove_reference<_Ty>::_Type&&
  move(_Ty&& _Arg)
 {
 return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);
 }


template<class _Ty> inline
 typename tr1::_Remove_reference<_Ty>::_Type&&
  _Move(_Ty&& _Arg)
 {
 return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);
 }


template<class _Ty> inline
 void swap(_Ty& _Left, _Ty& _Right)
 {
 _Ty _Tmp = _Move(_Left);
 _Left = _Move(_Right);
 _Right = _Move(_Tmp);
 }


template<class _Ty> inline
 void _Swap_adl(_Ty& _Left, _Ty& _Right)
 {
 swap(_Left, _Right);
 }



template<class _Ty1,
 class _Ty2>
 struct _Pair_base
 {
 typedef _Pair_base<_Ty1, _Ty2> _Myt;
 typedef _Ty1 first_type;
 typedef _Ty2 second_type;

 _Pair_base()
  : first(_Ty1()), second(_Ty2())
  {
  }

 _Pair_base(const _Pair_base<_Ty1, _Ty2>& _Right)
  : first(_Right.first), second(_Right.second)
  {
  }

 _Pair_base(const _Ty1& _Val1, const _Ty2& _Val2)
  : first(_Val1), second(_Val2)
  {
  }

 typedef typename tr1::remove_reference<_Ty1>::type _Ty1x;
 typedef typename tr1::remove_reference<_Ty2>::type _Ty2x;

 _Pair_base(_Ty1x&& _Val1, _Ty2x&& _Val2)
  : first(::std:: move(_Val1)),
   second(::std:: move(_Val2))
  {
  }

 _Pair_base(const _Ty1x& _Val1, _Ty2x&& _Val2)
  : first(_Val1), second(::std:: move(_Val2))
  {
  }

 _Pair_base(_Ty1x&& _Val1, const _Ty2x& _Val2)
  : first(::std:: move(_Val1)), second(_Val2)
  {
  }

 template<class _Other1,
  class _Other2>
  _Pair_base(_Other1&& _Val1, _Other2&& _Val2)
  : first(::std:: forward<_Other1>(_Val1)),
   second(::std:: forward<_Other2>(_Val2))
  {
  }

 _Ty1 first;
 _Ty2 second;
 };

template<class _Ty1,
 class _Ty2>
 struct pair
  : public _Pair_base<_Ty1, _Ty2>
 {
 typedef _Pair_base<_Ty1, _Ty2> _Mybase;

 typedef pair<_Ty1, _Ty2> _Myt;
 typedef _Ty1 first_type;
 typedef _Ty2 second_type;

 pair()
  : _Mybase()
  {
  }

 pair(const _Ty1& _Val1, const _Ty2& _Val2)
  : _Mybase(_Val1, _Val2)
  {
  }

 template<class _Other1,
  class _Other2>
  pair(pair<_Other1, _Other2>& _Right)
  : _Mybase(_Right.first, _Right.second)
  {
  }

 template<class _Other1,
  class _Other2>
  pair(const pair<_Other1, _Other2>& _Right)
  : _Mybase(_Right.first, _Right.second)
  {
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Swap_adl(this->first, _Right.first);
   _Swap_adl(this->second, _Right.second);
   }
  }

 _Myt& operator=(const _Myt& _Right)
  {
  this->first = _Right.first;
  this->second = _Right.second;
  return (*this);
  }

 typedef typename tr1::remove_reference<_Ty1>::type _Ty1x;
 typedef typename tr1::remove_reference<_Ty2>::type _Ty2x;

 pair(_Ty1x&& _Val1, _Ty2x&& _Val2)
  : _Mybase(::std:: move(_Val1),
   ::std:: move(_Val2))
  {
  }

 pair(const _Ty1x& _Val1, _Ty2x&& _Val2)
  : _Mybase(_Val1,
   ::std:: move(_Val2))
  {
  }

 pair(_Ty1x&& _Val1, const _Ty2x& _Val2)
  : _Mybase(::std:: move(_Val1),
   _Val2)
  {
  }

 template<class _Other1,
  class _Other2>
  pair(_Other1&& _Val1, _Other2&& _Val2)
  : _Mybase(::std:: forward<_Other1>(_Val1),
   ::std:: forward<_Other2>(_Val2))
  {
  }

 template<class _Other1,
  class _Other2>
  pair(pair<_Other1, _Other2>&& _Right)
  : _Mybase(::std:: forward<_Other1>(_Right.first),
   ::std:: forward<_Other2>(_Right.second))
  {
  }

 pair& operator=(pair<_Ty1, _Ty2>&& _Right)
  {
  this->first = ::std:: move(_Right.first);
  this->second = ::std:: move(_Right.second);
  return (*this);
  }

 void swap(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   this->first = ::std:: move(_Right.first);
   this->second = ::std:: move(_Right.second);
   }
  }
 };



template<class _Ty1,
 class _Ty2> inline
 void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Ty2> inline
 void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>&& _Right)
 {
 typedef pair<_Ty1, _Ty2> _Myt;
 _Left.swap(::std:: forward<_Myt>(_Right));
 }

template<class _Ty1,
 class _Ty2> inline
 void swap(pair<_Ty1, _Ty2>&& _Left, pair<_Ty1, _Ty2>& _Right)
 {
 typedef pair<_Ty1, _Ty2> _Myt;
 _Right.swap(::std:: forward<_Myt>(_Left));
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator==(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first == _Right.first && _Left.second == _Right.second);
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator!=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator<(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first < _Right.first ||
  !(_Right.first < _Left.first) && _Left.second < _Right.second);
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator>(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator<=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator>=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left < _Right));
 }



template<class _Ty1,
 class _Ty2> inline
 pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type>
  make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
 {
 typedef pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type> _Mypair;
 return (_Mypair(::std:: forward<_Ty1>(_Val1),
  ::std:: forward<_Ty2>(_Val2)));
 }

template<class _Ty1,
 class _Ty2> inline
 pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type>
  make_pair(const _Ty1& _Val1, _Ty2&& _Val2)
 {
 typedef pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type> _Mypair;
 return (_Mypair((typename _Unrefwrap<_Ty1>::type)_Val1,
  ::std:: forward<_Ty2>(_Val2)));
 }

template<class _Ty1,
 class _Ty2> inline
 pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type>
  make_pair(_Ty1&& _Val1, const _Ty2& _Val2)
 {
 typedef pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type> _Mypair;
 return (_Mypair(::std:: forward<_Ty1>(_Val1),
  (typename _Unrefwrap<_Ty2>::type)_Val2));
 }

template<class _Ty1,
 class _Ty2> inline
 pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type>
  make_pair(const _Ty1& _Val1, const _Ty2& _Val2)
 {
 typedef pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type> _Mypair;
 return (_Mypair((typename _Unrefwrap<_Ty1>::type)_Val1,
  (typename _Unrefwrap<_Ty2>::type)_Val2));
 }


template<class _InIt> inline
 _InIt begin(const pair<_InIt, _InIt>& _Pair)
 {
 return (_Pair.first);
 }

template<class _InIt> inline
 _InIt end(const pair<_InIt, _InIt>& _Pair)
 {
 return (_Pair.second);
 }



 namespace rel_ops
  {
template<class _Ty> inline
 bool operator!=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty> inline
 bool operator>(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty> inline
 bool operator<=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty> inline
 bool operator>=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left < _Right));
 }
  }
}


namespace std {
 namespace tr1 {

template<class _Tuple>
 struct tuple_size;
template<size_t _Idx,
 class _Tuple>
 struct tuple_element;
template<class _Ty1,
 class _Ty2>
 struct tuple_size< ::std:: pair<_Ty1, _Ty2> >
 {
 static const int value = 2;
 };

template<int _Idx,
 class _Ty>
 struct _Pair_data;
template<class _Ty1,
 class _Ty2>
 struct _Pair_data<0, ::std:: pair<_Ty1, _Ty2> >
 {
 typedef _Ty1& _Type;
 typedef const _Ty1& _CType;

 static _Type _Val(::std:: pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.first);
  }

 static _CType _Val(const ::std:: pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.first);
  }
 };

template<class _Ty1,
 class _Ty2>
 struct _Pair_data<1, ::std:: pair<_Ty1, _Ty2> >
 {
 typedef _Ty2& _Type;
 typedef const _Ty2& _CType;

 static _Type _Val(::std:: pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.second);
  }

 static _CType _Val(const ::std:: pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.second);
  }
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<0, ::std:: pair<_Ty1, _Ty2> >
 {
 typedef _Ty1 type;
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<1, ::std:: pair<_Ty1, _Ty2> >
 {
 typedef _Ty2 type;
 };

template<int _Idx,
 class _Ty1,
 class _Ty2>
 typename _Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_Type
  get(::std:: pair<_Ty1, _Ty2>& _Pr)
 {
 return (_Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_Val(_Pr));
 }

template<int _Idx,
 class _Ty1,
 class _Ty2>
 typename _Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_CType
  get(const ::std:: pair<_Ty1, _Ty2>& _Pr)
 {
 return (_Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_Val(_Pr));
 }
 }
}



namespace std {
using tr1::get;
using tr1::tuple_element;
using tr1::tuple_size;
}


#pragma warning(pop)
#pragma pack(pop)
#line 8 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)

namespace std {
#line 23 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
typedef const wchar_t *_Dbfile_t;
typedef unsigned int _Dbline_t;

__declspec(dllimport) void __cdecl _Debug_message(const wchar_t *,
 const wchar_t *, unsigned int);






struct __declspec(dllimport) _Container_base0
 {
 void _Orphan_all()
  {
  }

 void _Swap_all(_Container_base0&)
  {
  }
 };

struct _Iterator_base0
 {
 void _Adopt(const void *)
  {
  }

 const _Container_base0 *_Getcont() const
  {
  return (0);
  }
 };

struct _Container_base12;
struct _Iterator_base12;


struct _Container_proxy
 {
 _Container_proxy()
  : _Mycont(0), _Myfirstiter(0)
  {
  }

 const _Container_base12 *_Mycont;
 _Iterator_base12 *_Myfirstiter;
 };

struct __declspec(dllimport) _Container_base12
 {
public:
 _Container_base12()
  : _Myproxy(0)
  {
  }

 _Container_base12(const _Container_base12&)
  : _Myproxy(0)
  {
  }

 _Container_base12& operator=(const _Container_base12&)
  {
  return (*this);
  }

 ~_Container_base12()
  {
  _Orphan_all();
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
  }

 void _Orphan_all();
 void _Swap_all(_Container_base12&);

 _Container_proxy *_Myproxy;
 };

struct _Iterator_base12
 {
public:
 _Iterator_base12()
  : _Myproxy(0), _Mynextiter(0)
  {
  }

 _Iterator_base12(const _Iterator_base12& _Right)
  : _Myproxy(0), _Mynextiter(0)
  {
  *this = _Right;
  }

 _Iterator_base12& operator=(const _Iterator_base12& _Right)
  {
  if (_Myproxy != _Right._Myproxy)
   _Adopt(_Right._Myproxy->_Mycont);
  return (*this);
  }

 ~_Iterator_base12()
  {

  _Lockit _Lock(3);
  _Orphan_me();

  }

 void _Adopt(const _Container_base12 *_Parent)
  {
  if (_Parent != 0)
   {
   _Container_proxy *_Parent_proxy = _Parent->_Myproxy;


   if (_Myproxy != _Parent_proxy)
    {
    _Lockit _Lock(3);
    _Orphan_me();
    _Mynextiter = _Parent_proxy->_Myfirstiter;
    _Parent_proxy->_Myfirstiter = this;
    _Myproxy = _Parent_proxy;
    }



   }
  }

 void _Clrcont()
  {
  _Myproxy = 0;
  }

 const _Container_base12 *_Getcont() const
  {
  return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
  }

 _Iterator_base12 **_Getpnext()
  {
  return (&_Mynextiter);
  }

 void _Orphan_me()
  {

  if (_Myproxy != 0)
   {
   _Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
   while (*_Pnext != 0 && *_Pnext != this)
    _Pnext = &(*_Pnext)->_Mynextiter;

   if (*_Pnext == 0)
    _Debug_message(L"ITERATOR LIST CORRUPTED!", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 181);
   *_Pnext = _Mynextiter;
   _Myproxy = 0;
   }

  }

 _Container_proxy *_Myproxy;
 _Iterator_base12 *_Mynextiter;
 };


inline void _Container_base12::_Orphan_all()
 {

 if (_Myproxy != 0)
  {
  _Lockit _Lock(3);

  for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
   *_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)
   (*_Pnext)->_Myproxy = 0;
  _Myproxy->_Myfirstiter = 0;
  }

 }

inline void _Container_base12::_Swap_all(_Container_base12& _Right)
 {

 _Lockit _Lock(3);


 _Container_proxy *_Temp = _Myproxy;
 _Myproxy = _Right._Myproxy;
 _Right._Myproxy = _Temp;

 if (_Myproxy != 0)
  _Myproxy->_Mycont = (_Container_base12 *)this;
 if (_Right._Myproxy != 0)
  _Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
 }





typedef _Container_base12 _Container_base;
typedef _Iterator_base12 _Iterator_base;







::std:: tr1::_No _Has_unchecked_type(...);

template<class _Ty>
 ::std:: tr1::_Yes _Has_unchecked_type(_Ty *,
  typename _Ty::_Unchecked_type * = 0);

template<class _Iter,
 bool>
 struct _Unchecked_helper
 {
 typedef _Iter type;
 };

template<class _Iter>
 struct _Unchecked_helper<_Iter, true>
 {
 typedef typename _Iter::_Unchecked_type type;
 };

template<class _Iter>
 struct _Get_unchecked_type
 {
 typedef typename _Unchecked_helper<_Iter,
  (sizeof (_Has_unchecked_type((_Iter *)0)) == sizeof (::std:: tr1::_Yes))>::type type;
 };


template<class _Iter> inline
 _Iter _Unchecked(_Iter _Src)
 {
 return (_Src);
 }


template<class _Iter,
 class _UIter> inline
 _Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
 {
 _Dest = _Src;
 return (_Dest);
 }


template<class _Iter>
 struct _Is_checked_helper
 : public ::std:: tr1::integral_constant<bool, (sizeof (_Has_unchecked_type((_Iter *)0)) == sizeof (::std:: tr1::_Yes))>
 {
 };


template<class _Iter> inline
 _Is_checked_helper<_Iter> _Is_checked(_Iter)
 {
 return (_Is_checked_helper<_Iter>());
 }



struct input_iterator_tag
 {
 };

struct output_iterator_tag
 {
 };

struct forward_iterator_tag
 : public input_iterator_tag, output_iterator_tag
 {
 };

struct bidirectional_iterator_tag
 : public forward_iterator_tag
 {
 };

struct random_access_iterator_tag
 : public bidirectional_iterator_tag
 {
 };

struct _Int_iterator_tag
 {
 };


struct _Nonscalar_ptr_iterator_tag
 {
 };
struct _Scalar_ptr_iterator_tag
 {
 };


template<class _Category,
 class _Ty,
 class _Diff = ptrdiff_t,
 class _Pointer = _Ty *,
 class _Reference = _Ty&>
 struct iterator
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;
 typedef _Diff distance_type;
 typedef _Pointer pointer;
 typedef _Reference reference;
 };

template<class _Category,
 class _Ty,
 class _Diff,
 class _Pointer,
 class _Reference,
 class _Base>
 struct _Iterator012
  : public _Base
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;
 typedef _Diff distance_type;
 typedef _Pointer pointer;
 typedef _Reference reference;
 };

struct _Outit
 : public iterator<output_iterator_tag, void, void,
  void, void>
 {
 };


template<class _Iter>
 struct iterator_traits
 {
 typedef typename _Iter::iterator_category iterator_category;
 typedef typename _Iter::value_type value_type;
 typedef typename _Iter::difference_type difference_type;
 typedef difference_type distance_type;
 typedef typename _Iter::pointer pointer;
 typedef typename _Iter::reference reference;
 };

template<class _Ty>
 struct iterator_traits<_Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;
 typedef ptrdiff_t distance_type;
 typedef _Ty *pointer;
 typedef _Ty& reference;
 };

template<class _Ty>
 struct iterator_traits<const _Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;
 typedef ptrdiff_t distance_type;
 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 };

template<> struct iterator_traits<_Bool>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<char>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<signed char>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<unsigned char>
 {
 typedef _Int_iterator_tag iterator_category;
 };


template<> struct iterator_traits<wchar_t>
 {
 typedef _Int_iterator_tag iterator_category;
 };


template<> struct iterator_traits<short>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<unsigned short>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<int>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<unsigned int>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<long>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<unsigned long>
 {
 typedef _Int_iterator_tag iterator_category;
 };


template<> struct iterator_traits<__int64>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<unsigned __int64>
 {
 typedef _Int_iterator_tag iterator_category;
 };



template<class _Iter> inline
 typename iterator_traits<_Iter>::iterator_category
  _Iter_cat(const _Iter&)
 {
 typename iterator_traits<_Iter>::iterator_category _Cat;
 return (_Cat);
 }


template<class _Iter1,
 class _Iter2> inline
 _Nonscalar_ptr_iterator_tag _Ptr_cat(_Iter1&, _Iter2&)
 {
 _Nonscalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

template<class _Elem1,
 class _Elem2>
 struct _Ptr_cat_helper
 {
 typedef _Nonscalar_ptr_iterator_tag _Type;
 };

template<class _Elem>
 struct _Ptr_cat_helper<_Elem, _Elem>
 {
 typedef typename ::std:: tr1::conditional<
  ::std:: tr1::is_scalar<_Elem>::value,
   _Scalar_ptr_iterator_tag,
   _Nonscalar_ptr_iterator_tag>::type _Type;
 };

template<class _Anything>
 struct _Ptr_cat_helper<_Anything *, const _Anything *>
 {
 typedef _Scalar_ptr_iterator_tag _Type;
 };

template<class _Elem1,
 class _Elem2> inline
 typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type
  _Ptr_cat(_Elem1 *, _Elem2 *)
 {
 typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
 return (_Cat);
 }

template<class _Elem1,
 class _Elem2> inline
 typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type
  _Ptr_cat(const _Elem1 *, _Elem2 *)
 {
 typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
 return (_Cat);
 }
#line 588 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
template<class _Ty1, class _Ty2> inline
 bool _Debug_lt(const _Ty1& _Left, const _Ty2& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 if (!(_Left < _Right))
  return (false);
 else if (_Right < _Left)
  _Debug_message(L"invalid operator<", _File, _Line);
 return (true);
 }

template<class _Ty1, class _Ty2> inline
 bool _Debug_lt(const _Ty1& _Left, _Ty2& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 if (!(_Left < _Right))
  return (false);
 else if (_Right < _Left)
  _Debug_message(L"invalid operator<", _File, _Line);
 return (true);
 }

template<class _Ty1, class _Ty2> inline
 bool _Debug_lt(_Ty1& _Left, const _Ty2& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 if (!(_Left < _Right))
  return (false);
 else if (_Right < _Left)
  _Debug_message(L"invalid operator<", _File, _Line);
 return (true);
 }

template<class _Ty1, class _Ty2> inline
 bool _Debug_lt(_Ty1& _Left, _Ty2& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 if (!(_Left < _Right))
  return (false);
 else if (_Right < _Left)
  _Debug_message(L"invalid operator<", _File, _Line);
 return (true);
 }


template<class _Pr, class _Ty1, class _Ty2> inline
 bool _Debug_lt_pred(_Pr _Pred,
  const _Ty1& _Left, const _Ty2& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 if (!_Pred(_Left, _Right))
  return (false);
 else if (_Pred(_Right, _Left))
  _Debug_message(L"invalid operator<", _File, _Line);
 return (true);
 }

template<class _Pr, class _Ty1, class _Ty2> inline
 bool _Debug_lt_pred(_Pr _Pred,
  const _Ty1& _Left, _Ty2& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 if (!_Pred(_Left, _Right))
  return (false);
 else if (_Pred(_Right, _Left))
  _Debug_message(L"invalid operator<", _File, _Line);
 return (true);
 }

template<class _Pr, class _Ty1, class _Ty2> inline
 bool _Debug_lt_pred(_Pr _Pred,
  _Ty1& _Left, const _Ty2& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 if (!_Pred(_Left, _Right))
  return (false);
 else if (_Pred(_Right, _Left))
  _Debug_message(L"invalid operator<", _File, _Line);
 return (true);
 }

template<class _Pr, class _Ty1, class _Ty2> inline
 bool _Debug_lt_pred(_Pr _Pred,
  _Ty1& _Left, _Ty2& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 if (!_Pred(_Left, _Right))
  return (false);
 else if (_Pred(_Right, _Left))
  _Debug_message(L"invalid operator<", _File, _Line);
 return (true);
 }


template<class _InIt> inline
 void _Debug_pointer(_InIt&, _Dbfile_t, _Dbline_t)
 {
 }

template<class _Ty> inline
 void _Debug_pointer(const _Ty *_First, _Dbfile_t _File, _Dbline_t _Line)
 {
 if (_First == 0)
  _Debug_message(L"invalid null pointer", _File, _Line);
 }

template<class _Ty> inline
 void _Debug_pointer(_Ty *_First, _Dbfile_t _File, _Dbline_t _Line)
 {
 if (_First == 0)
  _Debug_message(L"invalid null pointer", _File, _Line);
 }


template<class _InIt> inline
 void _Debug_range2(_InIt _First, _InIt _Last, _Dbfile_t, _Dbline_t,
  input_iterator_tag)
 {
 bool _Ans = _First == _Last;
 _Ans = _Ans;
 }

template<class _RanIt> inline
 void _Debug_range2(_RanIt _First, _RanIt _Last,
  _Dbfile_t _File, _Dbline_t _Line,
  random_access_iterator_tag)
 {
 if (_First != _Last)
  {
  _Debug_pointer(_First, _File, _Line);
  _Debug_pointer(_Last, _File, _Line);
  if (_Last < _First)
   _Debug_message(L"invalid iterator range", _File, _Line);
  }
 }

template<class _InIt> inline
 void _Debug_range(_InIt _First, _InIt _Last,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));
 }


template<class _InIt> inline
 void _Debug_order2(_InIt, _InIt,
  _Dbfile_t, _Dbline_t, input_iterator_tag)
 {
 }

template<class _FwdIt> inline
 void _Debug_order2(_FwdIt _First, _FwdIt _Last,
  _Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag)
 {
 for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)
  if (_Debug_lt(*_Next, *_First, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 743))
   _Debug_message(L"sequence not ordered", _File, _Line);
 }

template<class _InIt> inline
 void _Debug_order(_InIt _First, _InIt _Last,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range(_First, _Last, _File, _Line);
 _Debug_order2(_First, _Last, _File, _Line, _Iter_cat(_First));
 }


template<class _InIt,
 class _Pr> inline
 void _Debug_order2(_InIt, _InIt, _Pr,
  _Dbfile_t, _Dbline_t, input_iterator_tag)
 {
 }

template<class _FwdIt,
 class _Pr> inline
 void _Debug_order2(_FwdIt _First, _FwdIt _Last, _Pr _Pred,
  _Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag)
 {
 for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)
  if (_Debug_lt_pred(_Pred, *_Next, *_First, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 769))
   _Debug_message(L"sequence not ordered", _File, _Line);
 }

template<class _InIt,
 class _Pr> inline
 void _Debug_order(_InIt _First, _InIt _Last, _Pr _Pred,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range(_First, _Last, _File, _Line);
 _Debug_pointer(_Pred, _File, _Line);
 _Debug_order2(_First, _Last, _Pred, _File, _Line, _Iter_cat(_First));
 }





template<class _Iter> inline
 typename iterator_traits<_Iter>::value_type *_Val_type(_Iter)
 {
 return (0);
 }


template<class _InIt,
 class _Diff> inline
 void advance(_InIt& _Where, _Diff _Off)
 {
 _Advance(_Where, _Off, _Iter_cat(_Where));
 }

template<class _InIt,
 class _Diff> inline
 void _Advance(_InIt& _Where, _Diff _Off, input_iterator_tag)
 {





 for (; 0 < _Off; --_Off)
  ++_Where;
 }

template<class _FI,
 class _Diff> inline
 void _Advance(_FI& _Where, _Diff _Off, forward_iterator_tag)
 {





 for (; 0 < _Off; --_Off)
  ++_Where;
 }

template<class _BI,
 class _Diff> inline
 void _Advance(_BI& _Where, _Diff _Off, bidirectional_iterator_tag)
 {
 for (; 0 < _Off; --_Off)
  ++_Where;
 for (; _Off < 0; ++_Off)
  --_Where;
 }

template<class _RI,
 class _Diff> inline
 void _Advance(_RI& _Where, _Diff _Off, random_access_iterator_tag)
 {
 _Where += _Off;
 }



template<class _Iter> inline
 typename iterator_traits<_Iter>::difference_type
  *_Dist_type(_Iter)
 {
 return (0);
 }


template<class _InIt,
 class _Diff> inline
  void _Distance2(_InIt _First, _InIt _Last, _Diff& _Off,
   input_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _FwdIt,
 class _Diff> inline
  void _Distance2(_FwdIt _First, _FwdIt _Last, _Diff& _Off,
   forward_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _BidIt,
 class _Diff> inline
  void _Distance2(_BidIt _First, _BidIt _Last, _Diff& _Off,
   bidirectional_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _RanIt,
 class _Diff> inline
  void _Distance2(_RanIt _First, _RanIt _Last, _Diff& _Off,
   random_access_iterator_tag)
 {

 if (_First != _Last)
  {
  _Debug_pointer(_First, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 889);
  _Debug_pointer(_Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 890);
  }


 _Off += _Last - _First;
 }

template<class _InIt> inline
 typename iterator_traits<_InIt>::difference_type
  distance(_InIt _First, _InIt _Last)
 {
 typename iterator_traits<_InIt>::difference_type _Off = 0;
 _Distance2(_First, _Last, _Off, _Iter_cat(_First));
 return (_Off);
 }

template<class _InIt,
 class _Diff> inline
  void _Distance(_InIt _First, _InIt _Last, _Diff& _Off)
 {
 _Distance2(_First, _Last, _Off, _Iter_cat(_First));
 }



template<class _InIt,
 class _Diff> inline
  _InIt _Increment(_InIt _First, _Diff _Off,
   input_iterator_tag)
 {
 for (; 0 < _Off; --_Off)
  ++_First;
 return (_First);
 }

template<class _FwdIt,
 class _Diff> inline
  _FwdIt _Increment(_FwdIt _First, _Diff _Off,
   forward_iterator_tag)
 {
 for (; 0 < _Off; --_Off)
  ++_First;
 return (_First);
 }

template<class _BidIt,
 class _Diff> inline
  _BidIt _Increment(_BidIt _First, _Diff _Off,
   bidirectional_iterator_tag)
 {
 for (; _Off < 0; ++_Off)
  --_First;
 for (; 0 < _Off; --_Off)
  ++_First;
 return (_First);
 }

template<class _RanIt,
 class _Diff> inline
  _RanIt _Increment(_RanIt _First, _Diff _Off,
   random_access_iterator_tag)
 {
 return (_First + _Off);
 }

template<class _InIt> inline
 _InIt next(_InIt _First,
  typename iterator_traits<_InIt>::difference_type _Off = 1)
 {
 return (_Increment(_First, _Off, _Iter_cat(_First)));
 }

template<class _InIt> inline
 _InIt prev(_InIt _First,
  typename iterator_traits<_InIt>::difference_type _Off = 1)
 {
 return (_Increment(_First, -_Off, _Iter_cat(_First)));
 }

template<class _Container> inline
 typename _Container::iterator begin(_Container& _Cont)
 {
 return (_Cont.begin());
 }

template<class _Container> inline
 typename _Container::const_iterator begin(const _Container& _Cont)
 {
 return (_Cont.begin());
 }

template<class _Container> inline
 typename _Container::iterator end(_Container& _Cont)
 {
 return (_Cont.end());
 }

template<class _Container> inline
 typename _Container::const_iterator end(const _Container& _Cont)
 {
 return (_Cont.end());
 }

template<class _Ty,
 size_t _Size> inline
 _Ty *begin(_Ty (&_Array)[_Size])
 {
 return (&_Array[0]);
 }

template<class _Ty,
 size_t _Size> inline
 _Ty *end(_Ty (&_Array)[_Size])
 {
 return (&_Array[0] + _Size);
 }



template<class _RanIt,
 class _Base>
 class _Revranit
  : public _Base
 {
public:
 typedef _Revranit<_RanIt, _Base> _Myt;
  typedef typename _Base::difference_type difference_type;
 typedef typename _Base::pointer pointer;
 typedef typename _Base::reference reference;
 typedef _RanIt iterator_type;

 _Revranit()
  {
  }

 explicit _Revranit(_RanIt _Right)
  : current(_Right)
  {
  }

 template<class _RanIt2,
  class _Base2>
  _Revranit(const _Revranit<_RanIt2, _Base2>& _Right)
  : current(_Right.base())
  {
  }

 _RanIt base() const
  {
  return (current);
  }

 reference operator*() const
  {
  _RanIt _Tmp = current;
  return (*--_Tmp);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 _Myt& operator++()
  {
  --current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  ++current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 template<class _RanIt2,
  class _Base2>
  bool _Equal(const _Revranit<_RanIt2, _Base2>& _Right) const
  {
  return (current == _Right.base());
  }



 _Myt& operator+=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  return (_Myt(current - _Off));
  }

 _Myt& operator-=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  return (_Myt(current + _Off));
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 template<class _RanIt2,
  class _Base2>
  bool _Less(const _Revranit<_RanIt2, _Base2>& _Right) const
  {
  return (_Right.base() < current);
  }

 difference_type operator-(const _Myt& _Right) const
  {
  return (_Right.base() - current);
  }

protected:
 _RanIt current;
 };


template<class _RanIt,
 class _Base,
 class _Diff> inline
 _Revranit<_RanIt, _Base>
  operator+(_Diff _Off,
  const _Revranit<_RanIt, _Base>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 typename _Base1::difference_type operator-(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (_Right.base() - _Left.base());
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator==(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator!=(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator<(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator>(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator<=(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator>=(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt>
 class reverse_iterator
  : public _Revranit<_RanIt, iterator<
   typename iterator_traits<_RanIt>::iterator_category,
   typename iterator_traits<_RanIt>::value_type,
   typename iterator_traits<_RanIt>::difference_type,
   typename iterator_traits<_RanIt>::pointer,
   typename iterator_traits<_RanIt>::reference> >
 {
 typedef reverse_iterator<_RanIt> _Myt;
 typedef _Revranit<_RanIt, iterator<
  typename iterator_traits<_RanIt>::iterator_category,
  typename iterator_traits<_RanIt>::value_type,
  typename iterator_traits<_RanIt>::difference_type,
  typename iterator_traits<_RanIt>::pointer,
  typename iterator_traits<_RanIt>::reference> > _Mybase;

public:
  typedef typename iterator_traits<_RanIt>::difference_type difference_type;
 typedef typename iterator_traits<_RanIt>::pointer pointer;
 typedef typename iterator_traits<_RanIt>::reference reference;
 typedef _RanIt iterator_type;

 reverse_iterator()
  {
  }

 explicit reverse_iterator(_RanIt _Right)
  : _Mybase(_Right)
  {
  }

 template<class _Other>
  reverse_iterator(const reverse_iterator<_Other>& _Right)
  : _Mybase(_Right.base())
  {
  }

 reverse_iterator(_Mybase _Right)
  : _Mybase(_Right)
  {
  }

 _Myt& operator++()
  {
  ++*((_Mybase *)this);
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  --*((_Mybase *)this);
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myt& operator+=(difference_type _Off)
  {
  *((_Mybase *)this) += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt& operator-=(difference_type _Off)
  {
  *((_Mybase *)this) -= _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }
 };

template<class _RanIt>
 struct _Is_checked_helper<reverse_iterator<_RanIt> >
 : public _Is_checked_helper<_RanIt>
 {
 };


template<class _RanIt,
 class _Diff> inline
 reverse_iterator<_RanIt> operator+(_Diff _Off,
  const reverse_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2> inline
 typename reverse_iterator<_RanIt1>::difference_type
  operator-(const reverse_iterator<_RanIt1>& _Left,
   const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right.base() - _Left.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator==(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator!=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _BidIt,
 class _Ty,
 class _Reference = _Ty&,
 class _Pointer = _Ty *,
 class _Diff = ptrdiff_t>
 class reverse_bidirectional_iterator
  : public iterator<bidirectional_iterator_tag, _Ty, _Diff,
   _Pointer, _Reference>
 {
public:
 typedef reverse_bidirectional_iterator<_BidIt, _Ty, _Reference,
  _Pointer, _Diff> _Myt;
 typedef _BidIt iterator_type;

 reverse_bidirectional_iterator()
  {
  }

 explicit reverse_bidirectional_iterator(_BidIt _Right)
  : current(_Right)
  {
  }

 _BidIt base() const
  {
  return (current);
  }

 _Reference operator*() const
  {
  _BidIt _Tmp = current;
  return (*--_Tmp);
  }

 _Pointer operator->() const
  {
  _Reference _Tmp = **this;
  return (&_Tmp);
  }

 _Myt& operator++()
  {
  --current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  ++current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 bool operator==(const _Myt& _Right) const
  {
  return (current == _Right.current);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

protected:
 _BidIt current;
 };


template<class _BidIt,
 class _BidIt2 = _BidIt>
 class _Revbidit
  : public iterator<
   typename iterator_traits<_BidIt>::iterator_category,
   typename iterator_traits<_BidIt>::value_type,
   typename iterator_traits<_BidIt>::difference_type,
   typename iterator_traits<_BidIt>::pointer,
   typename iterator_traits<_BidIt>::reference>
 {
public:
 typedef _Revbidit<_BidIt, _BidIt2> _Myt;
 typedef typename iterator_traits<_BidIt>::difference_type _Diff;
 typedef typename iterator_traits<_BidIt>::pointer _Pointer;
 typedef typename iterator_traits<_BidIt>::reference _Reference;
 typedef _BidIt iterator_type;

 _Revbidit()
  {
  }

 explicit _Revbidit(_BidIt _Right)
  : current(_Right)
  {
  }

 _Revbidit(const _Revbidit<_BidIt2>& _Other)
  : current (_Other.base())
  {
  }

 _BidIt base() const
  {
  return (current);
  }

 _Reference operator*() const
  {
  _BidIt _Tmp = current;
  return (*--_Tmp);
  }

 _Pointer operator->() const
  {
  _Reference _Tmp = **this;
  return (&_Tmp);
  }

 _Myt& operator++()
  {
  --current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  ++current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 bool operator==(const _Myt& _Right) const
  {
  return (current == _Right.current);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

protected:
 _BidIt current;
 };


template<class _Ty,
 size_t _Size>
 class _Array_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   _Ty,
   ptrdiff_t,
   const _Ty *,
   const _Ty&,
   _Iterator_base>
 {
public:
 typedef _Array_const_iterator<_Ty, _Size> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 enum {_EEN_SIZE = _Size};
 enum {_EEN_IDL =
  2};
#line 1706 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
 _Array_const_iterator()
  {
  _Ptr = 0;
  _Idx = 0;
  }

 explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
  {
  _Ptr = _Parg;
  _Idx = _Off;
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  _Idx = _Right - _Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Ptr + _Idx);
  }

 reference operator*() const
  {

  if (_Ptr == 0
   || _Size <= _Idx)
   {
   _Debug_message(L"array iterator not dereferencable", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1737);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1738, 0, L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1738, 0); };
   }






                              ;

  return (_Ptr[_Idx]);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 _Myiter& operator++()
  {

  if (_Ptr == 0
   || _Size <= _Idx)
   {
   _Debug_message(L"array iterator not incrementable", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1762);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1763, 0, L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1763, 0); };
   }






  ++_Idx;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (_Ptr == 0
   || _Idx <= 0)
   {
   _Debug_message(L"array iterator not decrementable", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1788);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1789, 0, L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1789, 0); };
   }






  --_Idx;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  if (_Size < _Idx + _Off)
   {
   _Debug_message(L"array iterator + offset out of range", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1813);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1814, 0, L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1814, 0); };
   }





  _Idx += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx < _Right._Idx
   ? -(difference_type)(_Right._Idx - _Idx)
   : (difference_type)_Idx - _Right._Idx);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx == _Right._Idx);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx < _Right._Idx);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  if (_Ptr != _Right._Ptr)
   {
   _Debug_message(L"array iterators incompatible", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1892);
   { (void) ((!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1893, 0, L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 1893, 0); };
   }
  }
#line 1904 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
 pointer _Ptr;
 size_t _Idx;

 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size>&
  _Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
   typename _Array_const_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size> operator+(
  typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
  _Array_const_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }


template<class _Ty,
 size_t _Size>
 class _Array_iterator
  : public _Array_const_iterator<_Ty, _Size>
 {
public:
 typedef _Array_iterator<_Ty, _Size> _Myiter;
 typedef _Array_const_iterator<_Ty, _Size> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef _Ty *pointer;
 typedef _Ty& reference;

 _Array_iterator()
  {
  }

 explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
  : _Mybase(_Parg, _Off)
  {
  }
 enum {_EEN_SIZE = _Size};
 enum {_EEN_IDL =
  2};

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  ((_Mybase *)this)->_Rechecked(_Right);
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return ((pointer)((_Mybase *)this)->_Unchecked());
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size>&
  _Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
   typename _Array_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size> operator+(
  typename _Array_iterator<_Ty, _Size>::difference_type _Off,
  _Array_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }



template<class _Ty> inline
 const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Debug_lt(_Left, _Right, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2080) ? _Right : _Left);
 }


template<class _Ty,
 class _Pr> inline
 const _Ty& (max)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
 {
 return (_Debug_lt_pred(_Pred, _Left, _Right, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2088) ? _Right : _Left);
 }


template<class _Ty> inline
 const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Debug_lt(_Right, _Left, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2095) ? _Right : _Left);
 }


template<class _Ty,
 class _Pr> inline
 const _Ty& (min)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
 {
 return (_Debug_lt_pred(_Pred, _Right, _Left, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2103) ? _Right : _Left);
 }




template<class _Ty> inline
 pair<const _Ty, const _Ty>
  minmax(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left
  ? pair<const _Ty, const _Ty>(_Right, _Left)
  : pair<const _Ty, const _Ty>(_Left, _Right));
 }


template<class _Ty,
 class _Pr> inline
 pair<const _Ty, const _Ty>
  minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
 {
 return (_Pred(_Right, _Left)
  ? pair<const _Ty, const _Ty>(_Right, _Left)
  : pair<const _Ty, const _Ty>(_Left, _Right));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
 {
 swap(*_Left, *_Right);
 }


template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, ++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Copy_impl(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
#line 2180 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, output_iterator_tag)
 {
 return (_Copy_impl(_First, _Last,
  _Dest));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last - _First);
 _Copy_impl(_First, _Last,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, ::std:: tr1::true_type)
 {
 return (_Copy_impl(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, ::std:: tr1::false_type)
 {
 return (_Copy_impl(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt copy(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2224);
 _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2225);
 return (_Copy_impl(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }

template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag)
 {
 *_Dest = *_First;
 while (0 < --_Count)
  *++_Dest = *++_First;
 return (++_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, forward_iterator_tag)
 {
 for (; 0 < _Count; --_Count, ++_Dest, ++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 return (_Copy_n(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {
 return (_Copy_n(_First, _Count,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
#line 2314 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n2(_InIt _First, _Diff _Count,
  _OutIt _Dest, output_iterator_tag)
 {
 return (_Copy_n(_First, _Count,
  _Dest));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n2(_InIt _First, _Diff _Count,
  _OutIt _Dest, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + _Count;
 _Copy_n(_First, _Count,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n1(_InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag)
 {
 return (_Copy_n2(_First, _Count,
  _Dest, _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n1(_InIt _First, _Diff _Count,
  _OutIt _Dest, random_access_iterator_tag)
 {
 _InIt _Last = _First + _Count;
 _Last = _Last;
 return (_Copy_n2(_Unchecked(_First), _Count,
  _Dest, _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, ::std:: tr1::true_type)
 {
 return (_Copy_n1(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, ::std:: tr1::false_type)
 {
 return (_Copy_n1(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {
 _Debug_pointer(_First, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2385);
 _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2386);
 if (_Count <= 0)
  return (_Dest);
 else
  return (_Copy_n(_First, _Count,
   _Dest, _Is_checked(_Dest)));
 }

template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutIt> inline
 _OutIt copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutIt _Dest)
 {
 return (::std:: copy_n(_Array_iterator<_InTy, _InSize>(_First), _Count,
  _Dest));
 }

template<class _InIt,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy_n(_InIt _First, _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: copy_n(_First, _Count,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }

template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: copy_n(_Array_iterator<_InTy, _InSize>(_First), _Count,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }





template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = *--_Last;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_backward(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest - _Count, &*_First,
  _Count * sizeof (*_First));
 return (_Dest - _Count);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Copy_backward(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
#line 2476 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, ::std:: tr1::true_type)
 {
 return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, ::std:: tr1::false_type)
 {
 return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2500);
 _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2501);
 return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }



template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, ++_First)
  *_Dest = ::std:: move(*_First);
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Move(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
#line 2550 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, output_iterator_tag)
 {
 return (_Move(_First, _Last,
  _Dest));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last - _First);
 _Move(_First, _Last,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, ::std:: tr1::true_type)
 {
 return (_Move(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, ::std:: tr1::false_type)
 {
 return (_Move(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt move(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2594);
 _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2595);
 return (_Move(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }

template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *move(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: move(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }



template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = ::std:: move(*--_Last);
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_backward(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest - _Count, &*_First,
  _Count * sizeof (*_First));
 return (_Dest - _Count);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Move_backward(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
#line 2655 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, ::std:: tr1::true_type)
 {
 return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, ::std:: tr1::false_type)
 {
 return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2679);
 _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2680);
 return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }



template<class _FwdIt,
 class _Ty> inline
 void _Fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First)
  *_First = _Val;
 }

inline void _Fill(char *_First, char *_Last, int _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

inline void _Fill(signed char *_First, signed char *_Last, int _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

inline void _Fill(unsigned char *_First, unsigned char *_Last, int _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

template<class _FwdIt,
 class _Ty> inline
 void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2714);
 _Fill(_Unchecked(_First), _Unchecked(_Last), _Val);
 }


template<class _OutIt,
 class _Diff,
 class _Ty> inline
 void _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {
 for (; 0 < _Count; --_Count, ++_Dest)
  *_Dest = _Val;
 }

inline void _Fill_n(char *_Dest, size_t _Count, int _Val)
 {
 :: memset(_Dest, _Val, _Count);
 }

inline void _Fill_n(signed char *_Dest, size_t _Count, int _Val)
 {
 :: memset(_Dest, _Val, _Count);
 }

inline void _Fill_n(unsigned char *_Dest, size_t _Count, int _Val)
 {
 :: memset(_Dest, _Val, _Count);
 }
#line 2753 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
template<class _OutIt,
 class _Diff,
 class _Ty> inline
 void _Fill_n1(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
  output_iterator_tag)
 {
 _Fill_n(_Dest, _Count, _Val);
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 void _Fill_n1(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
  random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + _Count;
 _Ans = _Ans;
 _Fill_n(_Unchecked(_Dest), _Count, _Val);
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 void _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
  ::std:: tr1::true_type)
 {
 _Fill_n1(_Dest, _Count, _Val,
  _Iter_cat(_Dest));
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 void _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
  ::std:: tr1::false_type)
 {
 _Fill_n1(_Dest, _Count, _Val,
  _Iter_cat(_Dest));
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 void fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {
 _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2799);
 _Fill_n(_Dest, _Count, _Val,
  _Is_checked(_Dest));
 }

template<class _OutTy,
 size_t _OutSize,
 class _Diff,
 class _Ty> inline
 void fill_n(_OutTy (&_Dest)[_OutSize], _Diff _Count, const _Ty& _Val)
 {
 ::std:: fill_n(_Array_iterator<_OutTy, _OutSize>(_Dest), _Count, _Val);
 }



template<class _InIt1,
 class _InIt2> inline
 pair<_InIt1, _InIt2>
  _Mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2)
 {
 for (; _First1 != _Last1 && *_First1 == *_First2; )
  ++_First1, ++_First2;
 return (pair<_InIt1, _InIt2>(_First1, _First2));
 }
#line 2842 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
template<class _InIt1,
 class _InIt2> inline
 pair<_InIt1, _InIt2>
  _Mismatch1(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, ::std:: tr1::true_type)
 {
 return (::std:: _Mismatch(_First1, _Last1,
  _First2));
 }

template<class _InIt1,
 class _InIt2> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 pair<_InIt1, _InIt2>
  _Mismatch1(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, ::std:: tr1::false_type)
 {
 return (::std:: _Mismatch(_First1, _Last1,
  _First2));
 }

template<class _InIt1,
 class _InIt2> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2)
 {
 _Debug_range(_First1, _Last1, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2869);
 _Debug_pointer(_First2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2870);
 ::std:: pair<typename _Get_unchecked_type<_InIt1>::type, _InIt2> _Ans(
  ::std:: _Mismatch1(_Unchecked(_First1), _Unchecked(_Last1),
   _First2, _Is_checked(_First2)));
 return (::std:: pair<_InIt1, _InIt2>(
  _Rechecked(_First1, _Ans.first),
  _Ans.second));
 }

template<class _InIt1,
 class _InTy,
 size_t _InSize> inline
 pair<_InIt1, _InTy *>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InTy (&_First2)[_InSize])
 {
 ::std:: pair<_InIt1, _Array_iterator<_InTy, _InSize> > _Ans(
  ::std:: mismatch(_First1, _Last1,
   _Array_iterator<_InTy, _InSize>(_First2)));
 return (::std:: pair<_InIt1, _InTy *>(
  _Ans.first,
  _Unchecked(_Ans.second)));
 }




template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  _Mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _Pred(*_First1, *_First2); )
  ++_First1, ++_First2;
 return (pair<_InIt1, _InIt2>(_First1, _First2));
 }
#line 2926 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  _Mismatch2(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred, ::std:: tr1::true_type)
 {
 return (::std:: _Mismatch(_First1, _Last1,
  _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 pair<_InIt1, _InIt2>
  _Mismatch2(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred, ::std:: tr1::false_type)
 {
 return (::std:: _Mismatch(_First1, _Last1,
  _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2956);
 _Debug_pointer(_First2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2957);
 _Debug_pointer(_Pred, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 2958);
 ::std:: pair<typename _Get_unchecked_type<_InIt1>::type, _InIt2> _Ans(
  ::std:: _Mismatch2(_Unchecked(_First1), _Unchecked(_Last1),
   _First2, _Pred, _Is_checked(_First2)));
 return (::std:: pair<_InIt1, _InIt2>(
  _Rechecked(_First1, _Ans.first),
  _Ans.second));
 }

template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _Pr> inline
 pair<_InIt1, _InTy *>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InTy (&_First2)[_InSize], _Pr _Pred)
 {
 ::std:: pair<_InIt1, _Array_iterator<_InTy, _InSize> > _Ans(
  ::std:: mismatch(_First1, _Last1,
   _Array_iterator<_InTy, _InSize>(_First2), _Pred));
 return (::std:: pair<_InIt1, _InTy *>(
  _Ans.first,
  _Unchecked(_Ans.second)));
 }



template<class _InIt1,
 class _InIt2> inline
 bool _Equal(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
 {
 for (; _First1 != _Last1; ++_First1, ++_First2)
  if (!(*_First1 == *_First2))
   return (false);
 return (true);
 }

inline bool _Equal(const char *_First1, const char *_Last1,
 const char *_First2)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }

inline bool _Equal(const signed char *_First1, const signed char *_Last1,
 const signed char *_First2)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }

inline bool _Equal(const unsigned char *_First1, const unsigned char *_Last1,
 const unsigned char *_First2)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }
#line 3024 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
template<class _InIt1,
 class _InIt2> inline
 bool _Equal1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, ::std:: tr1::true_type)
 {
 return (_Equal(_First1, _Last1,
  _First2));
 }

template<class _InIt1,
 class _InIt2> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 bool _Equal1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, ::std:: tr1::false_type)
 {
 return (_Equal(_First1, _Last1,
  _First2));
 }

template<class _InIt1,
 class _InIt2> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2)
 {
 _Debug_range(_First1, _Last1, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3048);
 _Debug_pointer(_First2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3049);
 return (_Equal1(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Is_checked(_First2)));
 }

template<class _InIt1,
 class _InTy,
 size_t _InSize> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize])
 {
 return (::std:: equal(_First1, _Last1,
  _Array_iterator<_InTy, _InSize>(_First2)));
 }



template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 for (; _First1 != _Last1; ++_First1, ++_First2)
  if (!_Pred(*_First1, *_First2))
   return (false);
 return (true);
 }
#line 3090 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred, ::std:: tr1::true_type)
 {
 return (_Equal(_First1, _Last1,
  _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 bool _Equal2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred, ::std:: tr1::false_type)
 {
 return (_Equal(_First1, _Last1,
  _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3117);
 _Debug_pointer(_First2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3118);
 return (_Equal2(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Pred, _Is_checked(_First2)));
 }

template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize], _Pr _Pred)
 {
 return (::std:: equal(_First1, _Last1,
  _Array_iterator<_InTy, _InSize>(_First2), _Pred));
 }



template<class _InIt1,
 class _InIt2> inline
 bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (_Debug_lt(*_First1, *_First2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3142))
   return (true);
  else if (*_First2 < *_First1)
   return (false);
 return (_First1 == _Last1 && _First2 != _Last2);
 }

inline bool _Lexicographical_compare(
 const unsigned char *_First1, const unsigned char *_Last1,
 const unsigned char *_First2, const unsigned char *_Last2)
 {
 ptrdiff_t _Num1 = _Last1 - _First1;
 ptrdiff_t _Num2 = _Last2 - _First2;
 int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
 return (_Ans < 0 || _Ans == 0 && _Num1 < _Num2);
 }
#line 3171 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility"
template<class _InIt1,
 class _InIt2> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 _Debug_range(_First1, _Last1, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3176);
 _Debug_range(_First2, _Last2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3177);
 return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2)));
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3190))
   return (true);
  else if (_Pred(*_First2, *_First1))
   return (false);
 return (_First1 == _Last1 && _First2 != _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3203);
 _Debug_range(_First2, _Last2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3204);
 _Debug_pointer(_Pred, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3205);
 return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred));
 }


template<class _BidIt> inline
 void _Reverse(_BidIt _First, _BidIt _Last, bidirectional_iterator_tag)
 {
 for (; _First != _Last && _First != --_Last; ++_First)
  ::std:: iter_swap(_First, _Last);
 }

template<class _BidIt> inline
 void reverse(_BidIt _First, _BidIt _Last)
 {
 _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3221);
 _Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
 }


template<class _FwdIt> inline
 void _Rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  forward_iterator_tag)
 {
 for (_FwdIt _Next = _Mid; ; )
  {
  ::std:: iter_swap(_First, _Next);
  if (++_First == _Mid)
   if (++_Next == _Last)
    break;
   else
    _Mid = _Next;
  else if (++_Next == _Last)
   _Next = _Mid;
  }
 }

template<class _BidIt> inline
 void _Rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  bidirectional_iterator_tag)
 {
 ::std:: reverse(_First, _Mid);
 ::std:: reverse(_Mid, _Last);
 ::std:: reverse(_First, _Last);
 }

template<class _RanIt,
 class _Diff,
 class _Ty> inline
 void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Diff *, _Ty *)
 {
 _Diff _Shift = _Mid - _First;
 _Diff _Count = _Last - _First;

 for (_Diff _Factor = _Shift; _Factor != 0; )
  {
  _Diff _Tmp = _Count % _Factor;
  _Count = _Factor;
  _Factor = _Tmp;
  }

 if (_Count < _Last - _First)
  for (; 0 < _Count; --_Count)
   {
   _RanIt _Hole = _First + _Count;
   _RanIt _Next = _Hole;
   _RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;
   for (; ; )
    {
    iter_swap(_Next, _Next1);
    _Next = _Next1;
    _Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
     : _First + (_Shift - (_Last - _Next1));
    if (_Next1 == _Hole)
     break;
    }
   }
 }

template<class _RanIt> inline
 void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last,
  random_access_iterator_tag)
 {
 _Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));
 }

template<class _FwdIt> inline
 _FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
 {
 _Debug_range(_First, _Mid, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3295);
 _Debug_range(_Mid, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3296);
 if (_First != _Mid && _Mid != _Last)
  {
  _Rotate(_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),
   _Iter_cat(_First));
  ::std:: advance(_First, ::std:: distance(_Mid, _Last));
  }
 return (_First);
 }


template<class _Elem>
 class __declspec(dllimport) _Yarn
 {
public:
 typedef _Yarn<_Elem> _Myt;

                    _Yarn()
  : _Myptr(0), _Nul(0)
  {
  }

                    _Yarn(const _Myt& _Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

                    _Yarn(const _Elem *_Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

 _Myt& operator=(const _Myt& _Right)
  {
  return (*this = _Right._Myptr);
  }

 _Myt& operator=(const _Elem *_Right)
  {
  if (_Myptr != _Right)
   {
   _Tidy();

   if (_Right != 0)
    {
    const _Elem *_Ptr = _Right;
    while (*_Ptr != (_Elem)0)
     ++_Ptr;
    size_t _Count = ((const char *)++_Ptr - (const char *)_Right)
     * sizeof (_Elem);


    _Myptr = (_Elem *)_malloc_dbg(_Count, 2,
     "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xutility", 3351);





    if (_Myptr != 0)
     :: memcpy(_Myptr, _Right, _Count);
    }
   }
  return (*this);
  }

                    ~_Yarn()
  {
  _Tidy();
  }

 bool empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem * c_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

 bool _Empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem * _C_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

private:
 void _Tidy()
  {
  if (_Myptr != 0)


   _free_dbg(_Myptr, 2);





  _Myptr = 0;
  }

 _Elem *_Myptr;
 _Elem _Nul;
 };

__declspec(dllimport) __declspec(noreturn) void __cdecl _Xinvalid_argument( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xlength_error( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xout_of_range( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xoverflow_error( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xruntime_error( const char *);
}
#pragma warning(pop)
#pragma pack(pop)
#line 8 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmemory"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)






#pragma warning(disable: 4100)







namespace std {

template<class _Ty> inline
 _Ty *_Allocate(size_t _Count, _Ty *)
 {
 void *_Ptr = 0;

 if (_Count <= 0)
  _Count = 0;
 else if (((size_t)(-1) / sizeof (_Ty) < _Count)
  || (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)
  throw bad_alloc(0);

 return ((_Ty *)_Ptr);
 }


template<class _Ty1,
 class _Ty2> inline
 void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
 {
 void *_Vptr = _Ptr;
 ::new (_Vptr) _Ty1(::std:: forward<_Ty2>(_Val));
 }

template<class _Ty1> inline
 void _Construct(_Ty1 *_Ptr)
 {
 void *_Vptr = _Ptr;

 ::new (_Vptr) _Ty1();
 }


template<class _Ty> inline
 void _Destroy(_Ty *_Ptr)
 {
 _Ptr->~_Ty();
 }

template<> inline
 void _Destroy(char *)
 {
 }

template<> inline
 void _Destroy(wchar_t *)
 {
 }


template<> inline
 void _Destroy(unsigned short *)
 {
 }



template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al)
 {
 _Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
 }

template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al,
  _Nonscalar_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  _Dest_val(_Al, _First);
 }

template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al,
  _Scalar_ptr_iterator_tag)
 {
 }


template<class _Ty> inline
 _Ty * addressof(_Ty& _Val)
 {
 return ((_Ty *) &(char&)_Val);
 }


template<class _Ty>
 struct _Allocator_base
 {
 typedef _Ty value_type;
 };


template<class _Ty>
 struct _Allocator_base<const _Ty>
 {
 typedef _Ty value_type;
 };


template<class _Ty>
 class allocator
  : public _Allocator_base<_Ty>
 {
public:
 typedef _Allocator_base<_Ty> _Mybase;
 typedef typename _Mybase::value_type value_type;

 typedef value_type *pointer;
 typedef value_type & reference;
 typedef const value_type *const_pointer;
 typedef const value_type & const_reference;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 pointer address(reference _Val) const
  {
  return ((pointer) &(char&)_Val);
  }

 const_pointer address(const_reference _Val) const
  {
  return ((const_pointer) &(char&)_Val);
  }

 allocator() throw ()
  {
  }

 allocator(const allocator<_Ty>&) throw ()
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) throw ()
  {
  }

 template<class _Other>
  allocator<_Ty>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }

 void deallocate(pointer _Ptr, size_type)
  {
  ::operator delete(_Ptr);
  }

 pointer allocate(size_type _Count)
  {
  return (_Allocate(_Count, (pointer)0));
  }

 pointer allocate(size_type _Count, const void *)
  {
  return (allocate(_Count));
  }

 void construct(pointer _Ptr, const _Ty& _Val)
  {
  _Construct(_Ptr, _Val);
  }

 void construct(pointer _Ptr, _Ty&& _Val)
  {
  ::new ((void *)_Ptr) _Ty(::std:: forward<_Ty>(_Val));
  }

 template<class _Other>
  void construct(pointer _Ptr, _Other&& _Val)
  {
  ::new ((void *)_Ptr) _Ty(::std:: forward<_Other>(_Val));
  }

 void destroy(pointer _Ptr)
  {
  _Destroy(_Ptr);
  }

 size_t max_size() const throw ()
  {
  size_t _Count = (size_t)(-1) / sizeof (_Ty);
  return (0 < _Count ? _Count : 1);
  }
 };


template<> class allocator<void>
 {
public:
 typedef void _Ty;
 typedef _Ty *pointer;
 typedef const _Ty *const_pointer;
 typedef _Ty value_type;

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 allocator() throw ()
  {
  }

 allocator(const allocator<_Ty>&) throw ()
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) throw ()
  {
  }

 template<class _Other>
  allocator<_Ty>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const allocator<_Ty>&,
  const allocator<_Other>&) throw ()
 {
 return (true);
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const allocator<_Ty>& _Left,
  const allocator<_Other>& _Right) throw ()
 {
 return (!(_Left == _Right));
 }


template<class _Alloc,
 class _Ty1,
 class _Ty2>
 void _Cons_val(_Alloc& _Alval, _Ty1 *_Pdest, _Ty2&& _Src)
 {
 _Alval.construct(_Pdest, ::std:: forward<_Ty2>(_Src));
 }

template<class _Alloc,
 class _Ty1>
 void _Dest_val(_Alloc& _Alval, _Ty1 *_Pdest)
 {
 _Alval.destroy(_Pdest);
 }
}



#pragma warning(pop)
#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)

namespace std {
#pragma warning(disable: 4251)

template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Ax = allocator<_Elem> >
 class basic_string;






template<class _Elem,
 class _Traits,
 class _Alloc>
 class _String_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   typename _Alloc::value_type,
   typename _Alloc::difference_type,
   typename _Alloc::const_pointer,
   typename _Alloc::const_reference,
   _Iterator_base>
 {
public:
 typedef _String_const_iterator<_Elem, _Traits, _Alloc> _Myiter;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Alloc::value_type value_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef typename _Alloc::const_pointer pointer;
 typedef typename _Alloc::const_reference reference;

 _String_const_iterator()
  {
  this->_Ptr = 0;
  }

 _String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
  {
  this->_Adopt(_Pstring);
  this->_Ptr = _Parg;
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
   || ((_Mystr *)this->_Getcont())->_Myptr()
    + ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
   {
   _Debug_message(L"string iterator not dereferencable", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 78);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 79, 0, L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 79, 0); };
   }
#line 90 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring"
                                    ;

  return (*this->_Ptr);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 _Myiter& operator++()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || ((_Mystr *)this->_Getcont())->_Myptr()
    + ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
   {
   _Debug_message(L"string iterator not incrementable", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 108);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 109, 0, L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 109, 0); };
   }
#line 119 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring"
  ++this->_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr <= ((_Mystr *)this->_Getcont())->_Myptr())
   {
   _Debug_message(L"string iterator not decrementable", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 137);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 138, 0, L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 138, 0); };
   }







  --this->_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr + _Off < ((_Mystr *)this->_Getcont())->_Myptr()
   || ((_Mystr *)this->_Getcont())->_Myptr()
    + ((_Mystr *)this->_Getcont())->_Mysize < this->_Ptr + _Off)
   {
   _Debug_message(L"string iterator + offset out of range", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 167);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 168, 0, L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 168, 0); };
   }
#line 179 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring"
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  if (this->_Getcont() == 0
   || this->_Getcont() != _Right._Getcont())
   {
   _Debug_message(L"string iterators incompatible", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 249);
   { (void) ((!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 250, 0, L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 250, 0); };
   }
  }
#line 267 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring"
 pointer _Ptr;
 };

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 typename _String_const_iterator<_Elem, _Traits, _Alloc>::_Unchecked_type
  _Unchecked(_String_const_iterator<_Elem, _Traits, _Alloc> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 _String_const_iterator<_Elem, _Traits, _Alloc>
  _Rechecked(_String_const_iterator<_Elem, _Traits, _Alloc>& _Iter,
   typename _String_const_iterator<_Elem, _Traits, _Alloc>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 _String_const_iterator<_Elem, _Traits, _Alloc> operator+(
  typename _String_const_iterator<_Elem, _Traits, _Alloc>
   ::difference_type _Off,
  _String_const_iterator<_Elem, _Traits, _Alloc> _Next)
 {
 return (_Next += _Off);
 }


template<class _Elem,
 class _Traits,
 class _Alloc>
 class _String_iterator
  : public _String_const_iterator<_Elem, _Traits, _Alloc>
 {
public:
 typedef _String_iterator<_Elem, _Traits, _Alloc> _Myiter;
 typedef _String_const_iterator<_Elem, _Traits, _Alloc> _Mybase;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr::value_type value_type;
 typedef typename _Mystr::difference_type difference_type;
 typedef typename _Mystr::pointer pointer;
 typedef typename _Mystr::reference reference;

 _String_iterator()
  {
  }

 _String_iterator(pointer _Parg, const _Container_base *_Pstring)
  : _Mybase(_Parg, _Pstring)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return ((_Mybase)*this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 typename _String_iterator<_Elem, _Traits, _Alloc>::_Unchecked_type
  _Unchecked(_String_iterator<_Elem, _Traits, _Alloc> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 _String_iterator<_Elem, _Traits, _Alloc>
  _Rechecked(_String_iterator<_Elem, _Traits, _Alloc>& _Iter,
   typename _String_iterator<_Elem, _Traits, _Alloc>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 _String_iterator<_Elem, _Traits, _Alloc> operator+(
  typename _String_iterator<_Elem, _Traits, _Alloc>
   ::difference_type _Off,
  _String_iterator<_Elem, _Traits, _Alloc> _Next)
 {
 return (_Next += _Off);
 }


template<class _Elem,
 class _Alloc>
 class _String_val
  : public _Container_base
 {
public:
#line 462 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring"
 typedef typename _Alloc::template rebind<_Elem>::other _Alty;

 _String_val(_Alty _Al = _Alty())
  : _Alval(_Al)
  {
  typename _Alloc::template rebind<_Container_proxy>::other
   _Alproxy(_Alval);
  this->_Myproxy = _Alproxy.allocate(1);
  _Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 ~_String_val()
  {
  typename _Alloc::template rebind<_Container_proxy>::other
   _Alproxy(_Alval);
  this->_Orphan_all();
  _Dest_val(_Alproxy, this->_Myproxy);
  _Alproxy.deallocate(this->_Myproxy, 1);
  this->_Myproxy = 0;
  }


 typedef typename _Alty::size_type size_type;
 typedef typename _Alty::difference_type difference_type;
 typedef typename _Alty::pointer pointer;
 typedef typename _Alty::const_pointer const_pointer;
 typedef typename _Alty::reference reference;
 typedef typename _Alty::const_reference const_reference;
 typedef typename _Alty::value_type value_type;

 enum
  {
  _BUF_SIZE = 16 / sizeof (_Elem) < 1 ? 1
   : 16 / sizeof (_Elem)};
 enum
  {
  _ALLOC_MASK = sizeof (_Elem) <= 1 ? 15
   : sizeof (_Elem) <= 2 ? 7
   : sizeof (_Elem) <= 4 ? 3
   : sizeof (_Elem) <= 8 ? 1 : 0};

 union _Bxty
  {
  _Elem _Buf[_BUF_SIZE];
  _Elem *_Ptr;
  char _Alias[_BUF_SIZE];
  } _Bx;

 size_type _Mysize;
 size_type _Myres;
 _Alty _Alval;
 };


template<class _Elem,
 class _Traits,
 class _Ax>
 class basic_string
  : public _String_val<_Elem, _Ax>
 {
public:
 typedef basic_string<_Elem, _Traits, _Ax> _Myt;
 typedef _String_val<_Elem, _Ax> _Mybase;
 typedef typename _Mybase::_Alty _Alloc;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef typename _Alloc::pointer pointer;
 typedef typename _Alloc::const_pointer const_pointer;
 typedef typename _Alloc::reference reference;
 typedef typename _Alloc::const_reference const_reference;
 typedef typename _Alloc::value_type value_type;

 typedef _String_iterator<_Elem, _Traits, _Alloc> iterator;
 typedef _String_const_iterator<_Elem, _Traits, _Alloc> const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 basic_string(const _Myt& _Right)
  : _Mybase(_Right._Alval)
  {
  _Tidy();
  assign(_Right, 0, npos);
  }

 basic_string()
  : _Mybase()
  {
  _Tidy();
  }

 explicit basic_string(const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  }

 basic_string(const _Myt& _Right, size_type _Roff,
  size_type _Count = npos)
  : _Mybase(_Right._Alval)
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
  const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(const _Elem *_Ptr, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(size_type _Count, _Elem _Ch)
  : _Mybase()
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 template<class _It>
  basic_string(_It _First, _It _Last)
  : _Mybase()
  {
  _Tidy();
  _Construct(_First, _Last, _Iter_cat(_First));
  }

 template<class _It>
  basic_string(_It _First, _It _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  _Construct(_First, _Last, _Iter_cat(_First));
  }

 template<class _It>
  void _Construct(_It _Count,
   _It _Ch, _Int_iterator_tag)
  {
  assign((size_type)_Count, (_Elem)_Ch);
  }

 template<class _It>
  void _Construct(_It _First,
   _It _Last, input_iterator_tag)
  {
  try {
  for (; _First != _Last; ++_First)
   append((size_type)1, (_Elem)*_First);
  } catch (...) {
  _Tidy(true);
  throw;
  }
  }

 template<class _It>
  void _Construct(_It _First,
   _It _Last, forward_iterator_tag)
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 658);
  size_type _Count = 0;
  _Distance(_First, _Last, _Count);
  reserve(_Count);

  try {
  for (; _First != _Last; ++_First)
   append((size_type)1, (_Elem)*_First);
  } catch (...) {
  _Tidy(true);
  throw;
  }
  }

 basic_string(const_pointer _First, const_pointer _Last)
  : _Mybase()
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 675);
  _Tidy();
  if (_First != _Last)
   assign(&*_First, _Last - _First);
  }

 basic_string(const_pointer _First, const_pointer _Last,
  const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 685);
  _Tidy();
  if (_First != _Last)
   assign(&*_First, _Last - _First);
  }

 basic_string(const_iterator _First, const_iterator _Last)
  : _Mybase()
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 694);
  _Tidy();
  if (_First != _Last)
   assign(&*_First, _Last - _First);
  }

 basic_string(_Myt&& _Right)
  : _Mybase(::std:: forward<_Alloc>(_Right._Alval))
  {
  _Tidy();
  assign(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  return (assign(::std:: forward<_Myt>(_Right)));
  }

 _Myt& assign(_Myt&& _Right)
  {
  if (this == &_Right)
   ;
  else if (get_allocator() != _Right.get_allocator()
   && this->_BUF_SIZE <= _Right._Myres)
   *this = _Right;
  else
   {
   _Tidy(true);
   if (_Right._Myres < this->_BUF_SIZE)
    _Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
     _Right._Mysize + 1);
   else
    {
    this->_Bx._Ptr = _Right._Bx._Ptr;
    _Right._Bx._Ptr = 0;
    }
   this->_Mysize = _Right._Mysize;
   this->_Myres = _Right._Myres;

   _Right._Mysize = 0;
   _Right._Myres = 0;
   }
  return (*this);
  }

 void swap(_Myt&& _Right)
  {
  if (this != &_Right)
   {

   this->_Orphan_all();
   this->_Swap_all(_Right);


   assign(::std:: forward<_Myt>(_Right));
   }
  }

 ~basic_string()
  {
  _Tidy(true);
  }

 typedef _Traits traits_type;
 typedef _Alloc allocator_type;

          static const size_type npos;

 _Myt& operator=(const _Myt& _Right)
  {
  return (assign(_Right));
  }

 _Myt& operator=(const _Elem *_Ptr)
  {
  return (assign(_Ptr));
  }

 _Myt& operator=(_Elem _Ch)
  {
  return (assign(1, _Ch));
  }

 _Myt& operator+=(const _Myt& _Right)
  {
  return (append(_Right));
  }

 _Myt& operator+=(const _Elem *_Ptr)
  {
  return (append(_Ptr));
  }

 _Myt& operator+=(_Elem _Ch)
  {
  return (append((size_type)1, _Ch));
  }

 _Myt& append(const _Myt& _Right)
  {
  return (append(_Right, 0, npos));
  }

 _Myt& append(const _Myt& _Right,
  size_type _Roff, size_type _Count)
  {
  if (_Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::copy(_Myptr() + this->_Mysize,
    _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr, size_type _Count)
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 821);


  if (_Inside(_Ptr))
   return (append(*this, _Ptr - _Myptr(), _Count));
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::copy(_Myptr() + this->_Mysize, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 840);
  return (append(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& append(size_type _Count, _Elem _Ch)
  {
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Chassign(this->_Mysize, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 template<class _It>
  _Myt& append(_It _First, _It _Last)
  {
  return (_Append(_First, _Last, _Iter_cat(_First)));
  }

 template<class _It>
  _Myt& _Append(_It _Count, _It _Ch, _Int_iterator_tag)
  {
  return (append((size_type)_Count, (_Elem)_Ch));
  }

 template<class _It>
  _Myt& _Append(_It _First, _It _Last, input_iterator_tag)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& append(const_pointer _First, const_pointer _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& append(const_iterator _First, const_iterator _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& assign(const _Myt& _Right)
  {
  return (assign(_Right, 0, npos));
  }

 _Myt& assign(const _Myt& _Right,
  size_type _Roff, size_type _Count)
  {
  if (_Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Count < _Num)
   _Num = _Count;

  if (this == &_Right)
   erase((size_type)(_Roff + _Num)), erase(0, _Roff);
  else if (_Grow(_Num))
   {
   _Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr, size_type _Count)
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 914);


  if (_Inside(_Ptr))
   return (assign(*this, _Ptr - _Myptr(), _Count));

  if (_Grow(_Count))
   {
   _Traits::copy(_Myptr(), _Ptr, _Count);
   _Eos(_Count);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 930);
  return (assign(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& assign(size_type _Count, _Elem _Ch)
  {
  if (_Count == npos)
   _Xlen();

  if (_Grow(_Count))
   {
   _Chassign(0, _Count, _Ch);
   _Eos(_Count);
   }
  return (*this);
  }

 template<class _It>
  _Myt& assign(_It _First, _It _Last)
  {
  return (_Assign(_First, _Last, _Iter_cat(_First)));
  }

 template<class _It>
  _Myt& _Assign(_It _Count, _It _Ch, _Int_iterator_tag)
  {
  return (assign((size_type)_Count, (_Elem)_Ch));
  }

 template<class _It>
  _Myt& _Assign(_It _First, _It _Last, input_iterator_tag)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& assign(const_pointer _First, const_pointer _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& assign(const_iterator _First, const_iterator _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& insert(size_type _Off, const _Myt& _Right)
  {
  return (insert(_Off, _Right, 0, npos));
  }

 _Myt& insert(size_type _Off,
  const _Myt& _Right, size_type _Roff, size_type _Count)
  {
  if (this->_Mysize < _Off || _Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off, this->_Mysize - _Off);
   if (this == &_Right)
    _Traits::move(_Myptr() + _Off,
     _Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
      _Count);
   else
    _Traits::copy(_Myptr() + _Off,
     _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off,
  const _Elem *_Ptr, size_type _Count)
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1012);


  if (_Inside(_Ptr))
   return (insert(_Off, *this,
    _Ptr - _Myptr(), _Count));
  if (this->_Mysize < _Off)
   _Xran();
  if (npos - this->_Mysize <= _Count)
   _Xlen();
  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off, this->_Mysize - _Off);
   _Traits::copy(_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off, const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1035);
  return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& insert(size_type _Off,
  size_type _Count, _Elem _Ch)
  {
  if (this->_Mysize < _Off)
   _Xran();
  if (npos - this->_Mysize <= _Count)
   _Xlen();
  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off, this->_Mysize - _Off);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 iterator insert(const_iterator _Where)
  {
  return (insert(_Where, _Elem()));
  }

 iterator insert(const_iterator _Where, _Elem _Ch)
  {
  size_type _Off = _Pdif(_Where, begin());
  insert(_Off, 1, _Ch);
  return (begin() + _Off);
  }

 void insert(const_iterator _Where, size_type _Count, _Elem _Ch)
  {
  size_type _Off = _Pdif(_Where, begin());
  insert(_Off, _Count, _Ch);
  }

 template<class _It>
  void insert(const_iterator _Where, _It _First, _It _Last)
  {
  _Insert(_Where, _First, _Last, _Iter_cat(_First));
  }

 template<class _It>
  void _Insert(const_iterator _Where, _It _Count, _It _Ch,
   _Int_iterator_tag)
  {
  insert(_Where, (size_type)_Count, (_Elem)_Ch);
  }

 template<class _It>
  void _Insert(const_iterator _Where, _It _First, _It _Last,
   input_iterator_tag)
  {
  replace(_Where, _Where, _First, _Last);
  }

 void insert(const_iterator _Where,
  const_pointer _First, const_pointer _Last)
  {
  replace(_Where, _Where, _First, _Last);
  }

 void insert(const_iterator _Where,
  const_iterator _First, const_iterator _Last)
  {
  replace(_Where, _Where, _First, _Last);
  }

 _Myt& erase(size_type _Off = 0,
  size_type _Count = npos)
  {
  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _Count)
   _Count = this->_Mysize - _Off;
  if (0 < _Count)
   {
   _Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
    this->_Mysize - _Off - _Count);
   size_type _Newsize = this->_Mysize - _Count;
   _Eos(_Newsize);
   }
  return (*this);
  }

 iterator erase(const_iterator _Where)
  {
  size_type _Count = _Pdif(_Where, begin());
  erase(_Count, 1);
  return (iterator(_Myptr() + _Count, this));
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
  size_type _Count = _Pdif(_First, begin());
  erase(_Count, _Pdif(_Last, _First));
  return (iterator(_Myptr() + _Count, this));
  }

 void clear()
  {
  _Eos(0);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
  {
  return (replace(_Off, _N0, _Right, 0, npos));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
  {
  if (this->_Mysize < _Off || _Right.size() < _Roff)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - _Count <= this->_Mysize - _N0)
   _Xlen();

  size_type _Nm = this->_Mysize - _N0 - _Off;
  size_type _Newsize = this->_Mysize + _Count - _N0;
  if (this->_Mysize < _Newsize)
   _Grow(_Newsize);

  if (this != &_Right)
   {
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off + _N0, _Nm);
   _Traits::copy(_Myptr() + _Off,
    _Right._Myptr() + _Roff, _Count);
   }
  else if (_Count <= _N0)
   {
   _Traits::move(_Myptr() + _Off,
    _Myptr() + _Roff, _Count);
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off + _N0, _Nm);
   }
  else if (_Roff <= _Off)
   {
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off + _N0, _Nm);
   _Traits::move(_Myptr() + _Off,
    _Myptr() + _Roff, _Count);
   }
  else if (_Off + _N0 <= _Roff)
   {
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off + _N0, _Nm);
   _Traits::move(_Myptr() + _Off,
    _Myptr() + (_Roff + _Count - _N0), _Count);
   }
  else
   {
   _Traits::move(_Myptr() + _Off,
    _Myptr() + _Roff, _N0);
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off + _N0, _Nm);
   _Traits::move(_Myptr() + _Off + _N0, _Myptr() + _Roff + _Count,
    _Count - _N0);
   }

  _Eos(_Newsize);
  return (*this);
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count)
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1213);


  if (_Inside(_Ptr))
   return (replace(_Off, _N0, *this,
    _Ptr - _Myptr(), _Count));
  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;
  if (npos - _Count <= this->_Mysize - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off + _N0, _Nm);
  size_type _Num;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num = this->_Mysize + _Count - _N0))
   {
   if (_N0 < _Count)
    _Traits::move(_Myptr() + _Off + _Count,
     _Myptr() + _Off + _N0, _Nm);
   _Traits::copy(_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1245);
  return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, size_type _Count, _Elem _Ch)
  {
  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;
  if (npos - _Count <= this->_Mysize - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off + _N0, _Nm);
  size_type _Num;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num = this->_Mysize + _Count - _N0))
   {
   if (_N0 < _Count)
    _Traits::move(_Myptr() + _Off + _Count,
     _Myptr() + _Off + _N0, _Nm);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Myt& _Right)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr, size_type _Count)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  size_type _Count, _Elem _Ch)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
  }

 template<class _It>
  _Myt& replace(const_iterator _First, const_iterator _Last,
   _It _First2, _It _Last2)
  {
  return (_Replace(_First, _Last,
   _First2, _Last2, _Iter_cat(_First2)));
  }

 template<class _It>
  _Myt& _Replace(const_iterator _First, const_iterator _Last,
   _It _Count, _It _Ch, _Int_iterator_tag)
  {
  return (replace(_First, _Last, (size_type)_Count, (_Elem)_Ch));
  }

 template<class _It>
  _Myt& _Replace(const_iterator _First, const_iterator _Last,
   _It _First2, _It _Last2, input_iterator_tag)
  {
  _Myt _Right(_First2, _Last2);
  replace(_First, _Last, _Right);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_pointer _First2, const_pointer _Last2)
  {
  if (_First2 == _Last2)
   erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
  else
   replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_iterator _First2, const_iterator _Last2)
  {
  if (_First2 == _Last2)
   erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
  else
   replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 iterator begin()
  {
  return (iterator(_Myptr(), this));
  }

 const_iterator begin() const
  {
  return (const_iterator(_Myptr(), this));
  }

 iterator end()
  {
  return (iterator(_Myptr() + this->_Mysize, this));
  }

 const_iterator end() const
  {
  return (const_iterator(_Myptr() + this->_Mysize, this));
  }

 reverse_iterator rbegin()
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend()
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const
  {
  return (const_reverse_iterator(begin()));
  }


 const_iterator cbegin() const
  {
  return (((const _Myt *)this)->begin());
  }

 const_iterator cend() const
  {
  return (((const _Myt *)this)->end());
  }

 const_reverse_iterator crbegin() const
  {
  return (((const _Myt *)this)->rbegin());
  }

 const_reverse_iterator crend() const
  {
  return (((const _Myt *)this)->rend());
  }

 void shrink_to_fit()
  {
  if (size() < capacity())
   {
   _Myt _Tmp(*this);
   swap(_Tmp);
   }
  }


 reference at(size_type _Off)
  {
  if (this->_Mysize <= _Off)
   _Xran();
  return (_Myptr()[_Off]);
  }

 const_reference at(size_type _Off) const
  {
  if (this->_Mysize <= _Off)
   _Xran();
  return (_Myptr()[_Off]);
  }

 reference operator[](size_type _Off)
  {


  if (this->_Mysize <= _Off)

   _Debug_message(L"string subscript out of range", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1441);





  return (_Myptr()[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {

  if (this->_Mysize < _Off)
   _Debug_message(L"string subscript out of range", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1454);





  return (_Myptr()[_Off]);
  }

 void push_back(_Elem _Ch)
  {
  insert(end(), _Ch);
  }


 void pop_back()
  {
  erase(this->_Mysize - 1);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }


 const _Elem *c_str() const
  {
  return (_Myptr());
  }

 const _Elem *data() const
  {
  return (c_str());
  }

 size_type length() const
  {
  return (this->_Mysize);
  }

 size_type size() const
  {
  return (this->_Mysize);
  }

 size_type max_size() const
  {
  size_type _Num = this->_Alval.max_size();
  return (_Num <= 1 ? 1 : _Num - 1);
  }

 void resize(size_type _Newsize)
  {
  resize(_Newsize, _Elem());
  }

 void resize(size_type _Newsize, _Elem _Ch)
  {
  if (_Newsize <= this->_Mysize)
   erase(_Newsize);
  else
   append(_Newsize - this->_Mysize, _Ch);
  }

 size_type capacity() const
  {
  return (this->_Myres);
  }

 void reserve(size_type _Newcap = 0)
  {
  if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
   {
   size_type _Size = this->_Mysize;
   if (_Grow(_Newcap, true))
    _Eos(_Size);
   }
  }

 bool empty() const
  {
  return (this->_Mysize == 0);
  }

 __declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))

 size_type copy(_Elem *_Ptr,
  size_type _Count, size_type _Off = 0) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1561);


  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _Count)
   _Count = this->_Mysize - _Off;
  _Traits::copy(_Ptr, _Myptr() + _Off, _Count);
  return (_Count);
  }

 size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
  size_type _Count, size_type _Off = 0) const
  {

  if (_Count != 0)
   _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1577);


  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _Count)
   _Count = this->_Mysize - _Off;
  _Traits::_Copy_s(_Dest, _Dest_size, _Myptr() + _Off, _Count);
  return (_Count);
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->_Alval == _Right._Alval)
   {

   this->_Swap_all(_Right);


   ::std:: swap(this->_Bx, _Right._Bx);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   ::std:: swap(this->_Myres, _Right._Myres);
   }
  else
   {
   _Myt _Tmp = *this;

   *this = _Right;
   _Right = _Tmp;
   }
  }

 size_type find(const _Myt& _Right, size_type _Off = 0) const
  {
  return (find(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1621);


  if (_Count == 0 && _Off <= this->_Mysize)
   return (_Off);

  size_type _Nm;
  if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
   {
   const _Elem *_Uptr, *_Vptr;
   for (_Nm -= _Count - 1, _Vptr = _Myptr() + _Off;
    (_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
    _Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
    if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - _Myptr());
   }

  return (npos);
  }

 size_type find(const _Elem *_Ptr, size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1643);
  return (find(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find(_Elem _Ch, size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type rfind(const _Myt& _Right, size_type _Off = npos) const
  {
  return (rfind(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type rfind(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1662);


  if (_Count == 0)
   return (_Off < this->_Mysize ? _Off
    : this->_Mysize);
  if (_Count <= this->_Mysize)
   {
   const _Elem *_Uptr = _Myptr() +
    (_Off < this->_Mysize - _Count ? _Off
     : this->_Mysize - _Count);
   for (; ; --_Uptr)
    if (_Traits::eq(*_Uptr, *_Ptr)
     && _Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - _Myptr());
    else if (_Uptr == _Myptr())
     break;
   }

  return (npos);
  }

 size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1686);
  return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type rfind(_Elem _Ch, size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_of(const _Myt& _Right,
  size_type _Off = 0) const
  {
  return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_first_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1706);


  if (0 < _Count && _Off < this->_Mysize)
   {
   const _Elem *const _Vptr = _Myptr() + this->_Mysize;
   for (const _Elem *_Uptr = _Myptr() + _Off; _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - _Myptr());
   }

  return (npos);
  }

 size_type find_first_of(const _Elem *_Ptr, size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1722);
  return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_of(_Elem _Ch, size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_of(const _Myt& _Right,
  size_type _Off = npos) const
  {
  return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1742);


  if (0 < _Count && 0 < this->_Mysize)
   {
   const _Elem *_Uptr = _Myptr()
    + (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - _Myptr());
    else if (_Uptr == _Myptr())
     break;
   }

  return (npos);
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1762);
  return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_of(_Elem _Ch, size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_not_of(const _Myt& _Right,
  size_type _Off = 0) const
  {
  return (find_first_not_of(_Right._Myptr(), _Off,
   _Right.size()));
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1783);


  if (_Off < this->_Mysize)
   {
   const _Elem *const _Vptr = _Myptr() + this->_Mysize;
   for (const _Elem *_Uptr = _Myptr() + _Off; _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - _Myptr());
   }
  return (npos);
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1799);
  return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_not_of(_Elem _Ch, size_type _Off = 0) const
  {
  return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_not_of(const _Myt& _Right,
  size_type _Off = npos) const
  {
  return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1819);


  if (0 < this->_Mysize)
   {
   const _Elem *_Uptr = _Myptr()
    + (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - _Myptr());
    else if (_Uptr == _Myptr())
     break;
   }
  return (npos);
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1838);
  return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_not_of(_Elem _Ch, size_type _Off = npos) const
  {
  return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 _Myt substr(size_type _Off = 0, size_type _Count = npos) const
  {
  return (_Myt(*this, _Off, _Count, get_allocator()));
  }

 int compare(const _Myt& _Right) const
  {
  return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
  }

 int compare(size_type _Off, size_type _N0,
  const _Myt& _Right) const
  {
  return (compare(_Off, _N0, _Right, 0, npos));
  }

 int compare(size_type _Off,
  size_type _N0, const _Myt& _Right,
  size_type _Roff, size_type _Count) const
  {
  if (_Right.size() < _Roff)
   _Xran();
  if (_Right._Mysize - _Roff < _Count)
   _Count = _Right._Mysize - _Roff;
  return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
  }

 int compare(const _Elem *_Ptr) const
  {
  _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1876);
  return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
  {
  _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1882);
  return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xstring", 1891);


  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;

  size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
   _N0 < _Count ? _N0 : _Count);
  return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
   : _N0 == _Count ? 0 : +1);
  }

 allocator_type get_allocator() const
  {
  return (this->_Alval);
  }

 void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
  {
  if (_Count == 1)
   _Traits::assign(*(_Myptr() + _Off), _Ch);
  else
   _Traits::assign(_Myptr() + _Off, _Count, _Ch);
  }

 void _Copy(size_type _Newsize, size_type _Oldlen)
  {
  size_type _Newres = _Newsize | this->_ALLOC_MASK;
  if (max_size() < _Newres)
   _Newres = _Newsize;
  else if (this->_Myres / 2 <= _Newres / 3)
   ;
  else if (this->_Myres <= max_size() - this->_Myres / 2)
   _Newres = this->_Myres
    + this->_Myres / 2;
  else
   _Newres = max_size();

  _Elem *_Ptr;
  try {
   _Ptr = this->_Alval.allocate(_Newres + 1);
  } catch (...) {
   _Newres = _Newsize;
   try {
    _Ptr = this->_Alval.allocate(_Newres + 1);
   } catch (...) {
   _Tidy(true);
   throw;
   }
  }

  if (0 < _Oldlen)
   _Traits::copy(_Ptr, _Myptr(), _Oldlen);
  _Tidy(true);
  this->_Bx._Ptr = _Ptr;
  this->_Myres = _Newres;
  _Eos(_Oldlen);
  }

 void _Eos(size_type _Newsize)
  {
  _Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());
  }

 bool _Grow(size_type _Newsize,
  bool _Trim = false)
  {
  if (max_size() < _Newsize)
   _Xlen();
  if (this->_Myres < _Newsize)
   _Copy(_Newsize, this->_Mysize);
  else if (_Trim && _Newsize < this->_BUF_SIZE)
   _Tidy(true,
    _Newsize < this->_Mysize ? _Newsize : this->_Mysize);
  else if (_Newsize == 0)
   _Eos(0);
  return (0 < _Newsize);
  }

 bool _Inside(const _Elem *_Ptr)
  {
  if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)
   return (false);
  else
   return (true);
  }

 static size_type _Pdif(const_iterator _P2,
  const_iterator _P1)
  {
  return ((_P2)._Ptr == 0 ? 0 : _P2 - _P1);
  }

 void _Tidy(bool _Built = false,
  size_type _Newsize = 0)
  {
  if (!_Built)
   ;
  else if (this->_BUF_SIZE <= this->_Myres)
   {
   _Elem *_Ptr = this->_Bx._Ptr;
   if (0 < _Newsize)
    _Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);
   this->_Alval.deallocate(_Ptr, this->_Myres + 1);
   }
  this->_Myres = this->_BUF_SIZE - 1;
  _Eos(_Newsize);
  }

 _Elem *_Myptr()
  {
  return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
   : this->_Bx._Buf);
  }

 const _Elem *_Myptr() const
  {
  return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
   : this->_Bx._Buf);
  }

 __declspec(noreturn) void _Xlen() const
  {
  _Xlength_error("string too long");
  }

 __declspec(noreturn) void _Xran() const
  {
  _Xout_of_range("invalid string position");
  }
 };


template<class _Elem,
 class _Traits,
 class _Alloc>
          const typename basic_string<_Elem, _Traits, _Alloc>::size_type
  basic_string<_Elem, _Traits, _Alloc>::npos =
   (typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);



template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_string<_Elem, _Traits, _Alloc>&& _Left,
  basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 _Right.swap(_Left);
 }

typedef basic_string<char, char_traits<char>, allocator<char> >
 string;
typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >
 wstring;


typedef basic_string<char16_t, char_traits<char16_t>, allocator<char16_t> >
 u16string;
typedef basic_string<char32_t, char_traits<char32_t>, allocator<char32_t> >
 u32string;

}

#pragma warning(pop)
#pragma pack(pop)
#line 7 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdexcept"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)
namespace std {





class logic_error
 : public exception
 {
public:
 typedef exception _Mybase;

 explicit logic_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit logic_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 42 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdexcept"
 };


class domain_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit domain_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit domain_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 70 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdexcept"
 };


class invalid_argument
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit invalid_argument(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit invalid_argument(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 98 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdexcept"
 };


class length_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit length_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit length_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 126 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdexcept"
 };


class out_of_range
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit out_of_range(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit out_of_range(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 154 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdexcept"
 };


class runtime_error
 : public exception
 {
public:
 typedef exception _Mybase;

 explicit runtime_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit runtime_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 182 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdexcept"
 };


class overflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit overflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit overflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 210 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdexcept"
 };


class underflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit underflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit underflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 238 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdexcept"
 };


class range_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit range_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit range_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 266 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdexcept"
 };
}
#pragma warning(pop)
#pragma pack(pop)
#line 8 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\typeinfo"
#line 26 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\typeinfo"
#pragma pack(push,_CRT_PACKING)
#line 36 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\typeinfo"
struct __type_info_node {
    void *_MemPtr;
    __type_info_node* _Next;
};

extern __type_info_node __type_info_root_node;

class type_info {
public:

 size_t hash_code() const throw ()
  {
  const char *_Keyval = name();
  size_t _Val = 2166136261U;
  size_t _First = 0;
  size_t _Last = :: strlen(_Keyval);
  size_t _Stride = 1 + _Last / 10;

  for(; _First < _Last; _First += _Stride)
   _Val = 16777619U * _Val ^ (size_t)_Keyval[_First];
  return (_Val);
  }





    virtual ~type_info();
    __declspec(dllimport) bool operator==(const type_info& _Rhs) const;
    __declspec(dllimport) bool operator!=(const type_info& _Rhs) const;
    __declspec(dllimport) int before(const type_info& _Rhs) const;
    __declspec(dllimport) const char* name(__type_info_node* __ptype_info_node = &__type_info_root_node) const;
    __declspec(dllimport) const char* raw_name() const;
private:
    void *_M_data;
    char _M_d_name[1];
                       type_info(const type_info& _Rhs);
    type_info& operator=(const type_info& _Rhs);
    __declspec(dllimport) static const char *__cdecl _Name_base(const type_info *,__type_info_node* __ptype_info_node);
    __declspec(dllimport) static void __cdecl _Type_info_dtor(type_info *);
};



 namespace std {

using ::type_info;

 }





 namespace std {

class __declspec(dllimport) bad_cast : public exception {
public:
#line 104 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\typeinfo"
                       bad_cast(const char * _Message = "bad cast");
                       bad_cast(const bad_cast &);
    virtual ~bad_cast();

};

class __declspec(dllimport) bad_typeid : public exception {
public:
#line 122 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\typeinfo"
                       bad_typeid(const char * _Message = "bad typeid");
                       bad_typeid(const bad_typeid &);
    virtual ~bad_typeid();


};

class __declspec(dllimport) __non_rtti_object : public bad_typeid {
public:
#line 141 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\typeinfo"
                       __non_rtti_object(const char * _Message);
                       __non_rtti_object(const __non_rtti_object &);
    virtual ~__non_rtti_object();

};

 }
#line 210 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\typeinfo"
#pragma pack(pop)
#line 9 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocinfo"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocinfo.h"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ctype.h"
#line 19 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ctype.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 19 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ctype.h"



extern "C" {
#line 92 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ctype.h"
               __declspec(dllimport) int __cdecl _isctype( int _C, int _Type);
               __declspec(dllimport) int __cdecl _isctype_l( int _C, int _Type, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalpha( int _C);
               __declspec(dllimport) int __cdecl _isalpha_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isupper( int _C);
               __declspec(dllimport) int __cdecl _isupper_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl islower( int _C);
               __declspec(dllimport) int __cdecl _islower_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isdigit( int _C);
               __declspec(dllimport) int __cdecl _isdigit_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isxdigit( int _C);
               __declspec(dllimport) int __cdecl _isxdigit_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isspace( int _C);
               __declspec(dllimport) int __cdecl _isspace_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl ispunct( int _C);
               __declspec(dllimport) int __cdecl _ispunct_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalnum( int _C);
               __declspec(dllimport) int __cdecl _isalnum_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isprint( int _C);
               __declspec(dllimport) int __cdecl _isprint_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isgraph( int _C);
               __declspec(dllimport) int __cdecl _isgraph_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iscntrl( int _C);
               __declspec(dllimport) int __cdecl _iscntrl_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl toupper( int _C);
                                  __declspec(dllimport) int __cdecl tolower( int _C);
                                  __declspec(dllimport) int __cdecl _tolower( int _C);
               __declspec(dllimport) int __cdecl _tolower_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl _toupper( int _C);
               __declspec(dllimport) int __cdecl _toupper_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl __isascii( int _C);
               __declspec(dllimport) int __cdecl __toascii( int _C);
               __declspec(dllimport) int __cdecl __iscsymf( int _C);
               __declspec(dllimport) int __cdecl __iscsym( int _C);
#line 207 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ctype.h"
__declspec(dllimport) int __cdecl _chvalidator( int _Ch, int _Mask);
#line 259 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ctype.h"
__declspec(dllimport) int __cdecl _chvalidator_l( _locale_t, int _Ch, int _Mask);
#line 379 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ctype.h"
}
#line 5 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocinfo.h"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\locale.h"
#line 19 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\locale.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 19 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\locale.h"






#pragma pack(push,_CRT_PACKING)


extern "C" {
#line 55 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\locale.h"
struct lconv {
        char *decimal_point;
        char *thousands_sep;
        char *grouping;
        char *int_curr_symbol;
        char *currency_symbol;
        char *mon_decimal_point;
        char *mon_thousands_sep;
        char *mon_grouping;
        char *positive_sign;
        char *negative_sign;
        char int_frac_digits;
        char frac_digits;
        char p_cs_precedes;
        char p_sep_by_space;
        char n_cs_precedes;
        char n_sep_by_space;
        char p_sign_posn;
        char n_sign_posn;
        wchar_t *_W_decimal_point;
        wchar_t *_W_thousands_sep;
        wchar_t *_W_int_curr_symbol;
        wchar_t *_W_currency_symbol;
        wchar_t *_W_mon_decimal_point;
        wchar_t *_W_mon_thousands_sep;
        wchar_t *_W_positive_sign;
        wchar_t *_W_negative_sign;
        };
#line 107 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\locale.h"
                   __declspec(dllimport) int __cdecl _configthreadlocale( int _Flag);
                   __declspec(dllimport) char * __cdecl setlocale( int _Category, const char * _Locale);
                   __declspec(dllimport) struct lconv * __cdecl localeconv(void);
                   __declspec(dllimport) _locale_t __cdecl _get_current_locale(void);
                   __declspec(dllimport) _locale_t __cdecl _create_locale( int _Category, const char * _Locale);
__declspec(dllimport) void __cdecl _free_locale( _locale_t _Locale);


               __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_get_current_locale" " instead. See online help for details.")) __declspec(dllimport) _locale_t __cdecl __get_current_locale(void);
               __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_create_locale" " instead. See online help for details.")) __declspec(dllimport) _locale_t __cdecl __create_locale( int _Category, const char * _Locale);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_free_locale" " instead. See online help for details.")) __declspec(dllimport) void __cdecl __free_locale( _locale_t _Locale);
#line 129 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\locale.h"
}


#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocinfo.h"






#pragma pack(push,_CRT_PACKING)



extern "C" {
#line 51 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocinfo.h"
typedef struct _Collvec
 {
 unsigned long _Hand;
 unsigned int _Page;
 } _Collvec;

typedef struct _Ctypevec
 {
 unsigned long _Hand;
 unsigned int _Page;
 const short *_Table;
 int _Delfl;
 } _Ctypevec;

typedef struct _Cvtvec
 {
 unsigned long _Hand;
 unsigned int _Page;
 } _Cvtvec;


__declspec(dllimport) _Collvec __cdecl _Getcoll();
__declspec(dllimport) _Ctypevec __cdecl _Getctype();

__declspec(dllimport) _Cvtvec __cdecl _Getcvt();

__declspec(dllimport) int __cdecl _Getdateorder();





__declspec(dllimport) int __cdecl _Mbrtowc( wchar_t *, const char *, size_t, mbstate_t *, const _Cvtvec *);


__declspec(dllimport) float __cdecl _Stof(const char *, char **, long);
__declspec(dllimport) double __cdecl _Stod(const char *, char **, long);
__declspec(dllimport) long double __cdecl _Stold(const char *, char **,
  long);
__declspec(dllimport) int __cdecl _Strcoll(const char *, const char *,
 const char *, const char *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Strxfrm(
                                                    char * _String1,
         char * _End1, const char *, const char *, const _Collvec *);
__declspec(dllimport) int __cdecl _Tolower(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Toupper(int, const _Ctypevec *);

__declspec(dllimport) int __cdecl _Wcrtomb( char *, wchar_t, mbstate_t *, const _Cvtvec *);

__declspec(dllimport) int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
 const wchar_t *, const wchar_t *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Wcsxfrm(
                                                    wchar_t *_String1,
         wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

__declspec(dllimport) short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
__declspec(dllimport) const wchar_t * __cdecl _Getwctypes(const wchar_t *, const wchar_t *,
 short*, const _Ctypevec*);
__declspec(dllimport) wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);

}



extern "C" {
__declspec(dllimport) void *__cdecl _Gettnames();
__declspec(dllimport) char *__cdecl _Getdays();
__declspec(dllimport) char *__cdecl _Getmonths();
__declspec(dllimport) size_t __cdecl _Strftime(
                      char *, size_t _Maxsize,
                         const char *, const struct tm *, void *);
}





__declspec(dllimport) _locale_t __cdecl _GetLocaleForCP(unsigned int);


#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocinfo"




#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)
#pragma warning(disable:4412)

namespace std {


class __declspec(dllimport) _Timevec
 {
public:
                    _Timevec(void *_Ptr = 0)
  : _Timeptr(_Ptr)
  {
  }

                    _Timevec(const _Timevec& _Right)
  {
  *this = _Right;
  }

                    ~_Timevec()
  {
  free(_Timeptr);
  }

 _Timevec& operator=(const _Timevec& _Right)
  {
  _Timeptr = _Right._Timeptr;
  ((_Timevec *)&_Right)->_Timeptr = 0;
  return (*this);
  }

 void * _Getptr() const
  {
  return (_Timeptr);
  }

private:
 void *_Timeptr;
 };



#pragma warning(push)
#pragma warning(disable: 4412)

class __declspec(dllimport) _Locinfo
 {
public:
 typedef ::_Collvec _Collvec;
 typedef ::_Ctypevec _Ctypevec;
 typedef ::_Cvtvec _Cvtvec;
 typedef ::std:: _Timevec _Timevec;

    static void __cdecl _Locinfo_ctor(_Locinfo *,
  const char *);
    static void __cdecl _Locinfo_ctor(_Locinfo *, int,
  const char *);
    static void __cdecl _Locinfo_dtor(_Locinfo *);
    static _Locinfo& __cdecl _Locinfo_Addcats(_Locinfo *, int,
  const char *);

                    _Locinfo(const char *_Pch = "C")

        : _Lock(0)

        {
        if (_Pch == 0)
            throw runtime_error("bad locale name");
        _Locinfo_ctor(this, _Pch);
        }

                    _Locinfo(int _Cat, const char *_Pch)

        : _Lock(0)

        {
        if (_Pch == 0)
            throw runtime_error("bad locale name");
        _Locinfo_ctor(this, _Cat, _Pch);
        }

                    ~_Locinfo()
        {
        _Locinfo_dtor(this);
        }


 _Locinfo& _Addcats(int _Cat, const char *_Pch)
  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  return _Locinfo_Addcats(this, _Cat, _Pch);
  }


 const char * _Getname() const
  {
  return (_Newlocname._C_str());
  }

 _Collvec _Getcoll() const
  {
  return (::_Getcoll());
  }

 _Ctypevec _Getctype() const
  {
  return (::_Getctype());
  }

 _Cvtvec _Getcvt() const
  {
  return (::_Getcvt());
  }

 const lconv * _Getlconv() const
  {
  return (localeconv());
  }

 _Timevec _Gettnames() const
  {
  return (_Timevec(::_Gettnames()));
  }

 const char * _Getdays() const
  {
  const char *_Ptr = ::_Getdays();
  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Days = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Days._Empty() ? _Days._C_str()
   : ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    ":Thu:Thursday:Fri:Friday:Sat:Saturday");
  }

 const char * _Getmonths() const
  {
  const char *_Ptr = ::_Getmonths();
  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Months = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Months._Empty() ? _Months._C_str()
   : ":Jan:January:Feb:February:Mar:March"
    ":Apr:April:May:May:Jun:June"
    ":Jul:July:Aug:August:Sep:September"
    ":Oct:October:Nov:November:Dec:December");
  }

 const char * _Getfalse() const
  {
  return ("false");
  }

 const char * _Gettrue() const
  {
  return ("true");
  }

 int _Getdateorder() const
  {
  return ::_Getdateorder();
  }

private:
#line 189 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocinfo"
 _Lockit _Lock;


 _Yarn<char> _Days;
 _Yarn<char> _Months;
 _Yarn<char> _Oldlocname;
 _Yarn<char> _Newlocname;
 };
#pragma warning(pop)


template<class _Elem> inline
 int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (*_First1 < *_First2)
   return (-1);
  else if (*_First2 < *_First1)
   return (+1);
 return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
 }

template<> inline
 int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
 }


template<class _Elem> inline
 size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 size_t _Count = _Last2 - _First2;
 if (_Count <= (size_t)(_Last1 - _First1))
  ::memcpy_s((_First1), ((_Last1 - _First1) * sizeof(_Elem)), (_First2), (_Count * sizeof (_Elem)));

 return (_Count);
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                                                    char *_First1,
         char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                                                    wchar_t *_First1,
         wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }
}

#pragma warning(pop)
#pragma pack(pop)
#line 10 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xdebug"







#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)






namespace std {
struct _DebugHeapTag_t
 {
 int _Type;
 };
}
#line 33 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xdebug"
                     __declspec(dllimport) void * __cdecl operator new(size_t _Size,
 const ::std:: _DebugHeapTag_t&, char *, int)
  throw (...);

                     __declspec(dllimport) void * __cdecl operator new[](size_t _Size,
 const ::std:: _DebugHeapTag_t&, char *, int)
  throw (...);

__declspec(dllimport) void __cdecl operator delete(void *,
 const ::std:: _DebugHeapTag_t&, char *, int)
  throw ();

__declspec(dllimport) void __cdecl operator delete[](void *,
 const ::std:: _DebugHeapTag_t&, char *, int)
  throw ();

namespace std {

__declspec(dllimport) const _DebugHeapTag_t& __cdecl _DebugHeapTag_func();


template<class _Ty>
 void __cdecl _DebugHeapDelete(_Ty *_Ptr)
 {
 if (_Ptr != 0)
  {
  _Ptr->~_Ty();


  free(_Ptr);
  }
 }

}
#line 77 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xdebug"
#pragma warning(pop)
#pragma pack(pop)
#line 11 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)




#pragma warning(disable: 4412)

namespace std {

template<class _Dummy>
 class _Locbase
 {
public:
          static const int collate = ((1 << (1)) >> 1);
          static const int ctype = ((1 << (2)) >> 1);
          static const int monetary = ((1 << (3)) >> 1);
          static const int numeric = ((1 << (4)) >> 1);
          static const int time = ((1 << (5)) >> 1);
          static const int messages = ((1 << (6)) >> 1);
          static const int all = (((1 << (7)) >> 1) - 1);
          static const int none = 0;
 };

template<class _Dummy>
 const int _Locbase<_Dummy>::collate;
template<class _Dummy>
 const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
 const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
 const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
 const int _Locbase<_Dummy>::time;
template<class _Dummy>
 const int _Locbase<_Dummy>::messages;
template<class _Dummy>
 const int _Locbase<_Dummy>::all;
template<class _Dummy>
 const int _Locbase<_Dummy>::none;


class locale;
template<class _Facet>
 const _Facet& __cdecl use_facet(const locale&);

class locale
 : public _Locbase<int>
 {
public:
 typedef int category;


 class __declspec(dllimport) id
  {
 public:
                     id(size_t _Val = 0)
   : _Id(_Val)
   {
   }

                     operator size_t()
   {
   if (_Id == 0)
    {
    { ::std:: _Lockit _Lock(0);
     if (_Id == 0)
      _Id = ++_Id_cnt;
    }
    }
   return (_Id);
   }

 private:
  size_t _Id;

                          static int _Id_cnt;

                     id(const id&);
  id& operator=(const id&);
  };

 class _Locimp;


 class facet
  {
  friend class locale;
  friend class _Locimp;

 public:
  __declspec(dllimport) static size_t __cdecl _Getcat(const facet ** = 0,
   const locale * = 0)
   {
   return ((size_t)(-1));
   }

  __declspec(dllimport) void _Incref()
   {
   { ::std:: _Lockit _Lock(0);
    if (_Refs < (size_t)(-1))
     ++_Refs;
   }
   }

  __declspec(dllimport) facet * _Decref()
   {
   { ::std:: _Lockit _Lock(0);
    if (0 < _Refs && _Refs < (size_t)(-1))
     --_Refs;
    return (_Refs == 0 ? this : 0);
   }
   }

  void _Register()
   {




   _Facet_Register(this);

   }


  __declspec(dllimport) void *__cdecl operator new(size_t _Size)
   {
   return (operator new(_Size, _DebugHeapTag_func(),
    "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 141));
   }

  __declspec(dllimport) void *__cdecl operator new(size_t _Size,
   const _DebugHeapTag_t& _Tag, char *_File, int _Line)
   {
   return (::operator new(_Size, _Tag, _File, _Line));
   }

  __declspec(dllimport) void __cdecl operator delete(void *_Ptr,
   const _DebugHeapTag_t&, char *, int)
   {
   operator delete(_Ptr);
   }

  __declspec(dllimport) void __cdecl operator delete(void *_Ptr)
   {
   _DebugHeapDelete((facet *)_Ptr);
   }



  __declspec(dllimport) virtual ~facet()
   {
   }

 protected:
  __declspec(dllimport) explicit facet(size_t _Initrefs = 0)
   : _Refs(_Initrefs)
   {
   }

 private:
  size_t _Refs;

                     facet(const facet&);

  facet& operator=(const facet&);





  static void __cdecl _Facet_Register(facet *);

  };


#pragma warning(push)
#pragma warning(disable: 4275)

 class __declspec(dllimport) _Locimp
  : public facet
  {
 protected:
                     ~_Locimp()
  {
  _Locimp_dtor(this);
  }

 private:
  static void __cdecl _Locimp_dtor(_Locimp *);
  static void __cdecl _Locimp_Addfac(_Locimp *, facet *,
   size_t);
  static void __cdecl _Locimp_ctor(_Locimp *, const _Locimp&);

  friend class locale;

                     _Locimp(bool _Transparent = false)
   : locale::facet(1), _Facetvec(0), _Facetcount(0),
    _Catmask(none), _Xparent(_Transparent),
     _Name("*")
   {
   }

                     _Locimp(const _Locimp& _Right)
   : locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
    _Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
     _Name(_Right._Name.c_str())
   {
   _Locimp_ctor(this, _Right);
   }

  void _Addfac(facet *_Pfacet, size_t _Id)
   {
   _Locimp_Addfac(this, _Pfacet, _Id);
   }

  static _Locimp *__cdecl _Makeloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  static void __cdecl _Makewloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makeushloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makexloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  facet **_Facetvec;
  size_t _Facetcount;
  category _Catmask;
  bool _Xparent;
  _Yarn<char> _Name;

                          static _Locimp *_Clocptr;

private:
  _Locimp& operator=(const _Locimp&);
  };

#pragma warning(pop)

 template<class _Elem,
  class _Traits,
  class _Alloc>
  bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
   const basic_string<_Elem, _Traits, _Alloc>& _Right) const
  {
  const ::std:: collate<_Elem>& _Coll_fac =
   ::std:: use_facet< ::std:: collate<_Elem> >(*this);

  return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
   _Right.c_str(), _Right.c_str() + _Right.size()) < 0);
  }

 template<class _Facet>
  locale combine(const locale& _Loc) const
  {
  _Facet *_Facptr;

  try {
   _Facptr = (_Facet *)&::std:: use_facet<_Facet>(_Loc);
  } catch (...) {
   _Xruntime_error("locale::combine facet missing");
  }

  _Locimp *_Newimp = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 281) _Locimp(*_Ptr);
  _Newimp->_Addfac(_Facptr, _Facet::id);
  _Newimp->_Catmask = 0;
  _Newimp->_Name = "*";
  return (locale(_Newimp));
  }

 template<class _Facet>
  locale(const locale& _Loc, const _Facet *_Facptr)
   : _Ptr(new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 290) _Locimp(*_Loc._Ptr))
  {
  if (_Facptr != 0)
   {
   _Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
   if (_Facet::_Getcat() != (size_t)(-1))
    {
    _Ptr->_Catmask = 0;
    _Ptr->_Name = "*";
    }
   }
  }

 locale(_Uninitialized)
  {
  }

 locale(const locale& _Right) throw ()
  : _Ptr(_Right._Ptr)
  {
  _Ptr->_Incref();
  }

 locale() throw ()
  : _Ptr(_Init())
  {
  _Getgloballocale()->_Incref();
  }

 locale(const locale& _Loc, const locale& _Other,
  category _Cat)
  : _Ptr(new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 321) _Locimp(*_Loc._Ptr))
  {
  try {
  { _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
   _Locimp::_Makeloc(_Lobj._Addcats(_Cat & _Other._Ptr->_Catmask,
    _Other._Ptr->_Name.c_str()), _Cat, _Ptr, &_Other);
  }
  } catch (...) {
  ::std:: _DebugHeapDelete(_Ptr->_Decref());
  throw;
  }
  }

 explicit locale(const char *_Locname,
  category _Cat = all)
  : _Ptr(new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 336) _Locimp)
  {
  try {
  _Init();
  { _Locinfo _Lobj(_Cat, _Locname);
   if (_Badname(_Lobj))
    _Xruntime_error("bad locale name");
   _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
  }
  } catch (...) {
  ::std:: _DebugHeapDelete(_Ptr->_Decref());
  throw;
  }
  }

 locale(const locale& _Loc, const char *_Locname,
  category _Cat)
  : _Ptr(new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 353) _Locimp(*_Loc._Ptr))
  {
  try {
  { _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
   bool _Hadname = !_Badname(_Lobj);
   _Lobj._Addcats(_Cat, _Locname);

   if (_Hadname && _Badname(_Lobj))
    _Xruntime_error("bad locale name");
   _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
  }
  } catch (...) {
  ::std:: _DebugHeapDelete(_Ptr->_Decref());
  throw;
  }
  }


 explicit locale(const string& _Str,
  category _Cat = all)
  : _Ptr(new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 373) _Locimp)
  {
  try {
  _Init();
  _Locinfo _Lobj(_Cat, _Str.c_str());

  if (_Badname(_Lobj))
   _Xruntime_error("bad locale name");
  _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
  } catch (...) {
  ::std:: _DebugHeapDelete(_Ptr->_Decref());
  throw;
  }
  }

 locale(const locale& _Loc, const string& _Str,
  category _Cat)
  : _Ptr(new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 390) _Locimp(*_Loc._Ptr))
  {
  try {
  _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
  bool _Hadname = !_Badname(_Lobj);
  _Lobj._Addcats(_Cat, _Str.c_str());

  if (_Hadname && _Badname(_Lobj))
   _Xruntime_error("bad locale name");
  _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
  } catch (...) {
  ::std:: _DebugHeapDelete(_Ptr->_Decref());
  throw;
  }
  }



 ~locale() throw ()
  {
  if (_Ptr != 0)
   ::std:: _DebugHeapDelete(_Ptr->_Decref());
  }

 locale& operator=(const locale& _Right) throw ()
  {
  if (_Ptr != _Right._Ptr)
   {
   ::std:: _DebugHeapDelete(_Ptr->_Decref());
   _Ptr = _Right._Ptr;
   _Ptr->_Incref();
   }
  return (*this);
  }

 string name() const
  {
  return (_Ptr->_Name.c_str());
  }

 const char *c_str() const
  {
  return (_Ptr->_Name.c_str());
  }

 const facet *_Getfacet(size_t _Id) const
  {
  const facet *_Facptr = _Id < _Ptr->_Facetcount
   ? _Ptr->_Facetvec[_Id] : 0;
  if (_Facptr != 0 || !_Ptr->_Xparent)
   return (_Facptr);
  else
   {
   locale::_Locimp *_Ptr = _Getgloballocale();
   return (_Id < _Ptr->_Facetcount
    ? _Ptr->_Facetvec[_Id]
    : 0);
   }
  }

 bool operator==(const locale& _Loc) const
  {
  return (_Ptr == _Loc._Ptr
   || name().compare("*") != 0 && name().compare(_Loc.name()) == 0);
  }

 bool operator!=(const locale& _Right) const
  {
  return (!(*this == _Right));
  }

 static __declspec(dllimport) const locale& __cdecl classic();

 static __declspec(dllimport) locale __cdecl global(const locale&);

 static __declspec(dllimport) locale __cdecl empty();

private:
 locale(_Locimp *_Ptrimp)
  : _Ptr(_Ptrimp)
  {
  }

    static __declspec(dllimport) _Locimp *__cdecl _Init();
 static __declspec(dllimport) _Locimp *__cdecl _Getgloballocale();
 static __declspec(dllimport) void __cdecl _Setgloballocale(void *);

 bool _Badname(const _Locinfo& _Lobj)
  {
  return (:: strcmp(_Lobj._Getname(), "*") == 0);
  }

 _Locimp *_Ptr;
 };


template<class _Facet>
 struct _Facetptr
 {
                         static const locale::facet *_Psave;
 };

template<class _Facet>
                         const locale::facet *_Facetptr<_Facet>::
  _Psave = 0;






template<class _Facet> inline
 const _Facet& __cdecl use_facet(const locale& _Loc)

 {
 { ::std:: _Lockit _Lock(0);
  const locale::facet *_Psave =
   _Facetptr<_Facet>::_Psave;

  size_t _Id = _Facet::id;
  const locale::facet *_Pf = _Loc._Getfacet(_Id);

  if (_Pf != 0)
   ;
  else if (_Psave != 0)
   _Pf = _Psave;
  else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))



   throw bad_cast();





  else
   {
   _Pf = _Psave;
   _Facetptr<_Facet>::_Psave = _Psave;

   locale::facet *_Pfmod = (_Facet *)_Psave;
   _Pfmod->_Incref();
   _Pfmod->_Register();
   }

  return ((const _Facet&)(*_Pf));
 }
 }


template<class _Elem,
 class _InIt> inline
 int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
  const _Elem *_Ptr)
 {
 for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
  if (_Ptr[_Off] == _Ptr[0])
   ++_Numfields;
 string _Str(_Numfields, '\0');

 int _Ans = -2;
 for (size_t _Column = 1; ; ++_Column, ++_First, _Ans = -1)
  {
  bool _Prefix = false;
  size_t _Off = 0;
  size_t _Field = 0;

  for (; _Field < _Numfields; ++_Field)
   {
   for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
    ;

   if (_Str[_Field] != '\0')
    _Off += _Str[_Field];
   else if (_Ptr[_Off += _Column] == _Ptr[0]
    || _Ptr[_Off] == (_Elem)0)
    {
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
    _Ans = (int)_Field;
    }
   else if (_First == _Last || _Ptr[_Off] != *_First)
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
   else
    _Prefix = true;
   }

  if (!_Prefix || _First == _Last)
   break;
  }
 return (_Ans);
 }





template<class _Elem> inline
 char __cdecl _Maklocbyte(_Elem _Char,
  const _Locinfo::_Cvtvec&)
 {
 return ((char)(unsigned char)_Char);
 }

template<> inline
 char __cdecl _Maklocbyte(wchar_t _Char,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {0};
 _Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }


template<> inline
 char __cdecl _Maklocbyte(unsigned short _Char,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {0};
 _Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }






template<class _Elem> inline
 _Elem __cdecl _Maklocchr(char _Byte, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 return ((_Elem)(unsigned char)_Byte);
 }

template<> inline
 wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 wchar_t _Wc = L'\0';
 mbstate_t _Mbst1 = {0};
 _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }


template<> inline
 unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 unsigned short _Wc = (unsigned short)0;
 mbstate_t _Mbst1 = {0};
 _Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }






template<class _Elem> inline
 _Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 size_t _Count = :: strlen(_Ptr) + 1;
 _Elem *_Ptrdest = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 660) _Elem[_Count];

#pragma warning(push)
#pragma warning(disable: 6011)
 for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
  *_Ptrnext = (_Elem)(unsigned char)*_Ptr;
#pragma warning(pop)

 return (_Ptrdest);
 }

template<> inline
 wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 wchar_t _Wc;
 mbstate_t _Mbst1 = {0};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 689) wchar_t[_Wchars];
 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {0};

#pragma warning(push)
#pragma warning(disable: 6011)
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
#pragma warning(pop)

 return (_Ptrdest);
 }


template<> inline
 unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 unsigned short _Wc;
 mbstate_t _Mbst1 = {0};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes =
   _Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 725) wchar_t[_Wchars];
 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {0};
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
 return ((unsigned short *)_Ptrdest);
 }



#pragma warning(push)
#pragma warning(disable: 4275)

class __declspec(dllimport) codecvt_base
 : public locale::facet
 {
public:
 enum
  {
  ok, partial, error, noconv};
 typedef int result;

                    codecvt_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

 bool always_noconv() const throw ()
  {
  return (do_always_noconv());
  }

 int max_length() const throw ()
  {
  return (do_max_length());
  }

 int encoding() const throw ()
  {
  return (do_encoding());
  }

                    ~codecvt_base()
  {
  }

protected:
 virtual bool do_always_noconv() const throw ()
  {
  return (true);
  }

 virtual int do_max_length() const throw ()
  {
  return (1);
  }

 virtual int do_encoding() const throw ()
  {
  return (1);
  }
 };

#pragma warning(pop)


template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt
  : public codecvt_base
 {
public:
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State, _First2, _Last2, _Mid2));
  }

 int length(const _Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Locinfo());
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 851) codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt()
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual result do_in(_Statype&,
  const _Byte *_First1, const _Byte *, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *, _Elem *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  return (noconv);
  }

 virtual result do_out(_Statype&,
  const _Elem *_First1, const _Elem *, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *, _Byte *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  return (noconv);
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *&_Mid2) const
  {
  _Mid2 = _First2;
  return (noconv);
  }

 virtual int do_length(const _Statype&, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return ((int)(_Count < (size_t)(_Last1 - _First1)
   ? _Count : _Last1 - _First1));
  }
 };


template<class _Elem,
 class _Byte,
 class _Statype>
                         locale::id codecvt<_Elem, _Byte, _Statype>::id;
#line 1502 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale"
template<>
 class __declspec(dllimport) codecvt<wchar_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef wchar_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(const _Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 1563) codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt()
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 1582);
  _Debug_range(_First2, _Last2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 1583);
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 1618);
  _Debug_range(_First2, _Last2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 1619);
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int)___mb_cur_max_func() <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes, _Ans = ok;
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     return (_Ans);
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes, _Ans = ok;
     }
    }
  return (_Ans);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First2, _Last2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 1656);
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(const _Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {





  _Debug_range(_First1, _Last1, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 1686);
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);

  }

 virtual bool do_always_noconv() const throw ()
  {
  return (false);
  }

 virtual int do_max_length() const throw ()
  {
  return (5);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) codecvt<unsigned short, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef unsigned short _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(const _Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 1799) codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt()
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 1818);
  _Debug_range(_First2, _Last2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 1819);
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 1854);
  _Debug_range(_First2, _Last2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 1855);
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int)___mb_cur_max_func() <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes, _Ans = ok;
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     return (_Ans);
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes, _Ans = ok;
     }
    }
  return (_Ans);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First2, _Last2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 1892);
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(const _Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  _Debug_range(_First1, _Last1, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 1917);
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const throw ()
  {
  return (false);
  }

 virtual int do_max_length() const throw ()
  {
  return (5);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt_byname
  : public codecvt<_Elem, _Byte, _Statype>
 {
public:
 explicit codecvt_byname(const char *_Locname, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
  {
  }


 explicit codecvt_byname(const string& _Str, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
  {
  }


protected:
 virtual ~codecvt_byname()
  {
  }
 };


#pragma warning(push)
#pragma warning(disable: 4275)

struct __declspec(dllimport) ctype_base
 : public locale::facet
 {
 enum
  {
  alnum = 0x4|0x2|0x1|0x100, alpha = 0x2|0x1|0x100,
  cntrl = 0x20, digit = 0x4, graph = 0x4|0x2|0x10|0x1|0x100,
  lower = 0x2, print = 0x4|0x2|0x10|0x40|0x1|0x100|0x80,
  punct = 0x10, space = 0x8|0x40|0x000, upper = 0x1,
  xdigit = 0x80};
 typedef short mask;

                    ctype_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

                    ~ctype_base()
  {
  }
 };

#pragma warning(pop)


template<class _Elem>
 class ctype
  : public ctype_base
 {
public:
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2114) ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype()
  {
  if (_Ctype._Delfl)
   free((void *)_Ctype._Table);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
   & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2140);
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2141);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
  return (_First);
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2150);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2159);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Tolower(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2177);
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Tolower(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Toupper(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2199);
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Toupper(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Maklocchr(_Byte, (_Elem *)0, _Cvt));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2217);
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2218);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Maklocchr(*_First, (_Elem *)0, _Cvt);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Byte;
  if (_Ch == (_Elem)0)
   return ('\0');
  else if ((_Byte = _Maklocbyte((_Elem)_Ch, _Cvt)) == '\0')
   return (_Dflt);
  else
   return (_Byte);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2243);
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2244);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };


template<class _Elem>
 locale::id ctype<_Elem>::id;


template<>
 class __declspec(dllimport) ctype<char>
 : public ctype_base
 {
 typedef ctype<char> _Myt;

public:
 typedef char _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
  }

 const _Elem * is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2278);
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2279);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)*_First];
  return (_First);
  }

 const _Elem * scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2288);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 const _Elem * scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2297);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const _Elem * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 _Elem narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(const mask *_Table = 0,
  bool _Deletetable = false,
  size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  if (_Table != 0)
   {
   _Tidy();
   _Ctype._Table = _Table;
   _Ctype._Delfl = _Deletetable ? -1 : 0;
   }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2373) ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

 const mask * table() const throw ()
  {
  return (_Ctype._Table);
  }

 static const mask *__cdecl classic_table() throw ()
  {
  const _Myt& _Ctype_fac = use_facet< _Myt >(locale::classic());
  return (_Ctype_fac.table());
  }

          static const size_t table_size =
  1 << 8;

protected:
 virtual ~ctype()
  {
  _Tidy();
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  }

 void _Tidy()
  {
  if (0 < _Ctype._Delfl)
   free((void *)_Ctype._Table);
  else if (_Ctype._Delfl < 0)
   delete[] (void *)_Ctype._Table;
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2419);
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2433);
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Byte);
  }

 virtual const _Elem * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2447);
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2448);
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

 virtual _Elem do_narrow(_Elem _Ch, char) const
  {
  return (_Ch);
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char, char *_Dest) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2461);
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2462);
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 };


template<>
 class __declspec(dllimport) ctype<wchar_t>
 : public ctype_base
 {
 typedef ctype<wchar_t> _Myt;

public:
 typedef wchar_t _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2567) ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype()
  {
  if (_Ctype._Delfl)
   free((void *)_Ctype._Table);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2593);
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2594);
  return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2601);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2610);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2624);
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2638);
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {0};
  wchar_t _Wc;
  return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (wchar_t)(wint_t)(0xFFFF) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2660);
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2661);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {0};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2683);
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2684);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) ctype<unsigned short>
 : public ctype_base
 {
 typedef ctype<unsigned short> _Myt;

public:
 typedef unsigned short _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2792) ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype()
  {
  if (_Ctype._Delfl)
   free((void *)_Ctype._Table);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2818);
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2819);
  return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
   (const wchar_t *)_Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2827);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2836);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2850);
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2864);
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {0};
  unsigned short _Wc;
  return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (unsigned short)(wint_t)(0xFFFF) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2886);
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2887);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {0};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2909);
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocale", 2910);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem>
 class ctype_byname
 : public ctype<_Elem>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Locname), _Refs)
  {
  }


 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
  {
  }


protected:
 virtual ~ctype_byname()
  {
  }
 };


template<>
 class ctype_byname<char>
 : public ctype<char>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Locname), _Refs)
  {
  }


 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Str.c_str()), _Refs)
  {
  }


protected:
 virtual ~ctype_byname()
  {
  }
 };



template class __declspec(dllimport) codecvt<char, char, _Mbstatet>;


}



#pragma warning(pop)
#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xiosbase"



#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\system_error"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cerrno"
#line 14 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cerrno"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\errno.h"
#line 21 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\errno.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 21 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\errno.h"



extern "C" {
#line 135 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\errno.h"
}
#line 14 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\cerrno"
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\system_error"




#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)







namespace std {

 namespace errc {
enum errc {
 address_family_not_supported = 102,
 address_in_use = 100,
 address_not_available = 101,
 already_connected = 113,
 argument_list_too_long = 7,
 argument_out_of_domain = 33,
 bad_address = 14,
 bad_file_descriptor = 9,
 bad_message = 104,
 broken_pipe = 32,
 connection_aborted = 106,
 connection_already_in_progress = 103,
 connection_refused = 107,
 connection_reset = 108,
 cross_device_link = 18,
 destination_address_required = 109,
 device_or_resource_busy = 16,
 directory_not_empty = 41,
 executable_format_error = 8,
 file_exists = 17,
 file_too_large = 27,
 filename_too_long = 38,
 function_not_supported = 40,
 host_unreachable = 110,
 identifier_removed = 111,
 illegal_byte_sequence = 42,
 inappropriate_io_control_operation = 25,
 interrupted = 4,
 invalid_argument = 22,
 invalid_seek = 29,
 io_error = 5,
 is_a_directory = 21,
 message_size = 115,
 network_down = 116,
 network_reset = 117,
 network_unreachable = 118,
 no_buffer_space = 119,
 no_child_process = 10,
 no_link = 121,
 no_lock_available = 39,
 no_message_available = 120,
 no_message = 122,
 no_protocol_option = 123,
 no_space_on_device = 28,
 no_stream_resources = 124,
 no_such_device_or_address = 6,
 no_such_device = 19,
 no_such_file_or_directory = 2,
 no_such_process = 3,
 not_a_directory = 20,
 not_a_socket = 128,
 not_a_stream = 125,
 not_connected = 126,
 not_enough_memory = 12,
 not_supported = 129,
 operation_canceled = 105,
 operation_in_progress = 112,
 operation_not_permitted = 1,
 operation_not_supported = 130,
 operation_would_block = 140,
 owner_dead = 133,
 permission_denied = 13,
 protocol_error = 134,
 protocol_not_supported = 135,
 read_only_file_system = 30,
 resource_deadlock_would_occur = 36,
 resource_unavailable_try_again = 11,
 result_out_of_range = 34,
 state_not_recoverable = 127,
 stream_timeout = 137,
 text_file_busy = 139,
 timed_out = 138,
 too_many_files_open_in_system = 23,
 too_many_files_open = 24,
 too_many_links = 31,
 too_many_synbolic_link_levels = 114,
 value_too_large = 132,
 wrong_protocol_type = 136
 };
 }

typedef errc::errc generic_errno;


template<class _Enum>
 struct is_error_code_enum
  : public tr1::false_type
 {
 };


template<class _Enum>
 struct is_error_condition_enum
  : public tr1::false_type
 {
 };

template<>
 struct is_error_condition_enum<generic_errno>
  : public tr1::true_type
 {
 };


 namespace io_errc {
enum io_errc {
 stream = 1
 };
 }

typedef io_errc::io_errc _Io_errc;


class error_code;
class error_condition;
class error_category;

__declspec(dllimport) const error_category& __cdecl generic_category();
__declspec(dllimport) const error_category& __cdecl iostream_category();
__declspec(dllimport) const error_category& __cdecl system_category();

class error_category
 {
public:
 typedef int value_type;

 error_category()
  {
  }

 virtual ~error_category()
  {
  }

 virtual const char *name() const = 0;

 virtual string message(value_type _Errval) const = 0;

 virtual error_condition default_error_condition(value_type _Errval) const;

 virtual bool equivalent(value_type _Errval,
  const error_condition& _Cond) const;

 virtual bool equivalent(const error_code& _Code,
  value_type _Errval) const;

 bool operator==(const error_category& _Right) const
  {
  return (this == &_Right);
  }

 bool operator!=(const error_category& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_category& _Right) const
  {
  return (this < &_Right);
  }

private:
 error_category(const error_category&);

 error_category& operator=(const error_category&);
 };


class error_code
 {
public:
 typedef int value_type;

 error_code()
  : _Myval(0),
   _Mycat(&system_category())
  {
  }

 error_code(value_type _Val, const error_category& _Cat)
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum>
  error_code(_Enum _Errcode,
   typename tr1::enable_if<is_error_code_enum<_Enum>::value,
    error_code>::type * = 0)
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_code(_Errcode);
  }

 void assign(value_type _Val, const error_category& _Cat)
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename tr1::enable_if<is_error_code_enum<_Enum>::value,
   error_code>::type& operator=(_Enum _Errcode)
  {
  *this = make_error_code(_Errcode);
  return (*this);
  }

 void clear()
  {
  _Myval = 0;
  _Mycat = &system_category();
  }

 value_type value() const
  {
  return (_Myval);
  }

 const error_category& category() const
  {
  return (*_Mycat);
  }

 error_condition default_error_condition() const;

 string message() const
  {
  return (category().message(value()));
  }

 operator ::std:: _Bool_type() const
  {
  return (value() != 0 ? (&::std:: _Bool_struct::_Member) : 0);
  }

 bool operator !() const
  {
  return (value() == 0);
  }

 bool operator==(const error_code& _Right) const
  {
  return (category() == _Right.category()
   && value() == _Right.value());
  }

 bool operator!=(const error_code& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_code& _Right) const
  {
  return (category() < _Right.category()
   || category() == _Right.category()
    && value() < _Right.value());
  }

private:
 value_type _Myval;
 const error_category *_Mycat;
 };


class error_condition
 {
public:
 typedef int value_type;

 error_condition()
  : _Myval(0),
   _Mycat(&generic_category())
  {
  }

 error_condition(value_type _Val, const error_category& _Cat)
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum>
  error_condition(_Enum _Errcode,
   typename tr1::enable_if<is_error_condition_enum<_Enum>::value,
    error_condition>::type * = 0)
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_condition(_Errcode);
  }

 void assign(value_type _Val, const error_category& _Cat)
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename tr1::enable_if<is_error_condition_enum<_Enum>::value,
   error_condition>::type& operator=(_Enum _Errcode)
  {
  *this = make_error_condition(_Errcode);
  return (*this);
  }

 void clear()
  {
  _Myval = 0;
  _Mycat = &generic_category();
  }

 value_type value() const
  {
  return (_Myval);
  }

 const error_category& category() const
  {
  return (*_Mycat);
  }

 string message() const
  {
  return (category().message(value()));
  }

 operator ::std:: _Bool_type() const
  {
  return (value() != 0 ? (&::std:: _Bool_struct::_Member) : 0);
  }

 bool operator !() const
  {
  return (value() == 0);
  }

 bool operator==(const error_condition& _Right) const
  {
  return (category() == _Right.category()
   && value() == _Right.value());
  }

 bool operator!=(const error_condition& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_condition& _Right) const
  {
  return (category() < _Right.category()
   || category() == _Right.category()
    && value() < _Right.value());
  }

private:
 value_type _Myval;
 const error_category *_Mycat;
 };


inline error_condition
 error_category::default_error_condition(value_type _Errval) const
 {
 return (error_condition(_Errval, *this));
 }

inline bool
 error_category::equivalent(value_type _Errval,
  const error_condition& _Cond) const
 {
 return (default_error_condition(_Errval) == _Cond);
 }

inline bool
 error_category::equivalent(const error_code& _Code,
  value_type _Errval) const
 {
 return (*this == _Code.category() && _Code.value() == _Errval);
 }


inline error_condition error_code::default_error_condition() const
 {
 return (category().default_error_condition(value()));
 }


inline bool operator==(
 const error_code& _Left,
 const error_condition& _Right)
 {
 return (_Left.category().equivalent(_Left.value(), _Right)
  || _Right.category().equivalent(_Left, _Right.value()));
 }

inline bool operator==(
 const error_condition& _Left,
 const error_code& _Right)
 {
 return (_Right.category().equivalent(_Right.value(), _Left)
  || _Left.category().equivalent(_Right, _Left.value()));
 }


inline bool operator!=(
 const error_code& _Left,
 const error_condition& _Right)
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_condition& _Left,
 const error_code& _Right)
 {
 return (!(_Left == _Right));
 }


inline error_code make_error_code(generic_errno _Errno)
 {
 return (error_code(_Errno, generic_category()));
 }

inline error_code make_error_code(_Io_errc _Errno)
 {
 return (error_code(_Errno, iostream_category()));
 }


inline error_condition make_error_condition(generic_errno _Errno)
 {
 return (error_condition(_Errno, generic_category()));
 }

inline error_condition make_error_condition(_Io_errc _Errno)
 {
 return (error_condition(_Errno, iostream_category()));
 }


template<class _Kty>
 class hash;

template<>
 class hash< ::std:: error_code>
  : public unary_function<error_code, size_t>
 {
public:
 typedef ::std:: error_code _Kty;

 size_t operator()(const _Kty& _Keyval) const
  {
  ldiv_t _Qrem = :: ldiv((long)(size_t)_Keyval.value(), 127773);

  _Qrem.rem = 16807 * _Qrem.rem - 2836 * _Qrem.quot;
  if (_Qrem.rem < 0)
   _Qrem.rem += 2147483647;
  return ((size_t)_Qrem.rem);
  }
 };

template<>
 class hash< ::std:: error_condition>
  : public unary_function<error_condition, size_t>
 {
public:
 typedef ::std:: error_condition _Kty;

 size_t operator()(const _Kty& _Keyval) const
  {
  ldiv_t _Qrem = :: ldiv((long)(size_t)_Keyval.value(), 127773);

  _Qrem.rem = 16807 * _Qrem.rem - 2836 * _Qrem.quot;
  if (_Qrem.rem < 0)
   _Qrem.rem += 2147483647;
  return ((size_t)_Qrem.rem);
  }
 };


class system_error
 : public runtime_error
 {
public:
 explicit system_error(error_code _Errcode,
  const string& _Message = "")
  : runtime_error(_Message), _Mycode(_Errcode)
  {
  _Makestr();
  }

 system_error(error_code _Errcode,
  const char *_Message)
  : runtime_error(_Message), _Mycode(_Errcode)
  {
  _Makestr();
  }

 system_error(error_code::value_type _Errval,
  const error_category& _Errcat,
  const string& _Message = "")
  : runtime_error(_Message), _Mycode(_Errval, _Errcat)
  {
  _Makestr();
  }

 system_error(error_code::value_type _Errval,
  const error_category& _Errcat,
  const char *_Message)
  : runtime_error(_Message), _Mycode(_Errval, _Errcat)
  {
  _Makestr();
  }
#line 545 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\system_error"
 const error_code& code() const throw ()
  {
  return (_Mycode);
  }
#line 560 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\system_error"
private:
 void _Makestr()
  {




  }

 error_code _Mycode;

 };
}
#pragma warning(pop)
#pragma pack(pop)
#line 9 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xiosbase"



#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\share.h"
#line 12 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xiosbase"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)

#pragma warning(disable: 4412)






namespace std {
#line 50 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xiosbase"
template<class _Dummy>
 class _Iosb
 {
public:
 enum _Dummy_enum {_Dummy_enum_val = 1};
 enum _Fmtflags
  {
  _Fmtmask = 0xffff, _Fmtzero = 0};

 static const _Fmtflags skipws = (_Fmtflags)0x0001;
 static const _Fmtflags unitbuf = (_Fmtflags)0x0002;
 static const _Fmtflags uppercase = (_Fmtflags)0x0004;
 static const _Fmtflags showbase = (_Fmtflags)0x0008;
 static const _Fmtflags showpoint = (_Fmtflags)0x0010;
 static const _Fmtflags showpos = (_Fmtflags)0x0020;
 static const _Fmtflags left = (_Fmtflags)0x0040;
 static const _Fmtflags right = (_Fmtflags)0x0080;
 static const _Fmtflags internal = (_Fmtflags)0x0100;
 static const _Fmtflags dec = (_Fmtflags)0x0200;
 static const _Fmtflags oct = (_Fmtflags)0x0400;
 static const _Fmtflags hex = (_Fmtflags)0x0800;
 static const _Fmtflags scientific = (_Fmtflags)0x1000;
 static const _Fmtflags fixed = (_Fmtflags)0x2000;

 static const _Fmtflags hexfloat =
  (_Fmtflags)0x3000;

 static const _Fmtflags boolalpha = (_Fmtflags)0x4000;
 static const _Fmtflags _Stdio = (_Fmtflags)0x8000;
 static const _Fmtflags adjustfield = (_Fmtflags)(0x0040
  | 0x0080 | 0x0100);
 static const _Fmtflags basefield = (_Fmtflags)(0x0200
  | 0x0400 | 0x0800);
 static const _Fmtflags floatfield = (_Fmtflags)(0x1000
  | 0x2000);

 enum _Iostate
  {
  _Statmask = 0x17};

 static const _Iostate goodbit = (_Iostate)0x0;
 static const _Iostate eofbit = (_Iostate)0x1;
 static const _Iostate failbit = (_Iostate)0x2;
 static const _Iostate badbit = (_Iostate)0x4;
 static const _Iostate _Hardfail = (_Iostate)0x10;

 enum _Openmode
  {
  _Openmask = 0xff};

 static const _Openmode in = (_Openmode)0x01;
 static const _Openmode out = (_Openmode)0x02;
 static const _Openmode ate = (_Openmode)0x04;
 static const _Openmode app = (_Openmode)0x08;
 static const _Openmode trunc = (_Openmode)0x10;
 static const _Openmode _Nocreate = (_Openmode)0x40;
 static const _Openmode _Noreplace = (_Openmode)0x80;
 static const _Openmode binary = (_Openmode)0x20;

 enum _Seekdir
  {
  _Seekmask = 0x3};

 static const _Seekdir beg = (_Seekdir)0;
 static const _Seekdir cur = (_Seekdir)1;
 static const _Seekdir end = (_Seekdir)2;

 enum
  {
  _Openprot = 0x40};
 };

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags
  _Iosb<_Dummy>::hexfloat;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::_Hardfail;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;


class __declspec(dllimport) ios_base
 : public _Iosb<int>
 {
public:
 typedef int fmtflags;
 typedef int iostate;
 typedef int openmode;
 typedef int seekdir;

 typedef ::std:: streamoff streamoff;
 typedef ::std:: streampos streampos;

 enum event
  {
  erase_event, imbue_event, copyfmt_event};

 typedef void (__cdecl *event_callback)(event, ios_base&, int);
 typedef unsigned int io_state, open_mode, seek_dir;


 class failure


  : public system_error
  {
 public:
  explicit failure(const string &_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }

  explicit failure(const char *_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }
#line 264 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xiosbase"
  };


 class __declspec(dllimport) Init
  {
 public:
                     Init()
   {
   _Init_ctor(this);
   }

                     ~Init()
   {
   _Init_dtor(this);
   }

 private:
  static void __cdecl _Init_ctor(Init *);
  static void __cdecl _Init_dtor(Init *);

                          static int _Init_cnt;

  static int& __cdecl _Init_cnt_func();
  };

 ios_base& operator=(const ios_base& _Right)
  {
  if (this != &_Right)
   {
   _Mystate = _Right._Mystate;
   copyfmt(_Right);
   }
  return (*this);
  }

                    operator void *() const
  {
  return (fail() ? 0 : (void *)this);
  }

 bool operator!() const
  {
  return (fail());
  }

 void clear(iostate _State, bool _Reraise)
  {
  _Mystate = (iostate)(_State & _Statmask);
  if ((_Mystate & _Except) == 0)
   ;
  else if (_Reraise)
   throw;
  else if (_Mystate & _Except & badbit)
   throw failure("ios_base::badbit set");
  else if (_Mystate & _Except & failbit)
   throw failure("ios_base::failbit set");
  else
   throw failure("ios_base::eofbit set");
  }

 void clear(iostate _State = goodbit)
  {
  clear(_State, false);
  }

 void clear(io_state _State)
  {
  clear((iostate)_State);
  }

 iostate rdstate() const
  {
  return (_Mystate);
  }

 void setstate(iostate _State, bool _Exreraise)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
  }

 void setstate(iostate _State)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), false);
  }

 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }

 bool good() const
  {
  return (rdstate() == goodbit);
  }

 bool eof() const
  {
  return ((int)rdstate() & (int)eofbit);
  }

 bool fail() const
  {
  return (((int)rdstate()
   & ((int)badbit | (int)failbit)) != 0);
  }

 bool bad() const
  {
  return (((int)rdstate() & (int)badbit) != 0);
  }

 iostate exceptions() const
  {
  return (_Except);
  }

 void exceptions(iostate _Newexcept)
  {
  _Except = (iostate)((int)_Newexcept & (int)_Statmask);
  clear(_Mystate);
  }

 void exceptions(io_state _State)
  {
  exceptions((iostate)_State);
  }

 fmtflags flags() const
  {
  return (_Fmtfl);
  }

 fmtflags flags(fmtflags _Newfmtflags)
  {
  fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Newfmtflags & (int)_Fmtmask);
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Fmtfl
   | (int)_Newfmtflags & (int)_Fmtmask);
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
   | ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 void unsetf(fmtflags _Mask)
  {
  _Fmtfl = (fmtflags)((int)_Fmtfl & (int)~_Mask);
  }

 streamsize precision() const
  {
  return (_Prec);
  }

 streamsize precision(streamsize _Newprecision)
  {
  streamsize _Oldprecision = _Prec;
  _Prec = _Newprecision;
  return (_Oldprecision);
  }

 streamsize width() const
  {
  return (_Wide);
  }

 streamsize width(streamsize _Newwidth)
  {
  streamsize _Oldwidth = _Wide;
  _Wide = _Newwidth;
  return (_Oldwidth);
  }

 locale getloc() const
  {
  return (*_Ploc);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = *_Ploc;
  *_Ploc = _Loc;
  _Callfns(imbue_event);
  return (_Oldlocale);
  }

 static int __cdecl xalloc()
  {
  { ::std:: _Lockit _Lock(2);
   return (_Index++);
  }
  }

 long& iword(int _Idx)
  {
  return (_Findarr(_Idx)._Lo);
  }

 void *& pword(int _Idx)
  {
  return (_Findarr(_Idx)._Vp);
  }

 void register_callback(event_callback _Pfn,
  int _Idx)
  {
  _Calls = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xiosbase", 483) _Fnarray(_Idx, _Pfn, _Calls);
  }

 ios_base& copyfmt(const ios_base& _Other)
  {
  if (this != &_Other)
   {
   _Tidy();
   *_Ploc = *_Other._Ploc;
   _Fmtfl = _Other._Fmtfl;
   _Prec = _Other._Prec;
   _Wide = _Other._Wide;
   _Iosarray *_Ptr = _Other._Arr;

   for (_Arr = 0; _Ptr != 0; _Ptr = _Ptr->_Next)
    if (_Ptr->_Lo != 0 || _Ptr->_Vp != 0)
     {
     iword(_Ptr->_Index) = _Ptr->_Lo;
     pword(_Ptr->_Index) = _Ptr->_Vp;
     }

   for (_Fnarray *_Pfa = _Other._Calls; _Pfa != 0;
    _Pfa = _Pfa->_Next)
    register_callback(_Pfa->_Pfn, _Pfa->_Index);

   _Callfns(copyfmt_event);
   exceptions(_Other._Except);
   }
  return (*this);
  }

 static bool __cdecl sync_with_stdio(bool _Newsync = true)
  {
  { ::std:: _Lockit _Lock(2);
   const bool _Oldsync = _Sync;
   _Sync = _Newsync;
   return (_Oldsync);
  }
  }

 void swap(ios_base& _Right)
  {
  if (this != &_Right)
   {
   ::std:: swap(_Mystate, _Right._Mystate);
   ::std:: swap(_Except, _Right._Except);
   ::std:: swap(_Fmtfl, _Right._Fmtfl);
   ::std:: swap(_Prec, _Right._Prec);
   ::std:: swap(_Wide, _Right._Wide);

   ::std:: swap(_Arr, _Right._Arr);
   ::std:: swap(_Calls, _Right._Calls);
   ::std:: swap(_Ploc, _Right._Ploc);
   }
  }

 virtual ~ios_base()
  {
  _Ios_base_dtor(this);
  }

 static void __cdecl _Addstd(ios_base *);

 size_t _Stdstr;

protected:
                    ios_base()
  {
  }

 void _Init()
  {
  _Ploc = 0;
  _Stdstr = 0;
  _Except = goodbit;
  _Fmtfl = (fmtflags)(skipws | dec);
  _Prec = 6;
  _Wide = 0;
  _Arr = 0;
  _Calls = 0;
  clear(goodbit);
  _Ploc = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xiosbase", 564) locale;
  }

private:

 struct _Iosarray
  {
 public:
                     _Iosarray(int _Idx, _Iosarray *_Link)
   : _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0)
   {
   }

  _Iosarray *_Next;
  int _Index;
  long _Lo;
  void *_Vp;
  };


 struct _Fnarray
  {
                     _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
   : _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
   {
   }

  _Fnarray *_Next;
  int _Index;
  event_callback _Pfn;
  };

 void _Callfns(event _Ev)
  {
  for (_Fnarray *_Pfa = _Calls; _Pfa != 0; _Pfa = _Pfa->_Next)
   (*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
  }

 _Iosarray& _Findarr(int _Idx)
  {
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr, _Ptr2 = 0; _Ptr1 != 0; _Ptr1 = _Ptr1->_Next)
   if (_Ptr1->_Index == _Idx)
    return (*_Ptr1);
   else if (_Ptr2 == 0 && _Ptr1->_Lo == 0 && _Ptr1->_Vp == 0)
    _Ptr2 = _Ptr1;

  if (_Ptr2 != 0)
   {
   _Ptr2->_Index = _Idx;
   return (*_Ptr2);
   }

  _Arr = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xiosbase", 618) _Iosarray(_Idx, _Arr);
  return (*_Arr);
  }

 void _Tidy()
  {
  _Callfns(erase_event);
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr; _Ptr1 != 0; _Ptr1 = _Ptr2)
   {
   _Ptr2 = _Ptr1->_Next;
   ::std:: _DebugHeapDelete(_Ptr1);
   }
  _Arr = 0;

  _Fnarray *_Pfa1, *_Pfa2;
  for (_Pfa1 = _Calls; _Pfa1 != 0; _Pfa1 = _Pfa2)
   {
   _Pfa2 = _Pfa1->_Next;
   ::std:: _DebugHeapDelete(_Pfa1);
   }
  _Calls = 0;
  }

 iostate _Mystate;
 iostate _Except;
 fmtflags _Fmtfl;
 streamsize _Prec;
 streamsize _Wide;
 _Iosarray *_Arr;
 _Fnarray *_Calls;
 locale *_Ploc;

                         static int _Index;
                         static bool _Sync;

 static void __cdecl _Ios_base_dtor(ios_base *);
 };





}



#pragma warning(pop)
#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\streambuf"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)




namespace std {

template<class _Elem,
 class _Traits>
 class basic_streambuf
 {
 typedef basic_streambuf<_Elem, _Traits> _Myt;

protected:
                    basic_streambuf()
  : _Plocale(new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\streambuf", 24) locale)
  {
  _Init();
  }

                    basic_streambuf(_Uninitialized)
  : _Mylock(_Noinit)
  {
  }

                    basic_streambuf(const _Myt& _Right)
  : _Plocale(new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\streambuf", 35) locale(_Right.getloc()))
  {
  _Init();
  setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
  setg(_Right.eback(), _Right.gptr(), _Right.egptr());
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   pubimbue(_Right.getloc());
   }
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Elem *_Tfirst = pbase();
   _Elem *_Tnext = pptr();
   _Elem *_Tend = epptr();
   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   _Right.setp(_Tfirst, _Tnext, _Tend);

   _Tfirst = eback();
   _Tnext = gptr();
   _Tend = egptr();
   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   _Right.setg(_Tfirst, _Tnext, _Tend);

   locale _Oldlocale = pubimbue(_Right.getloc());
   _Right.pubimbue(_Oldlocale);
   }
  }

public:
 typedef _Elem char_type;
 typedef _Traits traits_type;

 virtual ~basic_streambuf()
  {
  ::std:: _DebugHeapDelete(_Plocale);
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 pos_type pubseekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekoff(_Off, _Way, _Mode));
  }

 pos_type pubseekoff(off_type _Off,
  ios_base::seek_dir _Way,
  ios_base::open_mode _Mode)
  {
  return (pubseekoff(_Off, (ios_base::seekdir)_Way,
   (ios_base::openmode)_Mode));
  }

 pos_type pubseekpos(pos_type _Pos,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekpos(_Pos, _Mode));
  }

 pos_type pubseekpos(pos_type _Pos,
  ios_base::open_mode _Mode)
  {
  return (seekpos(_Pos, (ios_base::openmode)_Mode));
  }

 _Myt * pubsetbuf(_Elem *_Buffer,
  streamsize _Count)
  {
  return (setbuf(_Buffer, _Count));
  }

 locale pubimbue(const locale &_Newlocale)
  {
  locale _Oldlocale = *_Plocale;
  imbue(_Newlocale);
  *_Plocale = _Newlocale;
  return (_Oldlocale);
  }

 locale getloc() const
  {
  return (*_Plocale);
  }

 streamsize in_avail()
  {
  streamsize _Res = _Gnavail();
  return (0 < _Res ? _Res : showmanyc());
  }

 int pubsync()
  {
  return (sync());
  }

 int_type sbumpc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*_Gninc()) : uflow());
  }

 int_type sgetc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*gptr()) : underflow());
  }

 streamsize sgetn(_Elem *_Ptr,
  streamsize _Count)
  {
  return (xsgetn(_Ptr, _Count));
  }

 int_type snextc()
  {
  return (1 < _Gnavail()
   ? _Traits::to_int_type(*_Gnpreinc())
   : _Traits::eq_int_type(_Traits::eof(), sbumpc())
    ? _Traits::eof() : sgetc());
  }

 int_type sputbackc(_Elem _Ch)
  {
  return (gptr() != 0 && eback() < gptr()
   && _Traits::eq(_Ch, gptr()[-1])
   ? _Traits::to_int_type(*_Gndec())
   : pbackfail(_Traits::to_int_type(_Ch)));
  }

 void stossc()
  {
  if (0 < _Gnavail())
   _Gninc();
  else
   uflow();
  }

 int_type sungetc()
  {
  return (gptr() != 0 && eback() < gptr()
   ? _Traits::to_int_type(*_Gndec()) : pbackfail());
  }

 int_type sputc(_Elem _Ch)
  {
  return (0 < _Pnavail()
   ? _Traits::to_int_type(*_Pninc() = _Ch)
   : overflow(_Traits::to_int_type(_Ch)));
  }

 streamsize sputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  return (xsputn(_Ptr, _Count));
  }

 virtual void _Lock()
  {
  _Mylock._Lock();
  }

 virtual void _Unlock()
  {
  _Mylock._Unlock();
  }

protected:
 _Elem * eback() const
  {
  return (*_IGfirst);
  }

 _Elem * gptr() const
  {
  return (*_IGnext);
  }

 _Elem * pbase() const
  {
  return (*_IPfirst);
  }

 _Elem * pptr() const
  {
  return (*_IPnext);
  }

 _Elem * egptr() const
  {
  return (*_IGnext + *_IGcount);
  }

 void gbump(int _Off)
  {
  *_IGcount -= _Off;
  *_IGnext += _Off;
  }

 void setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IGfirst = _First;
  *_IGnext = _Next;
  *_IGcount = (int)(_Last - _Next);
  }

 _Elem * epptr() const
  {
  return (*_IPnext + *_IPcount);
  }

 _Elem * _Gndec()
  {
  ++*_IGcount;
  return (--*_IGnext);
  }

 _Elem * _Gninc()
  {
  --*_IGcount;
  return ((*_IGnext)++);
  }

 _Elem * _Gnpreinc()
  {
  --*_IGcount;
  return (++(*_IGnext));
  }

 streamsize _Gnavail() const
  {
  return (*_IGnext != 0 ? *_IGcount : 0);
  }

 void pbump(int _Off)
  {
  *_IPcount -= _Off;
  *_IPnext += _Off;
  }

 void setp(_Elem *_First, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _First;
  *_IPcount = (int)(_Last - _First);
  }

 void setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _Next;
  *_IPcount = (int)(_Last - _Next);
  }

 _Elem * _Pninc()
  {
  --*_IPcount;
  return ((*_IPnext)++);
  }

 streamsize _Pnavail() const
  {
  return (*_IPnext != 0 ? *_IPcount : 0);
  }

 void _Init()
  {
  _IGfirst = &_Gfirst;
  _IPfirst = &_Pfirst;
  _IGnext = &_Gnext;
  _IPnext = &_Pnext;
  _IGcount = &_Gcount;
  _IPcount = &_Pcount;
  setp(0, 0);
  setg(0, 0, 0);
  }

 void _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
  _Elem **_Pf, _Elem **_Pn, int *_Pc)
  {
  _IGfirst = _Gf;
  _IPfirst = _Pf;
  _IGnext = _Gn;
  _IPnext = _Pn;
  _IGcount = _Gc;
  _IPcount = _Pc;
  }

 virtual int_type overflow(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual int_type pbackfail(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual streamsize showmanyc()
  {
  return (0);
  }

 virtual int_type underflow()
  {
  return (_Traits::eof());
  }

 virtual int_type uflow()
  {
  return (_Traits::eq_int_type(_Traits::eof(), underflow())
   ? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
  }

 virtual streamsize xsgetn(_Elem * _Ptr,
  streamsize _Count)
  {
  int_type _Meta;
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Gnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(_Ptr, gptr(), (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    gbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
    break;
   else
    {
    *_Ptr++ = _Traits::to_char_type(_Meta);
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual streamsize xsputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Pnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(pptr(), _Ptr, (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    pbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(),
    overflow(_Traits::to_int_type(*_Ptr))))
    break;
   else
    {
    ++_Ptr;
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual pos_type seekoff(off_type,
  ios_base::seekdir,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual pos_type seekpos(pos_type,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual _Myt * setbuf(_Elem *, streamsize)
  {
  return (this);
  }

 virtual int sync()
  {
  return (0);
  }

 virtual void imbue(const locale&)
  {
  }

private:
 _Mutex _Mylock;
 _Elem *_Gfirst;
 _Elem *_Pfirst;
 _Elem **_IGfirst;
 _Elem **_IPfirst;
 _Elem *_Gnext;
 _Elem *_Pnext;
 _Elem **_IGnext;
 _Elem **_IPnext;

 int _Gcount;
 int _Pcount;
 int *_IGcount;
 int *_IPcount;

 locale *_Plocale;
 };



template class __declspec(dllimport) basic_streambuf<char, char_traits<char> >;
template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t> >;





template<class _Elem,
 class _Traits>
 class istreambuf_iterator
  : public iterator<input_iterator_tag,
   _Elem, typename _Traits::off_type, _Elem *, _Elem&>
 {
 typedef istreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_istream<_Elem, _Traits> istream_type;

 typedef typename traits_type::int_type int_type;

 istreambuf_iterator(streambuf_type *_Sb = 0) throw ()
  : _Strbuf(_Sb), _Got(_Sb == 0)
  {
  }

 istreambuf_iterator(istream_type& _Istr) throw ()
  : _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
  {
  }

 _Elem operator*() const
  {
  if (!_Got)
   _Peek();


  if (_Strbuf == 0)
   _Debug_message(L"istreambuf_iterator is not dereferencable", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\streambuf", 507);


  return (_Val);
  }

 _Myt& operator++()
  {

  if (_Strbuf == 0)
   _Debug_message(L"istreambuf_iterator is not incrementable", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\streambuf", 517);


  _Inc();
  return (*this);
  }

 _Myt operator++(int)
  {
  if (!_Got)
   _Peek();
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 bool equal(const _Myt& _Right) const
  {
  if (!_Got)
   _Peek();
  if (!_Right._Got)
   _Right._Peek();
  return (_Strbuf == 0 && _Right._Strbuf == 0
   || _Strbuf != 0 && _Right._Strbuf != 0);
  }

private:
 void _Inc()
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Strbuf->sbumpc()))
   _Strbuf = 0, _Got = true;
  else
   _Got = false;
  }

 _Elem _Peek() const
  {
  int_type _Meta;
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Meta = _Strbuf->sgetc()))
   _Strbuf = 0;
  else
   _Val = traits_type::to_char_type(_Meta);
  _Got = true;
  return (_Val);
  }

 mutable streambuf_type *_Strbuf;
 mutable bool _Got;
 mutable _Elem _Val;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<istreambuf_iterator<_Elem, _Traits> >
 : public ::std:: tr1::true_type
 {
 };


template<class _Elem,
 class _Traits> inline
 bool operator==(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (_Left.equal(_Right));
 }

template<class _Elem,
 class _Traits> inline
 bool operator!=(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Elem,
 class _Traits>
 class ostreambuf_iterator
  : public _Outit
 {
 typedef ostreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_ostream<_Elem, _Traits> ostream_type;

 ostreambuf_iterator(streambuf_type *_Sb) throw ()
  : _Failed(false), _Strbuf(_Sb)
  {
  }

 ostreambuf_iterator(ostream_type& _Ostr) throw ()
  : _Failed(false), _Strbuf(_Ostr.rdbuf())
  {
  }

 _Myt& operator=(_Elem _Right)
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(_Traits::eof(),
    _Strbuf->sputc(_Right)))
   _Failed = true;
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt& operator++(int)
  {
  return (*this);
  }

 bool failed() const throw ()
  {
  return (_Failed);
  }

private:
 bool _Failed;
 streambuf_type *_Strbuf;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<ostreambuf_iterator<_Elem, _Traits> >
 : public ::std:: tr1::true_type
 {
 };
}



#pragma warning(pop)
#pragma pack(pop)
#line 10 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)




#pragma warning(disable: 4189 4275)





extern "C" {


extern __declspec(dllimport) float __cdecl _Stofx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) double __cdecl _Stodx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) long double __cdecl _Stoldx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) long __cdecl _Stolx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) unsigned long __cdecl _Stoulx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) __int64 __cdecl _Stollx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) unsigned __int64 __cdecl _Stoullx(const char *,
                                  char **,
 int, int *);


}



namespace std {

template<class _Elem>
 class numpunct
  : public locale::facet
 {
public:
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;
 typedef _Elem char_type;

                         __declspec(dllimport) static locale::id id;

 _Elem decimal_point() const
  {
  return (do_decimal_point());
  }

 _Elem thousands_sep() const
  {
  return (do_thousands_sep());
  }

 string grouping() const
  {
  return (do_grouping());
  }

 string_type falsename() const
  {
  return (do_falsename());
  }

 string_type truename() const
  {
  return (do_truename());
  }

 explicit numpunct(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
   if (_Kseparator == 0)
    _Kseparator =
     _Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
  }
  }

 numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  _Init(_Lobj, _Isdef);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 113) numpunct<_Elem>(
    _Locinfo(_Ploc->c_str()), 0, true);
  return (4);
  }

protected:
 virtual ~numpunct()
  {
  _Tidy();
  }

 numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj, _Isdef);
  }
  }

 void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
  {
  const lconv *_Ptr = _Lobj._Getlconv();

  _Grouping = 0;
  _Falsename = 0;
  _Truename = 0;

  try {
  _Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, (char *)0, _Lobj._Getcvt());

  _Falsename = _Maklocstr(_Lobj._Getfalse(), (_Elem *)0, _Lobj._Getcvt());
  _Truename = _Maklocstr(_Lobj._Gettrue(), (_Elem *)0, _Lobj._Getcvt());
  } catch (...) {
  _Tidy();
  throw;
  }

  _Dp = _Maklocchr(_Ptr->decimal_point[0], (_Elem *)0, _Lobj._Getcvt());
  _Kseparator =
   _Maklocchr(_Ptr->thousands_sep[0], (_Elem *)0, _Lobj._Getcvt());

  if (_Isdef)
   {

   _Dp = _Maklocchr('.', (_Elem *)0, _Lobj._Getcvt());
   _Kseparator = _Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
   }
  }

 virtual _Elem do_decimal_point() const
  {
  return (_Dp);
  }

 virtual _Elem do_thousands_sep() const
  {
  return (_Kseparator);
  }

 virtual string do_grouping() const
  {
  return (string(_Grouping));
  }

 virtual string_type do_falsename() const
  {
  return (string_type(_Falsename));
  }

 virtual string_type do_truename() const
  {
  return (string_type(_Truename));
  }

private:
 void _Tidy()
  {
  ::std:: _DebugHeapDelete((void *)(void *)_Grouping);
  ::std:: _DebugHeapDelete((void *)(void *)_Falsename);
  ::std:: _DebugHeapDelete((void *)(void *)_Truename);
  }

 const char *_Grouping;
 _Elem _Dp;
 _Elem _Kseparator;
 const _Elem *_Falsename;
 const _Elem *_Truename;
 };


template<class _Elem>
 class numpunct_byname
  : public numpunct<_Elem>
 {
public:
 explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
  : numpunct<_Elem>(_Locname, _Refs)
  {
  }


 explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
  : numpunct<_Elem>(_Str.c_str(), _Refs)
  {
  }


protected:
 virtual ~numpunct_byname()
  {
  }
 };


template<class _Elem>
                         locale::id numpunct<_Elem>::id;


template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_get
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 245) num_get<_Elem, _InIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_get()
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 _Locinfo::_Cvtvec _Cvt;

public:
 explicit num_get(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _InIt iter_type;

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   _Bool& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }


 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   __int64& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned __int64& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }


 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

protected:
 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   _Bool& _Val) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 366);
  int _Ans = -1;

  if (_Iosbase.flags() & ios_base::boolalpha)
   {
   typedef typename _Mystr::size_type _Mystrsize;
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str((_Mystrsize)1, (char_type)0);
   _Str += _Punct_fac.falsename();
   _Str += (char_type)0;
   _Str += _Punct_fac.truename();
   _Ans = _Getloctxt(_First, _Last, (size_t)2, _Str.c_str());
   }
  else
   {
   char _Ac[32], *_Ep;
   int _Errno = 0;
   const unsigned long _Ulo = :: _Stoulx(_Ac, &_Ep,
    _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
     _Iosbase.getloc()), &_Errno);
   if (_Ep != _Ac && _Errno == 0 && _Ulo <= 1)
    _Ans = _Ulo;
   }

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ans < 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans != 0;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 403);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = (unsigned short)(_Ac[0] == '-'
    ? 0 -_Ans : _Ans);
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 426);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffffffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = _Ac[0] == '-' ? 0 -_Ans : _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 448);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const long _Ans = :: _Stolx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 468);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned long _Ans = :: _Stoulx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }


 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   __int64& _Val) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 489);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const __int64 _Ans = :: _Stollx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned __int64& _Val) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 509);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned __int64 _Ans = :: _Stoullx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }


 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 530);
  char _Ac[8 + 36 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  float _Ans = :: _Stofx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexpf(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 554);
  char _Ac[8 + 36 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  double _Ans = :: _Stodx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexp(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 578);
  char _Ac[8 + 36 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  long double _Ans = :: _Stoldx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexpl(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 602);
  char _Ac[32], *_Ep;
  int _Errno = 0;


  int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex,
   _Iosbase.getloc());
  const unsigned __int64 _Ans =
   (sizeof (void *) == sizeof (unsigned long))
    ? (unsigned __int64):: _Stoulx(_Ac, &_Ep, _Base, &_Errno)
    : :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);







  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = (void *)((char *)0 + _Ans);
  return (_First);
  }

private:
 int __cdecl _Getifld(char *_Ac,
  _InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
   const locale& _Loc) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Loc);
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Grouping.size() == 0
   ? (_Elem)0 : _Punct_fac.thousands_sep();
  const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
  char *_Ptr = _Ac;

  if (_First == _Last)
   ;
  else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
   *_Ptr++ = '-', ++_First;

  _Basefield &= ios_base::basefield;
  int _Base = _Basefield == ios_base::oct ? 8
   : _Basefield == ios_base::hex ? 16
   : _Basefield == ios_base::_Fmtzero ? 0 : 10;

  bool _Seendigit = false;
  bool _Nonzero = false;

  if (_First != _Last && *_First == _E0)
   {
   _Seendigit = true, ++_First;
   if (_First != _Last && (*_First == _Maklocchr('x', (_Elem *)0, _Cvt)
     || *_First == _Maklocchr('X', (_Elem *)0, _Cvt))
    && (_Base == 0 || _Base == 16))
    _Base = 16, _Seendigit = false, ++_First;
   else if (_Base == 0)
    _Base = 8;
   }

  int _Dlen = _Base == 0 || _Base == 10 ? 10
   : _Base == 8 ? 8 : 16 + 6;
  string _Groups((size_t)1, (char)_Seendigit);
  size_t _Group = 0;

  for (char *const _Pe = &_Ac[32 - 1];
   _First != _Last; ++_First)
   if (:: memchr((const char *)"0123456789abcdefABCDEF",
    *_Ptr = _Maklocbyte((_Elem)*_First, _Cvt), _Dlen) != 0)
    {
    if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
     ++_Ptr, _Nonzero = true;
    _Seendigit = true;
    if (_Groups[_Group] != 127)
     ++_Groups[_Group];
    }
   else if (_Groups[_Group] == '\0'
    || _Kseparator == (_Elem)0
    || *_First != _Kseparator)
    break;
   else
    {
    _Groups.append((string::size_type)1, '\0');
    ++_Group;
    }

  if (_Group == 0)
   ;
  else if ('\0' < _Groups[_Group])
   ++_Group;
  else
   _Seendigit = false;

  for (const char *_Pg = _Grouping.c_str(); _Seendigit && 0 < _Group; )
   if (*_Pg == 127)
    break;
   else if (0 < --_Group && *_Pg != _Groups[_Group]
    || 0 == _Group && *_Pg < _Groups[_Group])
    _Seendigit = false;
   else if ('\0' < _Pg[1])
    ++_Pg;

  if (_Seendigit && !_Nonzero)
   *_Ptr++ = '0';
  else if (!_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Base);
  }

 int __cdecl _Getffld(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
   return (_Getffldx(_Ac, _First, _Last,
    _Iosbase, _Phexexp));

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
  char *_Ptr = _Ac;
  bool _Bad = false;

  if (_First == _Last)
   ;
  else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
   *_Ptr++ = '-', ++_First;

  bool _Seendigit = false;
  int _Significant = 0;
  int _Pten = 0;

  if (*_Grouping.c_str() == 127 || *_Grouping.c_str() <= '\0')
   for (; _First != _Last
    && _E0 <= *_First && *_First <= _E0 + 9;
     _Seendigit = true, ++_First)
    if (36 <= _Significant)
     ++_Pten;
    else if (*_First == _E0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = (char)((*_First - _E0) + '0');
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if (_E0 <= *_First && *_First <= _E0 + 9)
     {
     _Seendigit = true;
     if (36 <= _Significant)
      ++_Pten;
     else if (*_First == _E0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = (char)((*_First - _E0) + '0');
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   for (const char *_Pg = _Grouping.c_str();
    !_Bad && 0 < _Group; )
    if (*_Pg == 127)
     break;
    else if (0 < --_Group && *_Pg != _Groups[_Group]
     || 0 == _Group && *_Pg < _Groups[_Group])
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_Seendigit && _Significant == 0)
   *_Ptr++ = '0';

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (_Significant == 0)
   {
   for (; _First != _Last && *_First == _E0;
    _Seendigit = true, ++_First)
    --_Pten;
   if (_Pten < 0)
    *_Ptr++ = '0', ++_Pten;
   }

  for (; _First != _Last
    && _E0 <= *_First && *_First <= _E0 + 9;
    _Seendigit = true, ++_First)
   if (_Significant < 36)
    {
    *_Ptr++ = (char)((*_First - _E0) + '0');
    ++_Significant;
    }

  if (_Seendigit && _First != _Last
   && (*_First == _Maklocchr('e', (_Elem *)0, _Cvt)
    || *_First == _Maklocchr('E', (_Elem *)0, _Cvt)))
   {
   *_Ptr++ = 'e', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _E0; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && _E0 <= *_First && *_First <= _E0 + 9;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = (char)((*_First - _E0) + '0');
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Pten);
  }

 int __cdecl _Hexdig(const _Elem _Dig, const _Elem _E0,
  const _Elem _Al, const _Elem _Au) const
  {
  if (_E0 <= _Dig && _Dig <= _E0 + 9)
   return (_Dig - _E0);
  else if (_Al <= _Dig && _Dig <= _Al + 5)
   return (_Dig - _Al + 10);
  else if (_Au <= _Dig && _Dig <= _Au + 5)
   return (_Dig - _Au + 10);
  else
   return (-1);
  }

 int __cdecl _Getffldx(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
  const _Elem _Al = _Maklocchr('a', (_Elem *)0, _Cvt);
  const _Elem _Au = _Maklocchr('A', (_Elem *)0, _Cvt);
  char *_Ptr = _Ac;
  bool _Bad = false;
  int _Dig;

  if (_First == _Last)
   ;
  else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
   *_Ptr++ = '-', ++_First;

  *_Ptr++ = '0';
  *_Ptr++ = 'x';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Phex = 0;

  if (_First == _Last || *_First != _E0)
   ;
  else if (++_First != _Last
   && (*_First == _Maklocchr('x', (_Elem *)0, _Cvt)
     || *_First == _Maklocchr('X', (_Elem *)0, _Cvt)))
   ++_First;
  else
   _Seendigit = true;

  if (*_Grouping.c_str() == 127 || *_Grouping.c_str() <= '\0')
   for (; _First != _Last
    && 0 <= (_Dig = _Hexdig(*_First, _E0, _Al, _Au));
     _Seendigit = true, ++_First)
    if (36 <= _Significant)
     ++_Phex;
    else if (*_First == _E0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = "0123456789abcdef"[_Dig];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if (0 <= (_Dig = _Hexdig(*_First, _E0, _Al, _Au)))
     {
     _Seendigit = true;
     if (36 <= _Significant)
      ++_Phex;
     else if (*_First == _E0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = "0123456789abcdef"[_Dig];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   for (const char *_Pg = _Grouping.c_str();
    !_Bad && 0 < _Group; )
    if (*_Pg == 127)
     break;
    else if (0 < --_Group && *_Pg != _Groups[_Group]
     || 0 == _Group && *_Pg < _Groups[_Group])
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_Seendigit && _Significant == 0)
   *_Ptr++ = '0';

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (_Significant == 0)
   {
   for (; _First != _Last && *_First == _E0;
    _Seendigit = true, ++_First)
    --_Phex;
   if (_Phex < 0)
    *_Ptr++ = '0', ++_Phex;
   }

  for (; _First != _Last
    && 0 <= (_Dig = _Hexdig(*_First, _E0, _Al, _Au));
    _Seendigit = true, ++_First)
   if (_Significant < 36)
    {
    *_Ptr++ = "0123456789abcdef"[_Dig];
    ++_Significant;
    }

  if (_Seendigit && _First != _Last
   && (*_First == _Maklocchr('p', (_Elem *)0, _Cvt)
    || *_First == _Maklocchr('P', (_Elem *)0, _Cvt)))
   {
   *_Ptr++ = 'p', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _E0; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && _E0 <= *_First && *_First <= _E0 + 9;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = (char)((*_First - _E0) + '0');
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  *_Phexexp = _Phex;
  return (0);
  }
 };


template<class _Elem,
 class _InIt>
                         locale::id num_get<_Elem, _InIt>::id;


template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_put
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 1053) num_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_put()
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 _Locinfo::_Cvtvec _Cvt;

public:
 explicit num_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _OutIt iter_type;

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, _Bool _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }


 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, __int64 _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned __int64 _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }


 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

protected:
 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, _Bool _Val) const
  {
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 1144);
  if (!(_Iosbase.flags() & ios_base::boolalpha))
   return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
  else
   {
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str;
   if (_Val)
    _Str.assign(_Punct_fac.truename());
   else
    _Str.assign(_Punct_fac.falsename());

   size_t _Fillcount = _Iosbase.width() <= 0
    || (size_t)_Iosbase.width() <= _Str.size()
     ? 0 : (size_t)_Iosbase.width() - _Str.size();

   if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
    {
    _Dest = _Rep(_Dest, _Fill, _Fillcount);
    _Fillcount = 0;
    }
   _Dest = _Put(_Dest, _Str.c_str(), _Str.size());
   _Iosbase.width(0);
   return (_Rep(_Dest, _Fill, _Fillcount));
   }
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
    _Iosbase.flags()), _Val)));
  }


 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, __int64 _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned __int64 _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
    _Iosbase.flags()), _Val)));
  }


 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  char _Buf[8 + 36 + 64], _Fmt[8];
  streamsize _Precision = _Iosbase.precision() <= 0
   && !(_Iosbase.flags() & ios_base::fixed)
    ? 6 : _Iosbase.precision();
  int _Significance = 36 < _Precision
   ? 36 : (int)_Precision;
  _Precision -= _Significance;
  size_t _Beforepoint = 0;
  size_t _Afterpoint = 0;

  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
   && _Val * 0.5 != _Val)
   {
   bool _Signed = _Val < 0;
   if (_Signed)
    _Val = -_Val;

   for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)
    _Val /= 1e10;

   if (0 < _Val)
    for (; 10 <= _Precision && _Val <= 1e-35
     && _Afterpoint < 5000; _Afterpoint += 10)
     {
     _Val *= 1e10;
     _Precision -= 10;
     }

   if (_Signed)
    _Val = -_Val;
   }

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
   _Beforepoint, _Afterpoint, (size_t)_Precision,
    :: sprintf_s(_Buf, sizeof (_Buf),
     _Ffmt(_Fmt, 0, _Iosbase.flags()),
     _Significance, _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  char _Buf[8 + 36 + 64], _Fmt[8];
  streamsize _Precision = _Iosbase.precision() <= 0
   && !(_Iosbase.flags() & ios_base::fixed)
    ? 6 : _Iosbase.precision();
  int _Significance = 36 < _Precision
   ? 36 : (int)_Precision;
  _Precision -= _Significance;
  size_t _Beforepoint = 0;
  size_t _Afterpoint = 0;

  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)
   {
   bool _Signed = _Val < 0;
   if (_Signed)
    _Val = -_Val;

   for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)
    _Val /= 1e10;

   if (0 < _Val)
    for (; 10 <= _Precision && _Val <= 1e-35
     && _Afterpoint < 5000; _Afterpoint += 10)
     {
     _Val *= 1e10;
     _Precision -= 10;
     }

   if (_Signed)
    _Val = -_Val;
   }

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
   _Beforepoint, _Afterpoint, (size_t)_Precision,
    :: sprintf_s(_Buf, sizeof (_Buf),
     _Ffmt(_Fmt, 'L', _Iosbase.flags()),
     _Significance, _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  char _Buf[2 * 32];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
  }

private:
 char *__cdecl _Ffmt(char *_Fmt,
  char _Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showpoint)
   *_Ptr++ = '#';
  *_Ptr++ = '.';
  *_Ptr++ = '*';
  if (_Spec != '\0')
   *_Ptr++ = _Spec;

  ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
  *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
   : _Ffl == ios_base::hexfloat ? 'a'
   : _Ffl == ios_base::scientific ? 'e' : 'g';
  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Fput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
   size_t _Beforepoint, size_t _Afterpoint,
    size_t _Trailing, size_t _Count) const
  {
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 1334);
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Punct_fac.thousands_sep();
  string _Groupstring;
  const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
  size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

  char _Enders[3];
  _Enders[0] = :: localeconv()->decimal_point[0];
  _Enders[1] = 'e';
  _Enders[2] = '\0';

  const char *_Eptr = (const char *):: memchr(_Buf,
   'e', _Count);
  const char *_Pointptr = (const char *):: memchr(_Buf,
   _Enders[0], _Count);
  if (_Pointptr == 0)
   _Trailing = 0;

  if (*_Grouping.c_str() != 127 && '\0' < *_Grouping.c_str())
   {
   _Groupstring.append(_Buf, _Count);
   if (_Eptr == 0)
    _Groupstring.append(_Trailing, '0');
   else
    {
    if (_Pointptr == 0)
     {
     _Groupstring.append(_Beforepoint, '0');
     _Beforepoint = 0;
     }
    _Groupstring.insert(_Eptr - _Buf, _Trailing, '0');
    }
   _Trailing = 0;

   if (_Pointptr == 0)
    _Groupstring.append(_Beforepoint, '0');
   else
    {
    _Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');
    _Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');
    _Afterpoint = 0;
    }
   _Beforepoint = 0;

   const char *_Pg = _Grouping.c_str();
   size_t _Off = :: strcspn(&_Groupstring[0], &_Enders[0]);
   while (*_Pg != 127 && '\0' < *_Pg
    && (size_t)*_Pg < _Off - _Prefix)
    {
    _Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');
    if ('\0' < _Pg[1])
     ++_Pg;
    }

   _Buf = &_Groupstring[0];
   _Trailing = 0;
   _Count = _Groupstring.size();
   }

  size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;
  _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Fillcount
    ? 0 : (size_t)_Iosbase.width() - _Fillcount;
  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else if (_Adjustfield == ios_base::internal)
   {
   if (0 < _Prefix)
    {
    _Dest = _Putc(_Dest, _Buf, 1);
    ++_Buf, --_Count;
    }
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }

  _Pointptr = (const char *):: memchr(_Buf,
   _Enders[0], _Count);
  if (_Pointptr != 0)
   {
   size_t _Fracoffset = _Pointptr - _Buf + 1;
   _Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);
   _Dest = _Rep(_Dest, _E0, _Beforepoint);
   _Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);
   _Dest = _Rep(_Dest, _E0, _Afterpoint);
   _Buf += _Fracoffset, _Count -= _Fracoffset;
   }

  _Eptr = (const char *):: memchr(_Buf,
   'e', _Count);
  if (_Eptr != 0)
   {
   size_t _Expoffset = _Eptr - _Buf + 1;
   _Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);
   _Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;
   _Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
    ? "E" : "e", 1);
   _Buf += _Expoffset, _Count -= _Expoffset;
   }

  _Dest = _Putgrouped(_Dest, _Buf, _Count,
   _Kseparator);
  _Dest = _Rep(_Dest, _E0, _Trailing);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 char *__cdecl _Ifmt(char *_Fmt,
  const char *_Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showbase)
   *_Ptr++ = '#';
  if (_Spec[0] != 'L')
   *_Ptr++ = _Spec[0];
  else

   {
   *_Ptr++ = 'I';
   *_Ptr++ = '6';
   *_Ptr++ = '4';
   }

  ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
  *_Ptr++ = _Basefield == ios_base::oct ? 'o'
   : _Basefield != ios_base::hex ? _Spec[1]
   : _Flags & ios_base::uppercase ? 'X' : 'x';
  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Iput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
  {
  _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xlocnum", 1480);
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
   : *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
   : 0;

  if (*_Grouping.c_str() != 127 && '\0' < *_Grouping.c_str())
   {
   const char *_Pg = _Grouping.c_str();
   size_t _Off = _Count;
   while (*_Pg != 127 && '\0' < *_Pg
    && (size_t)*_Pg < _Off - _Prefix)
    {
    _Off -= *_Pg;

                                        ;
    ::memmove_s((&_Buf[_Off + 1]), (_Count + 1 - _Off), (&_Buf[_Off]), (_Count + 1 - _Off));


    _Buf[_Off] = '\0', ++_Count;
    if ('\0' < _Pg[1])
     ++_Pg;
    }
   }

  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Putc(_Dest, _Buf, _Prefix);
   _Buf += _Prefix, _Count -= _Prefix;
   _Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;
   }

  _Dest = _Putgrouped(_Dest, _Buf, _Count,
   _Punct_fac.thousands_sep());
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 _OutIt __cdecl _Put(_OutIt _Dest,
  const _Elem *_Ptr, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)
   *_Dest = *_Ptr;
  return (_Dest);
  }

 _OutIt __cdecl _Putc(_OutIt _Dest,
  const char *_Ptr, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)
   *_Dest = _Maklocchr(*_Ptr, (_Elem *)0, _Cvt);
  return (_Dest);
  }

 _OutIt __cdecl _Putgrouped(_OutIt _Dest,
  const char *_Ptr, size_t _Count, _Elem _Kseparator) const
  {
  for (; ; ++_Ptr, --_Count)
   {
   const char *_Pend =
    (const char *):: memchr(_Ptr, '\0', _Count);
   size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

   _Dest = _Putc(_Dest, _Ptr, _Groupsize);
   _Ptr += _Groupsize, _Count -= _Groupsize;
   if (_Count == 0)
    break;
   if (_Kseparator != (_Elem)0)
    _Dest = _Rep(_Dest, _Kseparator, 1);
   }
  return (_Dest);
  }

 _OutIt __cdecl _Rep(_OutIt _Dest,
  _Elem _Ch, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, ++_Dest)
   *_Dest = _Ch;
  return (_Dest);
  }
 };


template<class _Elem,
 class _OutIt>
                         locale::id num_put<_Elem, _OutIt>::id;




template locale::id numpunct<char>::id;

template class __declspec(dllimport) num_get<char,
 istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) num_put<char,
 ostreambuf_iterator<char, char_traits<char> > >;

template locale::id numpunct<wchar_t>::id;

template class __declspec(dllimport) num_get<wchar_t,
 istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) num_put<wchar_t,
 ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;



}



#pragma warning(pop)
#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ios"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)

#pragma warning(disable: 4189)

namespace std {

template<class _Elem,
 class _Traits>
 class basic_ios
  : public ios_base
 {
public:
 typedef basic_ios<_Elem, _Traits> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ctype<_Elem> _Ctype;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_ios(_Mysb *_Strbuf)
  {
  init(_Strbuf);
  }

 virtual ~basic_ios()
  {
  }

 void clear(iostate _State = goodbit,
  bool _Reraise = false)
  {
  ios_base::clear((iostate)(_Mystrbuf == 0
   ? (int)_State | (int)badbit : (int)_State), _Reraise);
  }

 void clear(io_state _State)
  {
  clear((iostate)_State);
  }

 void setstate(iostate _State,
  bool _Reraise = false)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Reraise);
  }

 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }

 _Myt& copyfmt(const _Myt& _Right)
  {
  _Tiestr = _Right.tie();
  _Fillch = _Right.fill();
  ios_base::copyfmt(_Right);
  return (*this);
  }

 _Myos * tie() const
  {
  return (_Tiestr);
  }

 _Myos * tie(_Myos *_Newtie)
  {
  _Myos *_Oldtie = _Tiestr;
  _Tiestr = _Newtie;
  return (_Oldtie);
  }

 _Mysb * rdbuf() const
  {
  return (_Mystrbuf);
  }

 _Mysb * rdbuf(_Mysb *_Strbuf)
  {
  _Mysb *_Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  clear();
  return (_Oldstrbuf);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = ios_base::imbue(_Loc);
  if (rdbuf() != 0)
   rdbuf()->pubimbue(_Loc);
  return (_Oldlocale);
  }

 _Elem fill() const
  {
  return (_Fillch);
  }

 _Elem fill(_Elem _Newfill)
  {
  _Elem _Oldfill = _Fillch;
  _Fillch = _Newfill;
  return (_Oldfill);
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.narrow(_Ch, _Dflt));
  }

 _Elem widen(char _Byte) const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.widen(_Byte));
  }

 void move(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  ios_base::swap(_Right);
  ::std:: swap(_Fillch, _Right._Fillch);
  ::std:: swap(_Tiestr, _Right._Tiestr);
  }

 void set_rdbuf(_Mysb *_Strbuf)
  {
  _Mystrbuf = _Strbuf;
  }

protected:
 void init(_Mysb *_Strbuf = 0,
  bool _Isstd = false)
  {
  _Init();
  _Mystrbuf = _Strbuf;
  _Tiestr = 0;
  _Fillch = widen(' ');

  if (_Mystrbuf == 0)
   setstate(badbit);

  if (_Isstd)
   _Addstd(this);
  }

                    basic_ios()
  {
  }

private:
 _Mysb *_Mystrbuf;
 _Myos *_Tiestr;
 _Elem _Fillch;

                    basic_ios(const _Myt&);
 _Myt& operator=(const _Myt&);
 };



template class __declspec(dllimport) basic_ios<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ios<wchar_t,
 char_traits<wchar_t> >;






inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl dec(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::dec, ios_base::basefield);
 return (_Iosbase);
 }


inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::floatfield);
 return (_Iosbase);
 }


inline ios_base& __cdecl fixed(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::fixed, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hex(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hex, ios_base::basefield);
 return (_Iosbase);
 }


 namespace tr1 {
inline ::std:: ios_base& __cdecl hexfloat(::std:: ios_base& _Iosbase)
 {
 _Iosbase.setf(::std:: ios_base::hexfloat, ::std:: ios_base::floatfield);
 return (_Iosbase);
 }
 }




using tr1::hexfloat;



inline ios_base& __cdecl internal(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::internal, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl left(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::left, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::uppercase);
 return (_Iosbase);
 }

inline ios_base& __cdecl oct(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::oct, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl right(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::right, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::scientific, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::uppercase);
 return (_Iosbase);
 }
}

#pragma warning(pop)
#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ostream"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)

#pragma warning(disable: 4189 4390)

namespace std {
#line 34 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ostream"
template<class _Elem,
 class _Traits>
 class basic_ostream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_ostream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
 typedef num_put<_Elem, _Iter> _Nput;

 explicit basic_ostream(
  basic_streambuf<_Elem, _Traits> *_Strbuf,

  bool _Isstd = false)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_ostream(_Uninitialized, bool _Addit = true)
  {
  if (_Addit)
   ios_base::_Addstd(this);
  }

                    basic_ostream(_Myt&& _Right)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   _Myios::swap(_Right);
  }

 virtual ~basic_ostream()
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Ostr)
   : _Myostr(_Ostr)
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Lock();
   }

                     ~_Sentry_base()
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Unlock();
   }

  _Myt& _Myostr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Ostr)
   : _Sentry_base(_Ostr)
   {
   if (_Ostr.good() && _Ostr.tie() != 0)
    _Ostr.tie()->flush();
   _Ok = _Ostr.good();
   }

                     ~sentry()
   {

   if (!uncaught_exception())
    this->_Myostr._Osfx();




   }

                     operator ::std:: _Bool_type() const
   {
   return (_Ok ? (&::std:: _Bool_struct::_Member) : 0);
   }

 private:
  bool _Ok;

                     sentry(const sentry&);
  sentry& operator=(const sentry&);
  };

 bool opfx()
  {
  if (ios_base::good() && _Myios::tie() != 0)
   _Myios::tie()->flush();
  return (ios_base::good());
  }

 void osfx()
  {
  _Osfx();
  }

 void _Osfx()
  {
  try {
  if (ios_base::flags() & ios_base::unitbuf)
   flush();
  } catch (...) {
  }
  }
#line 186 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ostream"
 _Myt& operator<<(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
  _Debug_pointer(_Pfn, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ostream", 188);
  return ((*_Pfn)(*this));
  }

 _Myt& operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
  _Debug_pointer(_Pfn, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ostream", 194);
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
  _Debug_pointer(_Pfn, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ostream", 201);
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator<<(_Bool _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());
   ios_base::fmtflags _Bfl =
    ios_base::flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned short)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }
#line 260 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ostream"
 _Myt& operator<<(unsigned short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());
   ios_base::fmtflags _Bfl =
    ios_base::flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned int)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator<<(__int64 _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned __int64 _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator<<(float _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (double)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(const void *_Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   for (int_type _Meta = _Traits::eof(); ; _Copied = true)
    {
    try {
    _Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
     ? _Strbuf->sgetc() : _Strbuf->snextc();
    } catch (...) {
     _Myios::setstate(ios_base::failbit);
     throw;
    }

    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     break;

    try {
     if (_Traits::eq_int_type(_Traits::eof(),
      _Myios::rdbuf()->sputc(
       _Traits::to_char_type(_Meta))))
      {
      _State |= ios_base::badbit;
      break;
      }
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

  ios_base::width(0);
  _Myios::setstate(_Strbuf == 0 ? ios_base::badbit
   : !_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& put(_Elem _Ch)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputc(_Ch)))
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& write(const _Elem *_Str,
  streamsize _Count)
  {

  if (0 < _Count)
   _Debug_pointer(_Str, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ostream", 549);


  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else
   {
   try {
   if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& flush()
  {
  ios_base::iostate _State = ios_base::goodbit;
  if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)
   _State |= ios_base::badbit;
  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& seekp(pos_type _Pos)
  {
  if (!ios_base::fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 _Myt& seekp(off_type _Off, ios_base::seekdir _Way)
  {
  if (!ios_base::fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 pos_type tellp()
  {
  if (!ios_base::fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::out));
  else
   return (pos_type(_BADOFF));
  }
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_ostream<_Elem, _Traits>& _Left,
  basic_ostream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }
#line 667 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\ostream"
template class __declspec(dllimport) basic_ostream<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ostream<wchar_t,
 char_traits<wchar_t> >;






template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
 {
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize):: strlen(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
 {
 ios_base::iostate _State = ios_base::goodbit;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (_Ok)
  {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr,
  const char *_Val)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, char _Ch)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>&& _Ostr, _Ty _Val)
 {
 return (_Ostr << _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Ostr.widen('\n'));
 _Ostr.flush();
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Elem());
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.flush();
 return (_Ostr);
 }

__declspec(dllimport) inline basic_ostream<char, char_traits<char> >&
 __cdecl endl(basic_ostream<char, char_traits<char> >& _Ostr)
 {
 _Ostr.put('\n');
 _Ostr.flush();
 return (_Ostr);
 }

__declspec(dllimport) inline basic_ostream<wchar_t, char_traits<wchar_t> >&
 __cdecl endl(basic_ostream<wchar_t,
  char_traits<wchar_t> >& _Ostr)
 {
 _Ostr.put('\n');
 _Ostr.flush();
 return (_Ostr);
 }


__declspec(dllimport) inline basic_ostream<unsigned short, char_traits<unsigned short> >&
 __cdecl endl(basic_ostream<unsigned short,
  char_traits<unsigned short> >& _Ostr)
 {
 _Ostr.put('\n');
 _Ostr.flush();
 return (_Ostr);
 }


__declspec(dllimport) inline basic_ostream<char, char_traits<char> >&
 __cdecl ends(basic_ostream<char, char_traits<char> >& _Ostr)
 {
 _Ostr.put('\0');
 return (_Ostr);
 }

__declspec(dllimport) inline basic_ostream<wchar_t, char_traits<wchar_t> >&
 __cdecl ends(basic_ostream<wchar_t,
  char_traits<wchar_t> >& _Ostr)
 {
 _Ostr.put('\0');
 return (_Ostr);
 }


__declspec(dllimport) inline basic_ostream<unsigned short, char_traits<unsigned short> >&
 __cdecl ends(basic_ostream<unsigned short,
  char_traits<unsigned short> >& _Ostr)
 {
 _Ostr.put('\0');
 return (_Ostr);
 }


__declspec(dllimport) inline basic_ostream<char, char_traits<char> >&
 __cdecl flush(basic_ostream<char, char_traits<char> >& _Ostr)
 {
 _Ostr.flush();
 return (_Ostr);
 }

__declspec(dllimport) inline basic_ostream<wchar_t, char_traits<wchar_t> >&
 __cdecl flush(basic_ostream<wchar_t,
  char_traits<wchar_t> >& _Ostr)
 {
 _Ostr.flush();
 return (_Ostr);
 }


__declspec(dllimport) inline basic_ostream<unsigned short, char_traits<unsigned short> >&
 __cdecl flush(basic_ostream<unsigned short,
  char_traits<unsigned short> >& _Ostr)
 {
 _Ostr.flush();
 return (_Ostr);
 }




template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
   const error_code& _Errcode)
 {
 return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
 }

}

#pragma warning(pop)
#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\istream"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)

#pragma warning(disable: 4189)

namespace std {

template<class _Elem,
 class _Traits>
 class basic_istream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_istream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef istreambuf_iterator<_Elem, _Traits> _Iter;
 typedef ctype<_Elem> _Ctype;
 typedef num_get<_Elem, _Iter> _Nget;


 explicit basic_istream(_Mysb *_Strbuf,
  bool _Isstd = false)

  : _Chcount(0)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_istream(_Uninitialized)
  {
  ios_base::_Addstd(this);
  }

                    basic_istream(_Myt&& _Right)
  : _Chcount(_Right._Chcount)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  _Right._Chcount = 0;
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  _Myios::swap(_Right);
  ::std:: swap(_Chcount, _Right._Chcount);
  }

 virtual ~basic_istream()
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;


 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Istr)
   : _Myistr(_Istr)
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Lock();
   }

                     ~_Sentry_base()
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Unlock();
   }

  _Myt& _Myistr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Istr, bool _Noskip = false)
   : _Sentry_base(_Istr)
   {
   _Ok = this->_Myistr._Ipfx(_Noskip);
   }

                     operator ::std:: _Bool_type() const
   {
   return (_Ok ? (&::std:: _Bool_struct::_Member) : 0);
   }

 private:
  bool _Ok;

                     sentry(const sentry&);
  sentry& operator=(const sentry&);
  };

 bool _Ipfx(bool _Noskip = false)
  {
  if (ios_base::good())
   {
   if (_Myios::tie() != 0)
    _Myios::tie()->flush();

   if (!_Noskip && ios_base::flags() & ios_base::skipws)
    {
    const _Ctype& _Ctype_fac = use_facet< _Ctype >(ios_base::getloc());

    try {
    int_type _Meta = _Myios::rdbuf()->sgetc();

    for (; ; _Meta = _Myios::rdbuf()->snextc())
     if (_Traits::eq_int_type(_Traits::eof(), _Meta))
      {
      _Myios::setstate(ios_base::eofbit);
      break;
      }
     else if (!_Ctype_fac.is(_Ctype::space,
      _Traits::to_char_type(_Meta)))
      break;
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

   if (ios_base::good())
    return (true);
   }
  _Myios::setstate(ios_base::failbit);
  return (false);
  }

 bool ipfx(bool _Noskip = false)
  {
  return (_Ipfx(_Noskip));
  }

 void isfx()
  {
  }
#line 179 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\istream"
 _Myt& operator>>(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
  _Debug_pointer(_Pfn, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\istream", 181);
  return ((*_Pfn)(*this));
  }

 _Myt& operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
  _Debug_pointer(_Pfn, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\istream", 187);
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
  _Debug_pointer(_Pfn, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\istream", 194);
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator>>(_Bool& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-32768) || 32767 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = (short)_Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }
#line 253 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\istream"
 _Myt& operator>>(unsigned short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-2147483647 - 1) || 2147483647 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = _Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator>>(__int64& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned __int64& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator>>(float& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(void *& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      if (_Traits::eq_int_type(_Traits::eof(),
       _Strbuf->sputc(_Traits::to_char_type(_Meta))))
       break;
     } catch (...) {
      break;
     }
     _Copied = true;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(!_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 int_type get()
  {
  int_type _Meta = 0;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   _Meta = _Myios::rdbuf()->sgetc();

   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    _State |= ios_base::eofbit | ios_base::failbit;
   else
    {
    _Myios::rdbuf()->sbumpc();
    ++_Chcount;
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& get(_Elem *_Str, streamsize _Count)
  {
  return (get(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& get(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  _Debug_pointer(_Str, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\istream", 537);
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Traits::to_char_type(_Meta) == _Delim)
     break;
    else
     {
     *_Str++ = _Traits::to_char_type(_Meta);
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_Chcount == 0
   ? _State | ios_base::failbit : _State);
  *_Str = _Elem();
  return (*this);
  }

 _Myt& get(_Elem& _Ch)
  {
  int_type _Meta = get();
  if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
   _Ch = _Traits::to_char_type(_Meta);
  return (*this);
  }

 _Myt& get(_Mysb& _Strbuf)
  {
  return (get(_Strbuf, _Myios::widen('\n')));
  }

 _Myt& get(_Mysb& _Strbuf, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      _Elem _Ch = _Traits::to_char_type(_Meta);
      if (_Ch == _Delim
       || _Traits::eq_int_type(_Traits::eof(),
        _Strbuf.sputc(_Ch)))
       break;
     } catch (...) {
      break;
     }
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  if (_Chcount == 0)
   _State |= ios_base::failbit;
  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& getline(_Elem *_Str, streamsize _Count)
  {
  return (getline(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& getline(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  _Debug_pointer(_Str, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\istream", 629);
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   int_type _Metadelim = _Traits::to_int_type(_Delim);

   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Meta == _Metadelim)
     {
     ++_Chcount;
     _Myios::rdbuf()->sbumpc();
     break;
     }
    else if (--_Count <= 0)
     {
     _State |= ios_base::failbit;
     break;
     }
    else
     {
     ++_Chcount;
     *_Str++ = _Traits::to_char_type(_Meta);
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  *_Str = _Elem();
  _Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& ignore(streamsize _Count = 1,
  int_type _Metadelim = _Traits::eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   for (; ; )
    {
    int_type _Meta;
    if (_Count != 2147483647 && --_Count < 0)
     break;
    else if (_Traits::eq_int_type(_Traits::eof(),
     _Meta = _Myios::rdbuf()->sbumpc()))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     ++_Chcount;
     if (_Meta == _Metadelim)
      break;
     }
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& read(_Elem *_Str, streamsize _Count)
  {
  _Debug_pointer(_Str, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\istream", 708);
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
   _Chcount += _Num;
   if (_Num != _Count)
    _State |= ios_base::eofbit | ios_base::failbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize readsome(_Elem *_Str,
  streamsize _Count)
  {
  _Debug_pointer(_Str, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\istream", 730);
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);
  streamsize _Num;

  if (!_Ok)
   _State |= ios_base::failbit;
  else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
   _State |= ios_base::eofbit;
  else if (0 < _Num)
   read(_Str, _Num < _Count ? _Num : _Count);

  _Myios::setstate(_State);
  return (gcount());
  }

 int_type peek()
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  int_type _Meta = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Meta = _Myios::rdbuf()->sgetc()))
    _State |= ios_base::eofbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& putback(_Elem _Ch)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputbackc(_Ch)))
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& unget()
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sungetc()))
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize gcount() const
  {
  return (_Chcount);
  }

 int sync()
  {
  ios_base::iostate _State = ios_base::goodbit;
  int _Ans;

  if (_Myios::rdbuf() == 0)
   _Ans = -1;
  else if (_Myios::rdbuf()->pubsync() == -1)
   {
   _State |= ios_base::badbit;
   _Ans = -1;
   }
  else
   _Ans = 0;

  _Myios::setstate(_State);
  return (_Ans);
  }

 _Myt& seekg(pos_type _Pos)
  {
  if (!ios_base::fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::in) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 _Myt& seekg(off_type _Off, ios_base::seekdir _Way)
  {
  if (!ios_base::fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::in) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 pos_type tellg()
  {
  if (!ios_base::fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::in));
  else
   return (pos_type(_BADOFF));
  }

private:
 streamsize _Chcount;
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_istream<_Elem, _Traits>& _Left,
  basic_istream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }
#line 910 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\istream"
template class __declspec(dllimport) basic_istream<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_istream<wchar_t,
 char_traits<wchar_t> >;





template<class _Elem,
 class _Traits>
 class basic_iostream
 : public basic_istream<_Elem, _Traits>,
  public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_iostream<_Elem, _Traits> _Myt;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
  : _Myis(_Strbuf, false),
   _Myos(_Noinit, false)
  {
  }

                    basic_iostream(_Myt&& _Right)
  : _Myis(_Right.rdbuf(), false),
   _Myos(_Noinit, false)
  {
  _Myios::init();
  _Myios::move(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   _Myios::swap(_Right);
  }

 virtual ~basic_iostream()
  {
  }
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_iostream<_Elem, _Traits>& _Left,
  basic_iostream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }



template class __declspec(dllimport) basic_iostream<char, char_traits<char> >;
template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t> >;





template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits> && _Istr, _Elem *_Str)
 {
 _Debug_pointer(_Str, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\istream", 990);
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;
 ios_base::iostate _State = ios_base::goodbit;
 _Elem *_Str0 = _Str;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

  try {
  streamsize _Count = 0 < _Istr.width() ? _Istr.width() : 2147483647;
  typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
  _Elem _Ch;
  for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Ch = _Traits::to_char_type(_Meta))
     || _Ch == _Elem())
    break;
   else
    *_Str++ = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 *_Str = _Elem();
 _Istr.width(0);
 _Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits> && _Istr, _Elem& _Ch)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 typename _Myis::int_type _Meta;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  try {
  _Meta = _Istr.rdbuf()->sbumpc();
  if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   _State |= ios_base::eofbit | ios_base::failbit;
  else
   _Ch = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits> && _Istr, signed char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits> && _Istr, signed char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits> && _Istr, unsigned char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits> && _Istr, unsigned char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
 {
 return (::std:: move(_Istr) >> _Str);
 }

template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
 {
 return (::std:: move(_Istr) >> _Ch);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char *_Str)
 {
 return (::std:: move(_Istr) >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char& _Ch)
 {
 return (::std:: move(_Istr) >> (char&)_Ch);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
 {
 return (::std:: move(_Istr) >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
 {
 return (::std:: move(_Istr) >> (char&)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_istream<_Elem, _Traits>&
  operator>>(basic_istream<_Elem, _Traits>&& _Istr, _Ty& _Val)
 {
 return (_Istr >> _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>&
  __cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const typename _Myis::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

   try {
   for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(_Ctype::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }

__declspec(dllimport) inline basic_istream<char, char_traits<char> >&
 __cdecl ws(basic_istream<char, char_traits<char> >& _Istr)
 {
 typedef char _Elem;
 typedef char_traits<_Elem> _Traits;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const ctype<_Elem>& _Ctype_fac =
    use_facet< ctype<_Elem> >(_Istr.getloc());

   try {
   for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(ctype<_Elem>::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }

__declspec(dllimport) inline basic_istream<wchar_t, char_traits<wchar_t> >&
 __cdecl ws(basic_istream<wchar_t, char_traits<wchar_t> >& _Istr)
 {
 typedef wchar_t _Elem;
 typedef char_traits<_Elem> _Traits;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const ctype<_Elem>& _Ctype_fac =
    use_facet< ctype<_Elem> >(_Istr.getloc());

   try {
   for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(ctype<_Elem>::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }


__declspec(dllimport) inline basic_istream<unsigned short, char_traits<unsigned short> >&
 __cdecl ws(basic_istream<unsigned short, char_traits<unsigned short> >& _Istr)
 {
 typedef unsigned short _Elem;
 typedef char_traits<_Elem> _Traits;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const ctype<_Elem>& _Ctype_fac =
    use_facet< ctype<_Elem> >(_Istr.getloc());

   try {
   for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(ctype<_Elem>::space,
     _Traits::to_char_type(_Meta)))
     break;
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }

}

#pragma warning(pop)
#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\iostream"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)
namespace std {
#line 25 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\iostream"
                        extern __declspec(dllimport) istream cin, *_Ptr_cin;
                        extern __declspec(dllimport) ostream cout, *_Ptr_cout;
                        extern __declspec(dllimport) ostream cerr, *_Ptr_cerr;
                        extern __declspec(dllimport) ostream clog, *_Ptr_clog;

                        extern __declspec(dllimport) wistream wcin, *_Ptr_wcin;
                        extern __declspec(dllimport) wostream wcout, *_Ptr_wcout;
                        extern __declspec(dllimport) wostream wcerr, *_Ptr_wcerr;
                        extern __declspec(dllimport) wostream wclog, *_Ptr_wclog;


class __declspec(dllimport) _Winit {
public:
 __thiscall _Winit();
 __thiscall ~_Winit();
private:
                         static int _Init_cnt;
 };


}
#pragma warning(pop)
#pragma pack(pop)
#line 33 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Vector3D.h"


namespace CaptainLucha
{
 template<class Real>
 class Vector3D
 {
 public:
  Vector3D() : x((Real)0.0), y((Real)0.0), z((Real)0.0) {};
  Vector3D(Real x, Real y, Real z) : x(x), y(y), z(z) {};
  Vector3D(const Vector3D<Real>& vect) : x(vect.x), y(vect.y), z(vect.z) {};

  Real x;
  Real y;
  Real z;

  Vector3D& operator= (const Vector3D& rhs);

  template<typename OtherT>
  operator Vector3D<OtherT>()
  {
   return Vector3D<OtherT>((OtherT)x, (OtherT)y, (OtherT)z);
  }

  bool operator==(const Vector3D& rhs) const;
  bool operator!=(const Vector3D& rhs) const;

  Vector3D operator+(const Vector3D& rhs) const;
  Vector3D operator-(const Vector3D& rhs) const;
  Vector3D operator*(Real scalar) const;
  Vector3D operator/(Real scalar) const;

  Vector3D& operator+=(const Vector3D& rkV);
  Vector3D& operator-=(const Vector3D& rkV);
  Vector3D& operator*=(Real fScalar);
  Vector3D& operator/=(Real fScalar);

  Real& operator[] (int i);
  Real operator[] (int i) const;

  template<typename J>
  friend std::ostream& operator<<(std::ostream& out, const Vector3D<J>& vect);

  operator Vector3D<int>() const;
  operator Vector3D<float>() const;
  operator Vector3D<double>() const;

  Real Length() const;
  Real SquaredLength() const;
  Real Dot(const Vector3D& rhs) const;

  void Normalize();

  Vector3D CrossProduct(const Vector3D& rhs) const;

  bool Equals(const Vector3D& rhs) const;
 };

 template<typename J>
 std::ostream& operator<<(std::ostream& out, const Vector3D<J>& vect)
 {
  out << vect.x << " " << vect.y << " " << vect.z;
  return out;
 }

 typedef Vector3D<int> Vector3Di;
 typedef Vector3D<float> Vector3Df;
 typedef Vector3D<double> Vector3Dd;


#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Vector3D.inl"
#line 29 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Vector3D.inl"
template<class Real>
Vector3D<Real>& Vector3D<Real>::operator= (const Vector3D& rhs)
{
 x = rhs.x;
 y = rhs.y;
 z = rhs.z;
 return *this;
}

template<class Real>
bool Vector3D<Real>::operator== (const Vector3D<Real>& rhs) const
{
 return Equals(rhs);
}

template<class Real>
bool Vector3D<Real>::operator!= (const Vector3D<Real>& rhs) const
{
 return !Equals(rhs);
}

template<class Real>
Vector3D<Real> Vector3D<Real>::operator+ (const Vector3D& rhs) const
{
 return Vector3D<Real>(x + rhs.x, y + rhs.y, z + rhs.z);
}

template<class Real>
Vector3D<Real> Vector3D<Real>::operator- (const Vector3D& rhs) const
{
 return Vector3D<Real>(x - rhs.x, y - rhs.y, z - rhs.z);
}

template<class Real>
Vector3D<Real> Vector3D<Real>::operator* (Real scalar) const
{
 return Vector3D<Real>(x*scalar, y*scalar, z*scalar);
}

template<class Real>
Vector3D<Real> Vector3D<Real>::operator/ (Real scalar) const
{
 return Vector3D<Real>(x/scalar, y/scalar, z/scalar);
}

template<class Real>
Vector3D<Real>& Vector3D<Real>::operator+= (const Vector3D& rhs)
{
 x += rhs.x;
 y += rhs.y;
 z += rhs.z;
 return *this;
}

template<class Real>
Vector3D<Real>& Vector3D<Real>::operator-= (const Vector3D& rhs)
{
 x -= rhs.x;
 y -= rhs.y;
 z -= rhs.z;
 return *this;
}

template<class Real>
Vector3D<Real>& Vector3D<Real>::operator*= (Real scalar)
{
 x *= scalar;
 y *= scalar;
 z *= scalar;
 return *this;
}

template<class Real>
Vector3D<Real>& Vector3D<Real>::operator/= (Real scalar)
{
 x /= scalar;
 y /= scalar;
 z /= scalar;
 return *this;
}

template<class Real>
Real& Vector3D<Real>::operator[] (int i)
{
 return (&x)[i];
}

template<class Real>
Real Vector3D<Real>::operator[] (int i) const
{
 return (&x)[i];
}

template<class Real>
Real Vector3D<Real>::Length() const
{
 return std::sqrt(SquaredLength());
}

template<class Real>
Real Vector3D<Real>::SquaredLength() const
{
 return this->Dot(*this);
}

template<class Real>
Real Vector3D<Real>::Dot(const Vector3D& rhs) const
{
 return x * rhs.x + y * rhs.y + z * rhs.z;
}

template<class Real>
void Vector3D<Real>::Normalize()
{
 Real l = Length();

 if(abs(l) > 0.0001)
  *this /= l;
}

template<class Real>
Vector3D<Real> Vector3D<Real>::CrossProduct(const Vector3D& rhs) const
{
 return Vector3D<Real>(
  y * rhs.z - z * rhs.y,
  z * rhs.x - x * rhs.z,
  x * rhs.y - y * rhs.x);
}

template<class Real>
Vector3D<Real>::operator Vector3D<int>() const
{
 return Vector3D<int>
  (static_cast<int>(x),
  static_cast<int>(y),
  static_cast<int>(z));
}

template<class Real>
Vector3D<Real>::operator Vector3D<float>() const
{
 return Vector3D<float>(static_cast<float>(x),
  static_cast<float>(y),
  static_cast<float>(z));
}

template<class Real>
Vector3D<Real>::operator Vector3D<double>() const
{
 return Vector3D<double>
  (static_cast<double>(x),
  static_cast<double>(y),
  static_cast<double>(z));
}
#line 102 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Vector3D.h"

}
#line 32 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Vector4D.h"


namespace CaptainLucha
{
 template<class Real>
 class Vector4D
 {
 public:
  Vector4D() : x((Real)0.0), y((Real)0.0), z((Real)0.0), w((Real)0.0) {};
  Vector4D(Real x, Real y, Real z, Real w) : x(x), y(y), z(z), w(w) {};
  Vector4D(const Vector4D<Real>& vect) : x(vect.x), y(vect.y), z(vect.z), w(vect.w) {};

  Real x;
  Real y;
  Real z;
  Real w;

  Vector4D& operator= (const Vector4D& rhs);

  bool operator==(const Vector4D& rhs) const;
  bool operator!=(const Vector4D& rhs) const;

  Vector4D operator+(const Vector4D& rhs) const;
  Vector4D operator-(const Vector4D& rhs) const;
  Vector4D operator*(Real scalar) const;
  Vector4D operator/(Real scalar) const;

  Vector4D& operator+=(const Vector4D& rkV);
  Vector4D& operator-=(const Vector4D& rkV);
  Vector4D& operator*=(Real fScalar);
  Vector4D& operator/=(Real fScalar);

  Real& operator[] (int i);
  Real operator[] (int i) const;

  template<typename J>
  friend std::ostream& operator<<(std::ostream& out, const Vector4D<J>& vect);

  Real Length() const;
  Real SquaredLength() const;
  Real Dot(const Vector4D& rhs) const;

  void Normalize();

  bool Equals(const Vector4D& rhs) const;

  static const Vector4D ZERO;
  static const Vector4D UNITX;
  static const Vector4D UNITY;
  static const Vector4D UNITZ;
  static const Vector4D UNITW;
 };

 template<typename J>
 std::ostream& operator<<(std::ostream& out, const Vector4D<J>& vect)
 {
  out << vect.x << " " << vect.y << " " << vect.z << " " << vect.w;
  return out;
 }

 typedef Vector4D<int> Vector4Di;
 typedef Vector4D<float> Vector4Df;
 typedef Vector4D<double> Vector4Dd;


#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Vector4D.inl"
#line 29 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Vector4D.inl"
template<class Real>
Vector4D<Real>& Vector4D<Real>::operator= (const Vector4D& rhs)
{
 x = rhs.x;
 y = rhs.y;
 z = rhs.z;
 w = rhs.w;
 return *this;
}

template<class Real>
bool Vector4D<Real>::operator== (const Vector4D<Real>& rhs) const
{
 return Equals(rhs);
}

template<class Real>
bool Vector4D<Real>::operator!= (const Vector4D<Real>& rhs) const
{
 return !Equals(rhs);
}

template<class Real>
Vector4D<Real> Vector4D<Real>::operator+ (const Vector4D& rhs) const
{
 return Vector4D<Real>(x + rhs.x, y + rhs.y, z + rhs.z, w + rhs.w);
}

template<class Real>
Vector4D<Real> Vector4D<Real>::operator- (const Vector4D& rhs) const
{
 return Vector4D<Real>(x - rhs.x, y - rhs.y, z - rhs.z, w - rhs.w);
}


template<class Real>
Vector4D<Real> Vector4D<Real>::operator* (Real scalar) const
{
 return Vector4D<Real>(x*scalar, y*scalar, z*scalar, w*scalar);
}

template<class Real>
Vector4D<Real> Vector4D<Real>::operator/ (Real scalar) const
{
 return Vector4D<Real>(x/scalar, y/scalar, z/scalar, w/scalar);
}

template<class Real>
Vector4D<Real>& Vector4D<Real>::operator+= (const Vector4D& rhs)
{
 x += rhs.x;
 y += rhs.y;
 z += rhs.z;
 w += rhs.w;
 return *this;
}

template<class Real>
Vector4D<Real>& Vector4D<Real>::operator-= (const Vector4D& rhs)
{
 x -= rhs.x;
 y -= rhs.y;
 z -= rhs.z;
 w -= rhs.w;
 return *this;
}

template<class Real>
Vector4D<Real>& Vector4D<Real>::operator*= (Real scalar)
{
 x *= scalar;
 y *= scalar;
 z *= scalar;
 w *= scalar;
 return *this;
}

template<class Real>
Vector4D<Real>& Vector4D<Real>::operator/= (Real scalar)
{
 x /= scalar;
 y /= scalar;
 z /= scalar;
 w /= scalar;
 return *this;
}

template<class Real>
Real& Vector4D<Real>::operator[] (int i)
{
 return (&x)[i];
}

template<class Real>
Real Vector4D<Real>::operator[] (int i) const
{
 return (&x)[i];
}

template<class Real>
Real Vector4D<Real>::Length() const
{
 return std::sqrt(SquaredLength());
}

template<class Real>
Real Vector4D<Real>::SquaredLength() const
{
 return this->Dot(*this);
}

template<class Real>
Real Vector4D<Real>::Dot(const Vector4D& rhs) const
{
 return x * rhs.x + y * rhs.y + z * rhs.z + w * rhs.w;
}

template<class Real>
void Vector4D<Real>::Normalize()
{
 Real length = Length();

 if(!FloatEquality(length, (Real)0.0))
  *this /= length;
}
#line 96 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Vector4D.h"

}
#line 32 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix4D.h"


#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix3D.h"
#line 34 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix3D.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\math.h"
#line 34 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix3D.h"


namespace CaptainLucha
{

 template <class Real>
 class Matrix3D
 {
 public:
  Matrix3D(bool isIdentity = false);
  Matrix3D(const Matrix3D& rhs);
  Matrix3D(Real aa, Real ab, Real ac,
        Real ba, Real bb, Real bc,
     Real ca, Real cb, Real cc);
  Matrix3D(const Vector3D<Real>& r1,
     const Vector3D<Real>& r2,
     const Vector3D<Real>& r3);

  void MakeZero();
  void MakeIdentity();
  void MakeRotation(const Vector3D<Real>& axis, Real angle);
  void MakeRotation(Real pitch, Real yaw, Real roll = 0);

  Vector3D<Real> GetAxis(int i) const;

  void SetSkewSymmetric(const Vector3D<Real>& vect);

  Real GetValueAtIndex(int i, int j) const;

  Matrix3D GetTranspose() const;
  Matrix3D GetInverse() const;

  Real* Data() {return elements_;}
  const Real* Data() const {return elements_;}

  Matrix3D& operator= (const Matrix3D& rkM);

  bool operator== (const Matrix3D& rhs) const;
  bool operator!= (const Matrix3D& rhs) const;

  Matrix3D operator+ (const Matrix3D& rhs) const;
  Matrix3D operator- (const Matrix3D& rhs) const;
  Matrix3D operator* (const Matrix3D& rhs) const;
  Matrix3D operator* (Real scalar) const;
  Matrix3D operator/ (Real scalar) const;

  Matrix3D& operator+= (const Matrix3D& rhs);
  Matrix3D& operator-= (const Matrix3D& rhs);
  Matrix3D& operator*= (Real fScalar);
  Matrix3D& operator/= (Real fScalar);

  operator Matrix3D<float>() const;
  operator Matrix3D<double>() const;

  Real& operator[] (int i) {return elements_[i];}
  Real operator[] (int i) const {return elements_[i];}

  Vector3D<Real> operator* (const Vector3D<Real>& rhs) const;

  static const Matrix3D ZERO;
  static const Matrix3D IDENTITY;

 private:
  int GetIndex(int i, int j) const;
  int CompareArrays (const Matrix3D& rhs) const;

  Real elements_[9];
 };

typedef Matrix3D<float> Matrix3Df;
typedef Matrix3D<double> Matrix3Dd;


#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix3D.inl"
#line 29 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix3D.inl"
#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix3D.h"
#line 29 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix3D.inl"


template<class Real>
Matrix3D<Real>::Matrix3D(bool isIdentity = false)
{
 if(isIdentity)
  MakeIdentity();
 else
  MakeZero();
}

template<class Real>
Matrix3D<Real>::Matrix3D(const Matrix3D<Real>& rhs)
{
 *this = rhs;
}

template<class Real>
Matrix3D<Real>::Matrix3D(
 Real aa, Real ab, Real ac,
 Real ba, Real bb, Real bc,
 Real ca, Real cb, Real cc)
{
 elements_[0] = aa;
 elements_[1] = ab;
 elements_[2] = ac;
 elements_[3] = ba;
 elements_[4] = bb;
 elements_[5] = bc;
 elements_[6] = ca;
 elements_[7] = cb;
 elements_[8] = cc;
}

template<class Real>
Matrix3D<Real>::Matrix3D(
 const Vector3D<Real>& r1,
 const Vector3D<Real>& r2,
 const Vector3D<Real>& r3)
{
 elements_[0] = r1.x;
 elements_[3] = r1.y;
 elements_[6] = r1.z;

 elements_[1] = r2.x;
 elements_[4] = r2.y;
 elements_[7] = r2.z;

 elements_[2] = r3.x;
 elements_[5] = r3.y;
 elements_[8] = r3.z;
}

template<class Real>
void Matrix3D<Real>::MakeZero()
{
 memset(elements_, 0, 9*sizeof(Real));
}

template<class Real>
void Matrix3D<Real>::MakeIdentity()
{
 elements_[0] = 1;
 elements_[1] = 0;
 elements_[2] = 0;
 elements_[3] = 0;
 elements_[4] = 1;
 elements_[5] = 0;
 elements_[6] = 0;
 elements_[7] = 0;
 elements_[8] = 1;
}

template<class Real>
void Matrix3D<Real>::MakeRotation(const Vector3D<Real>& axisIN, Real angle)
{
 Vector3D<Real> axis = axisIN;
 axis.Normalize();

 Real c = cos(angle);
 Real s = sin(angle);

 Real t = 1 - c;
 Real xx = axis.x*axis.x;
 Real yy = axis.y*axis.y;
 Real zz = axis.z*axis.z;
 Real xy = axis.x*axis.y;
 Real xz = axis.x*axis.z;
 Real yz = axis.y*axis.z;

 Real sx = s*axis.x;
 Real sy = s*axis.y;
 Real sz = s*axis.z;

 Matrix3D<Real> result(
  t*xx + c, t*xy - sz, t*xz + sy,
  t*xy + sz, t*yy + c, t*yz - sx,
  t*xz - sy, t*yz + sx, t*zz + c);
 (*this) = result.GetTranspose();
}

template<class Real>
void Matrix3D<Real>::MakeRotation(Real pitch, Real yaw, Real roll = 0)
{
 Real cx = cos(pitch);
 Real sx = sin(pitch);
 Real cy = cos(yaw);
 Real sy = sin(yaw);
 Real cz = cos(roll);
 Real sz = sin(roll);

 elements_[0] = cy * cz;
 elements_[1] = cy * sz;
 elements_[2] = -sy;
 elements_[3] = -cx * sz + sx * sy * cz;
 elements_[4] = cx * cz + sx * sy * sz;
 elements_[5] = sx * cy;
 elements_[6] = sx * sz + cx * sy * cz;
 elements_[7] = -sx * cz + cx * sy * sz;
 elements_[8] = cx * cy;
}

template<class Real>
Vector3D<Real> Matrix3D<Real>::GetAxis(int i) const
{
 if(i == 0)
  return Vector3D<Real>(elements_[0], elements_[1], elements_[2]);
 if(i == 1)
  return Vector3D<Real>(elements_[3], elements_[4], elements_[5]);
 if(i == 2)
  return Vector3D<Real>(elements_[6], elements_[7], elements_[8]);

 return Vector3D<Real>();
}

template<class Real>
void Matrix3D<Real>::SetSkewSymmetric(const Vector3D<Real>& vect)
{
 MakeIdentity();
 elements_[0] = elements_[4] = elements_[8] = 0;
 elements_[1] = -vect.z;
 elements_[2] = vect.y;
 elements_[3] = vect.z;
 elements_[5] = -vect.x;
 elements_[6] = -vect.y;
 elements_[7] = vect.x;
 *this = GetTranspose();
}

template<class Real>
Real Matrix3D<Real>::GetValueAtIndex(int i, int j) const
{
 return elements_[GetIndex(i, j)];
}

template<class Real>
Matrix3D<Real> Matrix3D<Real>::GetTranspose() const
{
 Matrix3D<Real> result = *this;

 result.elements_[3] = elements_[1];
 result.elements_[1] = elements_[3];

 result.elements_[6] = elements_[2];
 result.elements_[2] = elements_[6];

 result.elements_[7] = elements_[5];
 result.elements_[5] = elements_[7];

 return result;
}

template<class Real>
Matrix3D<Real> Matrix3D<Real>::GetInverse() const
{
 Matrix3D<Real> result;

 result.elements_[0] = elements_[4]*elements_[8] - elements_[5]*elements_[7];
 result.elements_[3] = elements_[2]*elements_[7] - elements_[1]*elements_[8];
 result.elements_[6] = elements_[1]*elements_[5] - elements_[2]*elements_[4];
 result.elements_[1] = elements_[5]*elements_[6] - elements_[3]*elements_[8];
 result.elements_[4] = elements_[0]*elements_[8] - elements_[2]*elements_[6];
 result.elements_[7] = elements_[2]*elements_[3] - elements_[0]*elements_[5];
 result.elements_[2] = elements_[3]*elements_[7] - elements_[4]*elements_[6];
 result.elements_[5] = elements_[1]*elements_[6] - elements_[0]*elements_[7];
 result.elements_[8] = elements_[0]*elements_[4] - elements_[1]*elements_[3];

 Real t =
  elements_[0]*result.elements_[GetIndex(0, 0)]
   + elements_[1]*result.elements_[GetIndex(1, 0)]
   + elements_[2]*result.elements_[GetIndex(2, 0)];

 if(abs(t) < 0.00000001)
 {

 }

 result /= t;
 return result.GetTranspose();
}

template<class Real>
Matrix3D<Real>& Matrix3D<Real>::operator= (const Matrix3D<Real>& rhs)
{
 memcpy(elements_, rhs.elements_, 9*sizeof(Real));
 return *this;
}

template<class Real>
bool Matrix3D<Real>::operator== (const Matrix3D<Real>& rhs) const
{
 return CompareArrays(rhs) == 0;
}

template<class Real>
bool Matrix3D<Real>::operator!= (const Matrix3D<Real>& rhs) const
{
 return CompareArrays(rhs) != 0;
}

template<class Real>
Matrix3D<Real> Matrix3D<Real>::operator+ (const Matrix3D<Real>& rhs) const
{
 Matrix3D<Real> result = *this;
 for (int i = 0; i < 9; i++)
  result.elements_[i] += rhs.elements_[i];
 return result;
}

template<class Real>
Matrix3D<Real> Matrix3D<Real>::operator- (const Matrix3D<Real>& rhs) const
{
 Matrix3D<Real> result = *this;
 for (int i = 0; i < 9; i++)
  result.elements_[i] -= rhs.elements_[i];
 return result;
}

template<class Real>
Matrix3D<Real> Matrix3D<Real>::operator* (const Matrix3D<Real>& rhs) const
{
 Matrix3D<Real> result;
 for(int row = 0; row < 3; ++row)
 {
  for(int col = 0; col < 3; ++col)
  {
   int i = GetIndex(col, row);
   for(int j = 0; j < 3; ++j)
    result.elements_[i] += elements_[GetIndex(j, row)] * rhs.elements_[GetIndex(col, j)];
  }
 }

 return result;
}

template<class Real>
Matrix3D<Real> Matrix3D<Real>::operator* (Real scalar) const
{
 Matrix3D<Real> result = *this;
 for (int i = 0; i < 9; i++)
  result.elements_[i] *= scalar;
 return result;
}

template<class Real>
Matrix3D<Real> Matrix3D<Real>::operator/ (Real scalar) const
{
 Matrix3D<Real> result = *this;
 for (int i = 0; i < 9; i++)
  result.elements_[i] /= scalar;
 return result;
}

template<class Real>
Matrix3D<Real>& Matrix3D<Real>::operator+= (const Matrix3D<Real>& rhs)
{
 for (int i = 0; i < 9; i++)
  elements_[i] += rhs.elements_[i];
 return *this;
}

template<class Real>
Matrix3D<Real>& Matrix3D<Real>::operator-= (const Matrix3D<Real>& rhs)
{
 for (int i = 0; i < 9; i++)
  elements_[i] -= rhs.elements_[i];
 return *this;
}

template<class Real>
Matrix3D<Real>& Matrix3D<Real>::operator*= (Real scalar)
{
 for (int i = 0; i < 9; i++)
  elements_[i] *= scalar;
 return *this;
}

template<class Real>
Matrix3D<Real>& Matrix3D<Real>::operator/= (Real scalar)
{
 for (int i = 0; i < 9; i++)
  elements_[i] /= scalar;
 return *this;
}

template<class Real>
Vector3D<Real> Matrix3D<Real>::operator* (const Vector3D<Real>& rhs) const
{
 return Vector3D<Real>(
  rhs.x*elements_[0] + rhs.y*elements_[3] + rhs.z*elements_[6],
  rhs.x*elements_[1] + rhs.y*elements_[4] + rhs.z*elements_[7],
  rhs.x*elements_[2] + rhs.y*elements_[5] + rhs.z*elements_[8]);
}

template<class Real>
Matrix3D<Real>::operator Matrix3D<float>() const
{
 Matrix3D<float> result;
 result[0] = static_cast<float>(elements_[0]);
 result[1] = static_cast<float>(elements_[1]);
 result[2] = static_cast<float>(elements_[2]);
 result[3] = static_cast<float>(elements_[3]);
 result[4] = static_cast<float>(elements_[4]);
 result[5] = static_cast<float>(elements_[5]);
 result[6] = static_cast<float>(elements_[6]);
 result[7] = static_cast<float>(elements_[7]);
 result[8] = static_cast<float>(elements_[8]);
 return result;
}

template<class Real>
Matrix3D<Real>::operator Matrix3D<double>() const
{
 Matrix3D<double> result;
 result[0] = static_cast<double>(elements_[0]);
 result[1] = static_cast<double>(elements_[1]);
 result[2] = static_cast<double>(elements_[2]);
 result[3] = static_cast<double>(elements_[3]);
 result[4] = static_cast<double>(elements_[4]);
 result[5] = static_cast<double>(elements_[5]);
 result[6] = static_cast<double>(elements_[6]);
 result[7] = static_cast<double>(elements_[7]);
 result[8] = static_cast<double>(elements_[8]);
 return result;
}




template<class Real>
int Matrix3D<Real>::GetIndex(int i, int j) const
{
 return i + j * 3;
}

template<class Real>
int Matrix3D<Real>::CompareArrays (const Matrix3D<Real>& rhs) const
{
 return memcmp(elements_, rhs.elements_, 9*sizeof(Real));
}
#line 106 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix3D.h"

}
#line 34 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix4D.h"


namespace CaptainLucha
{
 class Quaternion;


 template <class Real>
 class Matrix4D
 {
 public:
  Matrix4D(bool isIdentity = false);
  Matrix4D(const Matrix4D& rhs);
  Matrix4D(Real radians, Real x, Real y, Real z);
  Matrix4D(Real translateX, Real translateY, Real translateZ);
  Matrix4D(
   Real aa, Real ab, Real ac, Real ad,
   Real ba, Real bb, Real bc, Real bd,
   Real ca, Real cb, Real cc, Real cd,
   Real da, Real db, Real dc, Real dd);


  void MakeZero();
  void MakeIdentity();

  Vector4D<Real> GetRow(int i);
  Vector4D<Real> GetColumn(int j);

  Matrix3D<Real> GetRotation() const;
  Vector3D<Real> GetTranslate() const;

  Vector3D<Real> GetAxis(int i) const;

  Matrix4D& MakeRotationRad(Real angle, Real x, Real y, Real z);
  Matrix4D& MakeRotation(Real angle, Real x, Real y, Real z);
  Matrix4D& MakeRotation(const Vector3D<Real>& dir, const Vector3D<Real>& up);
  Matrix4D& MakeTransformation(const Vector3D<Real>& trans, const Quaternion& orientation);

  void SetRotation(const Matrix3D<Real>& rotation);
  void SetTranslate(const Vector3D<Real>& translate);
  void SetSkewSymmetric(const Vector3D<Real>& vect);

  Vector3D<Real> TransformPosition(const Vector3D<Real>& vect) const;
  Vector3D<Real> TransformRotation(const Vector3D<Real>& vect) const;
  Vector4D<Real> Transform(const Vector4D<Real>& vect) const;

  Real* Data() {return elements_;}

  Real GetDeterminant() const;

  Matrix4D GetTranspose() const;
  Matrix4D GetInverse() const;

  void CreateLookAt(const Vector3Df& pos, const Vector3Df& lookAt, const Vector3Df& up);

  Matrix4D& operator= (const Matrix4D& rkM);

  bool operator== (const Matrix4D& rhs) const;
  bool operator!= (const Matrix4D& rhs) const;

  Matrix4D operator+ (const Matrix4D& rhs) const;
  Matrix4D operator- (const Matrix4D& rhs) const;
  Matrix4D operator* (const Matrix4D& rhs) const;
  Matrix4D operator* (Real scalar) const;
  Matrix4D operator/ (Real scalar) const;

  Matrix4D& operator+= (const Matrix4D& rhs);
  Matrix4D& operator-= (const Matrix4D& rhs);
  Matrix4D& operator*= (Real fScalar);
  Matrix4D& operator/= (Real fScalar);

  Vector4D<Real> operator* (const Vector4D<Real>& rhs) const;

  Real& operator[] (int i) {return elements_[i];}
  Real operator[] (int i) const {return elements_[i];}

  operator Matrix4D<float>() const;
  operator Matrix4D<double>() const;

  static const Matrix4D ZERO;
  static const Matrix4D IDENTITY;

 private:
  int GetIndex(int i, int j) const;
  int CompareArrays (const Matrix4D& rhs) const;

  Real elements_[16];
 };

typedef Matrix4D<float> Matrix4Df;
typedef Matrix4D<double> Matrix4Dd;


#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix4D.inl"
#line 29 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix4D.inl"
#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix4D.h"
#line 29 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix4D.inl"



#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\math.h"
#line 32 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix4D.inl"


template<class Real>
Matrix4D<Real>::Matrix4D(bool isIdentity = false)
{
 if(isIdentity)
  *this = Matrix4D<Real>::IDENTITY;
 else
  *this = Matrix4D<Real>::ZERO;
}

template<class Real>
Matrix4D<Real>::Matrix4D(const Matrix4D<Real>& rhs)
{
 *this = rhs;
}

template<class Real>
Matrix4D<Real>::Matrix4D(Real radians, Real x, Real y, Real z)
{
 MakeRotationRad(radians, x, y, z);
}

template<class Real>
Matrix4D<Real>::Matrix4D(Real translateX, Real translateY, Real translateZ)
{
 *this = Matrix4D<Real>::IDENTITY;
 elements_[12] = translateX;
 elements_[13] = translateY;
 elements_[14] = translateZ;
}

template<class Real>
Matrix4D<Real>::Matrix4D(
 Real aa, Real ab, Real ac, Real ad,
 Real ba, Real bb, Real bc, Real bd,
 Real ca, Real cb, Real cc, Real cd,
 Real da, Real db, Real dc, Real dd)
{
 elements_[0] = aa;
 elements_[1] = ab;
 elements_[2] = ac;
 elements_[3] = ad;
 elements_[4] = ba;
 elements_[5] = bb;
 elements_[6] = bc;
 elements_[7] = bd;
 elements_[8] = ca;
 elements_[9] = cb;
 elements_[10] = cc;
 elements_[11] = cd;
 elements_[12] = da;
 elements_[13] = db;
 elements_[14] = dc;
 elements_[15] = dd;
}

template<class Real>
void Matrix4D<Real>::MakeZero()
{
 memset(elements_, 0, 16*sizeof(Real));
}

template<class Real>
void Matrix4D<Real>::MakeIdentity()
{
 elements_[0] = 1;
 elements_[1] = 0;
 elements_[2] = 0;
 elements_[3] = 0;
 elements_[4] = 0;
 elements_[5] = 1;
 elements_[6] = 0;
 elements_[7] = 0;
 elements_[8] = 0;
 elements_[9] = 0;
 elements_[10]= 1;
 elements_[11]= 0;
 elements_[12]= 0;
 elements_[13]= 0;
 elements_[14]= 0;
 elements_[15]= 1;
}

template<class Real>
Vector4D<Real> Matrix4D<Real>::GetRow(int i)
{
 return Vector4D<Real>(
  elements_[GetIndex(i, 0)],
  elements_[GetIndex(i, 1)],
  elements_[GetIndex(i, 2)],
  elements_[GetIndex(i, 3)]);
}

template<class Real>
Vector4D<Real> Matrix4D<Real>::GetColumn(int j)
{
 return Vector4D<Real>(
  elements_[GetIndex(0, j)],
  elements_[GetIndex(1, j)],
  elements_[GetIndex(2, j)],
  elements_[GetIndex(3, j)]);
}

template<class Real>
Matrix3D<Real> Matrix4D<Real>::GetRotation() const
{
 return Matrix3D<Real>(
  elements_[0], elements_[1], elements_[2],
  elements_[4], elements_[5], elements_[6],
  elements_[8], elements_[9], elements_[10]);
}

template<class Real>
Vector3D<Real> Matrix4D<Real>::GetTranslate() const
{
 return Vector3D<Real>(elements_[12], elements_[13], elements_[14]);
}

template<class Real>
Vector3D<Real> Matrix4D<Real>::GetAxis(int i) const
{
 if(i == 0)
  return Vector3D<Real>(elements_[0], elements_[1], elements_[2]);
 if(i == 1)
  return Vector3D<Real>(elements_[4], elements_[5], elements_[6]);
 if(i == 2)
  return Vector3D<Real>(elements_[8], elements_[9], elements_[10]);
 if(i == 3)
  return Vector3D<Real>(elements_[12], elements_[13], elements_[14]);

 return Vector3D<Real>();

}

template<class Real>
Matrix4D<Real>& Matrix4D<Real>::MakeRotationRad(Real angle, Real x, Real y, Real z)
{
 float length = sqrt(x*x + y*y + z*z);
 x /= length;
 y /= length;
 z /= length;

 Real c = cos(angle);
 Real s = sin(angle);

 Real t = 1 - c;
 Real xx = x*x;
 Real yy = y*y;
 Real zz = z*z;
 Real xy = x*y;
 Real xz = x*z;
 Real yz = y*z;

 Real sx = s*x;
 Real sy = s*y;
 Real sz = s*z;

 elements_[0] = t*xx + c;
 elements_[1] = t*xy + sz;
 elements_[2] = t*xz - sy;
 elements_[3] = 0.0;

 elements_[4] = t*xy - sz;
 elements_[5] = t*yy + c;
 elements_[6] = t*yz + sx;
 elements_[7] = 0.0;

 elements_[8] = t*xz + sy;
 elements_[9] = t*yz - sx;
 elements_[10] = t*zz + c;
 elements_[11] = 0.0;

 elements_[12] = 0.0;
 elements_[13] = 0.0;
 elements_[14] = 0.0;
 elements_[15] = 1.0;

 return *this;
}

template<class Real>
Matrix4D<Real>& Matrix4D<Real>::MakeRotation(Real angle, Real x, Real y, Real z)
{
 MakeRotationRad((angle * (float)3.14159265358979323846) / 180.0f, x, y, z);
 return *this;
}

template<class Real>
Matrix4D<Real>& Matrix4D<Real>::MakeRotation(const Vector3D<Real>& dir, const Vector3D<Real>& up)
{
 Vector3Df z(dir);
 z.Normalize();

 Vector3Df x = up.CrossProduct(z);
 x.Normalize();

 Vector3Df y = z.CrossProduct(x);

 *this = Matrix4Df
  (x.x, y.x, z.x, 0.0f,
  x.y, y.y, z.y, 0.0f,
  x.z, y.z, z.z, 0.0f,
  0.0f, 0.0f, 0.0f, 1.0f);

 return *this;
}

template<class Real>
Matrix4D<Real>& Matrix4D<Real>::MakeTransformation(const Vector3D<Real>& trans, const Quaternion& orientation)
{
 elements_[0] = 1 - 2 * orientation.j * orientation.j - 2 * orientation.k * orientation.k;
 elements_[4] = 2 * orientation.i * orientation.j - 2 * orientation.r * orientation.k;
 elements_[8] = 2 * orientation.i * orientation.k + 2 * orientation.r * orientation.j;
 elements_[3] = 0.0f;
 elements_[1] = 2 * orientation.i * orientation.j + 2 * orientation.r * orientation.k;
 elements_[5] = 1 - 2 * orientation.i * orientation.i - 2 * orientation.k * orientation.k;
 elements_[9] = 2 * orientation.j * orientation.k - 2 * orientation.r * orientation.i;
 elements_[7] = 0.0f;
 elements_[2] = 2 * orientation.i * orientation.k - 2 * orientation.r * orientation.j;
 elements_[6] = 2 * orientation.j * orientation.k + 2 * orientation.r * orientation.i;
 elements_[10] = 1 - 2 * orientation.i * orientation.i - 2 * orientation.j * orientation.j;
 elements_[11] = 0.0f;

 elements_[12] = trans.x;
 elements_[13] = trans.y;
 elements_[14] = trans.z;
 elements_[15] = 1.0f;

 return *this;
}

template<class Real>
void Matrix4D<Real>::SetRotation(const Matrix3D<Real>& rotation)
{
 elements_[0] = rotation.GetValueAtIndex(0, 0);
 elements_[1] = rotation.GetValueAtIndex(1, 0);
 elements_[2] = rotation.GetValueAtIndex(2, 0);
 elements_[4] = rotation.GetValueAtIndex(0, 1);
 elements_[5] = rotation.GetValueAtIndex(1, 1);
 elements_[6] = rotation.GetValueAtIndex(2, 1);
 elements_[8] = rotation.GetValueAtIndex(0, 2);
 elements_[9] = rotation.GetValueAtIndex(1, 2);
 elements_[10] = rotation.GetValueAtIndex(2, 2);
 elements_[15] = 1.0;
}

template<class Real>
void Matrix4D<Real>::SetTranslate(const Vector3D<Real>& translate)
{
 elements_[12] = translate.x;
 elements_[13] = translate.y;
 elements_[14] = translate.z;
}

template<class Real>
void Matrix4D<Real>::SetSkewSymmetric(const Vector3D<Real>& vect)
{
 MakeIdentity();
 elements_[0] = elements_[5] = elements_[10] = 0;
 elements_[1] = -vect.z;
 elements_[2] = vect.y;
 elements_[4] = vect.z;
 elements_[6] = -vect.x;
 elements_[8] = -vect.y;
 elements_[9] = vect.x;
}

template<class Real>
Vector3D<Real> Matrix4D<Real>::TransformPosition(const Vector3D<Real>& vect) const
{
 Vector4D<Real> result = Transform(Vector4D<Real>(vect.x, vect.y, vect.z, 1.0f));
 return Vector3D<Real>(result.x, result.y, result.z);
}

template<class Real>
Vector3D<Real> Matrix4D<Real>::TransformRotation(const Vector3D<Real>& vect) const
{
 Vector4D<Real> result = Transform(Vector4D<Real>(vect.x, vect.y, vect.z, 0.0f));
 return Vector3D<Real>(result.x, result.y, result.z);
}

template<class Real>
Vector4D<Real> Matrix4D<Real>::Transform(const Vector4D<Real>& vect) const
{
 return *this * vect;
}

template<class Real>
Matrix4D<Real> Matrix4D<Real>::GetTranspose() const
{
 Matrix4D<Real> result;

 for(int row = 0; row < 4; ++row)
 {
  for(int col = 0; col < 4; ++col)
  {
   result.elements_[GetIndex(row, col)] = elements_[GetIndex(col, row)];
  }
 }
 return result;
}

template<class Real>
Real Matrix4D<Real>::GetDeterminant() const
{
 Real A0 = elements_[ 0]*elements_[ 5] - elements_[ 1]*elements_[ 4];
 Real A1 = elements_[ 0]*elements_[ 6] - elements_[ 2]*elements_[ 4];
 Real A2 = elements_[ 0]*elements_[ 7] - elements_[ 3]*elements_[ 4];
 Real A3 = elements_[ 1]*elements_[ 6] - elements_[ 2]*elements_[ 5];
 Real A4 = elements_[ 1]*elements_[ 7] - elements_[ 3]*elements_[ 5];
 Real A5 = elements_[ 2]*elements_[ 7] - elements_[ 3]*elements_[ 6];
 Real B0 = elements_[ 8]*elements_[13] - elements_[ 9]*elements_[12];
 Real B1 = elements_[ 8]*elements_[14] - elements_[10]*elements_[12];
 Real B2 = elements_[ 8]*elements_[15] - elements_[11]*elements_[12];
 Real B3 = elements_[ 9]*elements_[14] - elements_[10]*elements_[13];
 Real B4 = elements_[ 9]*elements_[15] - elements_[11]*elements_[13];
 Real B5 = elements_[10]*elements_[15] - elements_[11]*elements_[14];

 return A0*B5 - A1*B4 + A2*B3 + A3*B2 - A4*B1 + A5*B0;
}

template<class Real>
Matrix4D<Real> Matrix4D<Real>::GetInverse() const
{
 const Real* m = elements_;
 Matrix4D<Real> inv;
 Real det;
 int i;

 inv[0] = m[5] * m[10] * m[15] -
  m[5] * m[11] * m[14] -
  m[9] * m[6] * m[15] +
  m[9] * m[7] * m[14] +
  m[13] * m[6] * m[11] -
  m[13] * m[7] * m[10];

 inv[4] = -m[4] * m[10] * m[15] +
  m[4] * m[11] * m[14] +
  m[8] * m[6] * m[15] -
  m[8] * m[7] * m[14] -
  m[12] * m[6] * m[11] +
  m[12] * m[7] * m[10];

 inv[8] = m[4] * m[9] * m[15] -
  m[4] * m[11] * m[13] -
  m[8] * m[5] * m[15] +
  m[8] * m[7] * m[13] +
  m[12] * m[5] * m[11] -
  m[12] * m[7] * m[9];

 inv[12] = -m[4] * m[9] * m[14] +
  m[4] * m[10] * m[13] +
  m[8] * m[5] * m[14] -
  m[8] * m[6] * m[13] -
  m[12] * m[5] * m[10] +
  m[12] * m[6] * m[9];

 inv[1] = -m[1] * m[10] * m[15] +
  m[1] * m[11] * m[14] +
  m[9] * m[2] * m[15] -
  m[9] * m[3] * m[14] -
  m[13] * m[2] * m[11] +
  m[13] * m[3] * m[10];

 inv[5] = m[0] * m[10] * m[15] -
  m[0] * m[11] * m[14] -
  m[8] * m[2] * m[15] +
  m[8] * m[3] * m[14] +
  m[12] * m[2] * m[11] -
  m[12] * m[3] * m[10];

 inv[9] = -m[0] * m[9] * m[15] +
  m[0] * m[11] * m[13] +
  m[8] * m[1] * m[15] -
  m[8] * m[3] * m[13] -
  m[12] * m[1] * m[11] +
  m[12] * m[3] * m[9];

 inv[13] = m[0] * m[9] * m[14] -
  m[0] * m[10] * m[13] -
  m[8] * m[1] * m[14] +
  m[8] * m[2] * m[13] +
  m[12] * m[1] * m[10] -
  m[12] * m[2] * m[9];

 inv[2] = m[1] * m[6] * m[15] -
  m[1] * m[7] * m[14] -
  m[5] * m[2] * m[15] +
  m[5] * m[3] * m[14] +
  m[13] * m[2] * m[7] -
  m[13] * m[3] * m[6];

 inv[6] = -m[0] * m[6] * m[15] +
  m[0] * m[7] * m[14] +
  m[4] * m[2] * m[15] -
  m[4] * m[3] * m[14] -
  m[12] * m[2] * m[7] +
  m[12] * m[3] * m[6];

 inv[10] = m[0] * m[5] * m[15] -
  m[0] * m[7] * m[13] -
  m[4] * m[1] * m[15] +
  m[4] * m[3] * m[13] +
  m[12] * m[1] * m[7] -
  m[12] * m[3] * m[5];

 inv[14] = -m[0] * m[5] * m[14] +
  m[0] * m[6] * m[13] +
  m[4] * m[1] * m[14] -
  m[4] * m[2] * m[13] -
  m[12] * m[1] * m[6] +
  m[12] * m[2] * m[5];

 inv[3] = -m[1] * m[6] * m[11] +
  m[1] * m[7] * m[10] +
  m[5] * m[2] * m[11] -
  m[5] * m[3] * m[10] -
  m[9] * m[2] * m[7] +
  m[9] * m[3] * m[6];

 inv[7] = m[0] * m[6] * m[11] -
  m[0] * m[7] * m[10] -
  m[4] * m[2] * m[11] +
  m[4] * m[3] * m[10] +
  m[8] * m[2] * m[7] -
  m[8] * m[3] * m[6];

 inv[11] = -m[0] * m[5] * m[11] +
  m[0] * m[7] * m[9] +
  m[4] * m[1] * m[11] -
  m[4] * m[3] * m[9] -
  m[8] * m[1] * m[7] +
  m[8] * m[3] * m[5];

 inv[15] = m[0] * m[5] * m[10] -
  m[0] * m[6] * m[9] -
  m[4] * m[1] * m[10] +
  m[4] * m[2] * m[9] +
  m[8] * m[1] * m[6] -
  m[8] * m[2] * m[5];

 det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];

 if (FloatEquality(det, 0))
  return Matrix4D<Real>::IDENTITY;

 det = 1.0f / det;

 Matrix4D<Real> reuslt;
 for (i = 0; i < 16; i++)
  reuslt[i] = inv[i] * det;

 return reuslt.GetTranspose();
}

template<class Real>
void Matrix4D<Real>::CreateLookAt(const Vector3Df& pos, const Vector3Df& lookAt, const Vector3Df& up)
{
 Vector3Df z = (pos - lookAt);
 z.Normalize();

 Vector3Df x = up.CrossProduct(z);
 x.Normalize();

 Vector3Df y = z.CrossProduct(x);

 *this = Matrix4Df
  (x.x, y.x, z.x, 0.0f,
   x.y, y.y, z.y, 0.0f,
   x.z, y.z, z.z, 0.0f,
   -x.Dot(pos), -y.Dot(pos), -z.Dot(pos), 1.0f);
}

template<class Real>
Matrix4D<Real>& Matrix4D<Real>::operator= (const Matrix4D<Real>& rhs)
{
 memcpy(elements_, rhs.elements_, 16*sizeof(Real));
 return *this;
}

template<class Real>
bool Matrix4D<Real>::operator== (const Matrix4D<Real>& rhs) const
{
 return CompareArrays(rhs) == 0;
}

template<class Real>
bool Matrix4D<Real>::operator!= (const Matrix4D<Real>& rhs) const
{
 return CompareArrays(rhs) != 0;
}

template<class Real>
Matrix4D<Real> Matrix4D<Real>::operator+ (const Matrix4D<Real>& rhs) const
{
 Matrix4D<Real> result = *this;
 for (int i = 0; i < 16; i++)
  result.elements_[i] += rhs.elements_[i];
 return result;
}

template<class Real>
Matrix4D<Real> Matrix4D<Real>::operator- (const Matrix4D<Real>& rhs) const
{
 Matrix4D<Real> result = *this;
 for (int i = 0; i < 16; i++)
  result.elements_[i] -= rhs.elements_[i];
 return result;
}

template<class Real>
Matrix4D<Real> Matrix4D<Real>::operator* (const Matrix4D<Real>& rhs) const
{
 Matrix4D<Real> result;
 for(int row = 0; row < 4; ++row)
 {
  for(int col = 0; col < 4; ++col)
  {
   int i = GetIndex(col, row);
   for(int j = 0; j < 4; ++j)
    result.elements_[i] += elements_[GetIndex(j, row)] * rhs.elements_[GetIndex(col, j)];
  }
 }

 return result;
}

template<class Real>
Matrix4D<Real> Matrix4D<Real>::operator* (Real scalar) const
{
 Matrix4D<Real> result = *this;
 for (int i = 0; i < 16; i++)
  result.elements_[i] *= scalar;
 return result;
}

template<class Real>
Matrix4D<Real> Matrix4D<Real>::operator/ (Real scalar) const
{
 Matrix4D<Real> result = *this;
 for (int i = 0; i < 16; i++)
  result.elements_[i] /= scalar;
 return result;
}

template<class Real>
Matrix4D<Real>& Matrix4D<Real>::operator+= (const Matrix4D<Real>& rhs)
{
 for (int i = 0; i < 16; i++)
  elements_[i] += rhs.elements_[i];
 return *this;
}

template<class Real>
Matrix4D<Real>& Matrix4D<Real>::operator-= (const Matrix4D<Real>& rhs)
{
 for (int i = 0; i < 16; i++)
  elements_[i] -= rhs.elements_[i];
 return *this;
}

template<class Real>
Matrix4D<Real>& Matrix4D<Real>::operator*= (Real scalar)
{
 for (int i = 0; i < 16; i++)
  elements_[i] *= scalar;
 return *this;
}

template<class Real>
Matrix4D<Real>& Matrix4D<Real>::operator/= (Real scalar)
{
 for (int i = 0; i < 16; i++)
  elements_[i] /= scalar;
 return *this;
}

template<class Real>
Vector4D<Real> Matrix4D<Real>::operator* (const Vector4D<Real>& rhs) const
{
 return Vector4D<Real>(
  rhs.x*elements_[0] + rhs.y*elements_[4] + rhs.z*elements_[8] + rhs.w*elements_[12],
  rhs.x*elements_[1] + rhs.y*elements_[5] + rhs.z*elements_[9] + rhs.w*elements_[13],
  rhs.x*elements_[2] + rhs.y*elements_[6] + rhs.z*elements_[10] + rhs.w*elements_[14],
  rhs.x*elements_[3] + rhs.y*elements_[7] + rhs.z*elements_[11] + rhs.w*elements_[15]);
}

template<class Real>
Matrix4D<Real>::operator Matrix4D<float>() const
{
 Matrix4D<float> result;
 result[0] = static_cast<float>(elements_[0] );
 result[1] = static_cast<float>(elements_[1] );
 result[2] = static_cast<float>(elements_[2] );
 result[3] = static_cast<float>(elements_[3] );
 result[4] = static_cast<float>(elements_[4] );
 result[5] = static_cast<float>(elements_[5] );
 result[6] = static_cast<float>(elements_[6] );
 result[7] = static_cast<float>(elements_[7] );
 result[8] = static_cast<float>(elements_[8] );
 result[9] = static_cast<float>(elements_[9] );
 result[10]= static_cast<float>(elements_[10]);
 result[11]= static_cast<float>(elements_[11]);
 result[12]= static_cast<float>(elements_[12]);
 result[13]= static_cast<float>(elements_[13]);
 result[14]= static_cast<float>(elements_[14]);
 result[15]= static_cast<float>(elements_[15]);
 return result;
}

template<class Real>
Matrix4D<Real>::operator Matrix4D<double>() const
{
 Matrix4D<double> result;
 result[0] = static_cast<double>(elements_[0] );
 result[1] = static_cast<double>(elements_[1] );
 result[2] = static_cast<double>(elements_[2] );
 result[3] = static_cast<double>(elements_[3] );
 result[4] = static_cast<double>(elements_[4] );
 result[5] = static_cast<double>(elements_[5] );
 result[6] = static_cast<double>(elements_[6] );
 result[7] = static_cast<double>(elements_[7] );
 result[8] = static_cast<double>(elements_[8] );
 result[9] = static_cast<double>(elements_[9] );
 result[10]= static_cast<double>(elements_[10]);
 result[11]= static_cast<double>(elements_[11]);
 result[12]= static_cast<double>(elements_[12]);
 result[13]= static_cast<double>(elements_[13]);
 result[14]= static_cast<double>(elements_[14]);
 result[15]= static_cast<double>(elements_[15]);
 return result;
}




template<class Real>
int Matrix4D<Real>::GetIndex(int i, int j) const
{
 return i + j * 4;
}

template<class Real>
int Matrix4D<Real>::CompareArrays (const Matrix4D<Real>& rhs) const
{
 return memcmp(elements_, rhs.elements_, 16*sizeof(Real));
}
#line 126 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Math/Matrix4D.h"

}
#line 32 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/MatrixStack.h"

#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Utils/UtilMacros.h"
#line 33 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/MatrixStack.h"


#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stack"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory"







#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)




#pragma warning(disable: 4700)

namespace std {

template<class _Ty> inline
 pair<_Ty *, ptrdiff_t>

  get_temporary_buffer(ptrdiff_t _Count)

 {
 _Ty *_Pbuf;

 if (_Count < 0)
  _Count = 0;
 else if (((size_t)(-1) / sizeof (_Ty) < _Count))
  throw bad_alloc(0);
 for (_Pbuf = 0; 0 < _Count; _Count /= 2)
  if ((_Pbuf = (_Ty *)operator new(
   (size_t)_Count * sizeof (_Ty), nothrow)) != 0)
   break;

 return (pair<_Ty *, ptrdiff_t>(_Pbuf, _Count));
 }


template<class _Ty> inline
 void return_temporary_buffer(_Ty *_Pbuf)
 {
 operator delete(_Pbuf);
 }


template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, input_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 _Construct(&*_Dest, *_First);
 while (0 < --_Count)
  _Construct(&*++_Dest, *++_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Destroy(&*_Next);
 throw;
 }
 return (++_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, forward_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; 0 < _Count; --_Count, ++_Dest, ++_First)
  _Construct(&*_Dest, *_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Destroy(&*_Next);
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 return (_Uninitialized_copy_n(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _Scalar_ptr_iterator_tag)
 {
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy_n(_First, _Count,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
#line 132 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory"
template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n2(_InIt _First, _Diff _Count,
  _FwdIt _Dest, output_iterator_tag)
 {
 return (_Uninitialized_copy_n(_First, _Count,
  _Dest));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n2(_InIt _First, _Diff _Count,
  _FwdIt _Dest, random_access_iterator_tag)
 {
 _FwdIt _Ans = _Dest + _Count;
 _Uninitialized_copy_n(_First, _Count,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n1(_InIt _First, _Diff _Count,
  _FwdIt _Dest, input_iterator_tag)
 {
 return (_Uninitialized_copy_n2(_First, _Count,
  _Dest, _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n1(_InIt _First, _Diff _Count,
  _FwdIt _Dest, random_access_iterator_tag)
 {
 _InIt _Last = _First + _Count;
 _Last = _Last;
 return (_Uninitialized_copy_n2(_Unchecked(_First), _Count,
  _Dest, _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, ::std:: tr1::true_type)
 {
 return (_Uninitialized_copy_n1(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, ::std:: tr1::false_type)
 {
 return (_Uninitialized_copy_n1(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {
 _Debug_pointer(_First, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 203);
 _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 204);
 if (_Count <= 0)
  return (_Dest);
 else
  return (_Uninitialized_copy_n(_First,
   _Count, _Dest, _Is_checked(_Dest)));
 }

template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _FwdIt> inline
 _FwdIt uninitialized_copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _FwdIt _Dest)
 {
 return (::std:: uninitialized_copy_n(_Array_iterator<_InTy, _InSize>(_First),
  _Count, _Dest));
 }

template<class _InIt,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy_n(_InIt _First, _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: uninitialized_copy_n(_First,
   _Count, _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }

template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: uninitialized_copy_n(_Array_iterator<_InTy, _InSize>(_First),
   _Count, _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, ++_First)
  _Construct(&*_Dest, *_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Destroy(&*_Next);
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy0(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
#line 301 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory"
template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, input_iterator_tag, forward_iterator_tag)
 {
 return (_Uninitialized_copy0(_First, _Last,
  _Dest));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 _FwdIt _Ans = _Dest + (_Last - _First);
 _Uninitialized_copy0(_First, _Last,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, ::std:: tr1::true_type)
 {
 return (_Uninitialized_copy0(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _FwdIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, ::std:: tr1::false_type)
 {
 return (_Uninitialized_copy0(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt uninitialized_copy(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 345);
 _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 346);
 return (_Uninitialized_copy0(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }

template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: uninitialized_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }



template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al, _Nonscalar_ptr_iterator_tag)
 {
 _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 370);
 _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 371);
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, ++_First)
  _Cons_val(_Al, _Dest, *_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Dest_val(_Al, _Next);
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al, _Scalar_ptr_iterator_tag)
 {
 return (_Uninit_copy(_First, _Last, _Dest,
  _Al, _Nonscalar_ptr_iterator_tag()));
 }

template<class _Ty1,
 class _Ty2> inline
 _Ty2 *_Uninit_copy(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
  allocator<_Ty2>&, _Scalar_ptr_iterator_tag)
 {
 _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 400);
 _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 401);
 size_t _Count = (size_t)(_Last - _First);
 return ((_Ty2 *):: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First)) + _Count);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al)
 {
 return (_Uninit_copy(_First, _Last, _Dest, _Al,
  _Ptr_cat(_First, _Dest)));
 }


template<class _InIt,
 class _FwdIt,
 class _Alloc,
 class _Valty> inline
 _FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al, _Valty *, _Nonscalar_ptr_iterator_tag)
 {
 _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 425);
 _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 426);
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, ++_First)
  _Cons_val(_Al, _Dest, (_Valty &&)*_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Dest_val(_Al, _Next);
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc,
 class _Valty> inline
 _FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al, _Valty *, _Scalar_ptr_iterator_tag)
 {
 return (_Uninit_move(_First, _Last, _Dest,
  _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag()));
 }

template<class _Ty1,
 class _Ty2,
 class _Valty> inline
 _Ty2 *_Uninit_move(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
  allocator<_Ty2>&, _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 457);
 _Debug_pointer(_Dest, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 458);
 size_t _Count = (size_t)(_Last - _First);
 return ((_Ty2 *):: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First)) + _Count);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al)
 {
 return (_Uninit_move(_First, _Last, _Dest, _Al,
  _Val_type(_First), _Ptr_cat(_First, _Dest)));
 }


template<class _FwdIt,
 class _Tval> inline
 void _Uninit_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val,
  _Nonscalar_ptr_iterator_tag)
 {
 _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 480);
 _FwdIt _Next = _First;

 try {
 for (; _First != _Last; ++_First)
  _Construct(&*_First, _Val);
 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Destroy(&*_Next);
 throw;
 }
 }

template<class _Ty,
 class _Tval> inline
 void _Uninit_fill(_Ty *_First, _Ty *_Last, const _Tval& _Val,
  _Scalar_ptr_iterator_tag)
 {
 ::std:: fill(_First, _Last, _Val);
 }

template<class _FwdIt,
 class _Tval> inline
 void uninitialized_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
 {
 _Uninit_fill(_First, _Last, _Val, _Ptr_cat(_First, _First));
 }


template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 void _Uninit_fill_n(_FwdIt _First, _Diff _Count, const _Tval& _Val,
  _Nonscalar_ptr_iterator_tag)
 {





 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, ++_First)
  _Construct(&*_First, _Val);
 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Destroy(&*_Next);
 throw;
 }
 }

template<class _Ty,
 class _Diff,
 class _Tval> inline
 void _Uninit_fill_n(_Ty *_First, _Diff _Count, const _Tval& _Val,
  _Scalar_ptr_iterator_tag)
 {
 ::std:: _Fill_n(_First, _Count, _Val);
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 void uninitialized_fill_n(_FwdIt _First, _Diff _Count, const _Tval& _Val)
 {
 _Uninit_fill_n(_First, _Count, _Val, _Ptr_cat(_First, _First));
 }


template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc,
 class _Valty> inline
 void _Uninit_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *_Pval, _Alloc& _Al,
   _Valty *, _Nonscalar_ptr_iterator_tag)
 {





 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, ++_First)
  _Cons_val(_Al, _First, *_Pval);
 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Dest_val(_Al, _Next);
 throw;
 }
 }

template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc,
 class _Valty> inline
 void _Uninit_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *_Pval, _Alloc& _Al,
   _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Uninit_fill_n(_First, _Count,
  _Pval, _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());
 }

template<class _Ty,
 class _Diff,
 class _Tval,
 class _Valty> inline
 void _Uninit_fill_n(_Ty *_First, _Diff _Count,
  const _Tval *_Pval, allocator<_Ty>&,
   _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Fill_n(_First, _Count, *_Pval);
 }

template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc> inline
 void _Uninitialized_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *_Pval, _Alloc& _Al)
 {
 _Uninit_fill_n(_First, _Count, _Pval, _Al,
  _Val_type(_First), _Ptr_cat(_First, _First));
 }


template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc,
 class _Valty> inline
 void _Uninit_def_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *, _Alloc& _Al,
   _Valty *, _Nonscalar_ptr_iterator_tag)
 {





 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, ++_First)

  _Cons_val(_Al, _First, _Valty());

 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Dest_val(_Al, _Next);
 throw;
 }
 }

template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc,
 class _Valty> inline
 void _Uninit_def_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *_Pval, _Alloc& _Al,
   _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Uninit_def_fill_n(_First, _Count,
  _Pval, _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());
 }

template<class _Ty,
 class _Diff,
 class _Tval,
 class _Valty> inline
 void _Uninit_def_fill_n(_Ty *_First, _Diff _Count,
  const _Tval *, allocator<_Ty>&,
   _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Fill_n(_First, _Count, (_Valty)0);
 }

template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc> inline
 void _Uninitialized_default_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *_Pval, _Alloc& _Al)
 {
 _Uninit_def_fill_n(_First, _Count, _Pval, _Al,
  _Val_type(_First), _Ptr_cat(_First, _First));
 }


template<class _FwdIt,
 class _Ty>
 class raw_storage_iterator
  : public _Outit
 {
public:
 typedef _FwdIt iterator_type;
 typedef _FwdIt iter_type;
 typedef _Ty element_type;

 explicit raw_storage_iterator(_FwdIt _First)
  : _Next(_First)
  {
  }

 raw_storage_iterator<_FwdIt, _Ty>& operator*()
  {
  return (*this);
  }

 raw_storage_iterator<_FwdIt, _Ty>& operator=(const _Ty& _Val)
  {
  _Construct(&*_Next, _Val);
  return (*this);
  }

 raw_storage_iterator<_FwdIt, _Ty>& operator++()
  {
  ++_Next;
  return (*this);
  }

 raw_storage_iterator<_FwdIt, _Ty> operator++(int)
  {
  raw_storage_iterator<_FwdIt, _Ty> _Ans = *this;
  ++_Next;
  return (_Ans);
  }

private:
 _FwdIt _Next;
 };


template<class _Ty>
 class _Temp_iterator
  : public _Outit
 {
public:
 typedef _Ty *_Pty;

 _Temp_iterator(ptrdiff_t _Count = 0)
  {
  _Buf._Begin = 0;
  _Buf._Current = 0;
  _Buf._Hiwater = 0;
  _Buf._Size = _Count;
  _Pbuf = &_Buf;
  }

 _Temp_iterator(const _Temp_iterator<_Ty>& _Right)
  {
  _Buf._Begin = 0;
  _Buf._Current = 0;
  _Buf._Hiwater = 0;
  _Buf._Size = 0;
  *this = _Right;
  }

 ~_Temp_iterator()
  {
  if (_Buf._Begin != 0)
   {
   for (_Pty _Next = _Buf._Begin;
    _Next != _Buf._Hiwater; ++_Next)
    _Destroy(&*_Next);
   ::std:: return_temporary_buffer(_Buf._Begin);
   }
  }

 _Temp_iterator<_Ty>& operator=(const _Temp_iterator<_Ty>& _Right)
  {
  _Pbuf = _Right._Pbuf;
  return (*this);
  }

 _Temp_iterator<_Ty>& operator=(const _Ty& _Val)
  {
  if (_Pbuf->_Current < _Pbuf->_Hiwater)
   *_Pbuf->_Current++ = _Val;
  else
   {
   _Pty _Ptr = &*_Pbuf->_Current;
   _Construct(_Ptr, _Val);
   _Pbuf->_Hiwater = ++_Pbuf->_Current;
   }
  return (*this);
  }

 _Temp_iterator<_Ty>& operator=(_Ty&& _Val)
  {
  if (_Pbuf->_Current < _Pbuf->_Hiwater)
   *_Pbuf->_Current++ =
    ::std:: forward<_Ty>(_Val);
  else
   {
   _Pty _Ptr = &*_Pbuf->_Current;
   _Construct(_Ptr, ::std:: forward<_Ty>(_Val));
   _Pbuf->_Hiwater = ++_Pbuf->_Current;
   }
  return (*this);
  }

 _Temp_iterator<_Ty>& operator*()
  {
  return (*this);
  }

 _Temp_iterator<_Ty>& operator++()
  {
  return (*this);
  }

 _Temp_iterator<_Ty>& operator++(int)
  {
  return (*this);
  }

 _Temp_iterator<_Ty>& _Init()
  {
  _Pbuf->_Current = _Pbuf->_Begin;
  return (*this);
  }

 _Pty _First() const
  {
  return (_Pbuf->_Begin);
  }

 _Pty _Last() const
  {
  return (_Pbuf->_Current);
  }

 ptrdiff_t _Maxlen()
  {
  if (_Pbuf->_Begin == 0 && 0 < _Pbuf->_Size)
   {
   pair<_Pty, ptrdiff_t> _Pair =

    ::std:: get_temporary_buffer<_Ty>(_Pbuf->_Size);

   _Pbuf->_Begin = _Pair.first;
   _Pbuf->_Current = _Pair.first;
   _Pbuf->_Hiwater = _Pair.first;
   _Pbuf->_Size = _Pair.second;
   }
  return (_Pbuf->_Size);
  }

private:
 struct _Bufpar
  {
  _Pty _Begin;
  _Pty _Current;
  _Pty _Hiwater;
  ptrdiff_t _Size;
  };
 _Bufpar _Buf;
 _Bufpar *_Pbuf;
 };


template<class _Ty>
 class auto_ptr;

template<class _Ty>
 struct auto_ptr_ref
  {
 explicit auto_ptr_ref(_Ty *_Right)
  : _Ref(_Right)
  {
  }

 _Ty *_Ref;
 };

template<class _Ty>
 class auto_ptr
  {
public:
 typedef auto_ptr<_Ty> _Myt;
 typedef _Ty element_type;

 explicit auto_ptr(_Ty *_Ptr = 0) throw ()
  : _Myptr(_Ptr)
  {
  }

 auto_ptr(_Myt& _Right) throw ()
  : _Myptr(_Right.release())
  {
  }

 auto_ptr(auto_ptr_ref<_Ty> _Right) throw ()
  {
  _Ty *_Ptr = _Right._Ref;
  _Right._Ref = 0;
  _Myptr = _Ptr;
  }

 template<class _Other>
  operator auto_ptr<_Other>() throw ()
  {
  return (auto_ptr<_Other>(*this));
  }

 template<class _Other>
  operator auto_ptr_ref<_Other>() throw ()
  {
  _Other *_Cvtptr = _Myptr;
  auto_ptr_ref<_Other> _Ans(_Cvtptr);
  _Myptr = 0;
  return (_Ans);
  }

 template<class _Other>
  _Myt& operator=(auto_ptr<_Other>& _Right) throw ()
  {
  reset(_Right.release());
  return (*this);
  }

 template<class _Other>
  auto_ptr(auto_ptr<_Other>& _Right) throw ()
  : _Myptr(_Right.release())
  {
  }

 _Myt& operator=(_Myt& _Right) throw ()
  {
  reset(_Right.release());
  return (*this);
  }

 _Myt& operator=(auto_ptr_ref<_Ty> _Right) throw ()
  {
  _Ty *_Ptr = _Right._Ref;
  _Right._Ref = 0;
  reset(_Ptr);
  return (*this);
  }

 ~auto_ptr()
  {
  delete _Myptr;
  }

 _Ty& operator*() const throw ()
  {

  if (_Myptr == 0)
   _Debug_message(L"auto_ptr not dereferencable", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 938);


  return (*get());
  }

 _Ty *operator->() const throw ()
  {

  if (_Myptr == 0)
   _Debug_message(L"auto_ptr not dereferencable", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory", 948);


  return (get());
  }

 _Ty *get() const throw ()
  {
  return (_Myptr);
  }

 _Ty *release() throw ()
  {
  _Ty *_Tmp = _Myptr;
  _Myptr = 0;
  return (_Tmp);
  }

 void reset(_Ty *_Ptr = 0)
  {
  if (_Ptr != _Myptr)
   delete _Myptr;
  _Myptr = _Ptr;
  }

private:
 _Ty *_Myptr;
 };
}
#line 987 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
#line 18 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 18 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\setjmp.h"
#line 21 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\setjmp.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 21 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\setjmp.h"
#line 37 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\setjmp.h"
#pragma pack(push,_CRT_PACKING)


extern "C" {
#line 63 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\setjmp.h"
typedef struct __JUMP_BUFFER {
    unsigned long Ebp;
    unsigned long Ebx;
    unsigned long Edi;
    unsigned long Esi;
    unsigned long Esp;
    unsigned long Eip;
    unsigned long Registration;
    unsigned long TryLevel;
    unsigned long Cookie;
    unsigned long UnwindFunc;
    unsigned long UnwindData[6];
} _JUMP_BUFFER;
#line 236 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\setjmp.h"
typedef int jmp_buf[16];






int __cdecl _setjmp( jmp_buf _Buf);


}



extern "C"
{
__declspec(dllimport) __declspec(noreturn) void __cdecl longjmp( jmp_buf _Buf, int _Value) throw(...);
}




#pragma pack(pop)
#line 19 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wmmintrin.h"
#line 26 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wmmintrin.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\nmmintrin.h"
#line 27 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\nmmintrin.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\smmintrin.h"
#line 27 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\smmintrin.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\tmmintrin.h"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\tmmintrin.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\pmmintrin.h"
#line 31 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\pmmintrin.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\emmintrin.h"
#line 33 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\emmintrin.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmmintrin.h"
#line 41 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmmintrin.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\mmintrin.h"
#line 19 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\mmintrin.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 19 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\mmintrin.h"







extern "C" {




typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64 m64_u64;
    float m64_f32[2];
    __int8 m64_i8[8];
    __int16 m64_i16[4];
    __int32 m64_i32[2];
    __int64 m64_i64;
    unsigned __int8 m64_u8[8];
    unsigned __int16 m64_u16[4];
    unsigned __int32 m64_u32[2];
} __m64;


void _m_empty(void);
__m64 _m_from_int(int _I);
int _m_to_int(__m64 _M);
__m64 _m_packsswb(__m64 _MM1, __m64 _MM2);
__m64 _m_packssdw(__m64 _MM1, __m64 _MM2);
__m64 _m_packuswb(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhdq(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckldq(__m64 _MM1, __m64 _MM2);


__m64 _m_paddb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddd(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubd(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmaddwd(__m64 _MM1, __m64 _MM2);
__m64 _m_pmulhw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmullw(__m64 _MM1, __m64 _MM2);


__m64 _m_psllw(__m64 _M, __m64 _Count);
__m64 _m_psllwi(__m64 _M, int _Count);
__m64 _m_pslld(__m64 _M, __m64 _Count);
__m64 _m_pslldi(__m64 _M, int _Count);
__m64 _m_psllq(__m64 _M, __m64 _Count);
__m64 _m_psllqi(__m64 _M, int _Count);
__m64 _m_psraw(__m64 _M, __m64 _Count);
__m64 _m_psrawi(__m64 _M, int _Count);
__m64 _m_psrad(__m64 _M, __m64 _Count);
__m64 _m_psradi(__m64 _M, int _Count);
__m64 _m_psrlw(__m64 _M, __m64 _Count);
__m64 _m_psrlwi(__m64 _M, int _Count);
__m64 _m_psrld(__m64 _M, __m64 _Count);
__m64 _m_psrldi(__m64 _M, int _Count);
__m64 _m_psrlq(__m64 _M, __m64 _Count);
__m64 _m_psrlqi(__m64 _M, int _Count);


__m64 _m_pand(__m64 _MM1, __m64 _MM2);
__m64 _m_pandn(__m64 _MM1, __m64 _MM2);
__m64 _m_por(__m64 _MM1, __m64 _MM2);
__m64 _m_pxor(__m64 _MM1, __m64 _MM2);


__m64 _m_pcmpeqb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqd(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtd(__m64 _MM1, __m64 _MM2);


__m64 _mm_setzero_si64(void);
__m64 _mm_set_pi32(int _I1, int _I0);
__m64 _mm_set_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_set_pi8(char _B7, char _B6, char _B5, char _B4,
                  char _B3, char _B2, char _B1, char _B0);
__m64 _mm_set1_pi32(int _I);
__m64 _mm_set1_pi16(short _S);
__m64 _mm_set1_pi8(char _B);
__m64 _mm_setr_pi32(int _I1, int _I0);
__m64 _mm_setr_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_setr_pi8(char _B7, char _B6, char _B5, char _B4,
                   char _B3, char _B2, char _B1, char _B0);
#line 182 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\mmintrin.h"
};
#line 41 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmmintrin.h"
#line 60 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmmintrin.h"
typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float m128_f32[4];
     unsigned __int64 m128_u64[2];
     __int8 m128_i8[16];
     __int16 m128_i16[8];
     __int32 m128_i32[4];
     __int64 m128_i64[2];
     unsigned __int8 m128_u8[16];
     unsigned __int16 m128_u16[8];
     unsigned __int32 m128_u32[4];
 } __m128;
#line 178 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmmintrin.h"
extern "C" {







extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern __m64 _mm_cvt_ps2pi(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m64 _mm_cvtt_ps2pi(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern __m128 _mm_cvt_pi2ps(__m128, __m64);
extern float _mm_cvtss_f32(__m128 _A);
#line 280 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmmintrin.h"
extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);





extern int _m_pextrw(__m64, int);
extern __m64 _m_pinsrw(__m64, int, int);
extern __m64 _m_pmaxsw(__m64, __m64);
extern __m64 _m_pmaxub(__m64, __m64);
extern __m64 _m_pminsw(__m64, __m64);
extern __m64 _m_pminub(__m64, __m64);
extern int _m_pmovmskb(__m64);
extern __m64 _m_pmulhuw(__m64, __m64);
extern __m64 _m_pshufw(__m64, int);
extern void _m_maskmovq(__m64, __m64, char *);
extern __m64 _m_pavgb(__m64, __m64);
extern __m64 _m_pavgw(__m64, __m64);
extern __m64 _m_psadbw(__m64, __m64);





extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);
extern void _mm_stream_pi(__m64 *, __m64);
extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);
#line 378 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmmintrin.h"
__inline __m128 _mm_cvtpi16_ps(__m64 a)
{
  __m128 tmp;
  __m64 ext_val = _m_pcmpgtw(_mm_setzero_si64(), a);

  tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(a, ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(tmp, tmp),
                        _m_punpcklwd(a, ext_val)));
}
#line 397 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmmintrin.h"
__inline __m128 _mm_cvtpu16_ps(__m64 a)
{
  __m128 tmp;
  __m64 ext_val = _mm_setzero_si64();

  tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(a, ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(tmp, tmp),
                        _m_punpcklwd(a, ext_val)));
}
#line 416 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmmintrin.h"
__inline __m64 _mm_cvtps_pi16(__m128 a)
{
  return _m_packssdw(_mm_cvt_ps2pi(a),
                        _mm_cvt_ps2pi(_mm_movehl_ps(a, a)));
}
#line 431 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmmintrin.h"
__inline __m128 _mm_cvtpi8_ps(__m64 a)
{
  __m64 ext_val = _m_pcmpgtb(_mm_setzero_si64(), a);

  return _mm_cvtpi16_ps(_m_punpcklbw(a, ext_val));
}
#line 448 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmmintrin.h"
__inline __m128 _mm_cvtpu8_ps(__m64 a)
{
  return _mm_cvtpu16_ps(_m_punpcklbw(a, _mm_setzero_si64()));
}
#line 462 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmmintrin.h"
__inline __m64 _mm_cvtps_pi8(__m128 a)
{
  return _m_packsswb(_mm_cvtps_pi16(a), _mm_setzero_si64());
}
#line 477 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xmmintrin.h"
__inline __m128 _mm_cvtpi32x2_ps(__m64 a, __m64 b)
{
  return _mm_movelh_ps(_mm_cvt_pi2ps(_mm_setzero_ps(), a),
                       _mm_cvt_pi2ps(_mm_setzero_ps(), b));
}



};
#line 33 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\emmintrin.h"


typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8 m128i_i8[16];
    __int16 m128i_i16[8];
    __int32 m128i_i32[4];
    __int64 m128i_i64[2];
    unsigned __int8 m128i_u8[16];
    unsigned __int16 m128i_u16[8];
    unsigned __int32 m128i_u32[4];
    unsigned __int64 m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double m128d_f64[2];
} __m128d;
#line 60 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\emmintrin.h"
extern "C" {







extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);

extern __m64 _mm_cvtpd_pi32(__m128d _A);
extern __m64 _mm_cvttpd_pi32(__m128d _A);
extern __m128d _mm_cvtpi32_pd(__m64 _A);





extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);
extern __m64 _mm_add_si64(__m64 _A, __m64 _B);
extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);
extern __m64 _mm_mul_su32(__m64 _A, __m64 _B);
extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);
extern __m64 _mm_sub_si64(__m64 _A, __m64 _B);
extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);
extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);
extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);





extern __m128i _mm_set_epi64(__m64 _Q1, __m64 _Q0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12,
                            char _B11, char _B10, char _B9, char _B8,
                            char _B7, char _B6, char _B5, char _B4,
                            char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_set1_epi64(__m64 _Q);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);
extern __m128i _mm_setr_epi64(__m64 _Q0, __m64 _Q1);
extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3,
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12,
                             char _B11, char _B10, char _B9, char _B8,
                             char _B7, char _B6, char _B5, char _B4,
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);
extern __m128i _mm_movpi64_epi64(__m64 _Q);
extern __m64 _mm_movepi64_pi64(__m128i _Q);





extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128 _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128 _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);
#line 409 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\emmintrin.h"
};
#line 31 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\pmmintrin.h"
#line 55 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\pmmintrin.h"
extern "C" {







extern __m128 _mm_addsub_ps(__m128 a, __m128 b);
extern __m128 _mm_hadd_ps(__m128 a, __m128 b);
extern __m128 _mm_hsub_ps(__m128 a, __m128 b);
extern __m128 _mm_movehdup_ps(__m128 a);
extern __m128 _mm_moveldup_ps(__m128 a);





extern __m128d _mm_addsub_pd(__m128d a, __m128d b);
extern __m128d _mm_hadd_pd(__m128d a, __m128d b);
extern __m128d _mm_hsub_pd(__m128d a, __m128d b);
extern __m128d _mm_loaddup_pd(double const * dp);
extern __m128d _mm_movedup_pd(__m128d a);




extern __m128i _mm_lddqu_si128(__m128i const *p);







extern void _mm_monitor(void const *p, unsigned extensions, unsigned hints);




extern void _mm_mwait(unsigned extensions, unsigned hints);


};
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\tmmintrin.h"
#line 30 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\tmmintrin.h"
extern "C" {





    extern __m128i _mm_hadd_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_hadd_epi32 (__m128i a, __m128i b);
    extern __m128i _mm_hadds_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_hadd_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_hadd_pi32 (__m64 a, __m64 b);
    extern __m64 _mm_hadds_pi16 (__m64 a, __m64 b);




    extern __m128i _mm_hsub_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_hsub_epi32 (__m128i a, __m128i b);
    extern __m128i _mm_hsubs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_hsub_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_hsub_pi32 (__m64 a, __m64 b);
    extern __m64 _mm_hsubs_pi16 (__m64 a, __m64 b);




    extern __m128i _mm_maddubs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_maddubs_pi16 (__m64 a, __m64 b);




    extern __m128i _mm_mulhrs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_mulhrs_pi16 (__m64 a, __m64 b);




    extern __m128i _mm_shuffle_epi8 (__m128i a, __m128i b);

    extern __m64 _mm_shuffle_pi8 (__m64 a, __m64 b);




    extern __m128i _mm_sign_epi8 (__m128i a, __m128i b);
    extern __m128i _mm_sign_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_sign_epi32 (__m128i a, __m128i b);

    extern __m64 _mm_sign_pi8 (__m64 a, __m64 b);
    extern __m64 _mm_sign_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_sign_pi32 (__m64 a, __m64 b);




    extern __m128i _mm_alignr_epi8 (__m128i a, __m128i b, int n);

    extern __m64 _mm_alignr_pi8 (__m64 a, __m64 b, int n);




    extern __m128i _mm_abs_epi8 (__m128i a);
    extern __m128i _mm_abs_epi16 (__m128i a);
    extern __m128i _mm_abs_epi32 (__m128i a);

    extern __m64 _mm_abs_pi8 (__m64 a);
    extern __m64 _mm_abs_pi16 (__m64 a);
    extern __m64 _mm_abs_pi32 (__m64 a);


};
#line 27 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\smmintrin.h"
#line 78 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\smmintrin.h"
extern "C" {





        extern __m128i _mm_blend_epi16 (__m128i v1, __m128i v2,
                                        const int mask);
        extern __m128i _mm_blendv_epi8 (__m128i v1, __m128i v2, __m128i mask);




        extern __m128 _mm_blend_ps (__m128 v1, __m128 v2, const int mask);
        extern __m128 _mm_blendv_ps(__m128 v1, __m128 v2, __m128 v3);




        extern __m128d _mm_blend_pd (__m128d v1, __m128d v2, const int mask);
        extern __m128d _mm_blendv_pd(__m128d v1, __m128d v2, __m128d v3);




        extern __m128 _mm_dp_ps(__m128 val1, __m128 val2, const int mask);
        extern __m128d _mm_dp_pd(__m128d val1, __m128d val2, const int mask);




        extern __m128i _mm_cmpeq_epi64(__m128i val1, __m128i val2);



        extern __m128i _mm_min_epi8 (__m128i val1, __m128i val2);
        extern __m128i _mm_max_epi8 (__m128i val1, __m128i val2);

        extern __m128i _mm_min_epu16(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epu16(__m128i val1, __m128i val2);

        extern __m128i _mm_min_epi32(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epi32(__m128i val1, __m128i val2);
        extern __m128i _mm_min_epu32(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epu32(__m128i val1, __m128i val2);




        extern __m128i _mm_mullo_epi32(__m128i a, __m128i b);




        extern __m128i _mm_mul_epi32(__m128i a, __m128i b);




        extern int _mm_testz_si128(__m128i mask, __m128i val);




        extern int _mm_testc_si128(__m128i mask, __m128i val);





        extern int _mm_testnzc_si128(__m128i mask, __m128i s2);







        extern __m128 _mm_insert_ps(__m128 dst, __m128 src, const int ndx);
#line 166 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\smmintrin.h"
        extern int _mm_extract_ps(__m128 src, const int ndx);
#line 184 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\smmintrin.h"
        extern __m128i _mm_insert_epi8 (__m128i dst, int s, const int ndx);
        extern __m128i _mm_insert_epi32(__m128i dst, int s, const int ndx);







        extern int _mm_extract_epi8 (__m128i src, const int ndx);
        extern int _mm_extract_epi32(__m128i src, const int ndx);
#line 203 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\smmintrin.h"
        extern __m128i _mm_minpos_epu16(__m128i shortValues);



        extern __m128d _mm_round_pd(__m128d val, int iRoundMode);
        extern __m128d _mm_round_sd(__m128d dst, __m128d val, int iRoundMode);



        extern __m128 _mm_round_ps(__m128 val, int iRoundMode);
        extern __m128 _mm_round_ss(__m128 dst, __m128 val, int iRoundMode);



        extern __m128i _mm_cvtepi8_epi32 (__m128i byteValues);
        extern __m128i _mm_cvtepi16_epi32(__m128i shortValues);
        extern __m128i _mm_cvtepi8_epi64 (__m128i byteValues);
        extern __m128i _mm_cvtepi32_epi64(__m128i intValues);
        extern __m128i _mm_cvtepi16_epi64(__m128i shortValues);
        extern __m128i _mm_cvtepi8_epi16 (__m128i byteValues);



        extern __m128i _mm_cvtepu8_epi32 (__m128i byteValues);
        extern __m128i _mm_cvtepu16_epi32(__m128i shortValues);
        extern __m128i _mm_cvtepu8_epi64 (__m128i shortValues);
        extern __m128i _mm_cvtepu32_epi64(__m128i intValues);
        extern __m128i _mm_cvtepu16_epi64(__m128i shortValues);
        extern __m128i _mm_cvtepu8_epi16 (__m128i byteValues);





        extern __m128i _mm_packus_epi32(__m128i val1, __m128i val2);





        extern __m128i _mm_mpsadbw_epu8(__m128i s1, __m128i s2, const int msk);





        extern __m128i _mm_stream_load_si128(__m128i* v1);


};
#line 27 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\nmmintrin.h"




extern "C" {
#line 78 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\nmmintrin.h"
    extern __m128i _mm_cmpistrm (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistri (__m128i a, __m128i b, const int mode);

    extern __m128i _mm_cmpestrm (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestri (__m128i a, int la, __m128i b, int lb, const int mode);





    extern int _mm_cmpistrz (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistrc (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistrs (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistro (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistra (__m128i a, __m128i b, const int mode);

    extern int _mm_cmpestrz (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestrc (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestrs (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestro (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestra (__m128i a, int la, __m128i b, int lb, const int mode);






    extern __m128i _mm_cmpgt_epi64(__m128i val1, __m128i val2);





    extern int _mm_popcnt_u32(unsigned int v);
#line 121 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\nmmintrin.h"
    extern unsigned int _mm_crc32_u8 (unsigned int crc, unsigned char v);
    extern unsigned int _mm_crc32_u16(unsigned int crc, unsigned short v);
    extern unsigned int _mm_crc32_u32(unsigned int crc, unsigned int v);






};
#line 26 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\wmmintrin.h"




extern "C" {






extern __m128i _mm_aesdec_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesdeclast_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesenc_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesenclast_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesimc_si128(__m128i v);






extern __m128i _mm_aeskeygenassist_si128(__m128i ckey, const int rcon);







extern __m128i _mm_clmulepi64_si128(__m128i v1, __m128i v2,
         const int imm8);





};
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"



extern "C" {






typedef union __declspec(intrin_type) __declspec(align(32)) __m256 {
    float m256_f32[8];
} __m256;

typedef struct __declspec(intrin_type) __declspec(align(32)) {
    double m256d_f64[4];
} __m256d;

typedef union __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8 m256i_i8[32];
    __int16 m256i_i16[16];
    __int32 m256i_i32[8];
    __int64 m256i_i64[4];
    unsigned __int8 m256i_u8[32];
    unsigned __int16 m256i_u16[16];
    unsigned __int32 m256i_u32[8];
    unsigned __int64 m256i_u64[4];
} __m256i;
#line 93 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_add_pd(__m256d m1, __m256d m2);
#line 103 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_add_ps(__m256 m1, __m256 m2);
#line 116 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_addsub_pd(__m256d m1, __m256d m2);
#line 129 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_addsub_ps(__m256 m1, __m256 m2);
#line 138 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_and_pd(__m256d m1, __m256d m2);
#line 147 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_and_ps(__m256 m1, __m256 m2);
#line 156 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_andnot_pd(__m256d m1, __m256d m2);
#line 165 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_andnot_ps(__m256 m1, __m256 m2);
#line 179 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_blend_pd(__m256d m1, __m256d m2, const int mask);
#line 193 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_blend_ps(__m256 m1, __m256 m2, const int mask);
#line 203 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_blendv_pd(__m256d m1, __m256d m2, __m256d m3);
#line 213 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_blendv_ps(__m256 m1, __m256 m2, __m256 mask);
#line 222 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_div_pd(__m256d m1, __m256d m2);
#line 231 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_div_ps(__m256 m1, __m256 m2);
#line 246 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_dp_ps(__m256 m1, __m256 m2, const int mask);
#line 255 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_hadd_pd(__m256d m1, __m256d m2);
#line 264 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_hadd_ps(__m256 m1, __m256 m2);
#line 273 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_hsub_pd(__m256d m1, __m256d m2);
#line 282 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_hsub_ps(__m256 m1, __m256 m2);
#line 291 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_max_pd(__m256d m1, __m256d m2);
#line 300 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_max_ps(__m256 m1, __m256 m2);
#line 309 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_min_pd(__m256d m1, __m256d m2);
#line 318 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_min_ps(__m256 m1, __m256 m2);
#line 328 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_mul_pd(__m256d m1, __m256d m2);
#line 338 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_mul_ps(__m256 m1, __m256 m2);
#line 347 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_or_pd(__m256d m1, __m256d m2);
#line 356 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_or_ps(__m256 m1, __m256 m2);
#line 368 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_shuffle_pd(__m256d m1, __m256d m2, const int select);
#line 381 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_shuffle_ps(__m256 m1, __m256 m2, const int select);
#line 390 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_sub_pd(__m256d m1, __m256d m2);
#line 400 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_sub_ps(__m256 m1, __m256 m2);
#line 409 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_xor_pd(__m256d m1, __m256d m2);
#line 418 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_xor_ps(__m256 m1, __m256 m2);
#line 433 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m128d __cdecl _mm_cmp_pd(__m128d m1, __m128d m2, const int predicate);
extern __m256d __cdecl _mm256_cmp_pd(__m256d m1, __m256d m2, const int predicate);
#line 449 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m128 __cdecl _mm_cmp_ps(__m128 m1, __m128 m2, const int predicate);
extern __m256 __cdecl _mm256_cmp_ps(__m256 m1, __m256 m2, const int predicate);
#line 463 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m128d __cdecl _mm_cmp_sd(__m128d m1, __m128d m2, const int predicate);
#line 476 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m128 __cdecl _mm_cmp_ss(__m128 m1, __m128 m2, const int predicate);
#line 485 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i m1);
#line 494 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_cvtepi32_ps(__m256i m1);
#line 504 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m128 __cdecl _mm256_cvtpd_ps(__m256d m1);
#line 513 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtps_epi32(__m256 m1);
#line 523 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_cvtps_pd(__m128 m1);
#line 536 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d m1);
#line 545 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d m1);
#line 558 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256i __cdecl _mm256_cvttps_epi32(__m256 m1);







extern __m128 __cdecl _mm256_extractf128_ps(__m256 m1, const int offset);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d m1, const int offset);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i m1, const int offset);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);
#line 593 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_permutevar_ps(__m256 m1, __m256i control);
extern __m128 __cdecl _mm_permutevar_ps(__m128 a, __m128i control);
#line 604 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_permute_ps(__m256 m1, int control);
extern __m128 __cdecl _mm_permute_ps(__m128 a, int control);
#line 615 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_permutevar_pd(__m256d m1, __m256i control);
extern __m128d __cdecl _mm_permutevar_pd(__m128d a, __m128i control);
#line 626 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_permute_pd(__m256d m1, int control);
extern __m128d __cdecl _mm_permute_pd(__m128d a, int control);
#line 636 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_permute2f128_ps(__m256 m1, __m256 m2, int control);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d m1, __m256d m2, int control);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i m1, __m256i m2, int control);
#line 647 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_broadcast_ss(float const *a);
extern __m128 __cdecl _mm_broadcast_ss(float const *a);







extern __m256d __cdecl _mm256_broadcast_sd(double const *a);







extern __m256 __cdecl _mm256_broadcast_ps(__m128 const *a);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *a);
#line 675 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_insertf128_ps(__m256, __m128 a, int offset);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d a, int offset);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i a, int offset);
#line 686 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_load_pd(double const *a);
extern void __cdecl _mm256_store_pd(double *a, __m256d b);
#line 696 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_load_ps(float const *a);
extern void __cdecl _mm256_store_ps(float *a, __m256 b);
#line 706 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_loadu_pd(double const *a);
extern void __cdecl _mm256_storeu_pd(double *a, __m256d b);
#line 716 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_loadu_ps(float const *a);
extern void __cdecl _mm256_storeu_ps(float *a, __m256 b);
#line 726 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256i __cdecl _mm256_load_si256(__m256i const *a);
extern void __cdecl _mm256_store_si256(__m256i *a, __m256i b);
#line 736 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256i __cdecl _mm256_loadu_si256(__m256i const *a);
extern void __cdecl _mm256_storeu_si256(__m256i *a, __m256i b);
#line 757 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_maskload_pd(double const *a, __m256i mask);
extern void __cdecl _mm256_maskstore_pd(double *a, __m256i mask, __m256d b);
extern __m128d __cdecl _mm_maskload_pd(double const *a, __m128i mask);
extern void __cdecl _mm_maskstore_pd(double *a, __m128i mask, __m128d b);
#line 780 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_maskload_ps(float const *a, __m256i mask);
extern void __cdecl _mm256_maskstore_ps(float *a, __m256i mask, __m256 b);
extern __m128 __cdecl _mm_maskload_ps(float const *a, __m128i mask);
extern void __cdecl _mm_maskstore_ps(float *a, __m128i mask, __m128 b);







extern __m256 __cdecl _mm256_movehdup_ps(__m256 a);







extern __m256 __cdecl _mm256_moveldup_ps(__m256 a);







extern __m256d __cdecl _mm256_movedup_pd(__m256d a);
#line 817 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *a);







extern void __cdecl _mm256_stream_si256(__m256i *p, __m256i a);
#line 834 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern void __cdecl _mm256_stream_pd(double *p, __m256d a);
#line 843 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern void __cdecl _mm256_stream_ps(float *p, __m256 a);
#line 852 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_rcp_ps(__m256 a);
#line 863 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_rsqrt_ps(__m256 a);
#line 872 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_sqrt_pd(__m256d a);
#line 881 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_sqrt_ps(__m256 a);
#line 894 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_round_pd(__m256d a, int iRoundMode);
#line 909 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_round_ps(__m256 a, int iRoundMode);
#line 919 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_unpackhi_pd(__m256d m1, __m256d m2);







extern __m256 __cdecl _mm256_unpackhi_ps(__m256 m1, __m256 m2);







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d m1, __m256d m2);







extern __m256 __cdecl _mm256_unpacklo_ps(__m256 m1, __m256 m2);
#line 953 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern int __cdecl _mm256_testz_si256(__m256i s1, __m256i s2);
extern int __cdecl _mm256_testc_si256(__m256i s1, __m256i s2);
extern int __cdecl _mm256_testnzc_si256(__m256i s1, __m256i s2);
#line 968 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern int __cdecl _mm256_testz_pd(__m256d s1, __m256d s2);
extern int __cdecl _mm256_testc_pd(__m256d s1, __m256d s2);
extern int __cdecl _mm256_testnzc_pd(__m256d s1, __m256d s2);
extern int __cdecl _mm_testz_pd(__m128d s1, __m128d s2);
extern int __cdecl _mm_testc_pd(__m128d s1, __m128d s2);
extern int __cdecl _mm_testnzc_pd(__m128d s1, __m128d s2);
#line 986 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern int __cdecl _mm256_testz_ps(__m256 s1, __m256 s2);
extern int __cdecl _mm256_testc_ps(__m256 s1, __m256 s2);
extern int __cdecl _mm256_testnzc_ps(__m256 s1, __m256 s2);
extern int __cdecl _mm_testz_ps(__m128 s1, __m128 s2);
extern int __cdecl _mm_testc_ps(__m128 s1, __m128 s2);
extern int __cdecl _mm_testnzc_ps(__m128 s1, __m128 s2);
#line 1000 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern int __cdecl _mm256_movemask_pd(__m256d a);
#line 1009 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\immintrin.h"
extern int __cdecl _mm256_movemask_ps(__m256 a);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256 __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256 __cdecl _mm256_set_ps(float, float, float, float, float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char, char, char, char, char,
                                       char, char, char, char, char, char, char, char,
                                       char, char, char, char, char, char, char, char,
                                       char, char, char, char, char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short, short, short, short, short,
                                        short, short, short, short, short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int, int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(long long, long long, long long, long long);

extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256 __cdecl _mm256_setr_ps(float, float, float, float, float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char, char, char, char, char,
                                        char, char, char, char, char, char, char, char,
                                        char, char, char, char, char, char, char, char,
                                        char, char, char, char, char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short, short, short, short, short,
                                         short, short, short, short, short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int, int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(long long, long long, long long, long long);




extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256 __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256 __cdecl _mm256_castpd_ps(__m256d a);
extern __m256d __cdecl _mm256_castps_pd(__m256 a);
extern __m256i __cdecl _mm256_castps_si256(__m256 a);
extern __m256i __cdecl _mm256_castpd_si256(__m256d a);
extern __m256 __cdecl _mm256_castsi256_ps(__m256i a);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i a);
extern __m128 __cdecl _mm256_castps256_ps128(__m256 a);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d a);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i a);
extern __m256 __cdecl _mm256_castps128_ps256(__m128 a);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d a);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i a);


};
#line 24 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"



#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\mm3dnow.h"
#line 21 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\mm3dnow.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 21 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\mm3dnow.h"





extern "C" {




void _m_femms(void);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pf2id(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pmulhrw(__m64, __m64);
void _m_prefetch(void*);
void _m_prefetchw(volatile const void*_Source);

__m64 _m_from_float(float);
float _m_to_float(__m64);



__m64 _m_pf2iw(__m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pswapd(__m64);


};
#line 27 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"






extern "C" {
#line 135 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
void * __cdecl _alloca(size_t _Size);
int __cdecl abs( int);


unsigned short __cdecl _byteswap_ushort( unsigned short value);
unsigned long __cdecl _byteswap_ulong( unsigned long value);
unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64 value);
#line 159 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
void __cdecl __debugbreak(void);
void __cdecl _disable(void);


__int64 __emul(int,int);
unsigned __int64 __emulu(unsigned int,unsigned int);
void __cdecl _enable(void);
#line 184 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
long __cdecl _InterlockedDecrement(long volatile *);







long _InterlockedExchange(long volatile *, long);
#line 202 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
short _InterlockedExchange16(short volatile *, short);
char _InterlockedExchange8(char volatile *, char);
long _InterlockedExchangeAdd(long volatile *, long);







short _InterlockedExchangeAdd16(short volatile *, short);
char _InterlockedExchangeAdd8(char volatile *, char);
long _InterlockedCompareExchange (long volatile *, long, long);
#line 227 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
__int64 _InterlockedCompareExchange64(__int64 volatile *, __int64, __int64);

long __cdecl _InterlockedIncrement(long volatile *);







long _InterlockedOr(long volatile *, long);
char _InterlockedOr8(char volatile *, char);
short _InterlockedOr16(short volatile *, short);
#line 249 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
long _InterlockedXor(long volatile *, long);
char _InterlockedXor8(char volatile *, char);
short _InterlockedXor16(short volatile *, short);
#line 261 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
long _InterlockedAnd(long volatile *, long);
char _InterlockedAnd8(char volatile *, char);
short _InterlockedAnd16(short volatile *, short);
#line 273 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
long _InterlockedAddLargeStatistic(__int64 volatile *, long);
int __cdecl _inp(unsigned short);
int __cdecl inp(unsigned short);
unsigned long __cdecl _inpd(unsigned short);
unsigned long __cdecl inpd(unsigned short);
unsigned short __cdecl _inpw(unsigned short);
unsigned short __cdecl inpw(unsigned short);







long __cdecl labs( long);







unsigned long __cdecl _lrotl( unsigned long, int);
unsigned long __cdecl _lrotr( unsigned long, int);
unsigned __int64 __ll_lshift(unsigned __int64,int);
__int64 __ll_rshift(__int64,int);
#line 338 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
int __cdecl memcmp( const void *, const void *, size_t _Size);
void * __cdecl memcpy( void *, const void *, size_t _Size);
void * __cdecl memset( void *, int, size_t _Size);




int __cdecl _outp(unsigned short,int);
int __cdecl outp(unsigned short,int);
unsigned long __cdecl _outpd(unsigned short,unsigned long);
unsigned long __cdecl outpd(unsigned short,unsigned long);
unsigned short __cdecl _outpw(unsigned short,unsigned short);
unsigned short __cdecl outpw(unsigned short,unsigned short);
#line 362 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
void * _ReturnAddress(void);



unsigned int __cdecl _rotl( unsigned int, int);

unsigned int __cdecl _rotr( unsigned int, int);



int __cdecl _setjmp(jmp_buf);
#line 384 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
int __cdecl strcmp( const char *, const char *);
size_t __cdecl strlen( const char *);

char * __cdecl strset( char *, int);







unsigned __int64 __ull_rshift(unsigned __int64,int);






void * _AddressOfReturnAddress(void);



void _m_empty(void);
__m64 _m_from_int(int);
int _m_to_int(__m64);
__m64 _m_packsswb(__m64,__m64);
__m64 _m_packssdw(__m64,__m64);
__m64 _m_packuswb(__m64,__m64);
__m64 _m_punpckhbw(__m64,__m64);
__m64 _m_punpckhwd(__m64,__m64);
__m64 _m_punpckhdq(__m64,__m64);
__m64 _m_punpcklbw(__m64,__m64);
__m64 _m_punpcklwd(__m64,__m64);
__m64 _m_punpckldq(__m64,__m64);
__m64 _m_paddb(__m64,__m64);
__m64 _m_paddw(__m64,__m64);
__m64 _m_paddd(__m64,__m64);
__m64 _m_paddsb(__m64,__m64);
__m64 _m_paddsw(__m64,__m64);
__m64 _m_paddusb(__m64,__m64);
__m64 _m_paddusw(__m64,__m64);
__m64 _m_psubb(__m64,__m64);
__m64 _m_psubw(__m64,__m64);
__m64 _m_psubd(__m64,__m64);
__m64 _m_psubsb(__m64,__m64);
__m64 _m_psubsw(__m64,__m64);
__m64 _m_psubusb(__m64,__m64);
__m64 _m_psubusw(__m64,__m64);
__m64 _m_pmaddwd(__m64,__m64);
__m64 _m_pmulhw(__m64,__m64);
__m64 _m_pmullw(__m64,__m64);
__m64 _m_psllw(__m64,__m64);
__m64 _m_psllwi(__m64,int);
__m64 _m_pslld(__m64,__m64);
__m64 _m_pslldi(__m64,int);
__m64 _m_psllq(__m64,__m64);
__m64 _m_psllqi(__m64,int);
__m64 _m_psraw(__m64,__m64);
__m64 _m_psrawi(__m64,int);
__m64 _m_psrad(__m64,__m64);
__m64 _m_psradi(__m64,int);
__m64 _m_psrlw(__m64,__m64);
__m64 _m_psrlwi(__m64,int);
__m64 _m_psrld(__m64,__m64);
__m64 _m_psrldi(__m64,int);
__m64 _m_psrlq(__m64,__m64);
__m64 _m_psrlqi(__m64,int);
__m64 _m_pand(__m64,__m64);
__m64 _m_pandn(__m64,__m64);
__m64 _m_por(__m64,__m64);
__m64 _m_pxor(__m64,__m64);
__m64 _m_pcmpeqb(__m64,__m64);
__m64 _m_pcmpeqw(__m64,__m64);
__m64 _m_pcmpeqd(__m64,__m64);
__m64 _m_pcmpgtb(__m64,__m64);
__m64 _m_pcmpgtw(__m64,__m64);
__m64 _m_pcmpgtd(__m64,__m64);
__m64 _mm_setzero_si64(void);
__m64 _mm_set_pi32(int,int);
__m64 _mm_set_pi16(short,short,short,short);
__m64 _mm_set_pi8(char,char,char,char,char,char,char,char);
__m64 _mm_set1_pi32(int);
__m64 _mm_set1_pi16(short);
__m64 _mm_set1_pi8(char);
__m64 _mm_setr_pi32(int,int);
__m64 _mm_setr_pi16(short,short,short,short);
__m64 _mm_setr_pi8(char,char,char,char,char,char,char,char);
int _m_pextrw(__m64,int);
__m64 _m_pinsrw(__m64,int,int);
__m64 _m_pmaxsw(__m64,__m64);
__m64 _m_pmaxub(__m64,__m64);
__m64 _m_pminsw(__m64,__m64);
__m64 _m_pminub(__m64,__m64);
int _m_pmovmskb(__m64);
__m64 _m_pmulhuw(__m64,__m64);
__m64 _m_pshufw(__m64,int);
void _m_maskmovq(__m64,__m64,char*);
__m64 _m_pavgb(__m64,__m64);
__m64 _m_pavgw(__m64,__m64);
__m64 _m_psadbw(__m64,__m64);
__m64 _m_from_float(float);
float _m_to_float(__m64);
__m128 _mm_add_ss(__m128,__m128);
__m128 _mm_add_ps(__m128,__m128);
__m128 _mm_sub_ss(__m128,__m128);
__m128 _mm_sub_ps(__m128,__m128);
__m128 _mm_mul_ss(__m128,__m128);
__m128 _mm_mul_ps(__m128,__m128);
__m128 _mm_div_ss(__m128,__m128);
__m128 _mm_div_ps(__m128,__m128);
__m128 _mm_sqrt_ss(__m128);
__m128 _mm_sqrt_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_min_ss(__m128,__m128);
__m128 _mm_min_ps(__m128,__m128);
__m128 _mm_max_ss(__m128,__m128);
__m128 _mm_max_ps(__m128,__m128);
__m128 _mm_and_ps(__m128,__m128);
__m128 _mm_andnot_ps(__m128,__m128);
__m128 _mm_or_ps(__m128,__m128);
__m128 _mm_xor_ps(__m128,__m128);
__m128 _mm_cmpeq_ss(__m128,__m128);
__m128 _mm_cmpeq_ps(__m128,__m128);
__m128 _mm_cmplt_ss(__m128,__m128);
__m128 _mm_cmplt_ps(__m128,__m128);
__m128 _mm_cmple_ss(__m128,__m128);
__m128 _mm_cmple_ps(__m128,__m128);
__m128 _mm_cmpgt_ss(__m128,__m128);
__m128 _mm_cmpgt_ps(__m128,__m128);
__m128 _mm_cmpge_ss(__m128,__m128);
__m128 _mm_cmpge_ps(__m128,__m128);
__m128 _mm_cmpneq_ss(__m128,__m128);
__m128 _mm_cmpneq_ps(__m128,__m128);
__m128 _mm_cmpnlt_ss(__m128,__m128);
__m128 _mm_cmpnlt_ps(__m128,__m128);
__m128 _mm_cmpnle_ss(__m128,__m128);
__m128 _mm_cmpnle_ps(__m128,__m128);
__m128 _mm_cmpngt_ss(__m128,__m128);
__m128 _mm_cmpngt_ps(__m128,__m128);
__m128 _mm_cmpnge_ss(__m128,__m128);
__m128 _mm_cmpnge_ps(__m128,__m128);
__m128 _mm_cmpord_ss(__m128,__m128);
__m128 _mm_cmpord_ps(__m128,__m128);
__m128 _mm_cmpunord_ss(__m128,__m128);
__m128 _mm_cmpunord_ps(__m128,__m128);
int _mm_comieq_ss(__m128,__m128);
int _mm_comilt_ss(__m128,__m128);
int _mm_comile_ss(__m128,__m128);
int _mm_comigt_ss(__m128,__m128);
int _mm_comige_ss(__m128,__m128);
int _mm_comineq_ss(__m128,__m128);
int _mm_ucomieq_ss(__m128,__m128);
int _mm_ucomilt_ss(__m128,__m128);
int _mm_ucomile_ss(__m128,__m128);
int _mm_ucomigt_ss(__m128,__m128);
int _mm_ucomige_ss(__m128,__m128);
int _mm_ucomineq_ss(__m128,__m128);
int _mm_cvt_ss2si(__m128);
__m64 _mm_cvt_ps2pi(__m128);
int _mm_cvtt_ss2si(__m128);
__m64 _mm_cvtt_ps2pi(__m128);
__m128 _mm_cvt_si2ss(__m128,int);
__m128 _mm_cvt_pi2ps(__m128,__m64);
__m128 _mm_shuffle_ps(__m128,__m128,unsigned int);
__m128 _mm_unpackhi_ps(__m128,__m128);
__m128 _mm_unpacklo_ps(__m128,__m128);
__m128 _mm_loadh_pi(__m128,__m64 const*);
void _mm_storeh_pi(__m64*,__m128);
__m128 _mm_loadl_pi(__m128,__m64 const*);
void _mm_storel_pi(__m64*,__m128);
int _mm_movemask_ps(__m128);
__m128 _mm_set_ss(float);
__m128 _mm_set_ps1(float);
__m128 _mm_set_ps(float,float,float,float);
__m128 _mm_setr_ps(float,float,float,float);
__m128 _mm_setzero_ps(void);
__m128 _mm_load_ss(float const*);
__m128 _mm_load_ps1(float const*);
__m128 _mm_load_ps(float const*);
__m128 _mm_loadr_ps(float const*);
__m128 _mm_loadu_ps(float const*);
__m128 _mm_move_ss(__m128,__m128);
void _mm_store_ss(float*,__m128);
void _mm_store_ps1(float*,__m128);
void _mm_store_ps(float*,__m128);
void _mm_storer_ps(float*,__m128);
void _mm_storeu_ps(float*,__m128);
void _mm_prefetch(char const*,int);
void _mm_stream_pi(__m64*,__m64);
void _mm_stream_ps(float*,__m128);
void _mm_sfence(void);
unsigned int _mm_getcsr(void);
void _mm_setcsr(unsigned int);
__m128 _mm_movelh_ps(__m128,__m128);
__m128 _mm_movehl_ps(__m128,__m128);
void _m_prefetch(void*);
void _m_prefetchw(volatile const void*_Source);
void _m_femms(void);
__m64 _m_pavgusb(__m64,__m64);
__m64 _m_pf2id(__m64);
__m64 _m_pfacc(__m64,__m64);
__m64 _m_pfadd(__m64,__m64);
__m64 _m_pfcmpeq(__m64,__m64);
__m64 _m_pfcmpge(__m64,__m64);
__m64 _m_pfcmpgt(__m64,__m64);
__m64 _m_pfmax(__m64,__m64);
__m64 _m_pfmin(__m64,__m64);
__m64 _m_pfmul(__m64,__m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64,__m64);
__m64 _m_pfrcpit2(__m64,__m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfrsqit1(__m64,__m64);
__m64 _m_pfsub(__m64,__m64);
__m64 _m_pfsubr(__m64,__m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pmulhrw(__m64,__m64);
__m64 _m_pf2iw(__m64);
__m64 _m_pfnacc(__m64,__m64);
__m64 _m_pfpnacc(__m64,__m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pswapd(__m64);
__m128d _mm_add_sd(__m128d,__m128d);
__m128d _mm_add_pd(__m128d,__m128d);
__m128d _mm_div_sd(__m128d,__m128d);
__m128d _mm_div_pd(__m128d,__m128d);
__m128d _mm_max_sd(__m128d,__m128d);
__m128d _mm_max_pd(__m128d,__m128d);
__m128d _mm_min_sd(__m128d,__m128d);
__m128d _mm_min_pd(__m128d,__m128d);
__m128d _mm_mul_sd(__m128d,__m128d);
__m128d _mm_mul_pd(__m128d,__m128d);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128d _mm_sqrt_pd(__m128d);
__m128d _mm_sub_sd(__m128d,__m128d);
__m128d _mm_sub_pd(__m128d,__m128d);
__m128d _mm_and_pd(__m128d,__m128d);
__m128d _mm_andnot_pd(__m128d,__m128d);
__m128d _mm_or_pd(__m128d,__m128d);
__m128d _mm_xor_pd(__m128d,__m128d);
__m128d _mm_cmpeq_sd(__m128d,__m128d);
__m128d _mm_cmpeq_pd(__m128d,__m128d);
__m128d _mm_cmplt_sd(__m128d,__m128d);
__m128d _mm_cmplt_pd(__m128d,__m128d);
__m128d _mm_cmple_sd(__m128d,__m128d);
__m128d _mm_cmple_pd(__m128d,__m128d);
__m128d _mm_cmpgt_sd(__m128d,__m128d);
__m128d _mm_cmpgt_pd(__m128d,__m128d);
__m128d _mm_cmpge_sd(__m128d,__m128d);
__m128d _mm_cmpge_pd(__m128d,__m128d);
__m128d _mm_cmpneq_sd(__m128d,__m128d);
__m128d _mm_cmpneq_pd(__m128d,__m128d);
__m128d _mm_cmpnlt_sd(__m128d,__m128d);
__m128d _mm_cmpnlt_pd(__m128d,__m128d);
__m128d _mm_cmpnle_sd(__m128d,__m128d);
__m128d _mm_cmpnle_pd(__m128d,__m128d);
__m128d _mm_cmpngt_sd(__m128d,__m128d);
__m128d _mm_cmpngt_pd(__m128d,__m128d);
__m128d _mm_cmpnge_sd(__m128d,__m128d);
__m128d _mm_cmpnge_pd(__m128d,__m128d);
__m128d _mm_cmpord_sd(__m128d,__m128d);
__m128d _mm_cmpord_pd(__m128d,__m128d);
__m128d _mm_cmpunord_sd(__m128d,__m128d);
__m128d _mm_cmpunord_pd(__m128d,__m128d);
int _mm_comieq_sd(__m128d,__m128d);
int _mm_comilt_sd(__m128d,__m128d);
int _mm_comile_sd(__m128d,__m128d);
int _mm_comigt_sd(__m128d,__m128d);
int _mm_comige_sd(__m128d,__m128d);
int _mm_comineq_sd(__m128d,__m128d);
int _mm_ucomieq_sd(__m128d,__m128d);
int _mm_ucomilt_sd(__m128d,__m128d);
int _mm_ucomile_sd(__m128d,__m128d);
int _mm_ucomigt_sd(__m128d,__m128d);
int _mm_ucomige_sd(__m128d,__m128d);
int _mm_ucomineq_sd(__m128d,__m128d);
__m128 _mm_cvtpd_ps(__m128d);
__m128d _mm_cvtps_pd(__m128);
__m128d _mm_cvtepi32_pd(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);
int _mm_cvtsd_si32(__m128d);
__m128 _mm_cvtsd_ss(__m128,__m128d);
__m128d _mm_cvtsi32_sd(__m128d,int);
__m128d _mm_cvtss_sd(__m128d,__m128);
__m128i _mm_cvttpd_epi32(__m128d);
int _mm_cvttsd_si32(__m128d);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtps_epi32(__m128);
__m128i _mm_cvttps_epi32(__m128);
__m64 _mm_cvtpd_pi32(__m128d);
__m64 _mm_cvttpd_pi32(__m128d);
__m128d _mm_cvtpi32_pd(__m64);
__m128d _mm_unpackhi_pd(__m128d,__m128d);
__m128d _mm_unpacklo_pd(__m128d,__m128d);
int _mm_movemask_pd(__m128d);
__m128d _mm_shuffle_pd(__m128d,__m128d,int);
__m128d _mm_load_pd(double const*);
__m128d _mm_load1_pd(double const*);
__m128d _mm_loadr_pd(double const*);
__m128d _mm_loadu_pd(double const*);
__m128d _mm_load_sd(double const*);
__m128d _mm_loadh_pd(__m128d,double const*);
__m128d _mm_loadl_pd(__m128d,double const*);
__m128d _mm_set_sd(double);
__m128d _mm_set1_pd(double);
__m128d _mm_set_pd(double,double);
__m128d _mm_setr_pd(double,double);
__m128d _mm_setzero_pd(void);
__m128d _mm_move_sd(__m128d,__m128d);
void _mm_store_sd(double*,__m128d);
void _mm_store1_pd(double*,__m128d);
void _mm_store_pd(double*,__m128d);
void _mm_storeu_pd(double*,__m128d);
void _mm_storer_pd(double*,__m128d);
void _mm_storeh_pd(double*,__m128d);
void _mm_storel_pd(double*,__m128d);
__m128i _mm_add_epi8(__m128i,__m128i);
__m128i _mm_add_epi16(__m128i,__m128i);
__m128i _mm_add_epi32(__m128i,__m128i);
__m64 _mm_add_si64(__m64,__m64);
__m128i _mm_add_epi64(__m128i,__m128i);
__m128i _mm_adds_epi8(__m128i,__m128i);
__m128i _mm_adds_epi16(__m128i,__m128i);
__m128i _mm_adds_epu8(__m128i,__m128i);
__m128i _mm_adds_epu16(__m128i,__m128i);
__m128i _mm_avg_epu8(__m128i,__m128i);
__m128i _mm_avg_epu16(__m128i,__m128i);
__m128i _mm_madd_epi16(__m128i,__m128i);
__m128i _mm_max_epi16(__m128i,__m128i);
__m128i _mm_max_epu8(__m128i,__m128i);
__m128i _mm_min_epi16(__m128i,__m128i);
__m128i _mm_min_epu8(__m128i,__m128i);
__m128i _mm_mulhi_epi16(__m128i,__m128i);
__m128i _mm_mulhi_epu16(__m128i,__m128i);
__m128i _mm_mullo_epi16(__m128i,__m128i);
__m64 _mm_mul_su32(__m64,__m64);
__m128i _mm_mul_epu32(__m128i,__m128i);
__m128i _mm_sad_epu8(__m128i,__m128i);
__m128i _mm_sub_epi8(__m128i,__m128i);
__m128i _mm_sub_epi16(__m128i,__m128i);
__m128i _mm_sub_epi32(__m128i,__m128i);
__m64 _mm_sub_si64(__m64,__m64);
__m128i _mm_sub_epi64(__m128i,__m128i);
__m128i _mm_subs_epi8(__m128i,__m128i);
__m128i _mm_subs_epi16(__m128i,__m128i);
__m128i _mm_subs_epu8(__m128i,__m128i);
__m128i _mm_subs_epu16(__m128i,__m128i);
__m128i _mm_andnot_si128(__m128i,__m128i);
__m128i _mm_and_si128(__m128i,__m128i);
__m128i _mm_or_si128(__m128i,__m128i);
__m128i _mm_xor_si128(__m128i,__m128i);
__m128i _mm_slli_si128(__m128i,int);
__m128i _mm_slli_epi16(__m128i,int);
__m128i _mm_sll_epi16(__m128i,__m128i);
__m128i _mm_slli_epi32(__m128i,int);
__m128i _mm_sll_epi32(__m128i,__m128i);
__m128i _mm_slli_epi64(__m128i,int);
__m128i _mm_sll_epi64(__m128i,__m128i);
__m128i _mm_srai_epi16(__m128i,int);
__m128i _mm_sra_epi16(__m128i,__m128i);
__m128i _mm_srai_epi32(__m128i,int);
__m128i _mm_sra_epi32(__m128i,__m128i);
__m128i _mm_srli_si128(__m128i,int);
__m128i _mm_srli_epi16(__m128i,int);
__m128i _mm_srl_epi16(__m128i,__m128i);
__m128i _mm_srli_epi32(__m128i,int);
__m128i _mm_srl_epi32(__m128i,__m128i);
__m128i _mm_srli_epi64(__m128i,int);
__m128i _mm_srl_epi64(__m128i,__m128i);
__m128i _mm_cmpeq_epi8(__m128i,__m128i);
__m128i _mm_cmpeq_epi16(__m128i,__m128i);
__m128i _mm_cmpeq_epi32(__m128i,__m128i);
__m128i _mm_cmpgt_epi8(__m128i,__m128i);
__m128i _mm_cmpgt_epi16(__m128i,__m128i);
__m128i _mm_cmpgt_epi32(__m128i,__m128i);
__m128i _mm_cmplt_epi8(__m128i,__m128i);
__m128i _mm_cmplt_epi16(__m128i,__m128i);
__m128i _mm_cmplt_epi32(__m128i,__m128i);
__m128i _mm_cvtsi32_si128(int);
int _mm_cvtsi128_si32(__m128i);
__m128i _mm_packs_epi16(__m128i,__m128i);
__m128i _mm_packs_epi32(__m128i,__m128i);
__m128i _mm_packus_epi16(__m128i,__m128i);
int _mm_extract_epi16(__m128i,int);
__m128i _mm_insert_epi16(__m128i,int,int);
int _mm_movemask_epi8(__m128i);
__m128i _mm_shuffle_epi32(__m128i,int);
__m128i _mm_shufflehi_epi16(__m128i,int);
__m128i _mm_shufflelo_epi16(__m128i,int);
__m128i _mm_unpackhi_epi8(__m128i,__m128i);
__m128i _mm_unpackhi_epi16(__m128i,__m128i);
__m128i _mm_unpackhi_epi32(__m128i,__m128i);
__m128i _mm_unpackhi_epi64(__m128i,__m128i);
__m128i _mm_unpacklo_epi8(__m128i,__m128i);
__m128i _mm_unpacklo_epi16(__m128i,__m128i);
__m128i _mm_unpacklo_epi32(__m128i,__m128i);
__m128i _mm_unpacklo_epi64(__m128i,__m128i);
__m128i _mm_load_si128(__m128i const*);
__m128i _mm_loadu_si128(__m128i const*);
__m128i _mm_loadl_epi64(__m128i const*);
__m128i _mm_set_epi64(__m64,__m64);
__m128i _mm_set_epi32(int,int,int,int);
__m128i _mm_set_epi16(short,short,short,short,short,short,short,short);
__m128i _mm_set_epi8(char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char);
__m128i _mm_set1_epi64(__m64);
__m128i _mm_set1_epi32(int);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi8(char);
__m128i _mm_setl_epi64(__m128i);
__m128i _mm_setr_epi64(__m64,__m64);
__m128i _mm_setr_epi32(int,int,int,int);
__m128i _mm_setr_epi16(short,short,short,short,short,short,short,short);
__m128i _mm_setr_epi8(char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char);
__m128i _mm_setzero_si128(void);
void _mm_store_si128(__m128i*,__m128i);
void _mm_storeu_si128(__m128i*,__m128i);
void _mm_storel_epi64(__m128i*,__m128i);
void _mm_maskmoveu_si128(__m128i,__m128i,char*);
__m128i _mm_move_epi64(__m128i);
__m128i _mm_movpi64_epi64(__m64);
__m64 _mm_movepi64_pi64(__m128i);
void _mm_stream_pd(double*,__m128d);
void _mm_stream_si128(__m128i*,__m128i);
void _mm_clflush(void const *);
void _mm_lfence(void);
void _mm_mfence(void);
void _mm_stream_si32(int*,int);
void _mm_pause(void);
__m128 _mm_addsub_ps(__m128,__m128);
__m128d _mm_addsub_pd(__m128d,__m128d);
__m128 _mm_hadd_ps(__m128,__m128);
__m128d _mm_hadd_pd(__m128d,__m128d);
__m128 _mm_hsub_ps(__m128,__m128);
__m128d _mm_hsub_pd(__m128d,__m128d);
__m128i _mm_lddqu_si128(__m128i const*);
void _mm_monitor(void const*,unsigned int,unsigned int);
__m128d _mm_movedup_pd(__m128d);
__m128d _mm_loaddup_pd(double const*);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_moveldup_ps(__m128);
void _mm_mwait(unsigned int,unsigned int);
__m128i _mm_hadd_epi16 (__m128i a, __m128i b);
__m128i _mm_hadd_epi32 (__m128i a, __m128i b);
__m128i _mm_hadds_epi16 (__m128i a, __m128i b);
__m64 _mm_hadd_pi16 (__m64 a, __m64 b);
__m64 _mm_hadd_pi32 (__m64 a, __m64 b);
__m64 _mm_hadds_pi16 (__m64 a, __m64 b);
__m128i _mm_hsub_epi16 (__m128i a, __m128i b);
__m128i _mm_hsub_epi32 (__m128i a, __m128i b);
__m128i _mm_hsubs_epi16 (__m128i a, __m128i b);
__m64 _mm_hsub_pi16 (__m64 a, __m64 b);
__m64 _mm_hsub_pi32 (__m64 a, __m64 b);
__m64 _mm_hsubs_pi16 (__m64 a, __m64 b);
__m128i _mm_maddubs_epi16 (__m128i a, __m128i b);
__m64 _mm_maddubs_pi16 (__m64 a, __m64 b);
__m128i _mm_mulhrs_epi16 (__m128i a, __m128i b);
__m64 _mm_mulhrs_pi16 (__m64 a, __m64 b);
__m128i _mm_shuffle_epi8 (__m128i a, __m128i b);
__m64 _mm_shuffle_pi8 (__m64 a, __m64 b);
__m128i _mm_sign_epi8 (__m128i a, __m128i b);
__m128i _mm_sign_epi16 (__m128i a, __m128i b);
__m128i _mm_sign_epi32 (__m128i a, __m128i b);
__m64 _mm_sign_pi8 (__m64 a, __m64 b);
__m64 _mm_sign_pi16 (__m64 a, __m64 b);
__m64 _mm_sign_pi32 (__m64 a, __m64 b);
__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int n);
__m64 _mm_alignr_pi8 (__m64 a, __m64 b, int n);
__m128i _mm_abs_epi8 (__m128i a);
__m128i _mm_abs_epi16 (__m128i a);
__m128i _mm_abs_epi32 (__m128i a);
__m64 _mm_abs_pi8 (__m64 a);
__m64 _mm_abs_pi16 (__m64 a);
__m64 _mm_abs_pi32 (__m64 a);
#line 868 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
__m128i _mm_blend_epi16 (__m128i v1, __m128i v2, const int mask);
__m128i _mm_blendv_epi8 (__m128i v1, __m128i v2, __m128i mask);
__m128 _mm_blend_ps (__m128 v1, __m128 v2, const int mask);
__m128 _mm_blendv_ps(__m128 v1, __m128 v2, __m128 v3);
__m128d _mm_blend_pd (__m128d v1, __m128d v2, const int mask);
__m128d _mm_blendv_pd(__m128d v1, __m128d v2, __m128d v3);
__m128 _mm_dp_ps(__m128 val1, __m128 val2, const int mask);
__m128d _mm_dp_pd(__m128d val1, __m128d val2, const int mask);
__m128i _mm_cmpeq_epi64(__m128i val1, __m128i val2);
__m128i _mm_min_epi8 (__m128i val1, __m128i val2);
__m128i _mm_max_epi8 (__m128i val1, __m128i val2);
__m128i _mm_min_epu16(__m128i val1, __m128i val2);
__m128i _mm_max_epu16(__m128i val1, __m128i val2);
__m128i _mm_min_epi32(__m128i val1, __m128i val2);
__m128i _mm_max_epi32(__m128i val1, __m128i val2);
__m128i _mm_min_epu32(__m128i val1, __m128i val2);
__m128i _mm_max_epu32(__m128i val1, __m128i val2);
__m128i _mm_mullo_epi32(__m128i a, __m128i b);
__m128i _mm_mul_epi32(__m128i a, __m128i b);
int _mm_testz_si128(__m128i mask, __m128i val);
int _mm_testc_si128(__m128i mask, __m128i val);
int _mm_testnzc_si128(__m128i mask, __m128i s2);
__m128 _mm_insert_ps(__m128 dst, __m128 src, const int ndx);
int _mm_extract_ps(__m128 src, const int ndx);
__m128i _mm_insert_epi8 (__m128i dst, int s, const int ndx);
__m128i _mm_insert_epi32(__m128i dst, int s, const int ndx);
int _mm_extract_epi8 (__m128i src, const int ndx);
int _mm_extract_epi32(__m128i src, const int ndx);
__m128i _mm_minpos_epu16(__m128i shortValues);
__m128d _mm_round_pd(__m128d val, int iRoundMode);
__m128d _mm_round_sd(__m128d dst, __m128d val, int iRoundMode);
__m128 _mm_round_ps(__m128 val, int iRoundMode);
__m128 _mm_round_ss(__m128 dst, __m128 val, int iRoundMode);
__m128i _mm_cvtepi8_epi32 (__m128i byteValues);
__m128i _mm_cvtepi16_epi32(__m128i shortValues);
__m128i _mm_cvtepi8_epi64 (__m128i byteValues);
__m128i _mm_cvtepi32_epi64(__m128i intValues);
__m128i _mm_cvtepi16_epi64(__m128i shortValues);
__m128i _mm_cvtepi8_epi16 (__m128i byteValues);
__m128i _mm_cvtepu8_epi32 (__m128i byteValues);
__m128i _mm_cvtepu16_epi32(__m128i shortValues);
__m128i _mm_cvtepu8_epi64 (__m128i shortValues);
__m128i _mm_cvtepu32_epi64(__m128i intValues);
__m128i _mm_cvtepu16_epi64(__m128i shortValues);
__m128i _mm_cvtepu8_epi16 (__m128i byteValues);
__m128i _mm_packus_epi32(__m128i val1, __m128i val2);
__m128i _mm_mpsadbw_epu8(__m128i s1, __m128i s2, const int msk);
__m128i _mm_stream_load_si128(__m128i* v1);


__m128i _mm_cmpistrm (__m128i a, __m128i b, const int mode);
int _mm_cmpistri (__m128i a, __m128i b, const int mode);
__m128i _mm_cmpestrm (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestri (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpistrz (__m128i a, __m128i b, const int mode);
int _mm_cmpistrc (__m128i a, __m128i b, const int mode);
int _mm_cmpistrs (__m128i a, __m128i b, const int mode);
int _mm_cmpistro (__m128i a, __m128i b, const int mode);
int _mm_cmpistra (__m128i a, __m128i b, const int mode);
int _mm_cmpestrz (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestrc (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestrs (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestro (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestra (__m128i a, int la, __m128i b, int lb, const int mode);
__m128i _mm_cmpgt_epi64(__m128i val1, __m128i val2);
int _mm_popcnt_u32(unsigned int v);

unsigned int _mm_crc32_u8 (unsigned int crc, unsigned char v);
unsigned int _mm_crc32_u16(unsigned int crc, unsigned short v);
unsigned int _mm_crc32_u32(unsigned int crc, unsigned int v);

void _WriteBarrier(void);
void _ReadWriteBarrier(void);
#line 951 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
unsigned long __readcr0(void);
unsigned long __readcr2(void);
unsigned long __readcr3(void);
unsigned long __readcr4(void);
unsigned long __readcr8(void);




void __writecr0(unsigned);
void __writecr3(unsigned);
void __writecr4(unsigned);
void __writecr8(unsigned);

unsigned __readdr(unsigned int);

void __writedr(unsigned int, unsigned);

unsigned __readeflags(void);

void __writeeflags(unsigned);
void __wbinvd(void);
void __invlpg(void*);
unsigned __int64 __readmsr(unsigned long);
void __writemsr(unsigned long, unsigned __int64);
unsigned __int64 __rdtsc(void);
void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsw(unsigned short *, unsigned short const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);
#line 989 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
void __addfsbyte(unsigned long Offset, unsigned char Data);
void __addfsword(unsigned long Offset, unsigned short Data);
void __addfsdword(unsigned long Offset, unsigned long Data);
void __incfsbyte(unsigned long Offset);
void __incfsword(unsigned long Offset);
void __incfsdword(unsigned long Offset);
#line 1003 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
unsigned char __inbyte(unsigned short Port);
unsigned short __inword(unsigned short Port);
unsigned long __indword(unsigned short Port);
void __outbyte(unsigned short Port, unsigned char Data);
void __outword(unsigned short Port, unsigned short Data);
void __outdword(unsigned short Port, unsigned long Data);
void __inbytestring(unsigned short Port, unsigned char *Buffer, unsigned long Count);
void __inwordstring(unsigned short Port, unsigned short *Buffer, unsigned long Count);
void __indwordstring(unsigned short Port, unsigned long *Buffer, unsigned long Count);
void __outbytestring(unsigned short Port, unsigned char *Buffer, unsigned long Count);
void __outwordstring(unsigned short Port, unsigned short *Buffer, unsigned long Count);
void __outdwordstring(unsigned short Port, unsigned long *Buffer, unsigned long Count);
unsigned int __getcallerseflags();



void __vmx_vmptrst(unsigned __int64 *);



void __vmx_off(void);

void __svm_clgi(void);
void __svm_invlpga(void*, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);
void __halt(void);
void __sidt(void*);
void __lidt(void*);
void __ud2(void);
void __nop(void);
#line 1048 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
void __stosb(unsigned char *, unsigned char, size_t);
void __stosw(unsigned short *, unsigned short, size_t);
void __stosd(unsigned long *, unsigned long, size_t);

unsigned char _bittest(long const *a, long b);
unsigned char _bittestandset(long *a, long b);
unsigned char _bittestandreset(long *a, long b);
unsigned char _bittestandcomplement(long *a, long b);
unsigned char _interlockedbittestandset(long volatile *a, long b);
unsigned char _interlockedbittestandreset(long volatile *a, long b);






void __cpuid(int a[4], int b);
void __cpuidex(int a[4], int b, int c);
unsigned __int64 __readpmc(unsigned long a);
unsigned long __segmentlimit(unsigned long a);

unsigned char __readfsbyte(unsigned long Offset);
unsigned short __readfsword(unsigned long Offset);
unsigned long __readfsdword(unsigned long Offset);
unsigned __int64 __readfsqword(unsigned long Offset);
void __writefsbyte(unsigned long Offset, unsigned char Data);
void __writefsword(unsigned long Offset, unsigned short Data);
void __writefsdword(unsigned long Offset, unsigned long Data);
void __writefsqword(unsigned long Offset, unsigned __int64 Data);


unsigned __int64 __cdecl _rotl64( unsigned __int64, int);
unsigned __int64 __cdecl _rotr64( unsigned __int64, int);
__int64 __cdecl _abs64(__int64);

unsigned char _BitScanForward(unsigned long* Index, unsigned long Mask);
unsigned char _BitScanReverse(unsigned long* Index, unsigned long Mask);


__declspec(dllimport) wchar_t * __cdecl wcscat( wchar_t *, const wchar_t * _Source);
__declspec(dllimport) int __cdecl wcscmp( const wchar_t *, const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcscpy( wchar_t *, const wchar_t * _Source);
__declspec(dllimport) size_t __cdecl wcslen( const wchar_t *);
#pragma warning(suppress: 4985)
__declspec(dllimport) wchar_t * __cdecl _wcsset( wchar_t *, wchar_t);




void __int2c(void);
void _ReadBarrier(void);
unsigned char _rotr8(unsigned char value, unsigned char shift);
unsigned short _rotr16(unsigned short value, unsigned char shift);
unsigned char _rotl8(unsigned char value, unsigned char shift);
unsigned short _rotl16(unsigned short value, unsigned char shift);
short _InterlockedIncrement16(short volatile *Addend);
short _InterlockedDecrement16(short volatile *Addend);
short _InterlockedCompareExchange16(short volatile *Destination, short Exchange, short Comparand);
char _InterlockedCompareExchange8(char volatile *Destination, char Exchange, char Comparand);
#line 1259 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
void __nvreg_save_fence(void);
void __nvreg_restore_fence(void);
#line 1281 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
unsigned short __lzcnt16(unsigned short);
unsigned int __lzcnt(unsigned int);

unsigned short __popcnt16(unsigned short);
unsigned int __popcnt(unsigned int);

__m128i _mm_extract_si64(__m128i,__m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
__m128i _mm_insert_si64(__m128i,__m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
void _mm_stream_sd(double*,__m128d);
void _mm_stream_ss(float*,__m128);
unsigned __int64 __rdtscp(unsigned int*);
#line 1694 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\intrin.h"
}
#line 987 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory"






namespace std {

template<class _Ty>
 struct default_delete;

template<class _Ty,
 class _Dx = default_delete<_Ty> >
 class unique_ptr;


 namespace tr1 {

class bad_weak_ptr
 : public exception
 {
public:
 explicit bad_weak_ptr(const char * = 0)
  {
  }

 virtual const char * what() const throw()
  {
  return ("tr1::bad_weak_ptr");
  }
 };


class _Ref_count_base
 {
private:
 virtual void _Destroy() = 0;
 virtual void _Delete_this() = 0;

 long _Uses;
 long _Weaks;

protected:
 _Ref_count_base()
  : _Uses(1), _Weaks(1)
  {
  }

public:
 virtual ~_Ref_count_base()
  {
  }

 bool _Incref_nz()
  {
  for (; ; )
   {
   long _Count = (volatile long&)_Uses;
   if (_Count == 0)
    return (false);
   if (_InterlockedCompareExchange(&_Uses, _Count + 1, _Count) == _Count)
    return (true);
   }
  }

 void _Incref()
  {
  _InterlockedIncrement(&_Uses);
  }

 void _Incwref()
  {
  _InterlockedIncrement(&_Weaks);
  }

 void _Decref()
  {
  if (_InterlockedDecrement(&_Uses) == 0)
   {
   _Destroy();
   _Decwref();
   }
  }

 void _Decwref()
  {
  if (_InterlockedDecrement(&_Weaks) == 0)
   _Delete_this();
  }

 long _Use_count() const
  {
  return (_Uses);
  }

 bool _Expired() const
  {
  return (_Uses == 0);
  }

 virtual void *_Get_deleter(const type_info&) const
  {
  return (0);
  }
 };


template<class _Ty>
 class _Ref_count
 : public _Ref_count_base
 {
public:
 _Ref_count(_Ty *_Px)
  : _Ref_count_base(), _Ptr(_Px)
  {
  }

private:
 virtual void _Destroy()
  {
  delete _Ptr;
  }

 virtual void _Delete_this()
  {
  delete this;
  }

 _Ty * _Ptr;
 };

template<class _Ty,
 class _Dx>
 class _Ref_count_del
 : public _Ref_count_base
 {
public:
 _Ref_count_del(_Ty *_Px, _Dx _Dt)
  : _Ref_count_base(), _Ptr(_Px), _Dtor(_Dt)
  {
  }

 virtual void *_Get_deleter(const type_info& _Type) const
  {
  return ((void *)(_Type == typeid(_Dx) ? &_Dtor : 0));
  }

private:
 virtual void _Destroy()
  {
  _Dtor(_Ptr);
  }

 virtual void _Delete_this()
  {
  delete this;
  }

 _Ty * _Ptr;
 _Dx _Dtor;
 };

template<class _Ty,
 class _Dx,
 class _Alloc>
 class _Ref_count_del_alloc
 : public _Ref_count_base
 {
public:
 typedef _Ref_count_del_alloc<_Ty, _Dx, _Alloc> _Myty;
 typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

 _Ref_count_del_alloc(_Ty *_Px, _Dx _Dt, _Myalty _Al)
  : _Ref_count_base(), _Ptr(_Px), _Dtor(_Dt), _Myal(_Al)
  {
  }

 virtual void *_Get_deleter(const type_info& _Type) const
  {
  return ((void *)(_Type == typeid(_Dx) ? &_Dtor : 0));
  }

private:
 virtual void _Destroy()
  {
  _Dtor(_Ptr);
  }

 virtual void _Delete_this()
  {
  _Myalty _Al = _Myal;
  _Dest_val(_Al, this);
  _Al.deallocate(this, 1);
  }

 _Ty * _Ptr;
 _Dx _Dtor;
 _Myalty _Myal;
 };


template<class _Ty>
 class weak_ptr;
template<class _Ty>
 class shared_ptr;
template<class _Ty>
 class enable_shared_from_this;
struct _Static_tag {};
struct _Const_tag {};
struct _Dynamic_tag {};
template<class _Ty1,
 class _Ty2>
 void _Do_enable(_Ty1 *, enable_shared_from_this<_Ty2> *,
  _Ref_count_base *);

template<class _Ty>
 inline void _Enable_shared(_Ty *_Ptr, _Ref_count_base *_Refptr,
  typename _Ty::_EStype * = 0)
 {
 if (_Ptr)
  _Do_enable(_Ptr,
   (enable_shared_from_this<typename _Ty::_EStype>*)_Ptr, _Refptr);
 }

inline void _Enable_shared(const volatile void *, const volatile void *)
 {
 }


template<class _Ty>
 class _Ptr_base
 {
public:
 typedef _Ptr_base<_Ty> _Myt;
 typedef _Ty _Elem;
 typedef _Elem element_type;

 _Ptr_base()
  : _Ptr(0), _Rep(0)
  {
  }

 _Ptr_base(_Myt&& _Right)
  : _Ptr(0), _Rep(0)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 template<class _Ty2>
  _Ptr_base(_Ptr_base<_Ty2>&& _Right)
  : _Ptr(_Right._Ptr), _Rep(_Right._Rep)
  {
  _Right._Ptr = 0;
  _Right._Rep = 0;
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   _Swap(_Right);
  }

 long use_count() const
  {
  return (_Rep ? _Rep->_Use_count() : 0);
  }

 void _Swap(_Ptr_base& _Right)
  {
  ::std:: swap(_Rep, _Right._Rep);
  ::std:: swap(_Ptr, _Right._Ptr);
  }

 template<class _Ty2>
  bool owner_before(const _Ptr_base<_Ty2>& _Right) const
  {
  return (_Rep < _Right._Rep);
  }

 void *_Get_deleter(const type_info& _Type) const
  {
  return (_Rep ? _Rep->_Get_deleter(_Type) : 0);
  }

 _Ty *_Get() const
  {
  return (_Ptr);
  }

 bool _Expired() const
  {
  return (!_Rep || _Rep->_Expired());
  }

 void _Decref()
  {
  if (_Rep != 0)
   _Rep->_Decref();
  }

 void _Reset()
  {
  _Reset(0, 0);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other)
  {
  _Reset(_Other._Ptr, _Other._Rep, false);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, bool _Throw)
  {
  _Reset(_Other._Ptr, _Other._Rep, _Throw);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, const _Static_tag&)
  {
  _Reset(static_cast<_Elem *>(_Other._Ptr), _Other._Rep);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, const _Const_tag&)
  {
  _Reset(const_cast<_Elem *>(_Other._Ptr), _Other._Rep);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, const _Dynamic_tag&)
  {
  _Elem *_Ptr = dynamic_cast<_Elem *>(_Other._Ptr);
  if (_Ptr)
   _Reset(_Ptr, _Other._Rep);
  else
   _Reset();
  }

 template<class _Ty2>
  void _Reset(auto_ptr<_Ty2>& _Other)
  {
  _Ty2 *_Px = _Other.get();
  _Reset0(_Px, new _Ref_count<_Elem>(_Px));
  _Other.release();
  _Enable_shared(_Px, _Rep);
  }


 template<class _Ty2>
  void _Reset(_Ty *_Ptr, const _Ptr_base<_Ty2>& _Other)
  {
  _Reset(_Ptr, _Other._Rep);
  }


 void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Other_rep)
   _Other_rep->_Incref();
  _Reset0(_Other_ptr, _Other_rep);
  }

 void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep, bool _Throw)
  {


  if (_Other_rep && _Other_rep->_Incref_nz())
   _Reset0(_Other_ptr, _Other_rep);
  else if (_Throw)
   throw bad_weak_ptr(0);
  }

 void _Reset0(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Rep != 0)
   _Rep->_Decref();
  _Rep = _Other_rep;
  _Ptr = _Other_ptr;
  }

 void _Decwref()
  {
  if (_Rep != 0)
   _Rep->_Decwref();
  }

 void _Resetw()
  {
  _Resetw((_Elem *)0, 0);
  }

 template<class _Ty2>
  void _Resetw(const _Ptr_base<_Ty2>& _Other)
  {
  _Resetw(_Other._Ptr, _Other._Rep);
  }

 template<class _Ty2>
  void _Resetw(const _Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  _Resetw(const_cast<_Ty2*>(_Other_ptr), _Other_rep);
  }

 template<class _Ty2>
  void _Resetw(_Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Other_rep)
   _Other_rep->_Incwref();
  if (_Rep != 0)
   _Rep->_Decwref();
  _Rep = _Other_rep;
  _Ptr = _Other_ptr;
  }

private:
 _Ty *_Ptr;
 _Ref_count_base *_Rep;
 template<class _Ty0>
  friend class _Ptr_base;
 };


template<class _Ty>
 class shared_ptr
  : public _Ptr_base<_Ty>
 {
public:
 typedef shared_ptr<_Ty> _Myt;
 typedef _Ptr_base<_Ty> _Mybase;

 shared_ptr()
  {
  }

 template<class _Ux>
  explicit shared_ptr(_Ux *_Px)
  {
  _Resetp(_Px);
  }

 template<class _Ux,
  class _Dx>
  shared_ptr(_Ux *_Px, _Dx _Dt)
  {
  _Resetp(_Px, _Dt);
  }






 shared_ptr(::std:: nullptr_t)
  {
  _Resetp((_Ty *)0);
  }

 template<class _Dx>
  shared_ptr(::std:: nullptr_t, _Dx _Dt)
  {
  _Resetp((_Ty *)0, _Dt);
  }

 template<class _Dx,
  class _Alloc>
  shared_ptr(::std:: nullptr_t, _Dx _Dt, _Alloc _Ax)
  {
  _Resetp((_Ty *)0, _Dt, _Ax);
  }


 template<class _Ux,
  class _Dx,
  class _Alloc>
  shared_ptr(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  _Resetp(_Px, _Dt, _Ax);
  }



 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Right, _Ty *_Px)
  {
  this->_Reset(_Px, _Right);
  }


 shared_ptr(const _Myt& _Other)
  {
  this->_Reset(_Other);
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Other,
   typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
    void *>::type * = 0)
  {
  this->_Reset(_Other);
  }

 template<class _Ty2>
  explicit shared_ptr(const weak_ptr<_Ty2>& _Other,
   bool _Throw = true)
  {
  this->_Reset(_Other, _Throw);
  }

 template<class _Ty2>
  shared_ptr(auto_ptr<_Ty2>& _Other)
  {
  this->_Reset(_Other);
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Other, const _Static_tag& _Tag)
  {
  this->_Reset(_Other, _Tag);
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Other, const _Const_tag& _Tag)
  {
  this->_Reset(_Other, _Tag);
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Other, const _Dynamic_tag& _Tag)
  {
  this->_Reset(_Other, _Tag);
  }

 shared_ptr(_Myt&& _Right)
  : _Mybase(::std:: forward<_Myt>(_Right))
  {
  }

 template<class _Ty2>
  shared_ptr(shared_ptr<_Ty2>&& _Right,
   typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
    void *>::type * = 0)
  : _Mybase(::std:: forward<shared_ptr<_Ty2> >(_Right))
  {
  }


 template<class _Ux,
  class _Dx>
  shared_ptr(::std:: unique_ptr<_Ux, _Dx>&& _Right)
  {
  _Resetp(_Right.release(), _Right.get_deleter());
  }

 template<class _Ux,
  class _Dx>
  _Myt& operator=(unique_ptr<_Ux, _Dx>&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }


 _Myt& operator=(_Myt&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(shared_ptr<_Ty2>&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 void swap(_Myt&& _Right)
  {
  _Mybase::swap(::std:: move(_Right));
  }

 ~shared_ptr()
  {
  this->_Decref();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(const shared_ptr<_Ty2>& _Right)
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(auto_ptr<_Ty2>& _Right)
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }

 void reset()
  {
  shared_ptr().swap(*this);
  }

 template<class _Ux>
  void reset(_Ux *_Px)
  {
  shared_ptr(_Px).swap(*this);
  }

 template<class _Ux,
  class _Dx>
  void reset(_Ux *_Px, _Dx _Dt)
  {
  shared_ptr(_Px, _Dt).swap(*this);
  }


 template<class _Ux,
  class _Dx,
  class _Alloc>
  void reset(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  shared_ptr(_Px, _Dt, _Ax).swap(*this);
  }


 void swap(_Myt& _Other)
  {
  this->_Swap(_Other);
  }

 _Ty *get() const
  {
  return (this->_Get());
  }

 typename tr1::add_reference<_Ty>::type operator*() const
  {
  return (*this->_Get());
  }

 _Ty *operator->() const
  {
  return (this->_Get());
  }

 bool unique() const
  {
  return (this->use_count() == 1);
  }

 operator ::std:: _Bool_type() const
  {
  return (this->_Get() != 0 ? (&::std:: _Bool_struct::_Member) : 0);
  }

private:
 template<class _Ux>
  void _Resetp(_Ux *_Px)
  {
  try {
  _Resetp0(_Px, new _Ref_count<_Ux>(_Px));
  } catch (...) {
  delete _Px;
  throw;
  }
  }

 template<class _Ux,
  class _Dx>
  void _Resetp(_Ux *_Px, _Dx _Dt)
  {
  try {
  _Resetp0(_Px, new _Ref_count_del<_Ux, _Dx>(_Px, _Dt));
  } catch (...) {
  _Dt(_Px);
  throw;
  }
  }


 template<class _Ux,
  class _Dx,
  class _Alloc>
  void _Resetp(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  typedef _Ref_count_del_alloc<_Ux, _Dx, _Alloc> _Refd;
  typename _Alloc::template rebind<_Refd>::other _Al = _Ax;

  try {
  _Refd *_Ptr = _Al.allocate(1);
  new (_Ptr) _Refd(_Px, _Dt, _Al);
  _Resetp0(_Px, _Ptr);
  } catch (...) {
  _Dt(_Px);
  throw;
  }
  }


public:
 template<class _Ux>
  void _Resetp0(_Ux *_Px, _Ref_count_base *_Rx)
  {
  this->_Reset0(_Px, _Rx);
  _Enable_shared(_Px, _Rx);
  }
 };

template<class _Ty1,
 class _Ty2>
 bool operator==(const shared_ptr<_Ty1>& _S1,
  const shared_ptr<_Ty2>& _S2)
 {
 return (_S1.get() == _S2.get());
 }

template<class _Ty1,
 class _Ty2>
 bool operator!=(const shared_ptr<_Ty1>& _S1,
  const shared_ptr<_Ty2>& _S2)
 {
 return (!(_S1 == _S2));
 }

template<class _Ty1,
 class _Ty2>
 bool operator<(const shared_ptr<_Ty1>& _S1,
  const shared_ptr<_Ty2>& _S2)
 {
 return (_S1.get() < _S2.get());
 }

template<class _Ty1,
 class _Ty2>
 bool operator>=(const shared_ptr<_Ty1>& _S1,
  const shared_ptr<_Ty2>& _S2)
 {
 return (!(_S1 < _S2));
 }

template<class _Ty1,
 class _Ty2>
 bool operator>(const shared_ptr<_Ty1>& _S1,
  const shared_ptr<_Ty2>& _S2)
 {
 return (_S2 < _S1);
 }

template<class _Ty1,
 class _Ty2>
 bool operator<=(const shared_ptr<_Ty1>& _S1,
  const shared_ptr<_Ty2>& _S2)
 {
 return (!(_S2 < _S1));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>&
 operator<<(basic_ostream<_Elem, _Traits>& _Out,
  const shared_ptr<_Ty>& _Px)
 {
 return (_Out << _Px.get());
 }

template<class _Ty>
 void swap(shared_ptr<_Ty>& _Left,
  shared_ptr<_Ty>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Ty>
 void swap(shared_ptr<_Ty>& _Left,
  shared_ptr<_Ty>&& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Ty>
 void swap(shared_ptr<_Ty>&& _Left,
  shared_ptr<_Ty>& _Right)
 {
 _Right.swap(_Left);
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1> static_pointer_cast(const shared_ptr<_Ty2>& _Other)
 {
 return (shared_ptr<_Ty1>(_Other, _Static_tag()));
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1> const_pointer_cast(const shared_ptr<_Ty2>& _Other)
 {
 return (shared_ptr<_Ty1>(_Other, _Const_tag()));
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1> dynamic_pointer_cast(const shared_ptr<_Ty2>& _Other)
 {
 return (shared_ptr<_Ty1>(_Other, _Dynamic_tag()));
 }

template<class _Dx,
 class _Ty>
 _Dx *get_deleter(const shared_ptr<_Ty>& _Sx)
 {
 return ((_Dx *)_Sx._Get_deleter(typeid(_Dx)));
 }




template<class _Ty>
 class _Ref_count_obj
 : public _Ref_count_base
 {
public:



#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"
#line 15 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 10 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
 _Ref_count_obj( )
  : _Ref_count_base()
  {
  new ((void *) &_Storage) _Ty( );
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 15 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"






 template<class _Arg0 >


 _Ref_count_obj(_Arg0 && _Ax0 )
  : _Ref_count_base()
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) );
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"






 template<class _Arg0 , class _Arg1>


 _Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1)
  : _Ref_count_base()
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 24 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"






 template<class _Arg0 , class _Arg1 , class _Arg2>


 _Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2)
  : _Ref_count_base()
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 28 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"






 template<class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>


 _Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3)
  : _Ref_count_base()
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"






 template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>


 _Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4)
  : _Ref_count_base()
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 36 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"






 template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>


 _Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5)
  : _Ref_count_base()
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 40 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"






 template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>


 _Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6)
  : _Ref_count_base()
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 44 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"






 template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>


 _Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7)
  : _Ref_count_base()
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 48 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"






 template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>


 _Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8)
  : _Ref_count_base()
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 52 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"






 template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>


 _Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9)
  : _Ref_count_base()
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 56 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"
#line 1827 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory"



 _Ty *_Getptr() const
  {
  return ((_Ty *)&_Storage);
  }

private:
 virtual void _Destroy()
  {
  _Getptr()->~_Ty();
  }

 virtual void _Delete_this()
  {
  delete this;
  }

 typename aligned_storage<sizeof(_Ty),
  alignment_of<_Ty>::value>::type _Storage;
 };


template<class _Ty,
 class _Alloc>
 class _Ref_count_obj_alloc
 : public _Ref_count_base
 {
public:
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Myty;
 typedef typename _Alloc::template rebind<_Myty>::other _Myalty;




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"
#line 15 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 23 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
 _Ref_count_obj_alloc(_Myalty _Al )
  : _Ref_count_base(), _Myal(_Al)
  {
  new ((void *) &_Storage) _Ty( );
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 15 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
 template<class _Arg0 >


 _Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 )
  : _Ref_count_base(), _Myal(_Al)
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) );
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
 template<class _Arg0 , class _Arg1>


 _Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1)
  : _Ref_count_base(), _Myal(_Al)
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 24 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
 template<class _Arg0 , class _Arg1 , class _Arg2>


 _Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2)
  : _Ref_count_base(), _Myal(_Al)
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 28 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
 template<class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>


 _Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3)
  : _Ref_count_base(), _Myal(_Al)
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
 template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>


 _Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4)
  : _Ref_count_base(), _Myal(_Al)
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 36 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
 template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>


 _Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5)
  : _Ref_count_base(), _Myal(_Al)
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 40 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
 template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>


 _Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6)
  : _Ref_count_base(), _Myal(_Al)
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 44 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
 template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>


 _Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7)
  : _Ref_count_base(), _Myal(_Al)
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 48 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
 template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>


 _Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8)
  : _Ref_count_base(), _Myal(_Al)
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 52 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
 template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>


 _Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9)
  : _Ref_count_base(), _Myal(_Al)
  {
  new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9));
  }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 56 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"
#line 1862 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory"



 _Ty *_Getptr() const
  {
  return ((_Ty *)&_Storage);
  }

private:
 virtual void _Destroy()
  {
  _Getptr()->~_Ty();
  }

 virtual void _Delete_this()
  {
  _Myalty _Al = _Myal;
  _Dest_val(_Al, this);
  _Al.deallocate(this, 1);
  }

 typename aligned_storage<sizeof (_Ty),
  alignment_of<_Ty>::value>::type _Storage;
 _Myalty _Myal;
 };




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"
#line 15 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
template<class _Ty > inline
 shared_ptr<_Ty> make_shared( )
 {
 _Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>( );

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc > inline
  shared_ptr<_Ty> allocate_shared(
   const _Alloc& _Al_arg )
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

 _Refoa * _Rx = _Alref.allocate(1);

 try {
  new (_Rx) _Refoa(_Al_arg );
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 15 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"





#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
template<class _Ty , class _Arg0 > inline
 shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 )
 {
 _Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) );

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc , class _Arg0 > inline
  shared_ptr<_Ty> allocate_shared(
   const _Alloc& _Al_arg , _Arg0 && _Ax0 )
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

 _Refoa * _Rx = _Alref.allocate(1);

 try {
  new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) );
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
template<class _Ty , class _Arg0 , class _Arg1> inline
 shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1)
 {
 _Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1));

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc , class _Arg0 , class _Arg1> inline
  shared_ptr<_Ty> allocate_shared(
   const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1)
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

 _Refoa * _Rx = _Alref.allocate(1);

 try {
  new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1));
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 24 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
template<class _Ty , class _Arg0 , class _Arg1 , class _Arg2> inline
 shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2)
 {
 _Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2));

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc , class _Arg0 , class _Arg1 , class _Arg2> inline
  shared_ptr<_Ty> allocate_shared(
   const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2)
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

 _Refoa * _Rx = _Alref.allocate(1);

 try {
  new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2));
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 28 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
 shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3)
 {
 _Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3));

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
  shared_ptr<_Ty> allocate_shared(
   const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3)
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

 _Refoa * _Rx = _Alref.allocate(1);

 try {
  new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3));
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
 shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4)
 {
 _Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4));

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
  shared_ptr<_Ty> allocate_shared(
   const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4)
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

 _Refoa * _Rx = _Alref.allocate(1);

 try {
  new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4));
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 36 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
 shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5)
 {
 _Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5));

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
  shared_ptr<_Ty> allocate_shared(
   const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5)
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

 _Refoa * _Rx = _Alref.allocate(1);

 try {
  new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5));
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 40 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
 shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6)
 {
 _Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6));

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
  shared_ptr<_Ty> allocate_shared(
   const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6)
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

 _Refoa * _Rx = _Alref.allocate(1);

 try {
  new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6));
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 44 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
 shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7)
 {
 _Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7));

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
  shared_ptr<_Ty> allocate_shared(
   const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7)
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

 _Refoa * _Rx = _Alref.allocate(1);

 try {
  new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7));
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 48 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
 shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8)
 {
 _Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8));

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
  shared_ptr<_Ty> allocate_shared(
   const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8)
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

 _Refoa * _Rx = _Alref.allocate(1);

 try {
  new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8));
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 52 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"




#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
#line 32 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xxshared"
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
 shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9)
 {
 _Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9));

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
  shared_ptr<_Ty> allocate_shared(
   const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9)
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

 _Refoa * _Rx = _Alref.allocate(1);

 try {
  new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9));
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }
#line 271 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap1"
#line 56 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\xfwrap"
#line 1890 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory"






template<class _Ty>
 class weak_ptr
  : public _Ptr_base<_Ty>
 {
 typedef typename _Ptr_base<_Ty>::_Elem _Elem;

public:
 weak_ptr()
  {
  }

 template<class _Ty2>
  weak_ptr(const shared_ptr<_Ty2>& _Other,
   typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
    void *>::type * = 0)
  {
  this->_Resetw(_Other);
  }

 weak_ptr(const weak_ptr& _Other)
  {
  this->_Resetw(_Other);
  }

 template<class _Ty2>
  weak_ptr(const weak_ptr<_Ty2>& _Other,
   typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
    void *>::type * = 0)
  {
  this->_Resetw(_Other);
  }

 ~weak_ptr()
  {
  this->_Decwref();
  }

 weak_ptr& operator=(const weak_ptr& _Right)
  {
  this->_Resetw(_Right);
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(const weak_ptr<_Ty2>& _Right)
  {
  this->_Resetw(_Right);
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(shared_ptr<_Ty2>& _Right)
  {
  this->_Resetw(_Right);
  return (*this);
  }

 void reset()
  {
  this->_Resetw();
  }

 void swap(weak_ptr& _Other)
  {
  this->_Swap(_Other);
  }

 bool expired() const
  {
  return (this->_Expired());
  }

 shared_ptr<_Ty> lock() const
  {
  return (shared_ptr<_Elem>(*this, false));
  }
 };
#line 1982 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\memory"
template<class _Ty>
 void swap(weak_ptr<_Ty>& _W1, weak_ptr<_Ty>& _W2)
 {
 _W1.swap(_W2);
 }


template<class _Ty> class enable_shared_from_this
 {
public:
 typedef _Ty _EStype;

 shared_ptr<_Ty> shared_from_this()
  {
  return (shared_ptr<_Ty>(_Wptr));
  }

 shared_ptr<const _Ty> shared_from_this() const
  {
  return (shared_ptr<const _Ty>(_Wptr));
  }

protected:
 enable_shared_from_this()
  {
  }

 enable_shared_from_this(const enable_shared_from_this&)
  {
  }

 enable_shared_from_this& operator=(const enable_shared_from_this&)
  {
  return (*this);
  }

 ~enable_shared_from_this()
  {
  }

private:
 template<class _Ty1,
  class _Ty2>
  friend void _Do_enable(
   _Ty1 *,
   enable_shared_from_this<_Ty2>*,
   _Ref_count_base *);

 mutable weak_ptr<_Ty> _Wptr;
 };

template<class _Ty1,
 class _Ty2>
 inline void _Do_enable(
  _Ty1 *_Ptr,
  enable_shared_from_this<_Ty2> *_Es,
  _Ref_count_base *_Refptr)
 {
 _Es->_Wptr._Resetw(_Ptr, _Refptr);
 }
 }
}



namespace std {



template<class _Ty>
 struct default_delete
 {
 typedef default_delete<_Ty> _Myt;

 default_delete()
  {
  }

 template<class _Ty2>
  default_delete(const default_delete<_Ty2>&)
  {
  }

 void operator()(_Ty *_Ptr) const
  {
  if (0 < sizeof (_Ty))
   delete _Ptr;
  }
 };

template<class _Ty>
 struct default_delete<_Ty[]>
 {
 typedef default_delete<_Ty> _Myt;

 default_delete()
  {
  }

 void operator()(_Ty *_Ptr) const
  {
  if (0 < sizeof (_Ty))
   delete[] _Ptr;
  }

 template<class _Other>
  void operator()(_Other *) const;
 };


::std:: tr1::_No _Has_pointer_type(...);

template<class _Ty>
 ::std:: tr1::_Yes _Has_pointer_type(_Ty *,
  typename _Ty::pointer * = 0);

template<class _Ty,
 class _Dx,
 bool>
 struct _Hold_pointer_type
 {
 typedef _Ty *pointer;
 };

template<class _Ty,
 class _Dx>
 struct _Hold_pointer_type<_Ty, _Dx, true>
 {
 typedef typename _Dx::pointer pointer;
 };






template<class _Ty,
 class _Dx,
 bool _Empty_deleter>
 class _Unique_ptr_base
 {
public:
 typedef typename tr1::remove_reference<_Dx>::type _Dx_noref;
 typedef typename _Hold_pointer_type<_Ty, _Dx_noref, (sizeof (_Has_pointer_type((_Dx_noref *)0)) == sizeof (::std:: tr1::_Yes))>::pointer pointer;

 _Unique_ptr_base(pointer _Ptr, _Dx _Dt)
  : _Myptr(_Ptr), _Mydel(_Dt)
  {
  }

 template<class _Ptr2,
  class _Dx2>
  _Unique_ptr_base(_Ptr2 _Ptr, _Dx2 _Dt)
  : _Myptr(_Ptr), _Mydel(_Dt)
  {
  }

 _Dx_noref& get_deleter()
  {
  return (_Mydel);
  }

 const _Dx_noref& get_deleter() const
  {
  return (_Mydel);
  }

 pointer _Myptr;
 _Dx _Mydel;
 };

template<class _Ty,
 class _Dx>
 class _Unique_ptr_base<_Ty, _Dx, true>
  : public _Dx
 {
public:
 typedef _Dx _Mybase;
 typedef typename tr1::remove_reference<_Dx>::type _Dx_noref;
 typedef typename _Hold_pointer_type<_Ty, _Dx_noref, (sizeof (_Has_pointer_type((_Dx_noref *)0)) == sizeof (::std:: tr1::_Yes))>::pointer pointer;

 _Unique_ptr_base(pointer _Ptr, _Dx _Dt)
  : _Myptr(_Ptr), _Mybase(_Dt)
  {
  }

 template<class _Ptr2,
  class _Dx2>
  _Unique_ptr_base(_Ptr2 _Ptr, _Dx2 _Dt)
  : _Myptr(_Ptr), _Mybase(_Dt)
  {
  }

 _Dx_noref& get_deleter()
  {
  return (*this);
  }

 const _Dx_noref& get_deleter() const
  {
  return (*this);
  }

 pointer _Myptr;
 };


template<class _Ty,
 class _Dx>
 class unique_ptr
  : public _Unique_ptr_base<_Ty, _Dx,
   tr1::is_empty<_Dx>::value
    || tr1::is_same<default_delete<_Ty>, _Dx>::value>
 {
public:
 typedef unique_ptr<_Ty, _Dx> _Myt;
 typedef _Unique_ptr_base<_Ty, _Dx,
  tr1::is_empty<_Dx>::value
   || tr1::is_same<default_delete<_Ty>, _Dx>::value> _Mybase;
 typedef typename _Mybase::pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 unique_ptr()
  : _Mybase(pointer(), _Dx())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }



 unique_ptr(::std:: nullptr_t)
  : _Mybase(pointer(), _Dx())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 _Myt& operator=(::std:: nullptr_t)
  {
  reset();
  return (*this);
  }


 explicit unique_ptr(pointer _Ptr)
  : _Mybase(_Ptr, _Dx())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 unique_ptr(pointer _Ptr,
  typename _If<tr1::is_reference<_Dx>::value, _Dx,
   const typename tr1::remove_reference<_Dx>::type&>::_Type _Dt)
  : _Mybase(_Ptr, _Dt)
  {
  }

 unique_ptr(pointer _Ptr, typename tr1::remove_reference<_Dx>::type&& _Dt)
  : _Mybase(_Ptr, ::std:: move(_Dt))
  {


  }

 unique_ptr(unique_ptr&& _Right)
  : _Mybase(_Right.release(),
   ::std:: forward<_Dx>(_Right.get_deleter()))
  {
  }

 template<class _Ty2,
  class _Dx2>
  unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right)
   : _Mybase(_Right.release(),
    ::std:: forward<_Dx2>(_Right.get_deleter()))
  {
  }

 template<class _Ty2,
  class _Dx2>
  _Myt& operator=(unique_ptr<_Ty2, _Dx2>&& _Right)
  {
  reset(_Right.release());
  this->get_deleter() = ::std:: move(_Right.get_deleter());
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   reset(_Right.release());
   this->get_deleter() = ::std:: move(_Right.get_deleter());
   }
  return (*this);
  }

 void swap(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Swap_adl(this->_Myptr, _Right._Myptr);
   _Swap_adl(this->get_deleter(),
    _Right.get_deleter());
   }
  }

 void swap(_Myt& _Right)
  {
  _Swap_adl(this->_Myptr, _Right._Myptr);
  _Swap_adl(this->get_deleter(),
   _Right.get_deleter());
  }

 ~unique_ptr()
  {
  _Delete();
  }

 typename tr1::add_reference<_Ty>::type operator*() const
  {
  return (*this->_Myptr);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 pointer get() const
  {
  return (this->_Myptr);
  }

 operator ::std:: _Bool_type() const
  {
  return (this->_Myptr != pointer() ? (&::std:: _Bool_struct::_Member) : 0);
  }

 pointer release()
  {
  pointer _Ans = this->_Myptr;
  this->_Myptr = pointer();
  return (_Ans);
  }

 void reset(pointer _Ptr = pointer())
  {
  if (_Ptr != this->_Myptr)
   {
   _Delete();
   this->_Myptr = _Ptr;
   }
  }

private:
 void _Delete()
  {
  if (this->_Myptr != pointer())
   this->get_deleter()(this->_Myptr);
  }

 unique_ptr(const _Myt&);
 template<class _Ty2,
  class _Dx2>
  unique_ptr(const unique_ptr<_Ty2, _Dx2>&);

 _Myt& operator=(const _Myt&);
 template<class _Ty2,
  class _Dx2>
  _Myt& operator=(const unique_ptr<_Ty2, _Dx2>&);
 };


template<class _Ty,
 class _Dx>
 class unique_ptr<_Ty[], _Dx>
  : public _Unique_ptr_base<_Ty, _Dx,
   tr1::is_empty<_Dx>::value
    || tr1::is_same<default_delete<_Ty[]>, _Dx>::value>
 {
public:
 typedef unique_ptr<_Ty[], _Dx> _Myt;
 typedef _Unique_ptr_base<_Ty, _Dx,
  tr1::is_empty<_Dx>::value
   || tr1::is_same<default_delete<_Ty[]>, _Dx>::value> _Mybase;
 typedef typename _Mybase::pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 unique_ptr()
  : _Mybase(pointer(), _Dx())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 explicit unique_ptr(pointer _Ptr)
  : _Mybase(_Ptr, _Dx())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 unique_ptr(pointer _Ptr,
  typename _If<tr1::is_reference<_Dx>::value, _Dx,
   const typename tr1::remove_reference<_Dx>::type&>::_Type _Dt)
  : _Mybase(_Ptr, _Dt)
  {
  }

public:
 unique_ptr(pointer _Ptr, typename tr1::remove_reference<_Dx>::type&& _Dt)
  : _Mybase(_Ptr, ::std:: move(_Dt))
  {


  }

 unique_ptr(unique_ptr&& _Right)
  : _Mybase(_Right.release(),
   ::std:: forward<_Dx>(_Right.get_deleter()))
  {
  }

private:
 template<class _Ty2,
  class _Dx2>
  unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right);

 template<class _Ty2,
  class _Dx2>
  _Myt& operator=(unique_ptr<_Ty2, _Dx2>&& _Right);

public:
 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   reset(_Right.release());
   this->get_deleter() = ::std:: move(_Right.get_deleter());
   }
  return (*this);
  }

 void swap(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Swap_adl(this->_Myptr, _Right._Myptr);
   _Swap_adl(this->get_deleter(),
    _Right.get_deleter());
   }
  }



 unique_ptr(::std:: nullptr_t)
  : _Mybase(pointer(), _Dx())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 _Myt& operator=(::std:: nullptr_t)
  {
  reset();
  return (*this);
  }

 void reset(::std:: nullptr_t)
  {
  if (this->_Myptr != 0)
   {
   _Delete();
   this->_Myptr = 0;
   }
  }


 void swap(_Myt& _Right)
  {
  _Swap_adl(this->_Myptr, _Right._Myptr);
  _Swap_adl(this->get_deleter(), _Right.get_deleter());
  }

 ~unique_ptr()
  {
  _Delete();
  }

 typename tr1::add_reference<_Ty>::type operator[](size_t _Idx) const
  {
  return (this->_Myptr[_Idx]);
  }

 pointer get() const
  {
  return (this->_Myptr);
  }

 operator ::std:: _Bool_type() const
  {
  return (this->_Myptr != 0 ? (&::std:: _Bool_struct::_Member) : 0);
  }

 pointer release()
  {
  pointer _Ans = this->_Myptr;
  this->_Myptr = pointer();
  return (_Ans);
  }

 void reset(pointer _Ptr = pointer())
  {
  if (_Ptr != this->_Myptr)
   {
   _Delete();
   this->_Myptr = _Ptr;
   }
  }

private:
 template<class _Ptr2>
  explicit unique_ptr(_Ptr2);

 template<class _Ptr2,
  class _Dx2>
  unique_ptr(_Ptr2, _Dx2);

 unique_ptr(const _Myt&);
 template<class _Ty2,
  class _Dx2>
  unique_ptr(const unique_ptr<_Ty2, _Dx2>&);

 _Myt& operator=(const _Myt&);
 template<class _Ty2,
  class _Dx2>
  _Myt& operator=(const unique_ptr<_Ty2, _Dx2>&);

 template<class _Ptr2>
  void reset(_Ptr2);

 void _Delete()
  {
  this->get_deleter()(this->_Myptr);
  }
 };

template<class _Ty,
 class _Dx>
 void swap(unique_ptr<_Ty, _Dx>& _Left,
  unique_ptr<_Ty, _Dx>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Dx>
 void swap(unique_ptr<_Ty, _Dx>& _Left,
  unique_ptr<_Ty, _Dx>&& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Dx>
 void swap(unique_ptr<_Ty, _Dx>&& _Left,
  unique_ptr<_Ty, _Dx>& _Right)
 {
 _Right.swap(_Left);
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator==(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Left.get() == _Right.get());
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator!=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator<(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Left.get() < _Right.get());
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator>=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator>(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator<=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Right < _Left));
 }


 namespace pointer_safety {
enum pointer_safety {
 relaxed,
 preferred,
 strict
 };
 }

typedef pointer_safety::pointer_safety _Pointer_safety;

inline void declare_reachable(void *)
 {
 }

template<class _Ty> inline
 _Ty *undeclare_reachable(_Ty *_Ptr)
 {
 return (_Ptr);
 }

inline void declare_no_pointers(char *, size_t)
 {
 }

inline void undeclare_no_pointers(char *, size_t)
 {
 }

inline _Pointer_safety get_pointer_safety()
 {
 return (pointer_safety::relaxed);
 }


using tr1::allocate_shared;
using tr1::bad_weak_ptr;
using tr1::const_pointer_cast;
using tr1::dynamic_pointer_cast;
using tr1::enable_shared_from_this;
using tr1::get_deleter;
using tr1::make_shared;
using tr1::shared_ptr;
using tr1::static_pointer_cast;
using tr1::swap;
using tr1::weak_ptr;



template<class _Ty>
 struct owner_less;

template<class _Ty>
 struct owner_less<shared_ptr<_Ty> >
  : public binary_function<shared_ptr<_Ty>, shared_ptr<_Ty>, bool>
 {
 bool operator()(const shared_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const shared_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const weak_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }
 };

template<class _Ty>
 struct owner_less<weak_ptr<_Ty> >
  : public binary_function<weak_ptr<_Ty>, weak_ptr<_Ty>, bool>
 {
 bool operator()(const weak_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const weak_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const shared_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }
 };
}




#pragma warning(pop)
#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque"



#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)

namespace std {
#line 21 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque"
template<class _Ty,
 class _Alloc>
 class deque;


template<class _Ty,
 class _Alloc>
 class _Deque_unchecked_const_iterator

 {
public:
 typedef _Deque_unchecked_const_iterator<_Ty, _Alloc> _Myiter;
 typedef deque<_Ty, _Alloc> _Mydeque;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Alloc::value_type value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef typename _Alloc::const_pointer pointer;
 typedef typename _Alloc::const_reference reference;

 _Deque_unchecked_const_iterator()
  {
  _Mycont = 0;
  _Myoff = 0;
  }

 _Deque_unchecked_const_iterator(size_type _Off,
  const _Container_base12 *_Pdeque)
  {
  _Mycont = (_Mydeque *)_Pdeque;
  _Myoff = _Off;
  }

 reference operator*() const
  {
  size_type _Block = _Myoff / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1);
  size_type _Off = _Myoff & ((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) - 1);

  if (_Mycont->_Mapsize <= _Block)
   _Block -= _Mycont->_Mapsize;
  return ((_Mycont->_Map)[_Block][_Off]);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 _Myiter& operator++()
  {
  ++_Myoff;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --_Myoff;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  _Myoff += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  return (_Right._Myoff <= _Myoff
   ? _Myoff - _Right._Myoff
   : -(difference_type)(_Right._Myoff - _Myoff));
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  return (_Myoff == _Right._Myoff);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  return (_Myoff < _Right._Myoff);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }

 const _Container_base12 *_Getcont() const
  {
  return (_Mycont);
  }

 const _Mydeque *_Mycont;
 size_type _Myoff;
 };

template<class _Ty,
 class _Alloc> inline
 _Deque_unchecked_const_iterator<_Ty, _Alloc> operator+(
  typename _Deque_unchecked_const_iterator<_Ty, _Alloc>
   ::difference_type _Off,
  _Deque_unchecked_const_iterator<_Ty, _Alloc> _Next)
 {
 return (_Next += _Off);
 }


template<class _Ty,
 class _Alloc>
 class _Deque_unchecked_iterator
  : public _Deque_unchecked_const_iterator<_Ty, _Alloc>
 {
public:
 typedef _Deque_unchecked_iterator<_Ty, _Alloc> _Myiter;
 typedef _Deque_unchecked_const_iterator<_Ty, _Alloc> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Alloc::value_type value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef typename _Alloc::pointer pointer;
 typedef typename _Alloc::reference reference;

 _Deque_unchecked_iterator()
  {
  }

 _Deque_unchecked_iterator(size_type _Off,
  const _Container_base12 *_Pdeque)
  : _Mybase(_Off, _Pdeque)
  {
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Ty,
 class _Alloc> inline
 _Deque_unchecked_iterator<_Ty, _Alloc> operator+(
  typename _Deque_unchecked_iterator<_Ty, _Alloc>
   ::difference_type _Off,
  _Deque_unchecked_iterator<_Ty, _Alloc> _Next)
 {
 return (_Next += _Off);
 }


template<class _Ty,
 class _Alloc>
 class _Deque_const_iterator
  : public _Iterator_base12
 {
public:
 typedef _Deque_const_iterator<_Ty, _Alloc> _Myiter;
 typedef deque<_Ty, _Alloc> _Mydeque;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Alloc::value_type value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef typename _Alloc::const_pointer pointer;
 typedef typename _Alloc::const_reference reference;

 _Deque_const_iterator()
  {
  _Setcont(0);
  _Myoff = 0;
  }

 _Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)
  {
  _Setcont((_Mydeque *)_Pdeque);
  _Myoff = _Off;
  }

 typedef _Deque_unchecked_const_iterator<_Ty, _Alloc> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Myoff = _Right._Myoff;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(_Myoff, this->_Getcont()));
  }

 reference operator*() const
  {
  _Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());


  if (_Mycont == 0
   || this->_Myoff < _Mycont->_Myoff
   || _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
  {
  _Debug_message(L"deque iterator not dereferencable", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 338);
  { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 339, 0, L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 339, 0); };
  }







                                 ;

  size_type _Block = _Myoff / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1);
  size_type _Off = _Myoff & ((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) - 1);

  if (_Mycont->_Mapsize <= _Block)
   _Block -= _Mycont->_Mapsize;
  return ((_Mycont->_Map)[_Block][_Off]);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 _Myiter& operator++()
  {

  _Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
  if (_Mycont == 0
   || _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
  {
  _Debug_message(L"deque iterator not incrementable", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 370);
  { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 371, 0, L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 371, 0); };
  }
#line 381 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque"
  ++_Myoff;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  _Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
  if (_Mycont == 0
   || this->_Myoff <= _Mycont->_Myoff)
  {
  _Debug_message(L"deque iterator not decrementable", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 399);
  { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 400, 0, L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 400, 0); };
  }







  --_Myoff;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  _Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
  if (_Mycont == 0
   || this->_Myoff + _Off < _Mycont->_Myoff
   || _Mycont->_Myoff + _Mycont->_Mysize < this->_Myoff + _Off)
   {
   _Debug_message(L"deque iterator + offset out of range", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 428);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 429, 0, L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 429, 0); };
   }
#line 439 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque"
  _Myoff += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Right._Myoff <= this->_Myoff
   ? this->_Myoff - _Right._Myoff
   : -(difference_type)(_Right._Myoff - this->_Myoff));
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Myoff == _Right._Myoff);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Myoff < _Right._Myoff);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  _Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
  if (_Mycont == 0
   || _Mycont != _Right._Getcont())
   {
   _Debug_message(L"deque iterators incompatible", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 512);
   { (void) ((!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 513, 0, L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 513, 0); };
   }
  }

 void _Setcont(const _Mydeque *_Pdeque)
  {
  this->_Adopt(_Pdeque);
  }
#line 547 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque"
 size_type _Myoff;
 };

template<class _Ty,
 class _Alloc> inline
 typename _Deque_const_iterator<_Ty, _Alloc>::_Unchecked_type
  _Unchecked(_Deque_const_iterator<_Ty, _Alloc> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 class _Alloc> inline
 _Deque_const_iterator<_Ty, _Alloc>&
  _Rechecked(_Deque_const_iterator<_Ty, _Alloc>& _Iter,
   typename _Deque_const_iterator<_Ty, _Alloc>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 class _Alloc> inline
 _Deque_const_iterator<_Ty, _Alloc> operator+(
  typename _Deque_const_iterator<_Ty, _Alloc>::difference_type _Off,
  _Deque_const_iterator<_Ty, _Alloc> _Next)
 {
 return (_Next += _Off);
 }


template<class _Ty,
 class _Alloc>
 class _Deque_iterator
  : public _Deque_const_iterator<_Ty, _Alloc>
  {
public:
 typedef _Deque_iterator<_Ty, _Alloc> _Myiter;
 typedef _Deque_const_iterator<_Ty, _Alloc> _Mybase;
 typedef _Deque_unchecked_iterator<_Ty, _Alloc> _Deque_unchecked_type;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Alloc::value_type value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef typename _Alloc::pointer pointer;
 typedef typename _Alloc::reference reference;

 _Deque_iterator()
  {
  }

 _Deque_iterator(size_type _Off, const _Container_base12 *_Pdeque)
  : _Mybase(_Off, _Pdeque)
  {
  }

 typedef _Deque_unchecked_iterator<_Ty, _Alloc> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Myoff = _Right._Myoff;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Myoff, this->_Getcont()));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  this->_Myoff += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Ty,
 class _Alloc> inline
 typename _Deque_iterator<_Ty, _Alloc>::_Unchecked_type
  _Unchecked(_Deque_iterator<_Ty, _Alloc> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 class _Alloc> inline
 _Deque_iterator<_Ty, _Alloc>&
  _Rechecked(_Deque_iterator<_Ty, _Alloc>& _Iter,
   typename _Deque_iterator<_Ty, _Alloc>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 class _Alloc> inline
 _Deque_iterator<_Ty, _Alloc> operator+(
  typename _Deque_iterator<_Ty, _Alloc>::difference_type _Off,
  _Deque_iterator<_Ty, _Alloc> _Next)
 {
 return (_Next += _Off);
 }


template<class _Ty,
 class _Alloc>
 class _Deque_val
  : public _Container_base12
 {
public:
 typedef typename _Alloc::template rebind<_Ty>::other _Alty;
 typedef typename _Alty::pointer _Tptr;
 typedef typename _Alloc::template rebind<_Tptr>::other _Tptr_alloc;
 typedef typename _Tptr_alloc::pointer _Mapptr;

 _Deque_val(_Alloc _Al = _Alloc())
  : _Alval(_Al), _Almap(_Al)
  {
  typename _Alloc::template rebind<_Container_proxy>::other
   _Alproxy(_Alval);
  this->_Myproxy = _Alproxy.allocate(1);
  _Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;

  _Map = 0;
  _Mapsize = 0;
  _Myoff = 0;
  _Mysize = 0;
  }

 ~_Deque_val()
  {
  typename _Alloc::template rebind<_Container_proxy>::other
   _Alproxy(_Alval);
  this->_Orphan_all();
  _Dest_val(_Alproxy, this->_Myproxy);
  _Alproxy.deallocate(this->_Myproxy, 1);
  this->_Myproxy = 0;
  }

 typedef typename _Alty::value_type value_type;
 typedef typename _Alty::size_type size_type;
 typedef typename _Alty::difference_type difference_type;
 typedef typename _Alty::pointer pointer;
 typedef typename _Alty::const_pointer const_pointer;
 typedef typename _Alty::reference reference;
 typedef typename _Alty::const_reference const_reference;

 _Mapptr _Map;
 size_type _Mapsize;
 size_type _Myoff;
 size_type _Mysize;
 _Alty _Alval;

 _Tptr_alloc _Almap;
 };


template<class _Ty,
 class _Ax = allocator<_Ty> >
 class deque
  : public _Deque_val<_Ty, _Ax>
 {
public:
 typedef deque<_Ty, _Ax> _Myt;
 typedef _Deque_val<_Ty, _Ax> _Mybase;
 typedef typename _Mybase::_Alty _Alloc;

 typedef _Alloc allocator_type;
 typedef typename _Alloc::value_type value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef typename _Alloc::pointer pointer;
 typedef typename _Alloc::const_pointer const_pointer;
 typedef typename _Alloc::reference reference;
 typedef typename _Alloc::const_reference const_reference;
 typedef typename _Mybase::_Mapptr _Mapptr;

 typedef _Deque_iterator<_Ty, _Alloc> iterator;
 typedef _Deque_const_iterator<_Ty, _Alloc> const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 static const int _EEM_DS = (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1);
 enum {_EEN_DS = (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)};
 deque()
  : _Mybase()
  {
  }

 explicit deque(const _Alloc& _Al)
  : _Mybase(_Al)
  {
  }

 explicit deque(size_type _Count)
  : _Mybase()
  {
  resize(_Count);
  }

 deque(size_type _Count, const _Ty& _Val)
  : _Mybase()
  {
  _Construct_n(_Count, _Val);
  }

 deque(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct_n(_Count, _Val);
  }

 deque(const _Myt& _Right)
  : _Mybase(_Right._Alval)
  {
  try {
  insert(begin(), _Right.begin(), _Right.end());
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 template<class _It>
  deque(_It _First, _It _Last)
  : _Mybase()
  {
  _Construct(_First, _Last, _Iter_cat(_First));
  }

 template<class _It>
  deque(_It _First, _It _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct(_First, _Last, _Iter_cat(_First));
  }

 template<class _It>
  void _Construct(_It _Count, _It _Val, _Int_iterator_tag)
  {
  _Construct_n((size_type)_Count, (_Ty)_Val);
  }

 template<class _It>
  void _Construct(_It _First, _It _Last, input_iterator_tag)
  {
  try {
  insert(begin(), _First, _Last);
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 void _Construct_n(size_type _Count, const _Ty& _Val)
  {
  try {
  _Insert_n(begin(), _Count, _Val);
  } catch (...) {
  _Tidy();
  throw;
  }
  }
#line 905 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque"
 deque(_Myt&& _Right)
  : _Mybase(_Right._Alval)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this == &_Right)
   ;
  else if (get_allocator() != _Right.get_allocator())
   {
   clear();
   for (iterator _Next = _Right.begin(); _Next != _Right.end();
    ++_Next)
    push_back(::std:: forward<_Ty>(*_Next));
   }
  else
   {
   _Tidy();
   this->_Swap_all((_Myt&)_Right);
   this->_Map = _Right._Map;
   this->_Mapsize = _Right._Mapsize;
   this->_Myoff = _Right._Myoff;
   this->_Mysize = _Right._Mysize;

   _Right._Map = 0;
   _Right._Mapsize = 0;
   _Right._Myoff = 0;
   _Right._Mysize = 0;
   }
  }

 void push_front(_Ty&& _Val)
  {
  this->_Orphan_all();
  if (this->_Myoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) == 0 && this->_Mapsize <= (this->_Mysize + (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) _Growmap(1); size_type _Newoff = this->_Myoff != 0 ? this->_Myoff : this->_Mapsize * (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1); size_type _Block = --_Newoff / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1); if (this->_Map[_Block] == 0) this->_Map[_Block] = this->_Alval.allocate((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
  _Cons_val(this->_Alval,
   this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1),
   ::std:: forward<_Ty>(_Val));
  this->_Myoff = _Newoff; ++this->_Mysize;
  }

 void push_back(_Ty&& _Val)
  {
  this->_Orphan_all();
  if ((this->_Myoff + this->_Mysize) % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) == 0 && this->_Mapsize <= (this->_Mysize + (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) _Growmap(1); size_type _Newoff = this->_Myoff + this->_Mysize; size_type _Block = _Newoff / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1); if (this->_Mapsize <= _Block) _Block -= this->_Mapsize; if (this->_Map[_Block] == 0) this->_Map[_Block] = this->_Alval.allocate((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
  _Cons_val(this->_Alval,
   this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1),
   ::std:: forward<_Ty>(_Val));
  ++this->_Mysize;
  }

 template<class _Valty>
  void emplace_front(_Valty&& _Val)
  {
  this->_Orphan_all();
  if (this->_Myoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) == 0 && this->_Mapsize <= (this->_Mysize + (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) _Growmap(1); size_type _Newoff = this->_Myoff != 0 ? this->_Myoff : this->_Mapsize * (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1); size_type _Block = --_Newoff / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1); if (this->_Map[_Block] == 0) this->_Map[_Block] = this->_Alval.allocate((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
  _Cons_val(this->_Alval,
   this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1),
   ::std:: forward<_Valty>(_Val));
  this->_Myoff = _Newoff; ++this->_Mysize;
  }

 template<class _Valty>
  void emplace_back(_Valty&& _Val)
  {
  this->_Orphan_all();
  if ((this->_Myoff + this->_Mysize) % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) == 0 && this->_Mapsize <= (this->_Mysize + (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) _Growmap(1); size_type _Newoff = this->_Myoff + this->_Mysize; size_type _Block = _Newoff / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1); if (this->_Mapsize <= _Block) _Block -= this->_Mapsize; if (this->_Map[_Block] == 0) this->_Map[_Block] = this->_Alval.allocate((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
  _Cons_val(this->_Alval,
   this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1),
   ::std:: forward<_Valty>(_Val));
  ++this->_Mysize;
  }

 template<class _Valty>
  iterator insert(const_iterator _Where, _Valty&& _Val)
  {
  return (emplace(_Where, ::std:: forward<_Valty>(_Val)));
  }

 template<class _Valty>
  iterator emplace(const_iterator _Where, _Valty&& _Val)
  {
  size_type _Off = _Where - begin();


  if (this->_Mysize < _Off)
   _Debug_message(L"deque emplace iterator outside range", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 999);


  if (_Off <= this->_Mysize / 2)
   {
   emplace_front(::std:: forward<_Valty>(_Val));
   ::std:: rotate(begin(), begin() + 1, begin() + 1 + _Off);
   }
  else
   {
   emplace_back(::std:: forward<_Valty>(_Val));
   ::std:: rotate(begin() + _Off, end() - 1, end());
   }
  return (begin() + _Off);
  }

 void swap(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 ~deque()
  {
  _Tidy();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   this->_Orphan_all();

   if (_Right._Mysize == 0)
    clear();
   else if (_Right._Mysize <= this->_Mysize)
    {
    iterator _Mid = ::std:: copy(_Right.begin(), _Right.end(),
     begin());
    erase(_Mid, end());
    }
   else
    {
    const_iterator _Mid = _Right.begin() + this->_Mysize;
    ::std:: copy(_Right.begin(), _Mid, begin());
    insert(end(), _Mid, _Right.end());
    }
   }
  return (*this);
  }

 iterator begin()
  {
  return (iterator(this->_Myoff, this));
  }

 const_iterator begin() const
  {
  return (const_iterator(this->_Myoff, this));
  }

 iterator end()
  {
  return (iterator(this->_Myoff + this->_Mysize, this));
  }

 const_iterator end() const
  {
  return (const_iterator(this->_Myoff + this->_Mysize, this));
  }

 iterator _Make_iter(const_iterator _Where) const
  {
  return (iterator(_Where._Myoff, this));
  }

 reverse_iterator rbegin()
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend()
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const
  {
  return (const_reverse_iterator(begin()));
  }


 const_iterator cbegin() const
  {
  return (((const _Myt *)this)->begin());
  }

 const_iterator cend() const
  {
  return (((const _Myt *)this)->end());
  }

 const_reverse_iterator crbegin() const
  {
  return (((const _Myt *)this)->rbegin());
  }

 const_reverse_iterator crend() const
  {
  return (((const _Myt *)this)->rend());
  }

 void shrink_to_fit()
  {
  _Myt _Tmp(*this);
  swap(_Tmp);
  }


 void resize(size_type _Newsize)
  {
  if (_Newsize < this->_Mysize)
   erase(begin() + _Newsize, end());
  else if (this->_Mysize < _Newsize)
   {
   this->_Orphan_all();
   while (this->_Mysize < _Newsize)
    {
    if ((this->_Myoff + this->_Mysize) % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) == 0 && this->_Mapsize <= (this->_Mysize + (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) _Growmap(1); size_type _Newoff = this->_Myoff + this->_Mysize; size_type _Block = _Newoff / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1); if (this->_Mapsize <= _Block) _Block -= this->_Mapsize; if (this->_Map[_Block] == 0) this->_Map[_Block] = this->_Alval.allocate((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
    _Uninitialized_default_fill_n(
     this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1),
     1, (_Ty *)0, this->_Alval);
    ++this->_Mysize;
    }
   }
  }

 void resize(size_type _Newsize, const _Ty& _Val)
  {
  if (this->_Mysize < _Newsize)
   _Insert_n(end(), _Newsize - this->_Mysize, _Val);
  else if (_Newsize < this->_Mysize)
   erase(begin() + _Newsize, end());
  }

 size_type size() const
  {
  return (this->_Mysize);
  }

 size_type max_size() const
  {
  return (this->_Alval.max_size());
  }

 bool empty() const
  {
  return (this->_Mysize == 0);
  }

 allocator_type get_allocator() const
  {
  return (this->_Alval);
  }

 const_reference at(size_type _Pos) const
  {
  if (this->_Mysize <= _Pos)
   _Xran();
  return (*(begin() + _Pos));
  }

 reference at(size_type _Pos)
  {
  if (this->_Mysize <= _Pos)
   _Xran();
  return (*(begin() + _Pos));
  }

 const_reference operator[](size_type _Pos) const
  {

  if (this->_Mysize <= _Pos)
   _Debug_message(L"deque subscript out of range", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 1186);


  return (*(begin() + _Pos));
  }

 reference operator[](size_type _Pos)
  {

  if (this->_Mysize <= _Pos)
   _Debug_message(L"deque subscript out of range", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 1196);


  return (*(begin() + _Pos));
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_front(const _Ty& _Val)
  {
  this->_Orphan_all();
  if (this->_Myoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) == 0 && this->_Mapsize <= (this->_Mysize + (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) _Growmap(1); size_type _Newoff = this->_Myoff != 0 ? this->_Myoff : this->_Mapsize * (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1); size_type _Block = --_Newoff / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1); if (this->_Map[_Block] == 0) this->_Map[_Block] = this->_Alval.allocate((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
  _Cons_val(this->_Alval,
   this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1), _Val);
  this->_Myoff = _Newoff; ++this->_Mysize;
  }

 void pop_front()
  {

  if (empty())
   _Debug_message(L"deque empty before pop", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 1235);
  else
   {
   _Orphan_off(this->_Myoff);
   size_type _Block = this->_Myoff / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1);
   _Dest_val(this->_Alval,
    this->_Map[_Block] + this->_Myoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
   if (this->_Mapsize * (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) <= ++this->_Myoff)
    this->_Myoff = 0;
   if (--this->_Mysize == 0)
    this->_Myoff = 0;
   }
#line 1260 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque"
  }

 void push_back(const _Ty& _Val)
  {
  this->_Orphan_all();
  if ((this->_Myoff + this->_Mysize) % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) == 0 && this->_Mapsize <= (this->_Mysize + (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) _Growmap(1); size_type _Newoff = this->_Myoff + this->_Mysize; size_type _Block = _Newoff / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1); if (this->_Mapsize <= _Block) _Block -= this->_Mapsize; if (this->_Map[_Block] == 0) this->_Map[_Block] = this->_Alval.allocate((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
  _Cons_val(this->_Alval,
   this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1), _Val);
  ++this->_Mysize;
  }

 void pop_back()
  {

  if (empty())
   _Debug_message(L"deque empty before pop", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 1275);
  else
   {
   _Orphan_off(this->_Myoff + this->_Mysize - 1);
   size_type _Newoff = this->_Mysize + this->_Myoff - 1;
   size_type _Block = _Newoff / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1);
   if (this->_Mapsize <= _Block)
    _Block -= this->_Mapsize;
   _Dest_val(this->_Alval,
    this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
   if (--this->_Mysize == 0)
    this->_Myoff = 0;
   }
#line 1302 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque"
  }

 template<class _It>
  void assign(_It _First, _It _Last)
  {
  _Assign(_First, _Last, _Iter_cat(_First));
  }

 template<class _It>
  void _Assign(_It _Count, _It _Val, _Int_iterator_tag)
  {
  _Assign_n((size_type)_Count, (_Ty)_Val);
  }

 template<class _It>
  void _Assign(_It _First, _It _Last, input_iterator_tag)
  {
  erase(begin(), end());
  insert(begin(), _First, _Last);
  }

 void assign(size_type _Count, const _Ty& _Val)
  {
  _Assign_n(_Count, _Val);
  }

 iterator insert(const_iterator _Where, const _Ty& _Val)
  {
  size_type _Off = _Where - begin();


  if (this->_Mysize < _Off)
   _Debug_message(L"deque insert iterator outside range", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 1334);


  if (_Off <= this->_Mysize / 2)
   {
   push_front(_Val);
   ::std:: rotate(begin(), begin() + 1, begin() + 1 + _Off);
   }
  else
   {
   push_back(_Val);
   ::std:: rotate(begin() + _Off, end() - 1, end());
   }
  return (begin() + _Off);
  }

 void insert(const_iterator _Where, size_type _Count, const _Ty& _Val)
  {
  _Insert_n(_Where, _Count, _Val);
  }

 template<class _It>
  void insert(const_iterator _Where, _It _First, _It _Last)
  {
  _Insert(_Where, _First, _Last, _Iter_cat(_First));
  }

 template<class _It>
  void _Insert(const_iterator _Where, _It _Count, _It _Val,
   _Int_iterator_tag)
  {
  _Insert_n(_Where, (size_type)_Count, (_Ty)_Val);
  }

 template<class _It>
  void _Insert(const_iterator _Where,
   _It _First, _It _Last, input_iterator_tag)
  {
  size_type _Off = _Where - begin();


  if (this->_Mysize < _Off)
   _Debug_message(L"deque insert iterator outside range", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 1376);
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 1377);


  size_type _Oldsize = this->_Mysize;

  if (_First == _Last)
   ;
  else if (_Off <= this->_Mysize / 2)
   {
   try {
   for (; _First != _Last; ++_First)
    push_front(*_First);

   } catch (...) {
   for (; _Oldsize < this->_Mysize; )
    pop_front();
   throw;
   }

   size_type _Num = this->_Mysize - _Oldsize;
   ::std:: reverse(begin(), begin() + _Num);
   ::std:: rotate(begin(), begin() + _Num, begin() + _Num + _Off);
   }
  else
   {
   try {
   for (; _First != _Last; ++_First)
    push_back(*_First);

   } catch (...) {
   for (; _Oldsize < this->_Mysize; )
    pop_back();
   throw;
   }

   ::std:: rotate(begin() + _Off, begin() + _Oldsize, end());
   }
  }

 iterator erase(const_iterator _Where)
  {
  return (erase(_Where, _Where + 1));
  }

 iterator erase(const_iterator _First_arg,
  const_iterator _Last_arg)
  {
  iterator _First = _Make_iter(_First_arg);
  iterator _Last = _Make_iter(_Last_arg);


  if (_Last < _First
   || _First < begin() || end() < _Last)
   _Debug_message(L"deque erase iterator outside range", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 1430);
  _Debug_range(_First, _Last, L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 1431);

  size_type _Off = _First - begin();
  size_type _Count = _Last - _First;
  bool _Moved = 0 < _Off && _Off + _Count < this->_Mysize;






  if (_Off < (size_type)(end() - _Last))
   {
   _Move_backward(begin(), _First, _Last);
   for (; 0 < _Count; --_Count)
    pop_front();
   }
  else
   {
   _Move(_Last, end(), _First);
   for (; 0 < _Count; --_Count)
    pop_back();
   }


  if (_Moved)
   this->_Orphan_all();


  return (begin() + _Off);
  }

 void clear()
  {
  _Tidy();
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->_Alval == _Right._Alval)
   {
   this->_Swap_all(_Right);
   _Swap_adl(this->_Map, _Right._Map);
   ::std:: swap(this->_Mapsize, _Right._Mapsize);
   ::std:: swap(this->_Myoff, _Right._Myoff);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }
  else
   {
   _Myt _Ts = _Move(*this);

   *this = _Move(_Right);
   _Right = _Move(_Ts);
   }
  }

protected:
 void _Assign_n(size_type _Count, const _Ty& _Val)
  {
  _Ty _Tmp = _Val;
  erase(begin(), end());
  _Insert_n(begin(), _Count, _Tmp);
  }

 void _Insert_n(const_iterator _Where,
  size_type _Count, const _Ty& _Val)
  {
  iterator _Mid;
  size_type _Num;
  size_type _Off = _Where - begin();
  size_type _Rem = this->_Mysize - _Off;
  size_type _Oldsize = this->_Mysize;


  if (this->_Mysize < _Off)
   _Debug_message(L"deque insert iterator outside range", L"c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\deque", 1508);


  if (_Off < _Rem)
   {
   try {
   if (_Off < _Count)
    {
    for (_Num = _Count - _Off; 0 < _Num; --_Num)
     push_front(_Val);
    for (_Num = _Off; 0 < _Num; --_Num)
     push_front(begin()[_Count - 1]);

    _Mid = begin() + _Count;
    ::std:: fill(_Mid, _Mid + _Off,
     _Val);
    }
   else
    {
    for (_Num = _Count; 0 < _Num; --_Num)
     push_front(begin()[_Count - 1]);

    _Mid = begin() + _Count;
    _Ty _Tmp = _Val;
    _Move(_Mid + _Count, _Mid + _Off,
     _Mid);
    ::std:: fill(begin() + _Off, _Mid + _Off,
     _Tmp);
    }
   } catch (...) {
   for (; _Oldsize < this->_Mysize; )
    pop_front();
   throw;
   }
   }
  else
   {
   try {
   if (_Rem < _Count)
    {
    for (_Num = _Count - _Rem; 0 < _Num; --_Num)
     push_back(_Val);
    for (_Num = 0; _Num < _Rem; ++_Num)
     push_back(begin()[_Off + _Num]);

    _Mid = begin() + _Off;
    ::std:: fill(_Mid, _Mid + _Rem,
     _Val);
    }
   else
    {
    for (_Num = 0; _Num < _Count; ++_Num)
     push_back(begin()[_Off + _Rem
      - _Count + _Num]);

    _Mid = begin() + _Off;
    _Ty _Tmp = _Val;
    _Move_backward(_Mid, _Mid + _Rem - _Count,
     _Mid + _Rem);
    ::std:: fill(_Mid, _Mid + _Count,
     _Tmp);
    }
   } catch (...) {
   for (; _Oldsize < this->_Mysize; )
    pop_back();
   throw;
   }
   }
  }

 __declspec(noreturn) void _Xlen() const
  {
  _Xlength_error("deque<T> too long");
  }

 __declspec(noreturn) void _Xran() const
  {
  _Xout_of_range("invalid deque<T> subscript");
  }

 void _Growmap(size_type _Count)
  {
  if (max_size() / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) - this->_Mapsize < _Count)
   _Xlen();

  size_type _Inc = this->_Mapsize / 2;
  if (_Inc < 8)
   _Inc = 8;
  if (_Count < _Inc && this->_Mapsize <= max_size() / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) - _Inc)
   _Count = _Inc;
  size_type _Myboff = this->_Myoff / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1);
  _Mapptr _Newmap = this->_Almap.allocate(this->_Mapsize + _Count);
  _Mapptr _Myptr = _Newmap + _Myboff;

  _Myptr = _Uninitialized_copy(this->_Map + _Myboff,
   this->_Map + this->_Mapsize,
   _Myptr, this->_Almap);
  if (_Myboff <= _Count)
   {
   _Myptr = _Uninitialized_copy(this->_Map,
    this->_Map + _Myboff,
    _Myptr, this->_Almap);
   _Uninitialized_default_fill_n(_Myptr, _Count - _Myboff,
    (pointer *)0, this->_Almap);
   _Uninitialized_default_fill_n(_Newmap, _Myboff,
    (pointer *)0, this->_Almap);
   }
  else
   {
   _Uninitialized_copy(this->_Map,
    this->_Map + _Count,
    _Myptr, this->_Almap);
   _Myptr = _Uninitialized_copy(this->_Map + _Count,
    this->_Map + _Myboff,
    _Newmap, this->_Almap);
   _Uninitialized_default_fill_n(_Myptr, _Count,
    (pointer *)0, this->_Almap);
   }

  _Destroy_range(this->_Map + _Myboff, this->_Map + this->_Mapsize,
   this->_Almap);
  if (this->_Map != 0)
   this->_Almap.deallocate(this->_Map,
    this->_Mapsize);

  this->_Map = _Newmap;
  this->_Mapsize += _Count;
  }

 void _Tidy()
  {
  while (!empty())
   pop_back();
  for (size_type _Count = this->_Mapsize; 0 < _Count; )
   {
   if (*(this->_Map + --_Count) != 0)
    {
    this->_Alval.deallocate(*(this->_Map + _Count), (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
    _Dest_val(this->_Almap, this->_Map + _Count);
    }
   }

  if (this->_Map != 0)
   this->_Almap.deallocate(this->_Map,
    this->_Mapsize);
  this->_Mapsize = 0;
  this->_Map = 0;
  }


 void _Orphan_off(size_type _Offlo) const
  {
  size_type _Offhigh = this->_Myoff + this->_Mysize <= _Offlo + 1
   ? (size_type)(-1) : _Offlo;
  if (_Offlo == this->_Myoff)
   _Offlo = 0;

  _Lockit _Lock(3);
  const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
  if (_Pnext != 0)
   while (*_Pnext != 0)
    if ((*_Pnext)->_Myoff < _Offlo
     || _Offhigh < (*_Pnext)->_Myoff)
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
  }

 };



template<class _Ty,
 class _Alloc> inline
 void swap(deque<_Ty, _Alloc>& _Left, deque<_Ty, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Alloc> inline
 void swap(deque<_Ty, _Alloc>& _Left, deque<_Ty, _Alloc>&& _Right)
 {
 typedef deque<_Ty, _Alloc> _Myt;
 _Left.swap(::std:: forward<_Myt>(_Right));
 }

template<class _Ty,
 class _Alloc> inline
 void swap(deque<_Ty, _Alloc>&& _Left, deque<_Ty, _Alloc>& _Right)
 {
 typedef deque<_Ty, _Alloc> _Myt;
 _Right.swap(::std:: forward<_Myt>(_Left));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator==(const deque<_Ty, _Alloc>& _Left,
  const deque<_Ty, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator!=(const deque<_Ty, _Alloc>& _Left,
  const deque<_Ty, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<(const deque<_Ty, _Alloc>& _Left,
  const deque<_Ty, _Alloc>& _Right)
 {
 return (lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<=(const deque<_Ty, _Alloc>& _Left,
  const deque<_Ty, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>(const deque<_Ty, _Alloc>& _Left,
  const deque<_Ty, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>=(const deque<_Ty, _Alloc>& _Left,
  const deque<_Ty, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }
}

#pragma warning(pop)
#pragma pack(pop)
#line 6 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stack"


#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)
namespace std {

template<class _Ty,
 class _Container = deque<_Ty> >
 class stack
 {
public:
 typedef stack<_Ty, _Container> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type value_type;
 typedef typename _Container::size_type size_type;
 typedef typename _Container::reference reference;
 typedef typename _Container::const_reference const_reference;

 stack()
  : c()
  {
  }

 stack(const _Myt& _Right)
  : c(_Right.c)
  {
  }

 explicit stack(const _Container& _Cont)
  : c(_Cont)
  {
  }

 _Myt& operator=(const _Myt& _Right)
  {
  c = _Right.c;
  return (*this);
  }

 stack(_Myt&& _Right)
  : c(::std:: move(_Right.c))
  {
  }

 explicit stack(_Container&& _Cont)
  : c(::std:: move(_Cont))
  {
  }

 _Myt& operator=(_Myt&& _Right)
  {
  c = ::std:: move(_Right.c);
  return (*this);
  }

 void push(value_type&& _Val)
  {
  c.push_back(::std:: move(_Val));
  }

 template<class _Valty>
  void emplace(_Valty&& _Val)
  {
  c.emplace_back(::std:: forward<_Valty>(_Val));
  }

 void swap(_Myt&& _Right)
  {
  c.swap(::std:: move(_Right.c));
  }

 bool empty() const
  {
  return (c.empty());
  }

 size_type size() const
  {
  return (c.size());
  }

 reference top()
  {
  return (c.back());
  }

 const_reference top() const
  {
  return (c.back());
  }

 void push(const value_type& _Val)
  {
  c.push_back(_Val);
  }

 void pop()
  {
  c.pop_back();
  }

 const _Container& _Get_container() const
  {
  return (c);
  }

 void swap(_Myt& _Right)
  {
  c.swap(_Right.c);
  }

protected:
 _Container c;
 };


template<class _Ty,
 class _Container> inline
 void swap(stack<_Ty, _Container>& _Left,
  stack<_Ty, _Container>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Container> inline
 void swap(stack<_Ty, _Container>& _Left,
  stack<_Ty, _Container>&& _Right)
 {
 typedef stack<_Ty, _Container> _Myt;
 _Left.swap(::std:: forward<_Myt>(_Right));
 }

template<class _Ty,
 class _Container> inline
 void swap(stack<_Ty, _Container>&& _Left,
  stack<_Ty, _Container>& _Right)
 {
 typedef stack<_Ty, _Container> _Myt;
 _Right.swap(::std:: forward<_Myt>(_Left));
 }

template<class _Ty,
 class _Container> inline
 bool operator==(const stack<_Ty, _Container>& _Left,
  const stack<_Ty, _Container>& _Right)
 {
 return (_Left._Get_container() == _Right._Get_container());
 }

template<class _Ty,
 class _Container> inline
 bool operator!=(const stack<_Ty, _Container>& _Left,
  const stack<_Ty, _Container>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Container> inline
 bool operator<(const stack<_Ty, _Container>& _Left,
  const stack<_Ty, _Container>& _Right)
 {
 return (_Left._Get_container() < _Right._Get_container());
 }

template<class _Ty,
 class _Container> inline
 bool operator>(const stack<_Ty, _Container>& _Left,
  const stack<_Ty, _Container>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Container> inline
 bool operator<=(const stack<_Ty, _Container>& _Left,
  const stack<_Ty, _Container>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Container> inline
 bool operator>=(const stack<_Ty, _Container>& _Left,
  const stack<_Ty, _Container>& _Right)
 {
 return (!(_Left < _Right));
 }
}
#pragma warning(pop)
#pragma pack(pop)
#line 35 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/MatrixStack.h"


namespace CaptainLucha
{
 enum ProjectionMode
 {
  CL_PROJECTION,
  CL_ORTHOGRAPHIC
 };

 class MatrixStack
 {
 public:
  MatrixStack();
  ~MatrixStack();

  void LoadIdentity();
  void LoadMatrix(const Matrix4Df& matrix);

  void PushMatrix();
  void PopMatrix();

  void MultMatrix(const Matrix4Df& matrixRHS);

  void Rotate(float degrees, float x, float y, float z);
  void Rotate(float degrees, const Vector3Df& axis);

  void RotateRad(float radians, float x, float y, float z);
  void RotateRad(float radians, const Vector3Df& axis);

  void Translate(float x, float y, float z);
  void Translate(const Vector3Df& trans);

  void Scale(float x, float y, float z);

  void SetViewMatrix(const Matrix4Df& view) {m_view = view;}

  const Matrix4Df& GetModelMatrix() const {return m_stack.top();}
  Matrix4Df GetModelMatrix() {return m_stack.top();}

  const Matrix4Df& GetViewMatrix() const
   {return m_currentProjectionMode == CL_PROJECTION ? m_view : Matrix4Df::IDENTITY;}
  Matrix4Df GetViewMatrix()
   {return m_currentProjectionMode == CL_PROJECTION ? m_view : Matrix4Df::IDENTITY;}

  const Matrix4Df& GetProjectionMatrix() const
   {return m_currentProjectionMode == CL_PROJECTION ? m_projectionMatrix : m_orthoMatrix;}
  Matrix4Df GetProjectionMatrix()
   {return m_currentProjectionMode == CL_PROJECTION ? m_projectionMatrix : m_orthoMatrix;}

  Matrix4Df GetModelViewMatrix() const {return m_view * m_stack.top();}
  Matrix4Df GetModelViewProjectionMatrix()
  {
   return (m_currentProjectionMode == CL_PROJECTION ? m_stack.top() * m_view * m_projectionMatrix : m_stack.top() * m_view * m_orthoMatrix);
  }

  void Perspective(float fov, float aspect, float zNear, float zFar);
  void Othographic(int left, int right, int bottom, int top, int zFar, int zNear);


  void SetProjectionMode(ProjectionMode mode) {m_currentProjectionMode = mode;}
  ProjectionMode GetCurrentProjectionMode() const {return m_currentProjectionMode;}

 protected:
  void Frustum(float left, float right, float bottom, float top, float zNear, float zFar);

 private:
  static MatrixStack* m_matrixStack;

  Matrix4Df m_orthoMatrix;
  Matrix4Df m_projectionMatrix;

  Matrix4Df m_view;

  std::stack<Matrix4Df> m_stack;

  bool m_isPerspectiveInit;
  bool m_isOrthoInit;

  ProjectionMode m_currentProjectionMode;

  private: MatrixStack(const MatrixStack&); MatrixStack& operator=(const MatrixStack&);;
 };
}
#line 34 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/RendererUtils.h"

#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/Color.h"
#line 32 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common/Renderer/Color.h"
#line 1 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Utils/UtilDebug.h"
#line 34 "C:/Users/CaptainLucha/Desktop/School Workspace/New Engine/GameEngine/common\\Utils/UtilDebug.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"
#line 21 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\sdkddkver.h"
#line 20 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\sdkddkver.h"
#pragma warning(push)

#pragma warning(disable:4001)
#line 270 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\sdkddkver.h"
#pragma warning(pop)
#line 21 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"
#line 140 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"
#pragma warning(disable:4514)

#pragma warning(disable:4103)


#pragma warning(push)

#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)


#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\excpt.h"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\excpt.h"
#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\crtdefs.h"
#line 20 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\excpt.h"






#pragma pack(push,_CRT_PACKING)


extern "C" {





typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;
#line 52 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\excpt.h"
struct _EXCEPTION_RECORD;
struct _CONTEXT;

EXCEPTION_DISPOSITION __cdecl _except_handler (
         struct _EXCEPTION_RECORD *_ExceptionRecord,
         void * _EstablisherFrame,
            struct _CONTEXT *_ContextRecord,
            void * _DispatcherContext
    );
#line 104 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\excpt.h"
unsigned long __cdecl _exception_code(void);
void * __cdecl _exception_info(void);
int __cdecl _abnormal_termination(void);
#line 120 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\excpt.h"
}


#pragma pack(pop)
#line 151 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"

#line 1 "c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include\\stdarg.h"
#line 152 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"



#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\windef.h"
#line 35 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\windef.h"
extern "C" {
#line 48 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\windef.h"
typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef char *PSZ;
#line 152 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\windef.h"
typedef unsigned long DWORD;
typedef int BOOL;
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef float FLOAT;
typedef FLOAT *PFLOAT;
typedef BOOL *PBOOL;
typedef BOOL *LPBOOL;
typedef BYTE *PBYTE;
typedef BYTE *LPBYTE;
typedef int *PINT;
typedef int *LPINT;
typedef WORD *PWORD;
typedef WORD *LPWORD;
typedef long *LPLONG;
typedef DWORD *PDWORD;
typedef DWORD *LPDWORD;
typedef void *LPVOID;
typedef const void *LPCVOID;

typedef int INT;
typedef unsigned int UINT;
typedef unsigned int *PUINT;



#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 22 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#pragma warning(push)

#pragma warning(disable:4201)
#pragma warning(disable:4214)


extern "C" {
#line 77 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\specstrings.h"


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/sal_supp.h"
#line 3 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\specstrings.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/specstrings_supp.h"
#line 4 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\specstrings.h"
#line 18 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\specstrings.h"
extern "C" {
#line 291 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\specstrings.h"
}
#line 320 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\specstrings.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\specstrings_strict.h"
#line 184 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\specstrings_strict.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\specstrings_undef.h"
#line 184 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\specstrings_strict.h"
#line 320 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\specstrings.h"



#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\driverspecs.h"
#line 125 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\driverspecs.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/sdv_driverspecs.h"
#line 125 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\driverspecs.h"







extern "C" {
#line 843 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\driverspecs.h"
}
#line 323 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\specstrings.h"
#line 77 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\kernelspecs.h"
#line 40 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\kernelspecs.h"
extern "C" {
#line 185 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\kernelspecs.h"
}
#line 78 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 159 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\basetsd.h"
#line 40 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\basetsd.h"
  typedef unsigned long POINTER_64_INT;
#line 73 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\basetsd.h"
extern "C" {


typedef signed char INT8, *PINT8;
typedef signed short INT16, *PINT16;
typedef signed int INT32, *PINT32;
typedef signed __int64 INT64, *PINT64;
typedef unsigned char UINT8, *PUINT8;
typedef unsigned short UINT16, *PUINT16;
typedef unsigned int UINT32, *PUINT32;
typedef unsigned __int64 UINT64, *PUINT64;





typedef signed int LONG32, *PLONG32;





typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;
#line 135 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\basetsd.h"
    typedef __w64 int INT_PTR, *PINT_PTR;
    typedef __w64 unsigned int UINT_PTR, *PUINT_PTR;

    typedef __w64 long LONG_PTR, *PLONG_PTR;
    typedef __w64 unsigned long ULONG_PTR, *PULONG_PTR;
#line 334 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\basetsd.h"
typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef short HALF_PTR, *PHALF_PTR;
typedef __w64 long SHANDLE_PTR;
typedef __w64 unsigned long HANDLE_PTR;
#line 355 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\basetsd.h"
__inline
void * __ptr64
PtrToPtr64(
    const void *p
    )
{
    return((void * __ptr64) (unsigned __int64) (ULONG_PTR)p );
}

__inline
void *
Ptr64ToPtr(
    const void * __ptr64 p
    )
{
    return((void *) (ULONG_PTR) (unsigned __int64) p);
}

__inline
void * __ptr64
HandleToHandle64(
    const void *h
    )
{
    return((void * __ptr64)(__int64)(LONG_PTR)h );
}

__inline
void *
Handle64ToHandle(
    const void * __ptr64 h
    )
{
    return((void *) (ULONG_PTR) (unsigned __int64) h );
}
#line 421 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\basetsd.h"
typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;
#line 470 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\basetsd.h"
typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;





typedef __int64 LONG64, *PLONG64;






typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;





typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY *PKAFFINITY;


}
#line 159 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 289 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef void *PVOID;
typedef void * __ptr64 PVOID64;
#line 331 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef char CHAR;
typedef short SHORT;
typedef long LONG;

typedef int INT;
#line 344 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef wchar_t WCHAR;





typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;

typedef WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef PWSTR *PZPWSTR;
typedef const PWSTR *PCZPWSTR;
typedef WCHAR *LPUWSTR, *PUWSTR;
typedef const WCHAR *LPCWSTR, *PCWSTR;
typedef PCWSTR *PZPCWSTR;
typedef const WCHAR *LPCUWSTR, *PCUWSTR;

typedef WCHAR *PZZWSTR;
typedef const WCHAR *PCZZWSTR;
typedef WCHAR *PUZZWSTR;
typedef const WCHAR *PCUZZWSTR;

typedef WCHAR *PNZWCH;
typedef const WCHAR *PCNZWCH;
typedef WCHAR *PUNZWCH;
typedef const WCHAR *PCUNZWCH;



typedef const WCHAR *LPCWCHAR, *PCWCHAR;
typedef const WCHAR *LPCUWCHAR, *PCUWCHAR;





typedef unsigned long UCSCHAR;
#line 400 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef UCSCHAR *PUCSCHAR;
typedef const UCSCHAR *PCUCSCHAR;

typedef UCSCHAR *PUCSSTR;
typedef UCSCHAR *PUUCSSTR;

typedef const UCSCHAR *PCUCSSTR;
typedef const UCSCHAR *PCUUCSSTR;

typedef UCSCHAR *PUUCSCHAR;
typedef const UCSCHAR *PCUUCSCHAR;







typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;

typedef CHAR *NPSTR, *LPSTR, *PSTR;
typedef PSTR *PZPSTR;
typedef const PSTR *PCZPSTR;
typedef const CHAR *LPCSTR, *PCSTR;
typedef PCSTR *PZPCSTR;

typedef CHAR *PZZSTR;
typedef const CHAR *PCZZSTR;

typedef CHAR *PNZCH;
typedef const CHAR *PCNZCH;
#line 464 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef char TCHAR, *PTCHAR;
typedef unsigned char TBYTE , *PTBYTE ;



typedef LPCH LPTCH, PTCH;
typedef LPCCH LPCTCH, PCTCH;
typedef LPSTR PTSTR, LPTSTR, PUTSTR, LPUTSTR;
typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;
typedef PZZSTR PZZTSTR, PUZZTSTR;
typedef PCZZSTR PCZZTSTR, PCUZZTSTR;
typedef PNZCH PNZTCH, PUNZTCH;
typedef PCNZCH PCNZTCH, PCUNZTCH;






typedef SHORT *PSHORT;
typedef LONG *PLONG;
#line 493 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _PROCESSOR_NUMBER {
    WORD Group;
    BYTE Number;
    BYTE Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;






typedef struct _GROUP_AFFINITY {
    KAFFINITY Mask;
    WORD Group;
    WORD Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;






typedef void *HANDLE;
#line 525 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef HANDLE *PHANDLE;





typedef BYTE FCHAR;
typedef WORD FSHORT;
typedef DWORD FLONG;
#line 542 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef long HRESULT;
#line 603 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef char CCHAR;
typedef DWORD LCID;
typedef PDWORD PLCID;
typedef WORD LANGID;
#line 630 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;
#line 645 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;
#line 667 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;




typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    } ;
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;

    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;




typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } ;
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;

    ULONGLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;
#line 717 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;


typedef ULONGLONG DWORDLONG;
typedef DWORDLONG *PDWORDLONG;
#line 769 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
ULONGLONG
__stdcall
Int64ShllMod32 (
         ULONGLONG Value,
         DWORD ShiftCount
    );

LONGLONG
__stdcall
Int64ShraMod32 (
         LONGLONG Value,
         DWORD ShiftCount
    );

ULONGLONG
__stdcall
Int64ShrlMod32 (
         ULONGLONG Value,
         DWORD ShiftCount
    );


#pragma warning(push)

#pragma warning(disable:4035 4793)

__inline ULONGLONG
__stdcall
Int64ShllMod32 (
         ULONGLONG Value,
         DWORD ShiftCount
    )
{
    __asm {
        mov ecx, ShiftCount
        mov eax, dword ptr [Value]
        mov edx, dword ptr [Value+4]
        shld edx, eax, cl
        shl eax, cl
    }
}

__inline LONGLONG
__stdcall
Int64ShraMod32 (
         LONGLONG Value,
         DWORD ShiftCount
    )
{
    __asm {
        mov ecx, ShiftCount
        mov eax, dword ptr [Value]
        mov edx, dword ptr [Value+4]
        shrd eax, edx, cl
        sar edx, cl
    }
}

__inline ULONGLONG
__stdcall
Int64ShrlMod32 (
         ULONGLONG Value,
         DWORD ShiftCount
    )
{
    __asm {
        mov ecx, ShiftCount
        mov eax, dword ptr [Value]
        mov edx, dword ptr [Value+4]
        shrd eax, edx, cl
        shr edx, cl
    }
}


#pragma warning(pop)
#line 860 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" {
#line 913 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
unsigned int
__cdecl
_rotl (
         unsigned int Value,
         int Shift
    );


unsigned __int64
__cdecl
_rotl64 (
         unsigned __int64 Value,
         int Shift
    );


unsigned int
__cdecl
_rotr (
         unsigned int Value,
         int Shift
    );


unsigned __int64
__cdecl
_rotr64 (
         unsigned __int64 Value,
         int Shift
    );

#pragma intrinsic(_rotl)
#pragma intrinsic(_rotl64)
#pragma intrinsic(_rotr)
#pragma intrinsic(_rotr64)




}






typedef BYTE BOOLEAN;
typedef BOOLEAN *PBOOLEAN;





typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;






typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;

typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;



#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\guiddef.h"
#line 22 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\guiddef.h"
typedef struct _GUID {
    unsigned long Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char Data4[ 8 ];
} GUID;
#line 75 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\guiddef.h"
typedef GUID *LPGUID;




typedef const GUID *LPCGUID;





typedef GUID IID;
typedef IID *LPIID;


typedef GUID CLSID;
typedef CLSID *LPCLSID;


typedef GUID FMTID;
typedef FMTID *LPFMTID;
#line 150 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\guiddef.h"
__inline int InlineIsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
   return (
      ((unsigned long *) &rguid1)[0] == ((unsigned long *) &rguid2)[0] &&
      ((unsigned long *) &rguid1)[1] == ((unsigned long *) &rguid2)[1] &&
      ((unsigned long *) &rguid1)[2] == ((unsigned long *) &rguid2)[2] &&
      ((unsigned long *) &rguid1)[3] == ((unsigned long *) &rguid2)[3]);
}

__inline int IsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
    return !memcmp(&rguid1, &rguid2, sizeof(GUID));
}
#line 192 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\guiddef.h"
__inline int operator==(const GUID & guidOne, const GUID & guidOther)
{
    return IsEqualGUID(guidOne,guidOther);
}

__inline int operator!=(const GUID & guidOne, const GUID & guidOther)
{
    return !(guidOne == guidOther);
}
#line 998 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"





typedef struct _OBJECTID {
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
#line 1082 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C++"
template <typename T, size_t N>
char (*RtlpNumberOf( T (&)[N] ))[N];
#line 1200 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef


EXCEPTION_DISPOSITION
__stdcall
EXCEPTION_ROUTINE (
            struct _EXCEPTION_RECORD *ExceptionRecord,
         PVOID EstablisherFrame,
            struct _CONTEXT *ContextRecord,
         PVOID DispatcherContext
    );

typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;
#line 2046 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;






typedef struct __declspec(align(16)) _M128A {
    ULONGLONG Low;
    LONGLONG High;
} M128A, *PM128A;





typedef struct __declspec(align(16)) _XSAVE_FORMAT {
    WORD ControlWord;
    WORD StatusWord;
    BYTE TagWord;
    BYTE Reserved1;
    WORD ErrorOpcode;
    DWORD ErrorOffset;
    WORD ErrorSelector;
    WORD Reserved2;
    DWORD DataOffset;
    WORD DataSelector;
    WORD Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];
#line 2086 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
    M128A XmmRegisters[8];
    BYTE Reserved4[192];







    DWORD StackControl[7];
    DWORD Cr0NpxState;



} XSAVE_FORMAT, *PXSAVE_FORMAT;

typedef struct __declspec(align(8)) _XSAVE_AREA_HEADER {
    DWORD64 Mask;
    DWORD64 Reserved[7];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;

typedef struct __declspec(align(16)) _XSAVE_AREA {
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA;

typedef struct _XSTATE_CONTEXT {
    DWORD64 Mask;
    DWORD Length;
    DWORD Reserved1;
                               PXSAVE_AREA Area;


    DWORD Reserved2;


    PVOID Buffer;


    DWORD Reserved3;


} XSTATE_CONTEXT, *PXSTATE_CONTEXT;
#line 2142 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _CONTEXT_CHUNK {
    LONG Offset;
    DWORD Length;
} CONTEXT_CHUNK, *PCONTEXT_CHUNK;
#line 2172 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _CONTEXT_EX {






    CONTEXT_CHUNK All;







    CONTEXT_CHUNK Legacy;
#line 2197 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
    CONTEXT_CHUNK XState;

} CONTEXT_EX, *PCONTEXT_EX;
#line 2234 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef char __C_ASSERT__[((sizeof(XSAVE_FORMAT) & (64 - 1)) == 0)?1:-1];
typedef char __C_ASSERT__[((((LONG)(LONG_PTR)&(((XSAVE_AREA *)0)->Header)) & (64 - 1)) == 0)?1:-1];


typedef char __C_ASSERT__[(sizeof(XSAVE_AREA) == 512 + 64)?1:-1];
#line 3604 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#pragma warning(push)

#pragma warning(disable:4164)


#pragma function(_enable)
#pragma function(_disable)



#pragma warning(pop)
#line 3626 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" {
#line 3646 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
BOOLEAN
_bittest (
                              LONG const *Base,
         LONG Offset
    );

BOOLEAN
_bittestandcomplement (
                                 LONG *Base,
         LONG Offset
    );

BOOLEAN
_bittestandset (
                                 LONG *Base,
         LONG Offset
    );

BOOLEAN
_bittestandreset (
                                 LONG *Base,
         LONG Offset
    );

BOOLEAN
_interlockedbittestandset (
                                                   LONG volatile *Base,
         LONG Offset
    );

BOOLEAN
_interlockedbittestandreset (
                                                   LONG volatile *Base,
         LONG Offset
    );

#pragma intrinsic(_bittest)
#pragma intrinsic(_bittestandcomplement)
#pragma intrinsic(_bittestandset)
#pragma intrinsic(_bittestandreset)
#pragma intrinsic(_interlockedbittestandset)
#pragma intrinsic(_interlockedbittestandreset)
#line 3697 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
BOOLEAN
_BitScanForward (
          DWORD *Index,
         DWORD Mask
    );


BOOLEAN
_BitScanReverse (
          DWORD *Index,
         DWORD Mask
    );

#pragma intrinsic(_BitScanForward)
#pragma intrinsic(_BitScanReverse)
#line 3760 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
SHORT
_InterlockedAnd16 (
                              SHORT volatile *Destination,
         SHORT Value
    );

SHORT
_InterlockedCompareExchange16 (
                              SHORT volatile *Destination,
         SHORT ExChange,
         SHORT Comperand
    );

SHORT
_InterlockedOr16 (
                              SHORT volatile *Destination,
         SHORT Value
    );

#pragma intrinsic(_InterlockedAnd16)
#pragma intrinsic(_InterlockedCompareExchange16)
#pragma intrinsic(_InterlockedOr16)




#pragma warning(push)
#pragma warning(disable:4035 4793)

__forceinline
BOOLEAN
InterlockedBitTestAndComplement (
                                                LONG volatile *Base,
         LONG Bit
    )
{
    __asm {
           mov eax, Bit
           mov ecx, Base
           lock btc [ecx], eax
           setc al
    };
}
#pragma warning(pop)
#line 3816 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
BYTE
__readfsbyte (
         DWORD Offset
    );

WORD
__readfsword (
         DWORD Offset
    );

DWORD
__readfsdword (
         DWORD Offset
    );

void
__writefsbyte (
         DWORD Offset,
         BYTE Data
    );

void
__writefsword (
         DWORD Offset,
         WORD Data
    );

void
__writefsdword (
         DWORD Offset,
         DWORD Data
    );

#pragma intrinsic(__readfsbyte)
#pragma intrinsic(__readfsword)
#pragma intrinsic(__readfsdword)
#pragma intrinsic(__writefsbyte)
#pragma intrinsic(__writefsword)
#pragma intrinsic(__writefsdword)







void
__incfsbyte (
         DWORD Offset
    );

void
__addfsbyte (
         DWORD Offset,
         BYTE Value
    );

void
__incfsword (
         DWORD Offset
    );

void
__addfsword (
         DWORD Offset,
         WORD Value
    );

void
__incfsdword (
         DWORD Offset
    );

void
__addfsdword (
         DWORD Offset,
         DWORD Value
    );

#pragma intrinsic(__incfsbyte)
#pragma intrinsic(__addfsbyte)
#pragma intrinsic(__incfsword)
#pragma intrinsic(__addfsword)
#pragma intrinsic(__incfsdword)
#pragma intrinsic(__addfsdword)







void
_mm_pause (
    void
    );

#pragma intrinsic(_mm_pause)
#line 3926 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
}








#pragma warning( push )
#pragma warning( disable : 4793 )
__forceinline
void
MemoryBarrier (
    void
    )
{
    LONG Barrier;
    __asm {
        xchg Barrier, eax
    }
}
#pragma warning( pop )
#line 3974 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
DWORD64
__readpmc (
         DWORD Counter
    );

#pragma intrinsic(__readpmc)
#line 4006 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
DWORD64
__rdtsc (
    void
    );

#pragma intrinsic(__rdtsc)
#line 4034 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
void
__int2c (
    void
    );

#pragma intrinsic(__int2c)


__forceinline
void
DbgRaiseAssertionFailure (
    void
    )

{
    __int2c();
}
#line 4077 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
__inline PVOID GetFiberData( void ) { return *(PVOID *) (ULONG_PTR) __readfsdword (0x10);}
__inline PVOID GetCurrentFiber( void ) { return (PVOID) (ULONG_PTR) __readfsdword (0x10);}
#line 4152 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
} FLOATING_SAVE_AREA;

typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;
#line 4174 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef char __C_ASSERT__[(sizeof(XSAVE_FORMAT) == 512)?1:-1];







#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack4.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack4.h"
#pragma warning(disable:4103)

#pragma pack(push,4)
#line 4181 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 4193 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _CONTEXT {
#line 4213 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
    DWORD ContextFlags;







    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;






    FLOATING_SAVE_AREA FloatSave;






    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;






    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;






    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;







    BYTE ExtendedRegisters[512];

} CONTEXT;

typedef CONTEXT *PCONTEXT;


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 4281 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 4290 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;
#line 6171 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _WOW64_FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA;

typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack4.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack4.h"
#pragma warning(disable:4103)

#pragma pack(push,4)
#line 6185 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 6197 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _WOW64_CONTEXT {
#line 6217 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
    DWORD ContextFlags;







    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;






    WOW64_FLOATING_SAVE_AREA FloatSave;






    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;






    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;






    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;







    BYTE ExtendedRegisters[512];

} WOW64_CONTEXT;

typedef WOW64_CONTEXT *PWOW64_CONTEXT;


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 6285 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"



typedef struct _WOW64_LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
    DWORD Selector;
    WOW64_LDT_ENTRY Descriptor;
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY;
#line 6325 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _EXCEPTION_RECORD {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32 {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64 {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;



__declspec(dllimport)
void
__stdcall
RtlUnwind (
             PVOID TargetFrame,
             PVOID TargetIp,
             PEXCEPTION_RECORD ExceptionRecord,
         PVOID ReturnValue
    );
#line 6421 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef PVOID PACCESS_TOKEN;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef PVOID PSID;
#line 6463 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
#line 6521 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;
#line 6540 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack4.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack4.h"
#pragma warning(disable:4103)

#pragma pack(push,4)
#line 6540 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"


typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 6549 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 6584 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;





typedef struct _SID {
   BYTE Revision;
   BYTE SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   DWORD SubAuthority[1];

} SID, *PISID;
#line 6615 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer,
    SidTypeLabel
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {



    PSID Sid;

    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;


typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

typedef struct _SID_AND_ATTRIBUTES_HASH {
    DWORD SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;
#line 6909 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef enum {

    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
} WELL_KNOWN_SID_TYPE;
#line 7091 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _ACL {
    BYTE AclRevision;
    BYTE Sbz1;
    WORD AclSize;
    WORD AceCount;
    WORD Sbz2;
} ACL;
typedef ACL *PACL;
#line 7121 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _ACE_HEADER {
    BYTE AceType;
    BYTE AceFlags;
    WORD AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;
#line 7232 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;
#line 7277 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;






typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
#line 7400 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
#line 7451 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef WORD SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;
#line 7541 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
   BYTE Revision;
   BYTE Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;

   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;
#line 7611 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _OBJECT_TYPE_LIST {
    WORD Level;
    WORD Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;
#line 7631 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;
#line 7685 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;
#line 7703 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef enum _ACCESS_REASON_TYPE{

    AccessReasonNone = 0x00000000,






    AccessReasonAllowedAce = 0x00010000,
    AccessReasonDeniedAce = 0x00020000,

    AccessReasonAllowedParentAce = 0x00030000,
    AccessReasonDeniedParentAce = 0x00040000,

    AccessReasonMissingPrivilege = 0x00100000,
    AccessReasonFromPrivilege = 0x00200000,


    AccessReasonIntegrityLevel = 0x00300000,

    AccessReasonOwnership = 0x00400000,

    AccessReasonNullDacl = 0x00500000,
    AccessReasonEmptyDacl = 0x00600000,

    AccessReasonNoSD = 0x00700000,
    AccessReasonNoGrant = 0x00800000
} ACCESS_REASON_TYPE;
#line 7746 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef DWORD ACCESS_REASON;

typedef struct _ACCESS_REASONS{
        ACCESS_REASON Data[32];
} ACCESS_REASONS, *PACCESS_REASONS;
#line 7775 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _SE_SECURITY_DESCRIPTOR
{
    DWORD Size;
    DWORD Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR;

typedef struct _SE_ACCESS_REQUEST
{
    DWORD Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid;
    PGENERIC_MAPPING GenericMapping;
    DWORD ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST;


typedef struct _SE_ACCESS_REPLY
{
    DWORD Size;
    DWORD ResultListCount;
    PACCESS_MASK GrantedAccess;
    PDWORD AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET* Privileges;
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY;
#line 7866 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;
#line 7934 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_ELEVATION_TYPE {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull,
    TokenElevationTypeLimited,
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;






typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    MaxTokenInfoClass
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;






typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;

typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;



    SID_AND_ATTRIBUTES Groups[1];

} TOKEN_GROUPS, *PTOKEN_GROUPS;


typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;


typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;


typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;

typedef struct _TOKEN_LINKED_TOKEN {
    HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN;

typedef struct _TOKEN_ELEVATION {
    DWORD TokenIsElevated;
} TOKEN_ELEVATION, *PTOKEN_ELEVATION;

typedef struct _TOKEN_MANDATORY_LABEL {
    SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL;
#line 8060 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _TOKEN_MANDATORY_POLICY {
    DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;

typedef struct _TOKEN_ACCESS_INFORMATION {
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    DWORD Flags;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;







typedef struct _TOKEN_AUDIT_POLICY {
    BYTE PerUserPolicy[(((53)) >> 1) + 1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;



typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;


typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;



typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;

typedef struct _TOKEN_ORIGIN {
    LUID OriginatingLogonSession ;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN ;


typedef enum _MANDATORY_LEVEL {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow,
    MandatoryLevelMedium,
    MandatoryLevelHigh,
    MandatoryLevelSystem,
    MandatoryLevelSecureProcess,
    MandatoryLevelCount
} MANDATORY_LEVEL, *PMANDATORY_LEVEL;
#line 8140 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;






typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;
#line 8246 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _JOB_SET_ARRAY {
    HANDLE JobHandle;
    DWORD MemberLevel;
    DWORD Flags;
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;




typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;

    union {
        PVOID FiberData;
        DWORD Version;
    };



    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;




typedef struct _NT_TIB32 {
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;


    union {
        DWORD FiberData;
        DWORD Version;
    };




    DWORD ArbitraryUserPointer;
    DWORD Self;
} NT_TIB32, *PNT_TIB32;

typedef struct _NT_TIB64 {
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;


    union {
        DWORD64 FiberData;
        DWORD Version;
    };





    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
} NT_TIB64, *PNT_TIB64;
#line 8322 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {
    DWORD UmsVersion;
        PVOID UmsContext;
        PVOID UmsCompletionList;
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES;

typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;







typedef union _RATE_QUOTA_LIMIT {
    DWORD RateData;
    struct {
        DWORD RatePercent : 7;
        DWORD Reserved0 : 25;
    } ;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;

typedef struct _IO_COUNTERS {
    ULONGLONG ReadOperationCount;
    ULONGLONG WriteOperationCount;
    ULONGLONG OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;




typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter,
    MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;

typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;





typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags ;
    HANDLE JobToken ;
    PTOKEN_GROUPS SidsToDisable ;
    PTOKEN_PRIVILEGES PrivilegesToDelete ;
    PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_JOBSET_INFORMATION {
    DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;
#line 8536 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    JobObjectGroupInformation,
    MaxJobObjectInfoClass
    } JOBOBJECTINFOCLASS;
#line 8579 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache,
    RelationProcessorPackage,
    RelationGroup,
    RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;



typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;



typedef struct _CACHE_DESCRIPTOR {
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG_PTR ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union {
        struct {
            BYTE Flags;
        } ProcessorCore;
        struct {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG Reserved[2];
    } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

typedef struct _PROCESSOR_RELATIONSHIP {
    BYTE Flags;
    BYTE Reserved[21];
    WORD GroupCount;
                               GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;

typedef struct _NUMA_NODE_RELATIONSHIP {
    DWORD NodeNumber;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;

typedef struct _CACHE_RELATIONSHIP {
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;

typedef struct _PROCESSOR_GROUP_INFO {
    BYTE MaximumProcessorCount;
    BYTE ActiveProcessorCount;
    BYTE Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;

typedef struct _GROUP_RELATIONSHIP {
    WORD MaximumGroupCount;
    WORD ActiveGroupCount;
    BYTE Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;

                      struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } ;
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;



typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
    DWORD64 CycleTime;
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
#line 8755 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _XSTATE_FEATURE {
    DWORD Offset;
    DWORD Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;

typedef struct _XSTATE_CONFIGURATION {

    DWORD64 EnabledFeatures;


    DWORD Size;

    DWORD OptimizedSave : 1;


    XSTATE_FEATURE Features[64];

} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;


typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

typedef struct _MEMORY_BASIC_INFORMATION32 {
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;

typedef struct __declspec(align(16)) _MEMORY_BASIC_INFORMATION64 {
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD AllocationProtect;
    DWORD __alignment1;
    ULONGLONG RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
    DWORD __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;
#line 8979 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;






typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;
#line 9004 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD ReparseTag;
    WORD ReparseDataLength;
    WORD Reserved;
    GUID ReparseGuid;
    struct {
        BYTE DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;
#line 9116 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_MAX_POWER_SAVINGS;






extern "C" const GUID GUID_MIN_POWER_SAVINGS;






extern "C" const GUID GUID_TYPICAL_POWER_SAVINGS;







extern "C" const GUID NO_SUBGROUP_GUID;







extern "C" const GUID ALL_POWERSCHEMES_GUID;
#line 9183 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_POWERSCHEME_PERSONALITY;
#line 9192 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_ACTIVE_POWERSCHEME;
#line 9206 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_VIDEO_SUBGROUP;





extern "C" const GUID GUID_VIDEO_POWERDOWN_TIMEOUT;





extern "C" const GUID GUID_VIDEO_ANNOYANCE_TIMEOUT;





extern "C" const GUID GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;





extern "C" const GUID GUID_VIDEO_DIM_TIMEOUT;





extern "C" const GUID GUID_VIDEO_ADAPTIVE_POWERDOWN;





extern "C" const GUID GUID_MONITOR_POWER_ON;




extern "C" const GUID GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;





extern "C" const GUID GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;




extern "C" const GUID GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;






extern "C" const GUID GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;
#line 9274 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_SESSION_DISPLAY_STATE;





extern "C" const GUID GUID_CONSOLE_DISPLAY_STATE;







extern "C" const GUID GUID_ALLOW_DISPLAY_REQUIRED;







extern "C" const GUID GUID_DISK_SUBGROUP;





extern "C" const GUID GUID_DISK_POWERDOWN_TIMEOUT;
#line 9311 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_DISK_BURST_IGNORE_THRESHOLD;





extern "C" const GUID GUID_DISK_ADAPTIVE_POWERDOWN;
#line 9326 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_SLEEP_SUBGROUP;







extern "C" const GUID GUID_SLEEP_IDLE_THRESHOLD;





extern "C" const GUID GUID_STANDBY_TIMEOUT;
#line 9349 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_UNATTEND_SLEEP_TIMEOUT;





extern "C" const GUID GUID_HIBERNATE_TIMEOUT;





extern "C" const GUID GUID_HIBERNATE_FASTS4_POLICY;
#line 9370 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_CRITICAL_POWER_TRANSITION;





extern "C" const GUID GUID_SYSTEM_AWAYMODE;





extern "C" const GUID GUID_ALLOW_AWAYMODE;







extern "C" const GUID GUID_ALLOW_STANDBY_STATES;






extern "C" const GUID GUID_ALLOW_RTC_WAKE;







extern "C" const GUID GUID_ALLOW_SYSTEM_REQUIRED;
#line 9414 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_SYSTEM_BUTTON_SUBGROUP;




extern "C" const GUID GUID_POWERBUTTON_ACTION;
extern "C" const GUID GUID_POWERBUTTON_ACTION_FLAGS;





extern "C" const GUID GUID_SLEEPBUTTON_ACTION;
extern "C" const GUID GUID_SLEEPBUTTON_ACTION_FLAGS;






extern "C" const GUID GUID_USERINTERFACEBUTTON_ACTION;





extern "C" const GUID GUID_LIDCLOSE_ACTION;
extern "C" const GUID GUID_LIDCLOSE_ACTION_FLAGS;
extern "C" const GUID GUID_LIDOPEN_POWERSTATE;
#line 9451 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_BATTERY_SUBGROUP;
#line 9463 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_0;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_0;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_0;

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_1;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_1;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_1;

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_2;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_2;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_2;

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_3;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_3;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_3;
#line 9486 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_SETTINGS_SUBGROUP;





extern "C" const GUID GUID_PROCESSOR_THROTTLE_POLICY;
#line 9505 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM;







extern "C" const GUID GUID_PROCESSOR_THROTTLE_MINIMUM;







extern "C" const GUID GUID_PROCESSOR_ALLOW_THROTTLING;





extern "C" const GUID GUID_PROCESSOR_IDLESTATE_POLICY;





extern "C" const GUID GUID_PROCESSOR_PERFSTATE_POLICY;







extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY;







extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY;
#line 9574 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_TIME;
#line 9583 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_TIME;







extern "C" const GUID GUID_PROCESSOR_PERF_TIME_CHECK;







extern "C" const GUID GUID_PROCESSOR_PERF_BOOST_POLICY;
#line 9611 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING;






extern "C" const GUID GUID_PROCESSOR_IDLE_DISABLE;
#line 9627 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_IDLE_TIME_CHECK;
#line 9636 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
#line 9677 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE;







extern "C" const GUID GUID_PROCESSOR_PARKING_PERF_STATE;






extern "C" const GUID GUID_PROCESSOR_PERF_HISTORY;







extern "C" const GUID GUID_SYSTEM_COOLING_POLICY;
#line 9795 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_LOCK_CONSOLE_ON_WAKE;
#line 9805 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_DEVICE_IDLE_POLICY;
#line 9826 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_ACDC_POWER_SOURCE;
#line 9842 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_LIDSWITCH_STATE_CHANGE;
#line 9859 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_BATTERY_PERCENTAGE_REMAINING;






extern "C" const GUID GUID_IDLE_BACKGROUND_TASK;






extern "C" const GUID GUID_BACKGROUND_TASK_NOTIFICATION;







extern "C" const GUID GUID_APPLAUNCH_BUTTON;
#line 9892 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP;





extern "C" const GUID GUID_PCIEXPRESS_ASPM_POLICY;
#line 9910 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;


typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;



typedef enum {
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject
} POWER_ACTION, *PPOWER_ACTION;

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0,
    PowerMonitorOn,
    PowerMonitorDim
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;
#line 9959 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;
#line 9992 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;
#line 10019 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct CM_Power_Data_s {
    DWORD PD_Size;
    DEVICE_POWER_STATE PD_MostRecentPowerState;
    DWORD PD_Capabilities;
    DWORD PD_D1Latency;
    DWORD PD_D2Latency;
    DWORD PD_D3Latency;
    DEVICE_POWER_STATE PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;





typedef enum {
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,
    LastSleepTime,
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry,
    SetPowerSettingValue,
    NotifyUserPowerSetting,
    PowerInformationLevelUnused0,
    PowerInformationLevelUnused1,
    SystemVideoState,
    TraceApplicationPowerMessage,
    TraceApplicationPowerMessageEnd,
    ProcessorPerfStates,
    ProcessorIdleStates,
    ProcessorCap,
    SystemWakeSource,
    SystemHiberFileInformation,
    TraceServicePowerMessage,
    ProcessorLoad,
    PowerShutdownNotification,
    MonitorCapabilities,
    SessionPowerInit,
    SessionDisplayState,
    PowerRequestCreate,
    PowerRequestAction,
    GetPowerRequestList,
    ProcessorInformationEx,
    NotifyUserModeLegacyPowerEvent,
    GroupPark,
    ProcessorIdleDomains,
    WakeTimerList,
    SystemHiberFileSize,
    PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;





typedef enum {
    PoAc,
    PoDc,
    PoHot,
    PoConditionMaximum
} SYSTEM_POWER_CONDITION;

typedef struct {





    DWORD Version;





    GUID Guid;






    SYSTEM_POWER_CONDITION PowerCondition;




    DWORD DataLength;




    BYTE Data[1];
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;



typedef struct {
    GUID Guid;
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;






typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {





    LARGE_INTEGER ActivationTime;




    DWORD Flags;




    DWORD ButtonInstanceID;


} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;





typedef enum {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop,
    PlatformRoleMobile,
    PlatformRoleWorkstation,
    PlatformRoleEnterpriseServer,
    PlatformRoleSOHOServer,
    PlatformRoleAppliancePC,
    PlatformRolePerformanceServer,
    PlatformRoleMaximum
} POWER_PLATFORM_ROLE;






typedef struct {
    DWORD Granularity;
    DWORD Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;




typedef struct {
    DWORD Frequency;
    DWORD Flags;
    DWORD PercentFrequency;
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE;

typedef struct {
    DWORD Latency;
    DWORD Power;
    DWORD TimeCheck;
    BYTE PromotePercent;
    BYTE DemotePercent;
    BYTE StateType;
    BYTE Reserved;
    DWORD StateFlags;
    DWORD Context;
    DWORD IdleHandler;
    DWORD Reserved1;
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    DWORD64 TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    PVOID TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES_EX, *PPPM_WMI_IDLE_STATES_EX;

typedef struct {
    DWORD Frequency;
    DWORD Power;
    BYTE PercentFrequency;
    BYTE IncreaseLevel;
    BYTE DecreaseLevel;
    BYTE Type;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD64 Control;
    DWORD64 Status;
    DWORD HitCount;
    DWORD Reserved1;
    DWORD64 Reserved2;
    DWORD64 Reserved3;
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    DWORD64 TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    PVOID TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES_EX, *PPPM_WMI_PERF_STATES_EX;







typedef struct {
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD64 TotalTime;
    DWORD IdleTimeBuckets[6];
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING State[1];
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;







typedef struct {
    DWORD64 TotalTimeUs;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD Count;
} PPM_IDLE_STATE_BUCKET_EX, *PPPM_IDLE_STATE_BUCKET_EX;

typedef struct {
    DWORD64 TotalTime;
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
} PPM_IDLE_STATE_ACCOUNTING_EX, *PPPM_IDLE_STATE_ACCOUNTING_EX;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
                               PPM_IDLE_STATE_ACCOUNTING_EX State[1];
} PPM_IDLE_ACCOUNTING_EX, *PPPM_IDLE_ACCOUNTING_EX;
#line 10391 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
extern "C" const GUID PPM_PERFSTATE_CHANGE_GUID;



extern "C" const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID;



extern "C" const GUID PPM_IDLESTATE_CHANGE_GUID;



extern "C" const GUID PPM_PERFSTATES_DATA_GUID;



extern "C" const GUID PPM_IDLESTATES_DATA_GUID;



extern "C" const GUID PPM_IDLE_ACCOUNTING_GUID;



extern "C" const GUID PPM_IDLE_ACCOUNTING_EX_GUID;



extern "C" const GUID PPM_THERMALCONSTRAINT_GUID;



extern "C" const GUID PPM_PERFMON_PERFSTATE_GUID;



extern "C" const GUID PPM_THERMAL_POLICY_CHANGE_GUID;



typedef struct {
    DWORD State;
    DWORD Status;
    DWORD Latency;
    DWORD Speed;
    DWORD Processor;
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT;

typedef struct {
    DWORD State;
    DWORD Latency;
    DWORD Speed;
    DWORD64 Processors;
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT;

typedef struct {
    DWORD NewState;
    DWORD OldState;
    DWORD64 Processors;
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT;

typedef struct {
    DWORD ThermalConstraint;
    DWORD64 Processors;
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT;

#pragma warning(push)
#pragma warning(disable:4121)

typedef struct {
    BYTE Mode;
    DWORD64 Processors;
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT;

#pragma warning(pop)




typedef struct {
    POWER_ACTION Action;
    DWORD Flags;
    DWORD EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;
#line 10506 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct {
    BOOLEAN Enable;
    BYTE Spare[3];
    DWORD BatteryLevel;
    POWER_ACTION_POLICY PowerPolicy;
    SYSTEM_POWER_STATE MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;
#line 10521 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _SYSTEM_POWER_POLICY {
    DWORD Revision;


    POWER_ACTION_POLICY PowerButton;
    POWER_ACTION_POLICY SleepButton;
    POWER_ACTION_POLICY LidClose;
    SYSTEM_POWER_STATE LidOpenWake;
    DWORD Reserved;


    POWER_ACTION_POLICY Idle;
    DWORD IdleTimeout;
    BYTE IdleSensitivity;

    BYTE DynamicThrottle;
    BYTE Spare2[2];


    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    SYSTEM_POWER_STATE ReducedLatencySleep;
    DWORD WinLogonFlags;

    DWORD Spare3;



    DWORD DozeS4Timeout;


    DWORD BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL DischargePolicy[4];


    DWORD VideoTimeout;
    BOOLEAN VideoDimDisplay;
    DWORD VideoReserved[3];


    DWORD SpindownTimeout;


    BOOLEAN OptimizeForPower;
    BYTE FanThrottleTolerance;
    BYTE ForcedThrottle;
    BYTE MinThrottle;
    POWER_ACTION_POLICY OverThrottled;

} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;
#line 10581 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct {
    DWORD TimeCheck;
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;

typedef struct {
    WORD Revision;
    union {
        WORD AsWORD ;
        struct {
            WORD AllowScaling : 1;
            WORD Disabled : 1;
            WORD Reserved : 14;
        } ;
    } Flags;

    DWORD PolicyCount;
    PROCESSOR_IDLESTATE_INFO Policy[0x3];
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;
#line 10616 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _PROCESSOR_POWER_POLICY_INFO {


    DWORD TimeCheck;
    DWORD DemoteLimit;
    DWORD PromoteLimit;


    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];


    DWORD AllowDemotion:1;
    DWORD AllowPromotion:1;
    DWORD Reserved:30;

} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;


typedef struct _PROCESSOR_POWER_POLICY {
    DWORD Revision;


    BYTE DynamicThrottle;
    BYTE Spare[3];


    DWORD DisableCStates:1;
    DWORD Reserved:31;




    DWORD PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];

} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;





typedef struct {
    DWORD Revision;
    BYTE MaxThrottle;
    BYTE MinThrottle;
    BYTE BusyAdjThreshold;
    union {
        BYTE Spare;
        union {
            BYTE AsBYTE ;
            struct {
                BYTE NoDomainAccounting : 1;
                BYTE IncreasePolicy: 2;
                BYTE DecreasePolicy: 2;
                BYTE Reserved : 3;
            } ;
        } Flags;
    } ;

    DWORD TimeCheck;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD IncreasePercent;
    DWORD DecreasePercent;
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;


typedef struct _ADMINISTRATOR_POWER_POLICY {


    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;


    DWORD MinVideoTimeout;
    DWORD MaxVideoTimeout;


    DWORD MinSpindownTimeout;
    DWORD MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;


typedef struct {

    BOOLEAN PowerButtonPresent;
    BOOLEAN SleepButtonPresent;
    BOOLEAN LidPresent;
    BOOLEAN SystemS1;
    BOOLEAN SystemS2;
    BOOLEAN SystemS3;
    BOOLEAN SystemS4;
    BOOLEAN SystemS5;
    BOOLEAN HiberFilePresent;
    BOOLEAN FullWake;
    BOOLEAN VideoDimPresent;
    BOOLEAN ApmPresent;
    BOOLEAN UpsPresent;


    BOOLEAN ThermalControl;
    BOOLEAN ProcessorThrottle;
    BYTE ProcessorMinThrottle;





    BYTE ProcessorMaxThrottle;
    BOOLEAN FastSystemS4;
    BYTE spare2[3];



    BOOLEAN DiskSpinDown;
    BYTE spare3[8];


    BOOLEAN SystemBatteriesPresent;
    BOOLEAN BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];


    SYSTEM_POWER_STATE AcOnLineWake;
    SYSTEM_POWER_STATE SoftLidWake;
    SYSTEM_POWER_STATE RtcWake;
    SYSTEM_POWER_STATE MinDeviceWakeState;
    SYSTEM_POWER_STATE DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;

typedef struct {
    BOOLEAN AcOnLine;
    BOOLEAN BatteryPresent;
    BOOLEAN Charging;
    BOOLEAN Discharging;
    BOOLEAN Spare1[4];

    DWORD MaxCapacity;
    DWORD RemainingCapacity;
    DWORD Rate;
    DWORD EstimatedTime;

    DWORD DefaultAlert1;
    DWORD DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;
#line 10773 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack4.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack4.h"
#pragma warning(disable:4103)

#pragma pack(push,4)
#line 10773 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"








#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack2.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack2.h"
#pragma warning(disable:4103)

#pragma pack(push,2)
#line 10781 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 10793 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _IMAGE_DOS_HEADER {
    WORD e_magic;
    WORD e_cblp;
    WORD e_cp;
    WORD e_crlc;
    WORD e_cparhdr;
    WORD e_minalloc;
    WORD e_maxalloc;
    WORD e_ss;
    WORD e_sp;
    WORD e_csum;
    WORD e_ip;
    WORD e_cs;
    WORD e_lfarlc;
    WORD e_ovno;
    WORD e_res[4];
    WORD e_oemid;
    WORD e_oeminfo;
    WORD e_res2[10];
    LONG e_lfanew;
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {
    WORD ne_magic;
    CHAR ne_ver;
    CHAR ne_rev;
    WORD ne_enttab;
    WORD ne_cbenttab;
    LONG ne_crc;
    WORD ne_flags;
    WORD ne_autodata;
    WORD ne_heap;
    WORD ne_stack;
    LONG ne_csip;
    LONG ne_sssp;
    WORD ne_cseg;
    WORD ne_cmod;
    WORD ne_cbnrestab;
    WORD ne_segtab;
    WORD ne_rsrctab;
    WORD ne_restab;
    WORD ne_modtab;
    WORD ne_imptab;
    LONG ne_nrestab;
    WORD ne_cmovent;
    WORD ne_align;
    WORD ne_cres;
    BYTE ne_exetyp;
    BYTE ne_flagsothers;
    WORD ne_pretthunks;
    WORD ne_psegrefbytes;
    WORD ne_swaparea;
    WORD ne_expver;
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {
    WORD e32_magic;
    BYTE e32_border;
    BYTE e32_worder;
    DWORD e32_level;
    WORD e32_cpu;
    WORD e32_os;
    DWORD e32_ver;
    DWORD e32_mflags;
    DWORD e32_mpages;
    DWORD e32_startobj;
    DWORD e32_eip;
    DWORD e32_stackobj;
    DWORD e32_esp;
    DWORD e32_pagesize;
    DWORD e32_lastpagesize;
    DWORD e32_fixupsize;
    DWORD e32_fixupsum;
    DWORD e32_ldrsize;
    DWORD e32_ldrsum;
    DWORD e32_objtab;
    DWORD e32_objcnt;
    DWORD e32_objmap;
    DWORD e32_itermap;
    DWORD e32_rsrctab;
    DWORD e32_rsrccnt;
    DWORD e32_restab;
    DWORD e32_enttab;
    DWORD e32_dirtab;
    DWORD e32_dircnt;
    DWORD e32_fpagetab;
    DWORD e32_frectab;
    DWORD e32_impmod;
    DWORD e32_impmodcnt;
    DWORD e32_impproc;
    DWORD e32_pagesum;
    DWORD e32_datapage;
    DWORD e32_preload;
    DWORD e32_nrestab;
    DWORD e32_cbnrestab;
    DWORD e32_nressum;
    DWORD e32_autodata;
    DWORD e32_debuginfo;
    DWORD e32_debuglen;
    DWORD e32_instpreload;
    DWORD e32_instdemand;
    DWORD e32_heapsize;
    BYTE e32_res3[12];
    DWORD e32_winresoff;
    DWORD e32_winreslen;
    WORD e32_devid;
    WORD e32_ddkver;
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;



#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 10903 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"







typedef struct _IMAGE_FILE_HEADER {
    WORD Machine;
    WORD NumberOfSections;
    DWORD TimeDateStamp;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
    WORD SizeOfOptionalHeader;
    WORD Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
#line 10972 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD VirtualAddress;
    DWORD Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {




    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;





    DWORD ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    DWORD SizeOfStackReserve;
    DWORD SizeOfStackCommit;
    DWORD SizeOfHeapReserve;
    DWORD SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD BaseOfBss;
    DWORD GprMask;
    DWORD CprMask[4];
    DWORD GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    ULONGLONG ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    ULONGLONG SizeOfStackReserve;
    ULONGLONG SizeOfStackCommit;
    ULONGLONG SizeOfHeapReserve;
    ULONGLONG SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;
#line 11084 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;



typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;





typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
#line 11179 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct ANON_OBJECT_HEADER {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
} ANON_OBJECT_HEADER;

typedef struct ANON_OBJECT_HEADER_V2 {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;
} ANON_OBJECT_HEADER_V2;

typedef struct ANON_OBJECT_HEADER_BIGOBJ {

    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;


    DWORD NumberOfSections;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
} ANON_OBJECT_HEADER_BIGOBJ;







typedef struct _IMAGE_SECTION_HEADER {
    BYTE Name[8];
    union {
            DWORD PhysicalAddress;
            DWORD VirtualSize;
    } Misc;
    DWORD VirtualAddress;
    DWORD SizeOfRawData;
    DWORD PointerToRawData;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
#line 11307 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack2.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack2.h"
#pragma warning(disable:4103)

#pragma pack(push,2)
#line 11307 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"







typedef struct _IMAGE_SYMBOL {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    SHORT SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;



typedef struct _IMAGE_SYMBOL_EX {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    LONG SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX;
typedef IMAGE_SYMBOL_EX *PIMAGE_SYMBOL_EX;
#line 11470 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack2.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack2.h"
#pragma warning(disable:4103)

#pragma pack(push,2)
#line 11470 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"


typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    BYTE bAuxType;
    BYTE bReserved;
    DWORD SymbolTableIndex;
    BYTE rgbReserved[12];
} IMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF;


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 11481 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"






typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD TagIndex;
        union {
            struct {
                WORD Linenumber;
                WORD Size;
            } LnSz;
           DWORD TotalSize;
        } Misc;
        union {
            struct {
                DWORD PointerToLinenumber;
                DWORD PointerToNextFunction;
            } Function;
            struct {
                WORD Dimension[4];
            } Array;
        } FcnAry;
        WORD TvIndex;
    } Sym;
    struct {
        BYTE Name[18];
    } File;
    struct {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
 BYTE bReserved;
 SHORT HighNumber;
    } Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct {
        DWORD crc;
        BYTE rgbReserved[14];
    } CRC;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;

typedef union _IMAGE_AUX_SYMBOL_EX {
    struct {
        DWORD WeakDefaultSymIndex;
        DWORD WeakSearchType;
        BYTE rgbReserved[12];
    } Sym;
    struct {
        BYTE Name[sizeof(IMAGE_SYMBOL_EX)];
    } File;
    struct {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
        BYTE bReserved;
        SHORT HighNumber;
        BYTE rgbReserved[2];
    } Section;
    struct{
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        BYTE rgbReserved[2];
    };
    struct {
        DWORD crc;
        BYTE rgbReserved[16];
    } CRC;
} IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX *PIMAGE_AUX_SYMBOL_EX;

typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;
#line 11585 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _IMAGE_RELOCATION {
    union {
        DWORD VirtualAddress;
        DWORD RelocCount;
    } ;
    DWORD SymbolTableIndex;
    WORD Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION *PIMAGE_RELOCATION;
#line 11956 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD SymbolTableIndex;
        DWORD VirtualAddress;
    } Type;
    WORD Linenumber;
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;



#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 11966 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"







typedef struct _IMAGE_BASE_RELOCATION {
    DWORD VirtualAddress;
    DWORD SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION * PIMAGE_BASE_RELOCATION;
#line 12006 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE Name[16];
    BYTE Date[12];
    BYTE UserID[6];
    BYTE GroupID[6];
    BYTE Mode[8];
    BYTE Size[10];
    BYTE EndHeader[2];
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;
#line 12026 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Name;
    DWORD Base;
    DWORD NumberOfFunctions;
    DWORD NumberOfNames;
    DWORD AddressOfFunctions;
    DWORD AddressOfNames;
    DWORD AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD Hint;
    BYTE Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack8.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack8.h"
#pragma warning(disable:4103)

#pragma pack(push,8)
#line 12049 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"


typedef struct _IMAGE_THUNK_DATA64 {
    union {
        ULONGLONG ForwarderString;
        ULONGLONG Function;
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 12061 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"


typedef struct _IMAGE_THUNK_DATA32 {
    union {
        DWORD ForwarderString;
        DWORD Function;
        DWORD Ordinal;
        DWORD AddressOfData;
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;
#line 12084 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;
    ULONGLONG AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    DWORD Characteristics;
} IMAGE_TLS_DIRECTORY64;
typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD StartAddressOfRawData;
    DWORD EndAddressOfRawData;
    DWORD AddressOfIndex;
    DWORD AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    DWORD Characteristics;
} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;
#line 12122 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;


typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD Characteristics;
        DWORD OriginalFirstThunk;
    } ;
    DWORD TimeDateStamp;




    DWORD ForwarderChain;
    DWORD Name;
    DWORD FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;
#line 12180 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    WORD NumberOfNamedEntries;
    WORD NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;
#line 12207 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        } ;
        DWORD Name;
        WORD Id;
    } ;
    union {
        DWORD OffsetToData;
        struct {
            DWORD OffsetToDirectory:31;
            DWORD DataIsDirectory:1;
        } ;
    } ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
#line 12234 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD Length;
    CHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD Length;
    WCHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;
#line 12255 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD OffsetToData;
    DWORD Size;
    DWORD CodePage;
    DWORD Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;





typedef struct {
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    DWORD DeCommitFreeBlockThreshold;
    DWORD DeCommitTotalFreeThreshold;
    DWORD LockPrefixTable;
    DWORD MaximumAllocationSize;
    DWORD VirtualMemoryThreshold;
    DWORD ProcessHeapFlags;
    DWORD ProcessAffinityMask;
    WORD CSDVersion;
    WORD Reserved1;
    DWORD EditList;
    DWORD SecurityCookie;
    DWORD SEHandlerTable;
    DWORD SEHandlerCount;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct {
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    ULONGLONG DeCommitFreeBlockThreshold;
    ULONGLONG DeCommitTotalFreeThreshold;
    ULONGLONG LockPrefixTable;
    ULONGLONG MaximumAllocationSize;
    ULONGLONG VirtualMemoryThreshold;
    ULONGLONG ProcessAffinityMask;
    DWORD ProcessHeapFlags;
    WORD CSDVersion;
    WORD Reserved1;
    ULONGLONG EditList;
    ULONGLONG SecurityCookie;
    ULONGLONG SEHandlerTable;
    ULONGLONG SEHandlerCount;
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;





typedef IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32 PIMAGE_LOAD_CONFIG_DIRECTORY;
#line 12329 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD UnwindInfoAddress;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
#line 12376 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;







typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Type;
    DWORD SizeOfData;
    DWORD AddressOfRawData;
    DWORD PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;
#line 12410 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD NumberOfSymbols;
    DWORD LvaToFirstSymbol;
    DWORD NumberOfLinenumbers;
    DWORD LvaToFirstLinenumber;
    DWORD RvaToFirstByteOfCode;
    DWORD RvaToLastByteOfCode;
    DWORD RvaToFirstByteOfData;
    DWORD RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    DWORD ulOffStart;
    DWORD cbProcSize;
    DWORD cdwLocals;
    WORD cdwParams;
    WORD cbProlog : 8;
    WORD cbRegs : 3;
    WORD fHasSEH : 1;
    WORD fUseBP : 1;
    WORD reserved : 1;
    WORD cbFrame : 2;
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    DWORD DataType;
    DWORD Length;

    BOOLEAN Unicode;
    BYTE Reserved[ 3 ];
    BYTE Data[ 1 ];
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;
#line 12459 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD StartingAddress;
    DWORD EndingAddress;
    DWORD EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG StartingAddress;
    ULONGLONG EndingAddress;
    union {
        ULONGLONG EndOfPrologue;
        ULONGLONG UnwindInfoAddress;
    } ;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;
#line 12494 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD Signature;
    WORD Flags;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;
    DWORD NumberOfSections;
    DWORD ExportedNamesSize;
    DWORD DebugDirectorySize;
    DWORD SectionAlignment;
    DWORD Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;

typedef struct _NON_PAGED_DEBUG_INFO {
    WORD Signature;
    WORD Flags;
    DWORD Size;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD SizeOfImage;
    ULONGLONG ImageBase;


} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;
#line 12544 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1;

    int :7;
    unsigned int AmaskShift: 8;
    int :16;
    DWORD FirstEntryRVA;
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA;
    DWORD NewInst;
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 12558 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 12567 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct IMPORT_OBJECT_HEADER {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    DWORD SizeOfData;

    union {
        WORD Ordinal;
        WORD Hint;
    } ;

    WORD Type : 2;
    WORD NameType : 3;
    WORD Reserved : 11;
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,
    IMPORT_OBJECT_NAME = 1,
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,
    IMPORT_OBJECT_NAME_UNDECORATE = 3,

} IMPORT_OBJECT_NAME_TYPE;





typedef enum ReplacesCorHdrNumericDefines
{

    COMIMAGE_FLAGS_ILONLY =0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED =0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY =0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED =0x00000008,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT =0x00000010,
    COMIMAGE_FLAGS_TRACKDEBUGDATA =0x00010000,


    COR_VERSION_MAJOR_V2 =2,
    COR_VERSION_MAJOR =COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR =0,
    COR_DELETED_NAME_LENGTH =8,
    COR_VTABLEGAP_NAME_LENGTH =8,


    NATIVE_TYPE_MAX_CB =1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,


    IMAGE_COR_MIH_METHODRVA =0x01,
    IMAGE_COR_MIH_EHRVA =0x02,
    IMAGE_COR_MIH_BASICBLOCK =0x08,


    COR_VTABLE_32BIT =0x01,
    COR_VTABLE_64BIT =0x02,
    COR_VTABLE_FROM_UNMANAGED =0x04,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN =0x08,
    COR_VTABLE_CALL_MOST_DERIVED =0x10,


    IMAGE_COR_EATJ_THUNK_SIZE =32,



    MAX_CLASS_NAME =1024,
    MAX_PACKAGE_NAME =1024,
} ReplacesCorHdrNumericDefines;


typedef struct IMAGE_COR20_HEADER
{

    DWORD cb;
    WORD MajorRuntimeVersion;
    WORD MinorRuntimeVersion;


    IMAGE_DATA_DIRECTORY MetaData;
    DWORD Flags;



    union {
        DWORD EntryPointToken;
        DWORD EntryPointRVA;
    } ;


    IMAGE_DATA_DIRECTORY Resources;
    IMAGE_DATA_DIRECTORY StrongNameSignature;


    IMAGE_DATA_DIRECTORY CodeManagerTable;
    IMAGE_DATA_DIRECTORY VTableFixups;
    IMAGE_DATA_DIRECTORY ExportAddressTableJumps;


    IMAGE_DATA_DIRECTORY ManagedNativeHeader;

} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;
#line 12730 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef SINGLE_LIST_ENTRY SLIST_ENTRY32, *PSLIST_ENTRY32;
#line 12778 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct {
        SINGLE_LIST_ENTRY Next;
        WORD Depth;
        WORD Sequence;
    } ;
} SLIST_HEADER, *PSLIST_HEADER;

typedef SLIST_HEADER SLIST_HEADER32, *PSLIST_HEADER32;






__declspec(dllimport)
void
__stdcall
RtlInitializeSListHead (
          PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
RtlFirstEntrySList (
         const SLIST_HEADER *ListHead
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
RtlInterlockedPopEntrySList (
            PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
RtlInterlockedPushEntrySList (
            PSLIST_HEADER ListHead,
                             PSINGLE_LIST_ENTRY ListEntry
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
RtlInterlockedFlushSList (
            PSLIST_HEADER ListHead
    );

__declspec(dllimport)
WORD
__stdcall
RtlQueryDepthSList (
         PSLIST_HEADER ListHead
    );
#line 12875 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef union _RTL_RUN_ONCE {
    PVOID Ptr;
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;

typedef


DWORD
__stdcall
RTL_RUN_ONCE_INIT_FN (
            PRTL_RUN_ONCE RunOnce,
                PVOID Parameter,
                          PVOID *Context
    );
typedef RTL_RUN_ONCE_INIT_FN *PRTL_RUN_ONCE_INIT_FN;






__declspec(dllimport)
void
__stdcall
RtlRunOnceInitialize (
          PRTL_RUN_ONCE RunOnce
    );



__declspec(dllimport)
DWORD
__stdcall
RtlRunOnceExecuteOnce (
            PRTL_RUN_ONCE RunOnce,
                    PRTL_RUN_ONCE_INIT_FN InitFn,
                PVOID Parameter,
                        PVOID *Context
    );



__declspec(dllimport)
DWORD
__stdcall
RtlRunOnceBeginInitialize (
            PRTL_RUN_ONCE RunOnce,
         DWORD Flags,
                        PVOID *Context
    );


__declspec(dllimport)
DWORD
__stdcall
RtlRunOnceComplete (
            PRTL_RUN_ONCE RunOnce,
         DWORD Flags,
             PVOID Context
    );
#line 12953 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
__forceinline
DWORD
HEAP_MAKE_TAG_FLAGS (
         DWORD TagBase,
         DWORD Tag
    )

{
#pragma warning(push)
#line 12961 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#pragma warning(disable : 4548)
#line 12961 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
 do {__noop(TagBase);} while((0,0)
#line 12961 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#pragma warning(pop)
#line 12961 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
 );
    return ((DWORD)((TagBase) + ((Tag) << 18)));
}



__declspec(dllimport)
WORD
__stdcall
RtlCaptureStackBackTrace(
         DWORD FramesToSkip,
         DWORD FramesToCapture,
                                  PVOID *BackTrace,
              PDWORD BackTraceHash
   );



__declspec(dllimport)
void
__stdcall
RtlCaptureContext (
          PCONTEXT ContextRecord
    );
#line 13043 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
__declspec(dllimport)
SIZE_T
__stdcall
RtlCompareMemory (
         const void *Source1,
         const void *Source2,
         SIZE_T Length
    );
#line 13063 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
__forceinline
PVOID
RtlSecureZeroMemory(
                           PVOID ptr,
         SIZE_T cnt
    )
{
    volatile char *vptr = (volatile char *)ptr;







    while (cnt) {
        *vptr = 0;
        vptr++;
        cnt--;
    }



    return ptr;
}
#line 13109 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD Length;
    WORD Flags;
    BYTE Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;


__declspec(dllimport)
PVOID
__stdcall
RtlPcToFileHeader(
         PVOID PcValue,
          PVOID *BaseOfImage
    );

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[ 128 ];
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[ 128 ];
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;





typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;


typedef struct _OSVERSIONINFOEXA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[ 128 ];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[ 128 ];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;





typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
#line 13258 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
         ULONGLONG ConditionMask,
         DWORD TypeMask,
         BYTE Condition
    );






__declspec(dllimport)
BOOLEAN
__stdcall
RtlGetProductInfo(
          DWORD OSMajorVersion,
          DWORD OSMinorVersion,
          DWORD SpMajorVersion,
          DWORD SpMinorVersion,
          PDWORD ReturnedProductType
    );





typedef enum _RTL_UMS_THREAD_INFO_CLASS {
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext,
    UmsThreadPriority,
    UmsThreadAffinity,
    UmsThreadTeb,
    UmsThreadIsSuspended,
    UmsThreadIsTerminated,
    UmsThreadMaxInfoClass
} RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON {
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked,
    UmsSchedulerThreadYield,
} RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON;

typedef

void
__stdcall
RTL_UMS_SCHEDULER_ENTRY_POINT(
         RTL_UMS_SCHEDULER_REASON Reason,
         ULONG_PTR ActivationPayload,
         PVOID SchedulerParam
    );

typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;





__declspec(dllimport)
DWORD
__stdcall
RtlCopyExtendedContext (
          PCONTEXT_EX Destination,
         DWORD ContextFlags,
         PCONTEXT_EX Source
    );

__declspec(dllimport)
DWORD
__stdcall
RtlInitializeExtendedContext (
          PVOID Context,
         DWORD ContextFlags,
          PCONTEXT_EX* ContextEx
    );

__declspec(dllimport)
DWORD64
__stdcall
RtlGetEnabledExtendedFeatures (
         DWORD64 FeatureMask
    );


__declspec(dllimport)
DWORD
__stdcall
RtlGetExtendedContextLength (
         DWORD ContextFlags,
          PDWORD ContextLength
    );

__declspec(dllimport)
DWORD64
__stdcall
RtlGetExtendedFeaturesMask (
         PCONTEXT_EX ContextEx
    );

__declspec(dllimport)
PVOID
__stdcall
RtlLocateExtendedFeature (
         PCONTEXT_EX ContextEx,
         DWORD FeatureId,
              PDWORD Length
    );

__declspec(dllimport)
PCONTEXT
__stdcall
RtlLocateLegacyContext (
         PCONTEXT_EX ContextEx,
              PDWORD Length
    );

__declspec(dllimport)
void
__stdcall
RtlSetExtendedFeaturesMask (
          PCONTEXT_EX ContextEx,
         DWORD64 FeatureMask
    );




typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD Type;
    WORD CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD CreatorBackTraceIndexHigh;
    WORD SpareWORD ;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;
#line 13418 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#pragma pack(push, 8)

typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;






    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

#pragma pack(pop)

typedef struct _RTL_SRWLOCK {
        PVOID Ptr;
} RTL_SRWLOCK, *PRTL_SRWLOCK;

typedef struct _RTL_CONDITION_VARIABLE {
        PVOID Ptr;
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;


typedef
void
(__stdcall *PAPCFUNC)(
         ULONG_PTR Parameter
    );
typedef LONG (__stdcall *PVECTORED_EXCEPTION_HANDLER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef enum _HEAP_INFORMATION_CLASS {

    HeapCompatibilityInformation,
    HeapEnableTerminationOnCorruption


} HEAP_INFORMATION_CLASS;
#line 13475 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef void (__stdcall * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );
typedef void (__stdcall * WORKERCALLBACKFUNC) (PVOID );
typedef void (__stdcall * APC_CALLBACK_FUNCTION) (DWORD , PVOID, PVOID);
typedef
void
(__stdcall *PFLS_CALLBACK_FUNCTION) (
       PVOID lpFlsData
    );

typedef
BOOLEAN
(__stdcall *PSECURE_MEMORY_CACHE_CALLBACK) (
                       PVOID Addr,
         SIZE_T Range
    );




typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation = 1,
    ActivationContextDetailedInformation = 2,
    AssemblyDetailedInformationInActivationContext = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext = 4,
    RunlevelInformationInActivationContext = 5,
    CompatibilityInformationInActivationContext = 6,
    ActivationContextManifestResourceName = 7,
    MaxActivationContextInfoClass,




    AssemblyDetailedInformationInActivationContxt = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt = 4
} ACTIVATION_CONTEXT_INFO_CLASS;




typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, * PACTIVATION_CONTEXT_QUERY_INDEX;

typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX * PCACTIVATION_CONTEXT_QUERY_INDEX;







typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;

    PCWSTR lpFileName;
    PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;
#line 13546 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;
    DWORD ulManifestPathType;
    DWORD ulManifestPathLength;
    LARGE_INTEGER liManifestLastWriteTime;
    DWORD ulPolicyPathType;
    DWORD ulPolicyPathLength;
    LARGE_INTEGER liPolicyLastWriteTime;
    DWORD ulMetadataSatelliteRosterIndex;

    DWORD ulManifestVersionMajor;
    DWORD ulManifestVersionMinor;
    DWORD ulPolicyVersionMajor;
    DWORD ulPolicyVersionMinor;
    DWORD ulAssemblyDirectoryNameLength;

    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;

    DWORD ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION * PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ;

typedef enum
{
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
    ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL;

typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
    DWORD UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, * PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION * PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ;

typedef enum
{
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT;

typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;

#pragma warning(push)
#pragma warning(disable:4200)

typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
    DWORD ElementCount;
    COMPATIBILITY_CONTEXT_ELEMENT Elements[];
} ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, * PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

#pragma warning(pop)

typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION * PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;




typedef struct _SUPPORTED_OS_INFO {
    WORD OsCount;
    WORD MitigationExist;
    WORD OsList[(4)];
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO;

typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef struct _HARDWARE_COUNTER_DATA {
    HARDWARE_COUNTER_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA;



typedef struct _PERFORMANCE_DATA {
    WORD Size;
    BYTE Version;
    BYTE HwCountersCount;
    DWORD ContextSwitchCount;
    DWORD64 WaitReasonBitMap;
    DWORD64 CycleTime;
    DWORD RetryCount;
    DWORD Reserved;
    HARDWARE_COUNTER_DATA HwCounters[16];
} PERFORMANCE_DATA, *PPERFORMANCE_DATA;
#line 13707 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _EVENTLOGRECORD {
    DWORD Length;
    DWORD Reserved;
    DWORD RecordNumber;
    DWORD TimeGenerated;
    DWORD TimeWritten;
    DWORD EventID;
    WORD EventType;
    WORD NumStrings;
    WORD EventCategory;
    WORD ReservedFlags;
    DWORD ClosingRecordNumber;
    DWORD StringOffset;
    DWORD UserSidLength;
    DWORD UserSidOffset;
    DWORD DataLength;
    DWORD DataOffset;
#line 13735 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
} EVENTLOGRECORD, *PEVENTLOGRECORD;






#pragma warning(push)

#pragma warning(disable : 4200)

struct _EVENTSFORLOGFILE;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

struct _PACKEDEVENTINFO;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO, *PPACKEDEVENTINFO;



struct _EVENTSFORLOGFILE
{
    DWORD ulSize;
    WCHAR szLogicalLogFile[256];
    DWORD ulNumRecords;
    EVENTLOGRECORD pEventLogRecords[];
};

struct _PACKEDEVENTINFO
{
    DWORD ulSize;
    DWORD ulNumEventsForLogFile;
    DWORD ulOffsets[];
};




#pragma warning(pop)
#line 13979 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType = 0x00000001,
    FileSystemType = 0x00000002,
    Win32ServiceOwnProcess = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType = 0x00000004,
    RecognizerType = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad = 0x00000000,
    SystemLoad = 0x00000001,
    AutoLoad = 0x00000002,
    DemandLoad = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError = 0x00000000,
    NormalError = 0x00000001,
    SevereError = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;
#line 14040 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;
#line 14056 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;
#line 14070 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;
#line 14084 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
#line 14105 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;
#line 14198 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;





typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;





typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;





typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;
#line 14252 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;
#line 14268 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _TAPE_WMI_OPERATIONS {
   DWORD Method;
   DWORD DataBufferSize;
   PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;




typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
   TapeDriveProblemNone, TapeDriveReadWriteWarning,
   TapeDriveReadWriteError, TapeDriveReadWarning,
   TapeDriveWriteWarning, TapeDriveReadError,
   TapeDriveWriteError, TapeDriveHardwareError,
   TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
   TapeDriveTimetoClean, TapeDriveCleanDriveNow,
   TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;






extern "C" {




#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ktmtypes.h"
#line 23 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ktmtypes.h"
extern "C" {



typedef GUID UOW, *PUOW;
typedef GUID CRM_PROTOCOL_ID, *PCRM_PROTOCOL_ID;
#line 78 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ktmtypes.h"
typedef ULONG NOTIFICATION_MASK;
#line 133 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ktmtypes.h"
typedef struct _TRANSACTION_NOTIFICATION {
    PVOID TransactionKey;
    ULONG TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION;

typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID EnlistmentId;
    UOW UOW;
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;



typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

typedef ULONG SAVEPOINT_ID, *PSAVEPOINT_ID;

typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID UOW;
    GUID TmIdentity;
    ULONG BufferLength;

} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID UOW;
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;







typedef struct _KCRM_MARSHAL_HEADER {
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused;
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, * PRKCRM_MARSHAL_HEADER;

typedef struct _KCRM_TRANSACTION_BLOB {
    UOW UOW;
    GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR Description[64];
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, * PRKCRM_TRANSACTION_BLOB;

typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID ProtocolId;
                               ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength;
    ULONG Unused1;
    ULONG Unused2;
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, * PRKCRM_PROTOCOL_BLOB;


}
#line 14296 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
#line 14465 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef enum _TRANSACTION_OUTCOME {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted,
    TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;


typedef enum _TRANSACTION_STATE {
    TransactionStateNormal = 1,
    TransactionStateIndoubt,
    TransactionStateCommittedNotify,
} TRANSACTION_STATE;


typedef struct _TRANSACTION_BASIC_INFORMATION {
    GUID TransactionId;
    DWORD State;
    DWORD Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    GUID TmIdentity;
    LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    GUID LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    DWORD LogPathLength;
                                  WCHAR LogPath[1];

} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    ULONGLONG LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;



typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
    GUID OldestTransactionGuid;
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION;



typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
    DWORD IsolationLevel;
    DWORD IsolationFlags;
    LARGE_INTEGER Timeout;
    DWORD Outcome;
    DWORD DescriptionLength;
    WCHAR Description[1];

} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;



typedef struct _TRANSACTION_BIND_INFORMATION {
    HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;

typedef struct _TRANSACTION_ENLISTMENT_PAIR {
    GUID EnlistmentId;
    GUID ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    DWORD NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;


typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
    GUID ResourceManagerId;
    DWORD DescriptionLength;
    WCHAR Description[1];
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    HANDLE IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;




typedef enum _TRANSACTION_INFORMATION_CLASS {
    TransactionBasicInformation,
    TransactionPropertiesInformation,
    TransactionEnlistmentInformation,
    TransactionSuperiorEnlistmentInformation

    ,


    TransactionBindInformation,
    TransactionDTCPrivateInformation
    ,

} TRANSACTION_INFORMATION_CLASS;


typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
    TransactionManagerBasicInformation,
    TransactionManagerLogInformation,
    TransactionManagerLogPathInformation,
    TransactionManagerRecoveryInformation = 4

    ,



    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5



} TRANSACTIONMANAGER_INFORMATION_CLASS;



typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
    ResourceManagerBasicInformation,
    ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;


typedef struct _ENLISTMENT_BASIC_INFORMATION {
    GUID EnlistmentId;
    GUID TransactionId;
    GUID ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;

typedef struct _ENLISTMENT_CRM_INFORMATION {
    GUID CrmTransactionManagerId;
    GUID CrmResourceManagerId;
    GUID CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;



typedef enum _ENLISTMENT_INFORMATION_CLASS {
    EnlistmentBasicInformation,
    EnlistmentRecoveryInformation,
    EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;

typedef struct _TRANSACTION_LIST_ENTRY {
    UOW UOW;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;

typedef struct _TRANSACTION_LIST_INFORMATION {
    DWORD NumberOfTransactions;
    TRANSACTION_LIST_ENTRY TransactionInformation[1];
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;






typedef enum _KTMOBJECT_TYPE {

    KTMOBJECT_TRANSACTION,
    KTMOBJECT_TRANSACTION_MANAGER,
    KTMOBJECT_RESOURCE_MANAGER,
    KTMOBJECT_ENLISTMENT,
    KTMOBJECT_INVALID

} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;
#line 14650 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _KTMOBJECT_CURSOR {





    GUID LastQuery;





    DWORD ObjectIdCount;





    GUID ObjectIds[1];

} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;




}



typedef DWORD TP_VERSION, *PTP_VERSION;

typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;

typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context
    );

typedef struct _TP_POOL TP_POOL, *PTP_POOL;

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID
} TP_CALLBACK_PRIORITY;

typedef struct _TP_POOL_STACK_INFORMATION {
    SIZE_T StackReserve;
    SIZE_T StackCommit;
}TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;

typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP;

typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(
                PVOID ObjectContext,
                PVOID CleanupContext
    );
#line 14716 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
typedef struct _TP_CALLBACK_ENVIRON_V3 {
    TP_VERSION Version;
    PTP_POOL Pool;
    PTP_CLEANUP_GROUP CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PTP_SIMPLE_CALLBACK FinalizationCallback;
    union {
        DWORD Flags;
        struct {
            DWORD LongFunction : 1;
            DWORD Persistent : 1;
            DWORD Private : 30;
        } s;
    } u;
    TP_CALLBACK_PRIORITY CallbackPriority;
    DWORD Size;
} TP_CALLBACK_ENVIRON_V3;

typedef TP_CALLBACK_ENVIRON_V3 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;
#line 14764 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
__forceinline
void
TpInitializeCallbackEnviron(
          PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{



    CallbackEnviron->Version = 3;







    CallbackEnviron->Pool = 0;
    CallbackEnviron->CleanupGroup = 0;
    CallbackEnviron->CleanupGroupCancelCallback = 0;
    CallbackEnviron->RaceDll = 0;
    CallbackEnviron->ActivationContext = 0;
    CallbackEnviron->FinalizationCallback = 0;
    CallbackEnviron->u.Flags = 0;



    CallbackEnviron->CallbackPriority = TP_CALLBACK_PRIORITY_NORMAL;
    CallbackEnviron->Size = sizeof(TP_CALLBACK_ENVIRON);



}

__forceinline
void
TpSetCallbackThreadpool(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PTP_POOL Pool
    )
{
    CallbackEnviron->Pool = Pool;
}

__forceinline
void
TpSetCallbackCleanupGroup(
             PTP_CALLBACK_ENVIRON CallbackEnviron,
             PTP_CLEANUP_GROUP CleanupGroup,
             PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback
    )
{
    CallbackEnviron->CleanupGroup = CleanupGroup;
    CallbackEnviron->CleanupGroupCancelCallback = CleanupGroupCancelCallback;
}

__forceinline
void
TpSetCallbackActivationContext(
             PTP_CALLBACK_ENVIRON CallbackEnviron,
             struct _ACTIVATION_CONTEXT *ActivationContext
    )
{
    CallbackEnviron->ActivationContext = ActivationContext;
}

__forceinline
void
TpSetCallbackNoActivationContext(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->ActivationContext = (struct _ACTIVATION_CONTEXT *)(LONG_PTR) -1;
}

__forceinline
void
TpSetCallbackLongFunction(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.LongFunction = 1;
}

__forceinline
void
TpSetCallbackRaceWithDll(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PVOID DllHandle
    )
{
    CallbackEnviron->RaceDll = DllHandle;
}

__forceinline
void
TpSetCallbackFinalizationCallback(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PTP_SIMPLE_CALLBACK FinalizationCallback
    )
{
    CallbackEnviron->FinalizationCallback = FinalizationCallback;
}



__forceinline
void
TpSetCallbackPriority(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            TP_CALLBACK_PRIORITY Priority
    )
{
    CallbackEnviron->CallbackPriority = Priority;
}



__forceinline
void
TpSetCallbackPersistent(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.Persistent = 1;
}


__forceinline
void
TpDestroyCallbackEnviron(
         PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{






    (CallbackEnviron);
}




typedef struct _TP_WORK TP_WORK, *PTP_WORK;

typedef void (__stdcall *PTP_WORK_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_WORK Work
    );

typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER;

typedef void (__stdcall *PTP_TIMER_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_TIMER Timer
    );

typedef DWORD TP_WAIT_RESULT;

typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT;

typedef void (__stdcall *PTP_WAIT_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_WAIT Wait,
                TP_WAIT_RESULT WaitResult
    );

typedef struct _TP_IO TP_IO, *PTP_IO;
#line 14982 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
__inline struct _TEB * NtCurrentTeb( void ) { return (struct _TEB *) (ULONG_PTR) __readfsdword (0x18); }
#line 15019 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnt.h"
}



#pragma warning(pop)
#line 177 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\windef.h"






typedef UINT_PTR WPARAM;
typedef LONG_PTR LPARAM;
typedef LONG_PTR LRESULT;
#line 208 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\windef.h"
struct HWND__{int unused;}; typedef struct HWND__ *HWND;
struct HHOOK__{int unused;}; typedef struct HHOOK__ *HHOOK;





typedef WORD ATOM;

typedef HANDLE *SPHANDLE;
typedef HANDLE *LPHANDLE;
typedef HANDLE HGLOBAL;
typedef HANDLE HLOCAL;
typedef HANDLE GLOBALHANDLE;
typedef HANDLE LOCALHANDLE;







typedef int ( __stdcall *FARPROC)();
typedef int ( __stdcall *NEARPROC)();
typedef int (__stdcall *PROC)();
#line 247 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\windef.h"
typedef void * HGDIOBJ;





struct HKEY__{int unused;}; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;


struct HACCEL__{int unused;}; typedef struct HACCEL__ *HACCEL;


struct HBITMAP__{int unused;}; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__{int unused;}; typedef struct HBRUSH__ *HBRUSH;


struct HCOLORSPACE__{int unused;}; typedef struct HCOLORSPACE__ *HCOLORSPACE;


struct HDC__{int unused;}; typedef struct HDC__ *HDC;

struct HGLRC__{int unused;}; typedef struct HGLRC__ *HGLRC;
struct HDESK__{int unused;}; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__{int unused;}; typedef struct HENHMETAFILE__ *HENHMETAFILE;

struct HFONT__{int unused;}; typedef struct HFONT__ *HFONT;

struct HICON__{int unused;}; typedef struct HICON__ *HICON;

struct HMENU__{int unused;}; typedef struct HMENU__ *HMENU;

struct HMETAFILE__{int unused;}; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__{int unused;}; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;

struct HPALETTE__{int unused;}; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__{int unused;}; typedef struct HPEN__ *HPEN;

struct HRGN__{int unused;}; typedef struct HRGN__ *HRGN;
struct HRSRC__{int unused;}; typedef struct HRSRC__ *HRSRC;
struct HSPRITE__{int unused;}; typedef struct HSPRITE__ *HSPRITE;
struct HLSURF__{int unused;}; typedef struct HLSURF__ *HLSURF;
struct HSTR__{int unused;}; typedef struct HSTR__ *HSTR;
struct HTASK__{int unused;}; typedef struct HTASK__ *HTASK;
struct HWINSTA__{int unused;}; typedef struct HWINSTA__ *HWINSTA;
struct HKL__{int unused;}; typedef struct HKL__ *HKL;


struct HWINEVENTHOOK__{int unused;}; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;




struct HMONITOR__{int unused;}; typedef struct HMONITOR__ *HMONITOR;

struct HUMPD__{int unused;}; typedef struct HUMPD__ *HUMPD;



typedef int HFILE;
typedef HICON HCURSOR;





typedef DWORD COLORREF;
typedef DWORD *LPCOLORREF;



typedef struct tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECT, *PRECT, *NPRECT, *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG x;
    LONG y;
} POINT, *PPOINT, *NPPOINT, *LPPOINT;

typedef struct _POINTL
{
    LONG x;
    LONG y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG cx;
    LONG cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE SIZEL;
typedef SIZE *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{

    SHORT x;
    SHORT y;




} POINTS, *PPOINTS, *LPPOINTS;





typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;
#line 414 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\windef.h"
}
#line 155 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
#line 43 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
extern "C" {
#line 242 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union {
        struct {
            DWORD Offset;
            DWORD OffsetHigh;
        } ;
        PVOID Pointer;
    } ;

    HANDLE hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;

typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;
#line 294 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;


typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;


typedef void (__stdcall *PFIBER_START_ROUTINE)(
    LPVOID lpFiberParameter
    );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;


typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;







typedef RTL_RUN_ONCE INIT_ONCE;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;
#line 360 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef
BOOL
(__stdcall *PINIT_ONCE_FN) (
            PINIT_ONCE InitOnce,
                PVOID Parameter,
                        PVOID *Context
    );

__declspec(dllimport)
void
__stdcall
InitOnceInitialize (
          PINIT_ONCE InitOnce
    );

__declspec(dllimport)
BOOL
__stdcall
InitOnceExecuteOnce (
            PINIT_ONCE InitOnce,
                    PINIT_ONCE_FN InitFn,
                PVOID Parameter,
                        LPVOID *Context
    );

__declspec(dllimport)
BOOL
__stdcall
InitOnceBeginInitialize (
            LPINIT_ONCE lpInitOnce,
         DWORD dwFlags,
          PBOOL fPending,
                        LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
InitOnceComplete (
            LPINIT_ONCE lpInitOnce,
         DWORD dwFlags,
             LPVOID lpContext
    );







typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;



__declspec(dllimport)
void
__stdcall
InitializeSRWLock (
           PSRWLOCK SRWLock
     );

__declspec(dllimport)
void
__stdcall
ReleaseSRWLockExclusive (
             PSRWLOCK SRWLock
     );

__declspec(dllimport)
void
__stdcall
ReleaseSRWLockShared (
             PSRWLOCK SRWLock
     );

__declspec(dllimport)
void
__stdcall
AcquireSRWLockExclusive (
             PSRWLOCK SRWLock
     );

__declspec(dllimport)
void
__stdcall
AcquireSRWLockShared (
             PSRWLOCK SRWLock
     );

__declspec(dllimport)
BOOLEAN
__stdcall
TryAcquireSRWLockExclusive (
            PSRWLOCK SRWLock
    );

__declspec(dllimport)
BOOLEAN
__stdcall
TryAcquireSRWLockShared (
            PSRWLOCK SRWLock
    );





typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;

__declspec(dllimport)
void
__stdcall
InitializeConditionVariable (
          PCONDITION_VARIABLE ConditionVariable
    );

__declspec(dllimport)
void
__stdcall
WakeConditionVariable (
            PCONDITION_VARIABLE ConditionVariable
    );

__declspec(dllimport)
void
__stdcall
WakeAllConditionVariable (
            PCONDITION_VARIABLE ConditionVariable
    );

__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableCS (
            PCONDITION_VARIABLE ConditionVariable,
            PCRITICAL_SECTION CriticalSection,
         DWORD dwMilliseconds
    );

__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableSRW (
            PCONDITION_VARIABLE ConditionVariable,
            PSRWLOCK SRWLock,
         DWORD dwMilliseconds,
         ULONG Flags
    );
#line 521 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)

PVOID
__stdcall
EncodePointer (
             PVOID Ptr
    );

__declspec(dllimport)

PVOID
__stdcall
DecodePointer (
             PVOID Ptr
    );

__declspec(dllimport)

PVOID
__stdcall
EncodeSystemPointer (
             PVOID Ptr
    );

__declspec(dllimport)

PVOID
__stdcall
DecodeSystemPointer (
             PVOID Ptr
    );


typedef PLDT_ENTRY LPLDT_ENTRY;
#line 663 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
#line 718 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef struct _DCB {
    DWORD DCBlength;
    DWORD BaudRate;
    DWORD fBinary: 1;
    DWORD fParity: 1;
    DWORD fOutxCtsFlow:1;
    DWORD fOutxDsrFlow:1;
    DWORD fDtrControl:2;
    DWORD fDsrSensitivity:1;
    DWORD fTXContinueOnXoff: 1;
    DWORD fOutX: 1;
    DWORD fInX: 1;
    DWORD fErrorChar: 1;
    DWORD fNull: 1;
    DWORD fRtsControl:2;
    DWORD fAbortOnError:1;
    DWORD fDummy2:17;
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;
    WORD wVersion;
    WORD wReserved;
    DCB dcb;
    DWORD dwProviderSubType;

    DWORD dwProviderOffset;

    DWORD dwProviderSize;
    WCHAR wcProviderData[1];
} COMMCONFIG,*LPCOMMCONFIG;

typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        } ;
    } ;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;
#line 824 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;
#line 955 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;


typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;






typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;

typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;


typedef PCONTEXT LPCONTEXT;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
#line 1270 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;
#line 2283 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
LONG
__stdcall
InterlockedIncrement (
            LONG volatile *lpAddend
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedDecrement (
            LONG volatile *lpAddend
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedExchange (
            LONG volatile *Target,
            LONG Value
    );




__declspec(dllimport)
LONG
__stdcall
InterlockedExchangeAdd (
            LONG volatile *Addend,
            LONG Value
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedCompareExchange (
            LONG volatile *Destination,
            LONG Exchange,
            LONG Comperand
    );



__declspec(dllimport)
LONGLONG
__stdcall
InterlockedCompareExchange64 (
            LONGLONG volatile *Destination,
            LONGLONG Exchange,
            LONGLONG Comperand
    );







__forceinline
LONGLONG
InterlockedAnd64 (
            LONGLONG volatile *Destination,
            LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old & Value,
                                          Old) != Old);

    return Old;
}

__forceinline
LONGLONG
InterlockedOr64 (
            LONGLONG volatile *Destination,
            LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old | Value,
                                          Old) != Old);

    return Old;
}

__forceinline
LONGLONG
InterlockedXor64 (
            LONGLONG volatile *Destination,
            LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old ^ Value,
                                          Old) != Old);

    return Old;
}

__forceinline
LONGLONG
InterlockedIncrement64 (
            LONGLONG volatile *Addend
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old + 1,
                                          Old) != Old);

    return Old + 1;
}

__forceinline
LONGLONG
InterlockedDecrement64 (
            LONGLONG volatile *Addend
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old - 1,
                                          Old) != Old);

    return Old - 1;
}

__forceinline
LONGLONG
InterlockedExchange64 (
            LONGLONG volatile *Target,
            LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Target;
    } while (InterlockedCompareExchange64(Target,
                                          Value,
                                          Old) != Old);

    return Old;
}

__forceinline
LONGLONG
InterlockedExchangeAdd64(
            LONGLONG volatile *Addend,
            LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old + Value,
                                          Old) != Old);

    return Old;
}
#line 2477 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__forceinline
PVOID

__cdecl

__InlineInterlockedCompareExchangePointer (
             PVOID volatile *Destination,
             PVOID ExChange,
             PVOID Comperand
    )
{
    return((PVOID)(LONG_PTR)InterlockedCompareExchange((LONG volatile *)Destination, (LONG)(LONG_PTR)ExChange, (LONG)(LONG_PTR)Comperand));
}
#line 2517 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
void
__stdcall
InitializeSListHead (
            PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
InterlockedPopEntrySList (
            PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
InterlockedPushEntrySList (
            PSLIST_HEADER ListHead,
            PSINGLE_LIST_ENTRY ListEntry
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
InterlockedFlushSList (
            PSLIST_HEADER ListHead
    );

__declspec(dllimport)
USHORT
__stdcall
QueryDepthSList (
         PSLIST_HEADER ListHead
    );







__declspec(dllimport)
BOOL
__stdcall
FreeResource(
         HGLOBAL hResData
    );

__declspec(dllimport)
LPVOID
__stdcall
LockResource(
         HGLOBAL hResData
    );






int




__stdcall




WinMain (
         HINSTANCE hInstance,
             HINSTANCE hPrevInstance,
         LPSTR lpCmdLine,
         int nShowCmd
    );

int



__stdcall

wWinMain(
         HINSTANCE hInstance,
             HINSTANCE hPrevInstance,
         LPWSTR lpCmdLine,
         int nShowCmd
    );

__declspec(dllimport)
BOOL
__stdcall
FreeLibrary (
         HMODULE hLibModule
    );


__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
FreeLibraryAndExitThread (
         HMODULE hLibModule,
         DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
DisableThreadLibraryCalls (
         HMODULE hLibModule
    );

__declspec(dllimport)
FARPROC
__stdcall
GetProcAddress (
         HMODULE hModule,
         LPCSTR lpProcName
    );

__declspec(dllimport)
DWORD
__stdcall
GetVersion (
    void
    );

__declspec(dllimport)

HGLOBAL
__stdcall
GlobalAlloc (
         UINT uFlags,
         SIZE_T dwBytes
    );

__declspec(dllimport)

HGLOBAL
__stdcall
GlobalReAlloc (
         HGLOBAL hMem,
         SIZE_T dwBytes,
         UINT uFlags
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalSize (
         HGLOBAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
GlobalFlags (
         HGLOBAL hMem
    );

__declspec(dllimport)

LPVOID
__stdcall
GlobalLock (
         HGLOBAL hMem
    );

__declspec(dllimport)

HGLOBAL
__stdcall
GlobalHandle (
         LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnlock(
         HGLOBAL hMem
    );

__declspec(dllimport)

HGLOBAL
__stdcall
GlobalFree(
            HGLOBAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalCompact(
         DWORD dwMinFree
    );

__declspec(dllimport)
void
__stdcall
GlobalFix(
         HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalUnfix(
         HGLOBAL hMem
    );

__declspec(dllimport)

LPVOID
__stdcall
GlobalWire(
         HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnWire(
         HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalMemoryStatus(
          LPMEMORYSTATUS lpBuffer
    );

typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

__declspec(dllimport)
BOOL
__stdcall
GlobalMemoryStatusEx(
          LPMEMORYSTATUSEX lpBuffer
    );

__declspec(dllimport)

HLOCAL
__stdcall
LocalAlloc(
         UINT uFlags,
         SIZE_T uBytes
    );

__declspec(dllimport)

HLOCAL
__stdcall
LocalReAlloc(
         HLOCAL hMem,
         SIZE_T uBytes,
         UINT uFlags
    );

__declspec(dllimport)

LPVOID
__stdcall
LocalLock(
         HLOCAL hMem
    );

__declspec(dllimport)

HLOCAL
__stdcall
LocalHandle(
         LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
LocalUnlock(
         HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalSize(
         HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalFlags(
         HLOCAL hMem
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalFree(
            HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalShrink(
         HLOCAL hMem,
         UINT cbNewSize
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalCompact(
         UINT uMinFree
    );

__declspec(dllimport)
BOOL
__stdcall
FlushInstructionCache(
         HANDLE hProcess,
                            LPCVOID lpBaseAddress,
         SIZE_T dwSize
    );



__declspec(dllimport)
void
__stdcall
FlushProcessWriteBuffers(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
QueryThreadCycleTime (
         HANDLE ThreadHandle,
          PULONG64 CycleTime
    );

__declspec(dllimport)
BOOL
__stdcall
QueryProcessCycleTime (
         HANDLE ProcessHandle,
          PULONG64 CycleTime
    );

__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTime (
            PULONG BufferLength,
                                    PULONG64 ProcessorIdleCycleTime
    );





__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTimeEx (
         USHORT Group,
            PULONG BufferLength,
                                    PULONG64 ProcessorIdleCycleTime
    );

__declspec(dllimport)
BOOL
__stdcall
QueryUnbiasedInterruptTime (
          PULONGLONG UnbiasedTime
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessorSystemCycleTime (
         USHORT Group,
                                                            PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,
            PDWORD ReturnedLength
    );



__declspec(dllimport)

LPVOID
__stdcall
VirtualAlloc(
             LPVOID lpAddress,
             SIZE_T dwSize,
             DWORD flAllocationType,
             DWORD flProtect
    );
#line 2943 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
VirtualFree(
         LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD dwFreeType
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualProtect(
          LPVOID lpAddress,
          SIZE_T dwSize,
          DWORD flNewProtect,
          PDWORD lpflOldProtect
    );

__declspec(dllimport)
SIZE_T
__stdcall
VirtualQuery(
             LPCVOID lpAddress,
                                        PMEMORY_BASIC_INFORMATION lpBuffer,
             SIZE_T dwLength
    );

__declspec(dllimport)

LPVOID
__stdcall
VirtualAllocEx(
             HANDLE hProcess,
             LPVOID lpAddress,
             SIZE_T dwSize,
             DWORD flAllocationType,
             DWORD flProtect
    );



__declspec(dllimport)

LPVOID
__stdcall
VirtualAllocExNuma(
             HANDLE hProcess,
             LPVOID lpAddress,
             SIZE_T dwSize,
             DWORD flAllocationType,
             DWORD flProtect,
             DWORD nndPreferred
    );



__declspec(dllimport)
UINT
__stdcall
GetWriteWatch(
         DWORD dwFlags,
         PVOID lpBaseAddress,
         SIZE_T dwRegionSize,
                                              PVOID *lpAddresses,
            ULONG_PTR *lpdwCount,
          PULONG lpdwGranularity
    );

__declspec(dllimport)
UINT
__stdcall
ResetWriteWatch(
         LPVOID lpBaseAddress,
         SIZE_T dwRegionSize
    );

__declspec(dllimport)
SIZE_T
__stdcall
GetLargePageMinimum(
    void
    );

__declspec(dllimport)
UINT
__stdcall
EnumSystemFirmwareTables(
         DWORD FirmwareTableProviderSignature,
                                              PVOID pFirmwareTableEnumBuffer,
         DWORD BufferSize
    );

__declspec(dllimport)
UINT
__stdcall
GetSystemFirmwareTable(
         DWORD FirmwareTableProviderSignature,
         DWORD FirmwareTableID,
                                              PVOID pFirmwareTableBuffer,
         DWORD BufferSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetPhysicallyInstalledSystemMemory(
          PULONGLONG TotalMemoryInKilobytes
    );
#line 3064 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
VirtualFreeEx(
         HANDLE hProcess,
         LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD dwFreeType
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualProtectEx(
          HANDLE hProcess,
          LPVOID lpAddress,
          SIZE_T dwSize,
          DWORD flNewProtect,
          PDWORD lpflOldProtect
    );

__declspec(dllimport)
SIZE_T
__stdcall
VirtualQueryEx(
             HANDLE hProcess,
             LPCVOID lpAddress,
                                        PMEMORY_BASIC_INFORMATION lpBuffer,
             SIZE_T dwLength
    );

__declspec(dllimport)

HANDLE
__stdcall
HeapCreate(
         DWORD flOptions,
         SIZE_T dwInitialSize,
         SIZE_T dwMaximumSize
    );

__declspec(dllimport)
BOOL
__stdcall
HeapDestroy(
         HANDLE hHeap
    );

__declspec(dllimport)

LPVOID
__stdcall
HeapAlloc(
         HANDLE hHeap,
         DWORD dwFlags,
         SIZE_T dwBytes
    );

__declspec(dllimport)

LPVOID
__stdcall
HeapReAlloc(
            HANDLE hHeap,
            DWORD dwFlags,
            LPVOID lpMem,
            SIZE_T dwBytes
    );

__declspec(dllimport)
BOOL
__stdcall
HeapFree(
            HANDLE hHeap,
            DWORD dwFlags,
                                                  LPVOID lpMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
HeapSize(
         HANDLE hHeap,
         DWORD dwFlags,
         LPCVOID lpMem
    );

__declspec(dllimport)
BOOL
__stdcall
HeapValidate(
             HANDLE hHeap,
             DWORD dwFlags,
             LPCVOID lpMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
HeapCompact(
         HANDLE hHeap,
         DWORD dwFlags
    );

__declspec(dllimport)

HANDLE
__stdcall
GetProcessHeap( void );

__declspec(dllimport)
DWORD
__stdcall
GetProcessHeaps(
         DWORD NumberOfHeaps,
                                             PHANDLE ProcessHeaps
    );

typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    } ;
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;







__declspec(dllimport)
BOOL
__stdcall
HeapLock(
         HANDLE hHeap
    );

__declspec(dllimport)
BOOL
__stdcall
HeapUnlock(
         HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapWalk(
            HANDLE hHeap,
            LPPROCESS_HEAP_ENTRY lpEntry
    );

__declspec(dllimport)
BOOL
__stdcall
HeapSetInformation (
             HANDLE HeapHandle,
         HEAP_INFORMATION_CLASS HeapInformationClass,
                                           PVOID HeapInformation,
         SIZE_T HeapInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
HeapQueryInformation (
             HANDLE HeapHandle,
         HEAP_INFORMATION_CLASS HeapInformationClass,
                                                                PVOID HeapInformation,
         SIZE_T HeapInformationLength,
              PSIZE_T ReturnLength
    );
#line 3268 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeA(
          LPCSTR lpApplicationName,
          LPDWORD lpBinaryType
    );
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeW(
          LPCWSTR lpApplicationName,
          LPDWORD lpBinaryType
    );






__declspec(dllimport)
DWORD
__stdcall
GetShortPathNameA(
         LPCSTR lpszLongPath,
                                                 LPSTR lpszShortPath,
         DWORD cchBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetShortPathNameW(
         LPCWSTR lpszLongPath,
                                                 LPWSTR lpszShortPath,
         DWORD cchBuffer
    );






__declspec(dllimport)
DWORD
__stdcall
GetLongPathNameA(
         LPCSTR lpszShortPath,
                                                 LPSTR lpszLongPath,
         DWORD cchBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetLongPathNameW(
         LPCWSTR lpszShortPath,
                                                 LPWSTR lpszLongPath,
         DWORD cchBuffer
    );
#line 3334 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
GetLongPathNameTransactedA(
             LPCSTR lpszShortPath,
                                                 LPSTR lpszLongPath,
             DWORD cchBuffer,
             HANDLE hTransaction
    );
__declspec(dllimport)
DWORD
__stdcall
GetLongPathNameTransactedW(
             LPCWSTR lpszShortPath,
                                                 LPWSTR lpszLongPath,
             DWORD cchBuffer,
             HANDLE hTransaction
    );
#line 3360 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetProcessAffinityMask(
          HANDLE hProcess,
          PDWORD_PTR lpProcessAffinityMask,
          PDWORD_PTR lpSystemAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityMask(
         HANDLE hProcess,
         DWORD_PTR dwProcessAffinityMask
    );



BOOL
__stdcall
GetProcessGroupAffinity(
         HANDLE hProcess,
            PUSHORT GroupCount,
                              PUSHORT GroupArray
    );





__declspec(dllimport)
BOOL
__stdcall
GetProcessHandleCount(
          HANDLE hProcess,
          PDWORD pdwHandleCount
    );



__declspec(dllimport)
BOOL
__stdcall
GetProcessTimes(
          HANDLE hProcess,
          LPFILETIME lpCreationTime,
          LPFILETIME lpExitTime,
          LPFILETIME lpKernelTime,
          LPFILETIME lpUserTime
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessIoCounters(
          HANDLE hProcess,
          PIO_COUNTERS lpIoCounters
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSize(
          HANDLE hProcess,
          PSIZE_T lpMinimumWorkingSetSize,
          PSIZE_T lpMaximumWorkingSetSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSizeEx(
          HANDLE hProcess,
          PSIZE_T lpMinimumWorkingSetSize,
          PSIZE_T lpMaximumWorkingSetSize,
          PDWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSize(
         HANDLE hProcess,
         SIZE_T dwMinimumWorkingSetSize,
         SIZE_T dwMaximumWorkingSetSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSizeEx(
         HANDLE hProcess,
         SIZE_T dwMinimumWorkingSetSize,
         SIZE_T dwMaximumWorkingSetSize,
         DWORD Flags
    );





__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityUpdateMode(
         HANDLE hProcess,
         DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
QueryProcessAffinityUpdateMode(
         HANDLE hProcess,
              LPDWORD lpdwFlags
    );



__declspec(dllimport)
HANDLE
__stdcall
OpenProcess(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwProcessId
    );

__declspec(dllimport)

HANDLE
__stdcall
GetCurrentProcess(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessId(
    void
    );

__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitProcess(
         UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateProcess(
         HANDLE hProcess,
         UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetExitCodeProcess(
          HANDLE hProcess,
          LPDWORD lpExitCode
    );

__declspec(dllimport)
void
__stdcall
FatalExit(
         int ExitCode
    );

__declspec(dllimport)


LPCH
__stdcall
GetEnvironmentStrings(
    void
    );

__declspec(dllimport)


LPWCH
__stdcall
GetEnvironmentStringsW(
    void
    );







__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsA(
                              LPCH NewEnvironment
    );
__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsW(
                              LPWCH NewEnvironment
    );






__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsA(
                              LPCH
    );
__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsW(
                              LPWCH
    );






__declspec(dllimport)
void
__stdcall
RaiseException(
         DWORD dwExceptionCode,
         DWORD dwExceptionFlags,
         DWORD nNumberOfArguments,
                                        const ULONG_PTR *lpArguments
    );

__declspec(dllimport)
void
__stdcall
RaiseFailFastException(
             PEXCEPTION_RECORD pExceptionRecord,
         PCONTEXT pContextRecord,
         DWORD dwFlags
    );


__declspec(dllimport)
LONG
__stdcall
UnhandledExceptionFilter(
         struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(
         struct _EXCEPTION_POINTERS *ExceptionInfo
    );
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

__declspec(dllimport)
LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
             LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );
#line 3642 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)

LPVOID
__stdcall
CreateFiber(
             SIZE_T dwStackSize,
             LPFIBER_START_ROUTINE lpStartAddress,
             LPVOID lpParameter
    );

__declspec(dllimport)

LPVOID
__stdcall
CreateFiberEx(
             SIZE_T dwStackCommitSize,
             SIZE_T dwStackReserveSize,
             DWORD dwFlags,
             LPFIBER_START_ROUTINE lpStartAddress,
             LPVOID lpParameter
    );

__declspec(dllimport)
void
__stdcall
DeleteFiber(
         LPVOID lpFiber
    );

__declspec(dllimport)

LPVOID
__stdcall
ConvertThreadToFiber(
             LPVOID lpParameter
    );

__declspec(dllimport)

LPVOID
__stdcall
ConvertThreadToFiberEx(
             LPVOID lpParameter,
             DWORD dwFlags
    );



__declspec(dllimport)
BOOL
__stdcall
ConvertFiberToThread(
    void
    );





__declspec(dllimport)
BOOL
__stdcall
IsThreadAFiber(
    void
    );



__declspec(dllimport)
void
__stdcall
SwitchToFiber(
         LPVOID lpFiber
    );

__declspec(dllimport)
BOOL
__stdcall
SwitchToThread(
    void
    );
#line 3732 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef void *PUMS_CONTEXT;

typedef void *PUMS_COMPLETION_LIST;

typedef enum _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, *PUMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;

typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT;

typedef struct _UMS_SCHEDULER_STARTUP_INFO {




    ULONG UmsVersion;




    PUMS_COMPLETION_LIST CompletionList;





    PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;




    PVOID SchedulerParam;

} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO;


__declspec(dllimport)
BOOL
__stdcall
CreateUmsCompletionList(
                PUMS_COMPLETION_LIST* UmsCompletionList
    );

__declspec(dllimport)
BOOL
__stdcall
DequeueUmsCompletionListItems(
         PUMS_COMPLETION_LIST UmsCompletionList,
         DWORD WaitTimeOut,
          PUMS_CONTEXT* UmsThreadList
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsCompletionListEvent(
         PUMS_COMPLETION_LIST UmsCompletionList,
            PHANDLE UmsCompletionEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ExecuteUmsThread(
            PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
UmsThreadYield(
         PVOID SchedulerParam
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsCompletionList(
         PUMS_COMPLETION_LIST UmsCompletionList
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetCurrentUmsThread(
    void
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetNextUmsListItem(
            PUMS_CONTEXT UmsContext
    );

__declspec(dllimport)
BOOL
__stdcall
QueryUmsThreadInformation(
         PUMS_CONTEXT UmsThread,
         UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
                                                                 PVOID UmsThreadInformation,
         ULONG UmsThreadInformationLength,
              PULONG ReturnLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetUmsThreadInformation(
         PUMS_CONTEXT UmsThread,
         UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
         PVOID UmsThreadInformation,
         ULONG UmsThreadInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsThreadContext(
         PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
CreateUmsThreadContext(
                PUMS_CONTEXT *lpUmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
EnterUmsSchedulingMode(
         PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo
    );
#line 3877 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;

__declspec(dllimport)

HANDLE
__stdcall
CreateThread(
              LPSECURITY_ATTRIBUTES lpThreadAttributes,
              SIZE_T dwStackSize,
              LPTHREAD_START_ROUTINE lpStartAddress,
                                      LPVOID lpParameter,
              DWORD dwCreationFlags,
              LPDWORD lpThreadId
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateRemoteThread(
              HANDLE hProcess,
              LPSECURITY_ATTRIBUTES lpThreadAttributes,
              SIZE_T dwStackSize,
              LPTHREAD_START_ROUTINE lpStartAddress,
              LPVOID lpParameter,
              DWORD dwCreationFlags,
              LPDWORD lpThreadId
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateRemoteThreadEx(
              HANDLE hProcess,
              LPSECURITY_ATTRIBUTES lpThreadAttributes,
              SIZE_T dwStackSize,
              LPTHREAD_START_ROUTINE lpStartAddress,
              LPVOID lpParameter,
              DWORD dwCreationFlags,
              LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
              LPDWORD lpThreadId
    );

__declspec(dllimport)

HANDLE
__stdcall
GetCurrentThread(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetCurrentThreadId(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadStackGuarantee (
            PULONG StackSizeInBytes
    );

__declspec(dllimport)
DWORD
__stdcall
GetProcessIdOfThread(
         HANDLE Thread
    );



__declspec(dllimport)
DWORD
__stdcall
GetThreadId(
         HANDLE Thread
    );



__declspec(dllimport)
DWORD
__stdcall
GetProcessId(
         HANDLE Process
    );

__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessorNumber(
    void
    );


__declspec(dllimport)
void
__stdcall
GetCurrentProcessorNumberEx(
          PPROCESSOR_NUMBER ProcNumber
    );



__declspec(dllimport)
BOOL
__stdcall
GetThreadGroupAffinity(
         HANDLE hThread,
          PGROUP_AFFINITY GroupAffinity
    );


__declspec(dllimport)
DWORD_PTR
__stdcall
SetThreadAffinityMask(
         HANDLE hThread,
         DWORD_PTR dwThreadAffinityMask
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadGroupAffinity(
         HANDLE hThread,
         const GROUP_AFFINITY *GroupAffinity,
              PGROUP_AFFINITY PreviousGroupAffinity
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadIdealProcessorEx (
         HANDLE hThread,
         PPROCESSOR_NUMBER lpIdealProcessor,
              PPROCESSOR_NUMBER lpPreviousIdealProcessor
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadIdealProcessorEx (
         HANDLE hThread,
          PPROCESSOR_NUMBER lpIdealProcessor
    );




__declspec(dllimport)
DWORD
__stdcall
SetThreadIdealProcessor(
         HANDLE hThread,
         DWORD dwIdealProcessor
    );







__declspec(dllimport)
BOOL
__stdcall
SetProcessDEPPolicy(
         DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessDEPPolicy(
         HANDLE hProcess,
          LPDWORD lpFlags,
          PBOOL lpPermanent
    );



__declspec(dllimport)
BOOL
__stdcall
SetProcessPriorityBoost(
         HANDLE hProcess,
         BOOL bDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessPriorityBoost(
          HANDLE hProcess,
          PBOOL pDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
RequestWakeupLatency(
         LATENCY_TIME latency
    );

__declspec(dllimport)
BOOL
__stdcall
IsSystemResumeAutomatic(
    void
    );

__declspec(dllimport)

HANDLE
__stdcall
OpenThread(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwThreadId
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadPriority(
         HANDLE hThread,
         int nPriority
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadPriorityBoost(
         HANDLE hThread,
         BOOL bDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadPriorityBoost(
          HANDLE hThread,
          PBOOL pDisablePriorityBoost
    );

__declspec(dllimport)
int
__stdcall
GetThreadPriority(
         HANDLE hThread
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadTimes(
          HANDLE hThread,
          LPFILETIME lpCreationTime,
          LPFILETIME lpExitTime,
          LPFILETIME lpKernelTime,
          LPFILETIME lpUserTime
    );



__declspec(dllimport)
BOOL
__stdcall
GetThreadIOPendingFlag(
          HANDLE hThread,
          PBOOL lpIOIsPending
    );



__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitThread(
         DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateThread(
         HANDLE hThread,
         DWORD dwExitCode
    );

__declspec(dllimport)

BOOL
__stdcall
GetExitCodeThread(
          HANDLE hThread,
          LPDWORD lpExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadSelectorEntry(
          HANDLE hThread,
          DWORD dwSelector,
          LPLDT_ENTRY lpSelectorEntry
    );

__declspec(dllimport)
EXECUTION_STATE
__stdcall
SetThreadExecutionState(
         EXECUTION_STATE esFlags
    );



typedef struct _REASON_CONTEXT {
    ULONG Version;
    DWORD Flags;
    union {
        struct {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR *ReasonStrings;

        } Detailed;

        LPWSTR SimpleReasonString;
    } Reason;
} REASON_CONTEXT, *PREASON_CONTEXT;





typedef REASON_CONTEXT POWER_REQUEST_CONTEXT, *PPOWER_REQUEST_CONTEXT, *LPPOWER_REQUEST_CONTEXT;

__declspec(dllimport)
HANDLE
__stdcall
PowerCreateRequest (
         PREASON_CONTEXT Context
    );

__declspec(dllimport)
BOOL
__stdcall
PowerSetRequest (
         HANDLE PowerRequest,
         POWER_REQUEST_TYPE RequestType
    );

__declspec(dllimport)
BOOL
__stdcall
PowerClearRequest (
         HANDLE PowerRequest,
         POWER_REQUEST_TYPE RequestType
    );






__declspec(dllimport)

DWORD
__stdcall
GetLastError(
    void
    );


__declspec(dllimport)
void
__stdcall
SetLastError(
         DWORD dwErrCode
    );
#line 4288 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResult(
          HANDLE hFile,
          LPOVERLAPPED lpOverlapped,
          LPDWORD lpNumberOfBytesTransferred,
          BOOL bWait
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateIoCompletionPort(
             HANDLE FileHandle,
             HANDLE ExistingCompletionPort,
             ULONG_PTR CompletionKey,
             DWORD NumberOfConcurrentThreads
    );

__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatus(
          HANDLE CompletionPort,
          LPDWORD lpNumberOfBytesTransferred,
          PULONG_PTR lpCompletionKey,
          LPOVERLAPPED *lpOverlapped,
          DWORD dwMilliseconds
    );



__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatusEx(
          HANDLE CompletionPort,
                                                     LPOVERLAPPED_ENTRY lpCompletionPortEntries,
          ULONG ulCount,
          PULONG ulNumEntriesRemoved,
          DWORD dwMilliseconds,
          BOOL fAlertable
    );



__declspec(dllimport)
BOOL
__stdcall
PostQueuedCompletionStatus(
             HANDLE CompletionPort,
             DWORD dwNumberOfBytesTransferred,
             ULONG_PTR dwCompletionKey,
             LPOVERLAPPED lpOverlapped
    );
#line 4364 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetFileCompletionNotificationModes(
         HANDLE FileHandle,
         UCHAR Flags
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileIoOverlappedRange(
         HANDLE FileHandle,
         PUCHAR OverlappedRangeStart,
         ULONG Length
    );
#line 4388 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
UINT
__stdcall
GetErrorMode(
    void
    );

__declspec(dllimport)
UINT
__stdcall
SetErrorMode(
         UINT uMode
    );





__declspec(dllimport)
DWORD
__stdcall
GetThreadErrorMode(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadErrorMode(
         DWORD dwNewMode,
             LPDWORD lpOldMode
    );

__declspec(dllimport)
BOOL
__stdcall
ReadProcessMemory(
              HANDLE hProcess,
              LPCVOID lpBaseAddress,
                                                   LPVOID lpBuffer,
              SIZE_T nSize,
              SIZE_T * lpNumberOfBytesRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteProcessMemory(
              HANDLE hProcess,
              LPVOID lpBaseAddress,
                       LPCVOID lpBuffer,
              SIZE_T nSize,
              SIZE_T * lpNumberOfBytesWritten
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadContext(
            HANDLE hThread,
            LPCONTEXT lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadContext(
         HANDLE hThread,
         const CONTEXT *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadContext(
            HANDLE hThread,
            PWOW64_CONTEXT lpContext
    );



__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadSelectorEntry(
         HANDLE hThread,
         DWORD dwSelector,
          PWOW64_LDT_ENTRY lpSelectorEntry
    );



__declspec(dllimport)
BOOL
__stdcall
Wow64SetThreadContext(
         HANDLE hThread,
         const WOW64_CONTEXT *lpContext
    );



__declspec(dllimport)
DWORD
__stdcall
SuspendThread(
         HANDLE hThread
    );

__declspec(dllimport)
DWORD
__stdcall
Wow64SuspendThread(
         HANDLE hThread
    );

__declspec(dllimport)
DWORD
__stdcall
ResumeThread(
         HANDLE hThread
    );




__declspec(dllimport)
DWORD
__stdcall
QueueUserAPC(
         PAPCFUNC pfnAPC,
         HANDLE hThread,
         ULONG_PTR dwData
    );




__declspec(dllimport)
BOOL
__stdcall
IsDebuggerPresent(
    void
    );




__declspec(dllimport)
BOOL
__stdcall
CheckRemoteDebuggerPresent(
          HANDLE hProcess,
          PBOOL pbDebuggerPresent
    );



__declspec(dllimport)
void
__stdcall
DebugBreak(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEvent(
         LPDEBUG_EVENT lpDebugEvent,
         DWORD dwMilliseconds
    );

__declspec(dllimport)
BOOL
__stdcall
ContinueDebugEvent(
         DWORD dwProcessId,
         DWORD dwThreadId,
         DWORD dwContinueStatus
    );

__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcess(
         DWORD dwProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcessStop(
         DWORD dwProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
DebugSetProcessKillOnExit(
         BOOL KillOnExit
    );

__declspec(dllimport)
BOOL
__stdcall
DebugBreakProcess (
         HANDLE Process
    );




__declspec(dllimport)
void
__stdcall
InitializeCriticalSection(
          LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
void
__stdcall
EnterCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
void
__stdcall
LeaveCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );




__declspec(dllimport)
BOOL
__stdcall
InitializeCriticalSectionAndSpinCount(
          LPCRITICAL_SECTION lpCriticalSection,
          DWORD dwSpinCount
    );

__declspec(dllimport)
BOOL
__stdcall
InitializeCriticalSectionEx(
          LPCRITICAL_SECTION lpCriticalSection,
          DWORD dwSpinCount,
          DWORD Flags
    );

__declspec(dllimport)
DWORD
__stdcall
SetCriticalSectionSpinCount(
            LPCRITICAL_SECTION lpCriticalSection,
            DWORD dwSpinCount
    );



__declspec(dllimport)
BOOL
__stdcall
TryEnterCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );


__declspec(dllimport)
void
__stdcall
DeleteCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
BOOL
__stdcall
SetEvent(
         HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ResetEvent(
         HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
PulseEvent(
         HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ReleaseSemaphore(
              HANDLE hSemaphore,
              LONG lReleaseCount,
              LPLONG lpPreviousCount
    );

__declspec(dllimport)
BOOL
__stdcall
ReleaseMutex(
         HANDLE hMutex
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObject(
         HANDLE hHandle,
         DWORD dwMilliseconds
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjects(
         DWORD nCount,
                        const HANDLE *lpHandles,
         BOOL bWaitAll,
         DWORD dwMilliseconds
    );

__declspec(dllimport)
void
__stdcall
Sleep(
         DWORD dwMilliseconds
    );

__declspec(dllimport)

HGLOBAL
__stdcall
LoadResource(
             HMODULE hModule,
         HRSRC hResInfo
    );

__declspec(dllimport)
DWORD
__stdcall
SizeofResource(
             HMODULE hModule,
         HRSRC hResInfo
    );


__declspec(dllimport)
ATOM
__stdcall
GlobalDeleteAtom(
         ATOM nAtom
    );

__declspec(dllimport)
BOOL
__stdcall
InitAtomTable(
         DWORD nSize
    );

__declspec(dllimport)
ATOM
__stdcall
DeleteAtom(
         ATOM nAtom
    );

__declspec(dllimport)
UINT
__stdcall
SetHandleCount(
         UINT uNumber
    );

__declspec(dllimport)
DWORD
__stdcall
GetLogicalDrives(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
LockFile(
         HANDLE hFile,
         DWORD dwFileOffsetLow,
         DWORD dwFileOffsetHigh,
         DWORD nNumberOfBytesToLockLow,
         DWORD nNumberOfBytesToLockHigh
    );

__declspec(dllimport)
BOOL
__stdcall
UnlockFile(
         HANDLE hFile,
         DWORD dwFileOffsetLow,
         DWORD dwFileOffsetHigh,
         DWORD nNumberOfBytesToUnlockLow,
         DWORD nNumberOfBytesToUnlockHigh
    );

__declspec(dllimport)
BOOL
__stdcall
LockFileEx(
               HANDLE hFile,
               DWORD dwFlags,
               DWORD dwReserved,
               DWORD nNumberOfBytesToLockLow,
               DWORD nNumberOfBytesToLockHigh,
               LPOVERLAPPED lpOverlapped
    );




__declspec(dllimport)
BOOL
__stdcall
UnlockFileEx(
               HANDLE hFile,
               DWORD dwReserved,
               DWORD nNumberOfBytesToUnlockLow,
               DWORD nNumberOfBytesToUnlockHigh,
               LPOVERLAPPED lpOverlapped
    );

typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandle(
          HANDLE hFile,
          LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileType(
         HANDLE hFile
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileSize(
              HANDLE hFile,
              LPDWORD lpFileSizeHigh
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileSizeEx(
          HANDLE hFile,
          PLARGE_INTEGER lpFileSize
    );


__declspec(dllimport)
HANDLE
__stdcall
GetStdHandle(
         DWORD nStdHandle
    );

__declspec(dllimport)
BOOL
__stdcall
SetStdHandle(
         DWORD nStdHandle,
         HANDLE hHandle
    );



__declspec(dllimport)
BOOL
__stdcall
SetStdHandleEx(
              DWORD nStdHandle,
              HANDLE hHandle,
              PHANDLE phPrevValue
    );



__declspec(dllimport)
BOOL
__stdcall
WriteFile(
                HANDLE hFile,
                                           LPCVOID lpBuffer,
                DWORD nNumberOfBytesToWrite,
                LPDWORD lpNumberOfBytesWritten,
                LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
ReadFile(
                HANDLE hFile,
                                                                                              LPVOID lpBuffer,
                DWORD nNumberOfBytesToRead,
                LPDWORD lpNumberOfBytesRead,
                LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
FlushFileBuffers(
         HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
DeviceIoControl(
                HANDLE hDevice,
                DWORD dwIoControlCode,
                                   LPVOID lpInBuffer,
                DWORD nInBufferSize,
                                                            LPVOID lpOutBuffer,
                DWORD nOutBufferSize,
                LPDWORD lpBytesReturned,
                LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
RequestDeviceWakeup(
         HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
CancelDeviceWakeupRequest(
         HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
GetDevicePowerState(
          HANDLE hDevice,
          BOOL *pfOn
    );

__declspec(dllimport)
BOOL
__stdcall
SetMessageWaitingIndicator(
         HANDLE hMsgIndicator,
         ULONG ulMsgCount
    );

__declspec(dllimport)
BOOL
__stdcall
SetEndOfFile(
         HANDLE hFile
    );

__declspec(dllimport)
DWORD
__stdcall
SetFilePointer(
                HANDLE hFile,
                LONG lDistanceToMove,
                PLONG lpDistanceToMoveHigh,
                DWORD dwMoveMethod
    );

__declspec(dllimport)
BOOL
__stdcall
SetFilePointerEx(
              HANDLE hFile,
              LARGE_INTEGER liDistanceToMove,
              PLARGE_INTEGER lpNewFilePointer,
              DWORD dwMoveMethod
    );

__declspec(dllimport)
BOOL
__stdcall
FindClose(
            HANDLE hFindFile
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileTime(
              HANDLE hFile,
              LPFILETIME lpCreationTime,
              LPFILETIME lpLastAccessTime,
              LPFILETIME lpLastWriteTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileTime(
             HANDLE hFile,
             const FILETIME *lpCreationTime,
             const FILETIME *lpLastAccessTime,
             const FILETIME *lpLastWriteTime
    );




__declspec(dllimport)
BOOL
__stdcall
SetFileValidData(
         HANDLE hFile,
         LONGLONG ValidDataLength
    );




__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameA(
         HANDLE hFile,
         LPCSTR lpShortName
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameW(
         HANDLE hFile,
         LPCWSTR lpShortName
    );






__declspec(dllimport)
BOOL
__stdcall
CloseHandle(
         HANDLE hObject
    );

__declspec(dllimport)
BOOL
__stdcall
DuplicateHandle(
                HANDLE hSourceProcessHandle,
                HANDLE hSourceHandle,
                HANDLE hTargetProcessHandle,
                LPHANDLE lpTargetHandle,
                DWORD dwDesiredAccess,
                BOOL bInheritHandle,
                DWORD dwOptions
    );

__declspec(dllimport)
BOOL
__stdcall
GetHandleInformation(
          HANDLE hObject,
          LPDWORD lpdwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetHandleInformation(
         HANDLE hObject,
         DWORD dwMask,
         DWORD dwFlags
    );






__declspec(dllimport)
DWORD
__stdcall
LoadModule(
         LPCSTR lpModuleName,
         LPVOID lpParameterBlock
    );



__declspec(dllimport)
UINT
__stdcall
WinExec(
         LPCSTR lpCmdLine,
         UINT uCmdShow
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommBreak(
         HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommError(
              HANDLE hFile,
              LPDWORD lpErrors,
              LPCOMSTAT lpStat
    );

__declspec(dllimport)
BOOL
__stdcall
SetupComm(
         HANDLE hFile,
         DWORD dwInQueue,
         DWORD dwOutQueue
    );

__declspec(dllimport)
BOOL
__stdcall
EscapeCommFunction(
         HANDLE hFile,
         DWORD dwFunc
    );

__declspec(dllimport)

BOOL
__stdcall
GetCommConfig(
              HANDLE hCommDev,
                                LPCOMMCONFIG lpCC,
              LPDWORD lpdwSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommMask(
          HANDLE hFile,
          LPDWORD lpEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommProperties(
            HANDLE hFile,
            LPCOMMPROP lpCommProp
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommModemStatus(
          HANDLE hFile,
          LPDWORD lpModemStat
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommState(
          HANDLE hFile,
          LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommTimeouts(
          HANDLE hFile,
          LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
PurgeComm(
         HANDLE hFile,
         DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommBreak(
         HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommConfig(
         HANDLE hCommDev,
                        LPCOMMCONFIG lpCC,
         DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommMask(
         HANDLE hFile,
         DWORD dwEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommState(
         HANDLE hFile,
         LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommTimeouts(
         HANDLE hFile,
         LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
TransmitCommChar(
         HANDLE hFile,
         char cChar
    );

__declspec(dllimport)
BOOL
__stdcall
WaitCommEvent(
                HANDLE hFile,
                LPDWORD lpEvtMask,
                LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
DWORD
__stdcall
SetTapePosition(
         HANDLE hDevice,
         DWORD dwPositionMethod,
         DWORD dwPartition,
         DWORD dwOffsetLow,
         DWORD dwOffsetHigh,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapePosition(
          HANDLE hDevice,
          DWORD dwPositionType,
          LPDWORD lpdwPartition,
          LPDWORD lpdwOffsetLow,
          LPDWORD lpdwOffsetHigh
    );

__declspec(dllimport)
DWORD
__stdcall
PrepareTape(
         HANDLE hDevice,
         DWORD dwOperation,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
EraseTape(
         HANDLE hDevice,
         DWORD dwEraseType,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
CreateTapePartition(
         HANDLE hDevice,
         DWORD dwPartitionMethod,
         DWORD dwCount,
         DWORD dwSize
    );

__declspec(dllimport)
DWORD
__stdcall
WriteTapemark(
         HANDLE hDevice,
         DWORD dwTapemarkType,
         DWORD dwTapemarkCount,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeStatus(
         HANDLE hDevice
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeParameters(
            HANDLE hDevice,
            DWORD dwOperation,
            LPDWORD lpdwSize,
                            LPVOID lpTapeInformation
    );




__declspec(dllimport)
DWORD
__stdcall
SetTapeParameters(
         HANDLE hDevice,
         DWORD dwOperation,
         LPVOID lpTapeInformation
    );




__declspec(dllimport)
BOOL
__stdcall
Beep(
         DWORD dwFreq,
         DWORD dwDuration
    );

__declspec(dllimport)
int
__stdcall
MulDiv(
         int nNumber,
         int nNumerator,
         int nDenominator
    );

__declspec(dllimport)
void
__stdcall
GetSystemTime(
          LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetSystemTimeAsFileTime(
          LPFILETIME lpSystemTimeAsFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemTime(
         const SYSTEMTIME *lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetLocalTime(
          LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetLocalTime(
         const SYSTEMTIME *lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetSystemInfo(
          LPSYSTEM_INFO lpSystemInfo
    );

typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
} DEP_SYSTEM_POLICY_TYPE;

__declspec(dllimport)
DEP_SYSTEM_POLICY_TYPE
__stdcall
GetSystemDEPPolicy(
    void
    );
#line 5450 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetSystemFileCacheSize (
         SIZE_T MinimumFileCacheSize,
         SIZE_T MaximumFileCacheSize,
         DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
GetSystemFileCacheSize (
          PSIZE_T lpMinimumFileCacheSize,
          PSIZE_T lpMaximumFileCacheSize,
          PDWORD lpFlags
    );





__declspec(dllimport)
BOOL
__stdcall
GetSystemRegistryQuota(
              PDWORD pdwQuotaAllowed,
              PDWORD pdwQuotaUsed
    );

BOOL
__stdcall
GetSystemTimes(
              LPFILETIME lpIdleTime,
              LPFILETIME lpKernelTime,
              LPFILETIME lpUserTime
    );




__declspec(dllimport)
void
__stdcall
GetNativeSystemInfo(
          LPSYSTEM_INFO lpSystemInfo
    );


__declspec(dllimport)
BOOL
__stdcall
IsProcessorFeaturePresent(
         DWORD ProcessorFeature
    );

typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[ 128 ];
    BOOLEAN DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;


__declspec(dllimport)
BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
             const TIME_ZONE_INFORMATION *lpTimeZoneInformation,
             const SYSTEMTIME *lpUniversalTime,
             LPSYSTEMTIME lpLocalTime
    );

__declspec(dllimport)
BOOL
__stdcall
TzSpecificLocalTimeToSystemTime(
             const TIME_ZONE_INFORMATION *lpTimeZoneInformation,
             const SYSTEMTIME *lpLocalTime,
             LPSYSTEMTIME lpUniversalTime
    );

BOOL
__stdcall
GetTimeZoneInformationForYear(
         USHORT wYear,
             PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,
          LPTIME_ZONE_INFORMATION ptzi
    );

__declspec(dllimport)
DWORD
__stdcall
GetTimeZoneInformation(
          LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );

__declspec(dllimport)
BOOL
__stdcall
SetTimeZoneInformation(
         const TIME_ZONE_INFORMATION *lpTimeZoneInformation
    );

__declspec(dllimport)
DWORD
__stdcall
GetDynamicTimeZoneInformation(
          PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
    );

__declspec(dllimport)
BOOL
__stdcall
SetDynamicTimeZoneInformation(
         const DYNAMIC_TIME_ZONE_INFORMATION *lpTimeZoneInformation
    );







__declspec(dllimport)
BOOL
__stdcall
SystemTimeToFileTime(
          const SYSTEMTIME *lpSystemTime,
          LPFILETIME lpFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToLocalFileTime(
          const FILETIME *lpFileTime,
          LPFILETIME lpLocalFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
LocalFileTimeToFileTime(
          const FILETIME *lpLocalFileTime,
          LPFILETIME lpFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToSystemTime(
          const FILETIME *lpFileTime,
          LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
LONG
__stdcall
CompareFileTime(
         const FILETIME *lpFileTime1,
         const FILETIME *lpFileTime2
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToDosDateTime(
          const FILETIME *lpFileTime,
          LPWORD lpFatDate,
          LPWORD lpFatTime
    );

__declspec(dllimport)
BOOL
__stdcall
DosDateTimeToFileTime(
          WORD wFatDate,
          WORD wFatTime,
          LPFILETIME lpFileTime
    );


__declspec(dllimport)
DWORD
__stdcall
GetTickCount(
    void
    );



__declspec(dllimport)
ULONGLONG
__stdcall
GetTickCount64(
    void
    );



__declspec(dllimport)
BOOL
__stdcall
SetSystemTimeAdjustment(
         DWORD dwTimeAdjustment,
         BOOL bTimeAdjustmentDisabled
    );

__declspec(dllimport)
BOOL
__stdcall
GetSystemTimeAdjustment(
          PDWORD lpTimeAdjustment,
          PDWORD lpTimeIncrement,
          PBOOL lpTimeAdjustmentDisabled
    );


__declspec(dllimport)
DWORD
__stdcall
FormatMessageA(
             DWORD dwFlags,
             LPCVOID lpSource,
             DWORD dwMessageId,
             DWORD dwLanguageId,
             LPSTR lpBuffer,
             DWORD nSize,
             va_list *Arguments
    );
__declspec(dllimport)
DWORD
__stdcall
FormatMessageW(
             DWORD dwFlags,
             LPCVOID lpSource,
             DWORD dwMessageId,
             DWORD dwLanguageId,
             LPWSTR lpBuffer,
             DWORD nSize,
             va_list *Arguments
    );
#line 5755 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreatePipe(
                         PHANDLE hReadPipe,
                         PHANDLE hWritePipe,
             LPSECURITY_ATTRIBUTES lpPipeAttributes,
             DWORD nSize
    );

__declspec(dllimport)
BOOL
__stdcall
ConnectNamedPipe(
                HANDLE hNamedPipe,
                LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
DisconnectNamedPipe(
         HANDLE hNamedPipe
    );

__declspec(dllimport)
BOOL
__stdcall
SetNamedPipeHandleState(
             HANDLE hNamedPipe,
             LPDWORD lpMode,
             LPDWORD lpMaxCollectionCount,
             LPDWORD lpCollectDataTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeInfo(
              HANDLE hNamedPipe,
              LPDWORD lpFlags,
              LPDWORD lpOutBufferSize,
              LPDWORD lpInBufferSize,
              LPDWORD lpMaxInstances
    );

__declspec(dllimport)
BOOL
__stdcall
PeekNamedPipe(
              HANDLE hNamedPipe,
                                                     LPVOID lpBuffer,
              DWORD nBufferSize,
              LPDWORD lpBytesRead,
              LPDWORD lpTotalBytesAvail,
              LPDWORD lpBytesLeftThisMessage
    );

__declspec(dllimport)
BOOL
__stdcall
TransactNamedPipe(
                HANDLE hNamedPipe,
                                   LPVOID lpInBuffer,
                DWORD nInBufferSize,
                                                        LPVOID lpOutBuffer,
                DWORD nOutBufferSize,
                LPDWORD lpBytesRead,
                LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateMailslotA(
             LPCSTR lpName,
             DWORD nMaxMessageSize,
             DWORD lReadTimeout,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateMailslotW(
             LPCWSTR lpName,
             DWORD nMaxMessageSize,
             DWORD lReadTimeout,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
GetMailslotInfo(
              HANDLE hMailslot,
              LPDWORD lpMaxMessageSize,
              LPDWORD lpNextSize,
              LPDWORD lpMessageCount,
              LPDWORD lpReadTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
SetMailslotInfo(
         HANDLE hMailslot,
         DWORD lReadTimeout
    );

__declspec(dllimport)

LPVOID
__stdcall
MapViewOfFile(
         HANDLE hFileMappingObject,
         DWORD dwDesiredAccess,
         DWORD dwFileOffsetHigh,
         DWORD dwFileOffsetLow,
         SIZE_T dwNumberOfBytesToMap
    );

__declspec(dllimport)
BOOL
__stdcall
FlushViewOfFile(
         LPCVOID lpBaseAddress,
         SIZE_T dwNumberOfBytesToFlush
    );

__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile(
         LPCVOID lpBaseAddress
    );





__declspec(dllimport)
BOOL
__stdcall
EncryptFileA(
         LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
EncryptFileW(
         LPCWSTR lpFileName
    );






__declspec(dllimport)
BOOL
__stdcall
DecryptFileA(
               LPCSTR lpFileName,
               DWORD dwReserved
    );
__declspec(dllimport)
BOOL
__stdcall
DecryptFileW(
               LPCWSTR lpFileName,
               DWORD dwReserved
    );
#line 5955 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusA(
          LPCSTR lpFileName,
          LPDWORD lpStatus
    );
__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusW(
          LPCWSTR lpFileName,
          LPDWORD lpStatus
    );
#line 5981 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef
DWORD
(__stdcall *PFE_EXPORT_FUNC)(
                          PBYTE pbData,
             PVOID pvCallbackContext,
             ULONG ulLength
    );

typedef
DWORD
(__stdcall *PFE_IMPORT_FUNC)(
                                            PBYTE pbData,
             PVOID pvCallbackContext,
             PULONG ulLength
    );
#line 6008 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawA(
                LPCSTR lpFileName,
                ULONG ulFlags,
                PVOID *pvContext
    );
__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawW(
                LPCWSTR lpFileName,
                ULONG ulFlags,
                PVOID *pvContext
    );






__declspec(dllimport)
DWORD
__stdcall
ReadEncryptedFileRaw(
             PFE_EXPORT_FUNC pfExportCallback,
             PVOID pvCallbackContext,
             PVOID pvContext
    );

__declspec(dllimport)
DWORD
__stdcall
WriteEncryptedFileRaw(
             PFE_IMPORT_FUNC pfImportCallback,
             PVOID pvCallbackContext,
             PVOID pvContext
    );

__declspec(dllimport)
void
__stdcall
CloseEncryptedFileRaw(
         PVOID pvContext
    );





__declspec(dllimport)
int
__stdcall
lstrcmpA(
         LPCSTR lpString1,
         LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpW(
         LPCWSTR lpString1,
         LPCWSTR lpString2
    );






__declspec(dllimport)
int
__stdcall
lstrcmpiA(
         LPCSTR lpString1,
         LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpiW(
         LPCWSTR lpString1,
         LPCWSTR lpString2
    );






__declspec(dllimport)

LPSTR
__stdcall
lstrcpynA(
                             LPSTR lpString1,
         LPCSTR lpString2,
         int iMaxLength
    );
__declspec(dllimport)

LPWSTR
__stdcall
lstrcpynW(
                             LPWSTR lpString1,
         LPCWSTR lpString2,
         int iMaxLength
    );







#pragma warning(push)
#pragma warning(disable:4995)


__declspec(dllimport)

LPSTR
__stdcall
lstrcpyA(
            LPSTR lpString1,
          LPCSTR lpString2
    );
__declspec(dllimport)

LPWSTR
__stdcall
lstrcpyW(
            LPWSTR lpString1,
          LPCWSTR lpString2
    );






__declspec(dllimport)

LPSTR
__stdcall
lstrcatA(
            LPSTR lpString1,
            LPCSTR lpString2
    );
__declspec(dllimport)

LPWSTR
__stdcall
lstrcatW(
            LPWSTR lpString1,
            LPCWSTR lpString2
    );







#pragma warning(pop)


__declspec(dllimport)
int
__stdcall
lstrlenA(
         LPCSTR lpString
    );
__declspec(dllimport)
int
__stdcall
lstrlenW(
         LPCWSTR lpString
    );






__declspec(dllimport)
HFILE
__stdcall
OpenFile(
            LPCSTR lpFileName,
            LPOFSTRUCT lpReOpenBuff,
            UINT uStyle
    );

__declspec(dllimport)
HFILE
__stdcall
_lopen(
         LPCSTR lpPathName,
         int iReadWrite
    );

__declspec(dllimport)
HFILE
__stdcall
_lcreat(
         LPCSTR lpPathName,
         int iAttribute
    );

__declspec(dllimport)
UINT
__stdcall
_lread(
         HFILE hFile,
                                      LPVOID lpBuffer,
         UINT uBytes
    );

__declspec(dllimport)
UINT
__stdcall
_lwrite(
         HFILE hFile,
                        LPCCH lpBuffer,
         UINT uBytes
    );

__declspec(dllimport)
long
__stdcall
_hread(
         HFILE hFile,
                                      LPVOID lpBuffer,
         long lBytes
    );

__declspec(dllimport)
long
__stdcall
_hwrite(
         HFILE hFile,
                        LPCCH lpBuffer,
         long lBytes
    );

__declspec(dllimport)
HFILE
__stdcall
_lclose(
         HFILE hFile
    );

__declspec(dllimport)
LONG
__stdcall
_llseek(
         HFILE hFile,
         LONG lOffset,
         int iOrigin
    );

__declspec(dllimport)
BOOL
__stdcall
IsTextUnicode(
                       const void* lpv,
                int iSize,
                LPINT lpiResult
    );



__declspec(dllimport)
DWORD
__stdcall
FlsAlloc(
             PFLS_CALLBACK_FUNCTION lpCallback
    );

__declspec(dllimport)
PVOID
__stdcall
FlsGetValue(
         DWORD dwFlsIndex
    );

__declspec(dllimport)
BOOL
__stdcall
FlsSetValue(
             DWORD dwFlsIndex,
             PVOID lpFlsData
    );

__declspec(dllimport)
BOOL
__stdcall
FlsFree(
         DWORD dwFlsIndex
    );



__declspec(dllimport)
DWORD
__stdcall
TlsAlloc(
    void
    );

__declspec(dllimport)
LPVOID
__stdcall
TlsGetValue(
         DWORD dwTlsIndex
    );

__declspec(dllimport)
BOOL
__stdcall
TlsSetValue(
             DWORD dwTlsIndex,
             LPVOID lpTlsValue
    );

__declspec(dllimport)
BOOL
__stdcall
TlsFree(
         DWORD dwTlsIndex
    );

typedef
void
(__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
            DWORD dwErrorCode,
            DWORD dwNumberOfBytesTransfered,
            LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
DWORD
__stdcall
SleepEx(
         DWORD dwMilliseconds,
         BOOL bAlertable
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObjectEx(
         HANDLE hHandle,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjectsEx(
         DWORD nCount,
                        const HANDLE *lpHandles,
         BOOL bWaitAll,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );


__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
         HANDLE hObjectToSignal,
         HANDLE hObjectToWaitOn,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );


__declspec(dllimport)
BOOL
__stdcall
ReadFileEx(
             HANDLE hFile,
                                                                   LPVOID lpBuffer,
             DWORD nNumberOfBytesToRead,
             LPOVERLAPPED lpOverlapped,
             LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFileEx(
             HANDLE hFile,
                                           LPCVOID lpBuffer,
             DWORD nNumberOfBytesToWrite,
             LPOVERLAPPED lpOverlapped,
             LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

__declspec(dllimport)
BOOL
__stdcall
BackupRead(
            HANDLE hFile,
                                                                  LPBYTE lpBuffer,
            DWORD nNumberOfBytesToRead,
            LPDWORD lpNumberOfBytesRead,
            BOOL bAbort,
            BOOL bProcessSecurity,
            LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupSeek(
            HANDLE hFile,
            DWORD dwLowBytesToSeek,
            DWORD dwHighBytesToSeek,
            LPDWORD lpdwLowByteSeeked,
            LPDWORD lpdwHighByteSeeked,
            LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupWrite(
            HANDLE hFile,
                                       LPBYTE lpBuffer,
            DWORD nNumberOfBytesToWrite,
            LPDWORD lpNumberOfBytesWritten,
            BOOL bAbort,
            BOOL bProcessSecurity,
            LPVOID *lpContext
    );




typedef struct _WIN32_STREAM_ID {
        DWORD dwStreamId ;
        DWORD dwStreamAttributes ;
        LARGE_INTEGER Size ;
        DWORD dwStreamNameSize ;
        WCHAR cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;
#line 6488 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
ReadFileScatter(
               HANDLE hFile,
               FILE_SEGMENT_ELEMENT aSegmentArray[],
               DWORD nNumberOfBytesToRead,
               LPDWORD lpReserved,
               LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFileGather(
               HANDLE hFile,
               FILE_SEGMENT_ELEMENT aSegmentArray[],
               DWORD nNumberOfBytesToWrite,
               LPDWORD lpReserved,
               LPOVERLAPPED lpOverlapped
    );
#line 6532 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;




typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;




typedef struct _STARTUPINFOEXA {
    STARTUPINFOA StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXA, *LPSTARTUPINFOEXA;
typedef struct _STARTUPINFOEXW {
    STARTUPINFOW StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXW, *LPSTARTUPINFOEXW;




typedef STARTUPINFOEXA STARTUPINFOEX;
typedef LPSTARTUPINFOEXA LPSTARTUPINFOEX;






typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR cFileName[ 260 ];
    CHAR cAlternateFileName[ 14 ];





} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR cFileName[ 260 ];
    WCHAR cAlternateFileName[ 14 ];





} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;





typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;


typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;





__declspec(dllimport)

HANDLE
__stdcall
CreateMutexA(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
             BOOL bInitialOwner,
             LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateMutexW(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
             BOOL bInitialOwner,
             LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenMutexA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
OpenMutexW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
CreateEventA(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
             BOOL bManualReset,
             BOOL bInitialState,
             LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateEventW(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
             BOOL bManualReset,
             BOOL bInitialState,
             LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenEventA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
OpenEventW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreA(
             LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
             LONG lInitialCount,
             LONG lMaximumCount,
             LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreW(
             LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
             LONG lInitialCount,
             LONG lMaximumCount,
             LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenSemaphoreA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
OpenSemaphoreW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );







typedef
void
(__stdcall *PTIMERAPCROUTINE)(
             LPVOID lpArgToCompletionRoutine,
             DWORD dwTimerLowValue,
             DWORD dwTimerHighValue
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerA(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             BOOL bManualReset,
             LPCSTR lpTimerName
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerW(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             BOOL bManualReset,
             LPCWSTR lpTimerName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenWaitableTimerA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpTimerName
    );
__declspec(dllimport)

HANDLE
__stdcall
OpenWaitableTimerW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpTimerName
    );
#line 6866 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
BOOL
__stdcall
SetWaitableTimerEx(
             HANDLE hTimer,
             const LARGE_INTEGER *lpDueTime,
             LONG lPeriod,
             PTIMERAPCROUTINE pfnCompletionRoutine,
             LPVOID lpArgToCompletionRoutine,
             PREASON_CONTEXT WakeContext,
             ULONG TolerableDelay
    );



__declspec(dllimport)
BOOL
__stdcall
SetWaitableTimer(
             HANDLE hTimer,
             const LARGE_INTEGER *lpDueTime,
             LONG lPeriod,
             PTIMERAPCROUTINE pfnCompletionRoutine,
             LPVOID lpArgToCompletionRoutine,
             BOOL fResume
    );

__declspec(dllimport)
BOOL
__stdcall
CancelWaitableTimer(
         HANDLE hTimer
    );





__declspec(dllimport)

HANDLE
__stdcall
CreateMutexExA(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
             LPCSTR lpName,
             DWORD dwFlags,
             DWORD dwDesiredAccess
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateMutexExW(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
             LPCWSTR lpName,
             DWORD dwFlags,
             DWORD dwDesiredAccess
    );
#line 6932 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateEventExA(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
             LPCSTR lpName,
             DWORD dwFlags,
             DWORD dwDesiredAccess
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateEventExW(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
             LPCWSTR lpName,
             DWORD dwFlags,
             DWORD dwDesiredAccess
    );






__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreExA(
                LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
                LONG lInitialCount,
                LONG lMaximumCount,
                LPCSTR lpName,
                DWORD dwFlags,
                DWORD dwDesiredAccess
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreExW(
                LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
                LONG lInitialCount,
                LONG lMaximumCount,
                LPCWSTR lpName,
                DWORD dwFlags,
                DWORD dwDesiredAccess
    );
#line 6990 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerExA(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             LPCSTR lpTimerName,
             DWORD dwFlags,
             DWORD dwDesiredAccess
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerExW(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             LPCWSTR lpTimerName,
             DWORD dwFlags,
             DWORD dwDesiredAccess
    );
#line 7020 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingA(
             HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
             DWORD flProtect,
             DWORD dwMaximumSizeHigh,
             DWORD dwMaximumSizeLow,
             LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingW(
             HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
             DWORD flProtect,
             DWORD dwMaximumSizeHigh,
             DWORD dwMaximumSizeLow,
             LPCWSTR lpName
    );
#line 7052 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingNumaA(
             HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
             DWORD flProtect,
             DWORD dwMaximumSizeHigh,
             DWORD dwMaximumSizeLow,
             LPCSTR lpName,
             DWORD nndPreferred
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingNumaW(
             HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
             DWORD flProtect,
             DWORD dwMaximumSizeHigh,
             DWORD dwMaximumSizeLow,
             LPCWSTR lpName,
             DWORD nndPreferred
    );
#line 7086 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
OpenFileMappingA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
OpenFileMappingW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );






__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsA(
         DWORD nBufferLength,
                                                     LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsW(
         DWORD nBufferLength,
                                                     LPWSTR lpBuffer
    );
#line 7132 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;

__declspec(dllimport)

HANDLE
__stdcall
CreateMemoryResourceNotification(
         MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
    );

__declspec(dllimport)
BOOL
__stdcall
QueryMemoryResourceNotification(
          HANDLE ResourceNotificationHandle,
          PBOOL ResourceState
    );




__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryA(
         LPCSTR lpLibFileName
    );
__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryW(
         LPCWSTR lpLibFileName
    );






__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryExA(
               LPCSTR lpLibFileName,
               HANDLE hFile,
               DWORD dwFlags
    );
__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryExW(
               LPCWSTR lpLibFileName,
               HANDLE hFile,
               DWORD dwFlags
    );
#line 7208 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
GetModuleFileNameA(
             HMODULE hModule,
                                         LPSTR lpFilename,
             DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetModuleFileNameW(
             HMODULE hModule,
                                         LPWSTR lpFilename,
             DWORD nSize
    );






__declspec(dllimport)

HMODULE
__stdcall
GetModuleHandleA(
             LPCSTR lpModuleName
    );
__declspec(dllimport)

HMODULE
__stdcall
GetModuleHandleW(
             LPCWSTR lpModuleName
    );
#line 7257 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXA)(
                DWORD dwFlags,
                LPCSTR lpModuleName,
                HMODULE* phModule
    );
typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXW)(
                DWORD dwFlags,
                LPCWSTR lpModuleName,
                HMODULE* phModule
    );






__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExA(
                DWORD dwFlags,
                LPCSTR lpModuleName,
          HMODULE* phModule
    );
__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExW(
                DWORD dwFlags,
                LPCWSTR lpModuleName,
          HMODULE* phModule
    );
#line 7306 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathA(
         LPCSTR ExeName
    );
__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathW(
         LPCWSTR ExeName
    );
#line 7330 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameA(
         HANDLE hProcess,
         DWORD dwFlags,
                                            LPSTR lpExeName,
            PDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameW(
         HANDLE hProcess,
         DWORD dwFlags,
                                            LPWSTR lpExeName,
            PDWORD lpdwSize
    );
#line 7367 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef enum _PROC_THREAD_ATTRIBUTE_NUM {
    ProcThreadAttributeParentProcess = 0,
    ProcThreadAttributeExtendedFlags,
    ProcThreadAttributeHandleList,
    ProcThreadAttributeGroupAffinity,
    ProcThreadAttributePreferredNode,
    ProcThreadAttributeIdealProcessor,
    ProcThreadAttributeUmsThread,
    ProcThreadAttributeMitigationPolicy,
    ProcThreadAttributeMax
} PROC_THREAD_ATTRIBUTE_NUM;
#line 7407 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
InitializeProcThreadAttributeList(
                              LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
         DWORD dwAttributeCount,
               DWORD dwFlags,
            PSIZE_T lpSize
    );

__declspec(dllimport)
void
__stdcall
DeleteProcThreadAttributeList(
            LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
    );



__declspec(dllimport)
BOOL
__stdcall
UpdateProcThreadAttribute(
            LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
         DWORD dwFlags,
         DWORD_PTR Attribute,
                            PVOID lpValue,
         SIZE_T cbSize,
                             PVOID lpPreviousValue,
             PSIZE_T lpReturnSize
    );




__declspec(dllimport)
BOOL
__stdcall
CreateProcessA(
                LPCSTR lpApplicationName,
                LPSTR lpCommandLine,
                LPSECURITY_ATTRIBUTES lpProcessAttributes,
                LPSECURITY_ATTRIBUTES lpThreadAttributes,
                BOOL bInheritHandles,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCSTR lpCurrentDirectory,
                LPSTARTUPINFOA lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
    );
__declspec(dllimport)
BOOL
__stdcall
CreateProcessW(
                LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
                LPSECURITY_ATTRIBUTES lpProcessAttributes,
                LPSECURITY_ATTRIBUTES lpThreadAttributes,
                BOOL bInheritHandles,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCWSTR lpCurrentDirectory,
                LPSTARTUPINFOW lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
    );
#line 7480 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetProcessShutdownParameters(
         DWORD dwLevel,
         DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessShutdownParameters(
          LPDWORD lpdwLevel,
          LPDWORD lpdwFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetProcessVersion(
         DWORD ProcessId
    );

__declspec(dllimport)
void
__stdcall
FatalAppExitA(
         UINT uAction,
         LPCSTR lpMessageText
    );
__declspec(dllimport)
void
__stdcall
FatalAppExitW(
         UINT uAction,
         LPCWSTR lpMessageText
    );






__declspec(dllimport)
void
__stdcall
GetStartupInfoA(
          LPSTARTUPINFOA lpStartupInfo
    );
__declspec(dllimport)
void
__stdcall
GetStartupInfoW(
          LPSTARTUPINFOW lpStartupInfo
    );






__declspec(dllimport)

LPSTR
__stdcall
GetCommandLineA(
    void
    );
__declspec(dllimport)

LPWSTR
__stdcall
GetCommandLineW(
    void
    );






__declspec(dllimport)


DWORD
__stdcall
GetEnvironmentVariableA(
             LPCSTR lpName,
                                             LPSTR lpBuffer,
         DWORD nSize
    );
__declspec(dllimport)


DWORD
__stdcall
GetEnvironmentVariableW(
             LPCWSTR lpName,
                                             LPWSTR lpBuffer,
         DWORD nSize
    );
#line 7609 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableA(
             LPCSTR lpName,
             LPCSTR lpValue
    );
__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableW(
             LPCWSTR lpName,
             LPCWSTR lpValue
    );
#line 7649 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)


DWORD
__stdcall
ExpandEnvironmentStringsA(
         LPCSTR lpSrc,
                                         LPSTR lpDst,
         DWORD nSize
    );
__declspec(dllimport)


DWORD
__stdcall
ExpandEnvironmentStringsW(
         LPCWSTR lpSrc,
                                         LPWSTR lpDst,
         DWORD nSize
    );






__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                         PVOID pBuffer,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                         PVOID pBuffer,
         DWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                           PVOID pValue,
         DWORD nSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                           PVOID pValue,
         DWORD nSize
    );







__declspec(dllimport)
void
__stdcall
OutputDebugStringA(
             LPCSTR lpOutputString
    );
__declspec(dllimport)
void
__stdcall
OutputDebugStringW(
             LPCWSTR lpOutputString
    );






__declspec(dllimport)

HRSRC
__stdcall
FindResourceA(
             HMODULE hModule,
             LPCSTR lpName,
             LPCSTR lpType
    );
__declspec(dllimport)

HRSRC
__stdcall
FindResourceW(
             HMODULE hModule,
             LPCWSTR lpName,
             LPCWSTR lpType
    );






__declspec(dllimport)

HRSRC
__stdcall
FindResourceExA(
             HMODULE hModule,
             LPCSTR lpType,
             LPCSTR lpName,
             WORD wLanguage
    );
__declspec(dllimport)

HRSRC
__stdcall
FindResourceExW(
             HMODULE hModule,
             LPCWSTR lpType,
             LPCWSTR lpName,
             WORD wLanguage
    );







typedef BOOL (__stdcall* ENUMRESTYPEPROCA)( HMODULE hModule, LPSTR lpType,
     LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESTYPEPROCW)( HMODULE hModule, LPWSTR lpType,
     LONG_PTR lParam);





typedef BOOL (__stdcall* ENUMRESNAMEPROCA)( HMODULE hModule, LPCSTR lpType,
     LPSTR lpName, LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROCW)( HMODULE hModule, LPCWSTR lpType,
     LPWSTR lpName, LONG_PTR lParam);





typedef BOOL (__stdcall* ENUMRESLANGPROCA)( HMODULE hModule, LPCSTR lpType,
     LPCSTR lpName, WORD wLanguage, LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROCW)( HMODULE hModule, LPCWSTR lpType,
     LPCWSTR lpName, WORD wLanguage, LONG_PTR lParam);
#line 7844 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesA(
             HMODULE hModule,
             ENUMRESTYPEPROCA lpEnumFunc,
             LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesW(
             HMODULE hModule,
             ENUMRESTYPEPROCW lpEnumFunc,
             LONG_PTR lParam
    );






__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesA(
             HMODULE hModule,
             LPCSTR lpType,
             ENUMRESNAMEPROCA lpEnumFunc,
             LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesW(
             HMODULE hModule,
             LPCWSTR lpType,
             ENUMRESNAMEPROCW lpEnumFunc,
             LONG_PTR lParam
    );






__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesA(
             HMODULE hModule,
             LPCSTR lpType,
             LPCSTR lpName,
             ENUMRESLANGPROCA lpEnumFunc,
             LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesW(
             HMODULE hModule,
             LPCWSTR lpType,
             LPCWSTR lpName,
             ENUMRESLANGPROCW lpEnumFunc,
             LONG_PTR lParam
    );
#line 7922 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExA(
             HMODULE hModule,
         ENUMRESTYPEPROCA lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExW(
             HMODULE hModule,
         ENUMRESTYPEPROCW lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );







__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExA(
             HMODULE hModule,
         LPCSTR lpType,
         ENUMRESNAMEPROCA lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExW(
             HMODULE hModule,
         LPCWSTR lpType,
         ENUMRESNAMEPROCW lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );






__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExA(
             HMODULE hModule,
         LPCSTR lpType,
         LPCSTR lpName,
         ENUMRESLANGPROCA lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExW(
             HMODULE hModule,
         LPCWSTR lpType,
         LPCWSTR lpName,
         ENUMRESLANGPROCW lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );






__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceA(
         LPCSTR pFileName,
         BOOL bDeleteExistingResources
    );
__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceW(
         LPCWSTR pFileName,
         BOOL bDeleteExistingResources
    );






__declspec(dllimport)
BOOL
__stdcall
UpdateResourceA(
         HANDLE hUpdate,
         LPCSTR lpType,
         LPCSTR lpName,
         WORD wLanguage,
                        LPVOID lpData,
         DWORD cb
    );
__declspec(dllimport)
BOOL
__stdcall
UpdateResourceW(
         HANDLE hUpdate,
         LPCWSTR lpType,
         LPCWSTR lpName,
         WORD wLanguage,
                        LPVOID lpData,
         DWORD cb
    );






__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceA(
         HANDLE hUpdate,
         BOOL fDiscard
    );
__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceW(
         HANDLE hUpdate,
         BOOL fDiscard
    );







__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameA(
         ATOM nAtom,
                                         LPSTR lpBuffer,
         int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameW(
         ATOM nAtom,
                                         LPWSTR lpBuffer,
         int nSize
    );






__declspec(dllimport)
ATOM
__stdcall
AddAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
AddAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
ATOM
__stdcall
FindAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
FindAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GetAtomNameA(
         ATOM nAtom,
                                         LPSTR lpBuffer,
         int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GetAtomNameW(
         ATOM nAtom,
                                         LPWSTR lpBuffer,
         int nSize
    );






__declspec(dllimport)
UINT
__stdcall
GetProfileIntA(
         LPCSTR lpAppName,
         LPCSTR lpKeyName,
         INT nDefault
    );
__declspec(dllimport)
UINT
__stdcall
GetProfileIntW(
         LPCWSTR lpAppName,
         LPCWSTR lpKeyName,
         INT nDefault
    );






__declspec(dllimport)
DWORD
__stdcall
GetProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpDefault,
                                             LPSTR lpReturnedString,
             DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpDefault,
                                             LPWSTR lpReturnedString,
             DWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpString
    );






__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionA(
         LPCSTR lpAppName,
                                             LPSTR lpReturnedString,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionW(
         LPCWSTR lpAppName,
                                             LPWSTR lpReturnedString,
         DWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionA(
         LPCSTR lpAppName,
         LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionW(
         LPCWSTR lpAppName,
         LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             INT nDefault,
             LPCSTR lpFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             INT nDefault,
             LPCWSTR lpFileName
    );
#line 8352 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpDefault,
                                             LPSTR lpReturnedString,
             DWORD nSize,
             LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpDefault,
                                             LPWSTR lpReturnedString,
             DWORD nSize,
             LPCWSTR lpFileName
    );
#line 8408 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpString,
             LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpString,
             LPCWSTR lpFileName
    );






__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionA(
             LPCSTR lpAppName,
                                             LPSTR lpReturnedString,
             DWORD nSize,
             LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionW(
             LPCWSTR lpAppName,
                                             LPWSTR lpReturnedString,
             DWORD nSize,
             LPCWSTR lpFileName
    );
#line 8480 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionA(
             LPCSTR lpAppName,
             LPCSTR lpString,
             LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionW(
             LPCWSTR lpAppName,
             LPCWSTR lpString,
             LPCWSTR lpFileName
    );







__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesA(
                                             LPSTR lpszReturnBuffer,
             DWORD nSize,
             LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesW(
                                             LPWSTR lpszReturnBuffer,
             DWORD nSize,
             LPCWSTR lpFileName
    );
#line 8547 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructA(
             LPCSTR lpszSection,
             LPCSTR lpszKey,
                                  LPVOID lpStruct,
             UINT uSizeStruct,
             LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructW(
             LPCWSTR lpszSection,
             LPCWSTR lpszKey,
                                  LPVOID lpStruct,
             UINT uSizeStruct,
             LPCWSTR szFile
    );
#line 8599 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructA(
             LPCSTR lpszSection,
             LPCSTR lpszKey,
                                 LPVOID lpStruct,
             UINT uSizeStruct,
             LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructW(
             LPCWSTR lpszSection,
             LPCWSTR lpszKey,
                                 LPVOID lpStruct,
             UINT uSizeStruct,
             LPCWSTR szFile
    );







__declspec(dllimport)
UINT
__stdcall
GetDriveTypeA(
             LPCSTR lpRootPathName
    );
__declspec(dllimport)
UINT
__stdcall
GetDriveTypeW(
             LPCWSTR lpRootPathName
    );






__declspec(dllimport)
UINT
__stdcall
GetSystemDirectoryA(
                                             LPSTR lpBuffer,
         UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetSystemDirectoryW(
                                             LPWSTR lpBuffer,
         UINT uSize
    );






__declspec(dllimport)
DWORD
__stdcall
GetTempPathA(
         DWORD nBufferLength,
                                                     LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetTempPathW(
         DWORD nBufferLength,
                                                     LPWSTR lpBuffer
    );






__declspec(dllimport)
UINT
__stdcall
GetTempFileNameA(
         LPCSTR lpPathName,
         LPCSTR lpPrefixString,
         UINT uUnique,
                           LPSTR lpTempFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetTempFileNameW(
         LPCWSTR lpPathName,
         LPCWSTR lpPrefixString,
         UINT uUnique,
                           LPWSTR lpTempFileName
    );
#line 8732 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
UINT
__stdcall
GetWindowsDirectoryA(
                                             LPSTR lpBuffer,
         UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetWindowsDirectoryW(
                                             LPWSTR lpBuffer,
         UINT uSize
    );






__declspec(dllimport)
UINT
__stdcall
GetSystemWindowsDirectoryA(
                                             LPSTR lpBuffer,
         UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetSystemWindowsDirectoryW(
                                             LPWSTR lpBuffer,
         UINT uSize
    );
#line 8775 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
UINT
__stdcall
GetSystemWow64DirectoryA(
                                             LPSTR lpBuffer,
         UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetSystemWow64DirectoryW(
                                             LPWSTR lpBuffer,
         UINT uSize
    );






__declspec(dllimport)
BOOLEAN
__stdcall
Wow64EnableWow64FsRedirection (
         BOOLEAN Wow64FsEnableRedirection
    );

__declspec(dllimport)
BOOL
__stdcall
Wow64DisableWow64FsRedirection (
          PVOID *OldValue
    );

__declspec(dllimport)
BOOL
__stdcall
Wow64RevertWow64FsRedirection (
         PVOID OlValue
    );





typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_A)( LPSTR lpBuffer, UINT uSize);
typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_W)( LPWSTR lpBuffer, UINT uSize);
#line 8848 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryA(
         LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryW(
         LPCWSTR lpPathName
    );
#line 8884 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
GetCurrentDirectoryA(
         DWORD nBufferLength,
                                                     LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetCurrentDirectoryW(
         DWORD nBufferLength,
                                                     LPWSTR lpBuffer
    );
#line 8926 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryA(
             LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryW(
             LPCWSTR lpPathName
    );






__declspec(dllimport)
DWORD
__stdcall
GetDllDirectoryA(
         DWORD nBufferLength,
                                                     LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetDllDirectoryW(
         DWORD nBufferLength,
                                                     LPWSTR lpBuffer
    );
#line 8971 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetSearchPathMode (
         DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceA(
              LPCSTR lpRootPathName,
              LPDWORD lpSectorsPerCluster,
              LPDWORD lpBytesPerSector,
              LPDWORD lpNumberOfFreeClusters,
              LPDWORD lpTotalNumberOfClusters
    );
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceW(
              LPCWSTR lpRootPathName,
              LPDWORD lpSectorsPerCluster,
              LPDWORD lpBytesPerSector,
              LPDWORD lpNumberOfFreeClusters,
              LPDWORD lpTotalNumberOfClusters
    );






__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExA(
              LPCSTR lpDirectoryName,
              PULARGE_INTEGER lpFreeBytesAvailableToCaller,
              PULARGE_INTEGER lpTotalNumberOfBytes,
              PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExW(
              LPCWSTR lpDirectoryName,
              PULARGE_INTEGER lpFreeBytesAvailableToCaller,
              PULARGE_INTEGER lpTotalNumberOfBytes,
              PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );






__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryA(
             LPCSTR lpPathName,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryW(
             LPCWSTR lpPathName,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
#line 9068 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExA(
             LPCSTR lpTemplateDirectory,
             LPCSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExW(
             LPCWSTR lpTemplateDirectory,
             LPCWSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
#line 9092 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedA(
             LPCSTR lpTemplateDirectory,
             LPCSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedW(
             LPCWSTR lpTemplateDirectory,
             LPCWSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             HANDLE hTransaction
    );
#line 9118 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryA(
         LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryW(
         LPCWSTR lpPathName
    );
#line 9138 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedA(
         LPCSTR lpPathName,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedW(
         LPCWSTR lpPathName,
             HANDLE hTransaction
    );
#line 9160 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
GetFullPathNameA(
                    LPCSTR lpFileName,
                    DWORD nBufferLength,
                                                     LPSTR lpBuffer,
                    LPSTR *lpFilePart
    );
__declspec(dllimport)
DWORD
__stdcall
GetFullPathNameW(
                    LPCWSTR lpFileName,
                    DWORD nBufferLength,
                                                     LPWSTR lpBuffer,
                    LPWSTR *lpFilePart
    );







__declspec(dllimport)
DWORD
__stdcall
GetFullPathNameTransactedA(
                    LPCSTR lpFileName,
                    DWORD nBufferLength,
                                                     LPSTR lpBuffer,
                    LPSTR *lpFilePart,
                    HANDLE hTransaction
    );
__declspec(dllimport)
DWORD
__stdcall
GetFullPathNameTransactedW(
                    LPCWSTR lpFileName,
                    DWORD nBufferLength,
                                                     LPWSTR lpBuffer,
                    LPWSTR *lpFilePart,
                    HANDLE hTransaction
    );
#line 9219 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceA(
             DWORD dwFlags,
             LPCSTR lpDeviceName,
             LPCSTR lpTargetPath
    );
__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceW(
             DWORD dwFlags,
             LPCWSTR lpDeviceName,
             LPCWSTR lpTargetPath
    );






__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceA(
             LPCSTR lpDeviceName,
                                           LPSTR lpTargetPath,
             DWORD ucchMax
    );
__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceW(
             LPCWSTR lpDeviceName,
                                           LPWSTR lpTargetPath,
             DWORD ucchMax
    );
#line 9265 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateFileA(
             LPCSTR lpFileName,
             DWORD dwDesiredAccess,
             DWORD dwShareMode,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             DWORD dwCreationDisposition,
             DWORD dwFlagsAndAttributes,
             HANDLE hTemplateFile
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateFileW(
             LPCWSTR lpFileName,
             DWORD dwDesiredAccess,
             DWORD dwShareMode,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             DWORD dwCreationDisposition,
             DWORD dwFlagsAndAttributes,
             HANDLE hTemplateFile
    );
#line 9299 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateFileTransactedA(
               LPCSTR lpFileName,
               DWORD dwDesiredAccess,
               DWORD dwShareMode,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               DWORD dwCreationDisposition,
               DWORD dwFlagsAndAttributes,
               HANDLE hTemplateFile,
               HANDLE hTransaction,
               PUSHORT pusMiniVersion,
               PVOID lpExtendedParameter
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateFileTransactedW(
               LPCWSTR lpFileName,
               DWORD dwDesiredAccess,
               DWORD dwShareMode,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               DWORD dwCreationDisposition,
               DWORD dwFlagsAndAttributes,
               HANDLE hTemplateFile,
               HANDLE hTransaction,
               PUSHORT pusMiniVersion,
               PVOID lpExtendedParameter
    );
#line 9342 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
ReOpenFile(
         HANDLE hOriginalFile,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
         DWORD dwFlagsAndAttributes
    );



__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesA(
         LPCSTR lpFileName,
         DWORD dwFileAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesW(
         LPCWSTR lpFileName,
         DWORD dwFileAttributes
    );






__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesA(
         LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesW(
         LPCWSTR lpFileName
    );
#line 9395 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedA(
             LPCSTR lpFileName,
             DWORD dwFileAttributes,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedW(
             LPCWSTR lpFileName,
             DWORD dwFileAttributes,
             HANDLE hTransaction
    );
#line 9419 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;



__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedA(
          LPCSTR lpFileName,
          GET_FILEEX_INFO_LEVELS fInfoLevelId,
          LPVOID lpFileInformation,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedW(
          LPCWSTR lpFileName,
          GET_FILEEX_INFO_LEVELS fInfoLevelId,
          LPVOID lpFileInformation,
             HANDLE hTransaction
    );
#line 9452 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExA(
          LPCSTR lpFileName,
          GET_FILEEX_INFO_LEVELS fInfoLevelId,
          LPVOID lpFileInformation
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExW(
          LPCWSTR lpFileName,
          GET_FILEEX_INFO_LEVELS fInfoLevelId,
          LPVOID lpFileInformation
    );






__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeA(
          LPCSTR lpFileName,
              LPDWORD lpFileSizeHigh
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeW(
          LPCWSTR lpFileName,
              LPDWORD lpFileSizeHigh
    );
#line 9496 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedA(
              LPCSTR lpFileName,
              LPDWORD lpFileSizeHigh,
              HANDLE hTransaction
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedW(
              LPCWSTR lpFileName,
              LPDWORD lpFileSizeHigh,
              HANDLE hTransaction
    );
#line 9520 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
DeleteFileA(
         LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteFileW(
         LPCWSTR lpFileName
    );
#line 9540 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedA(
             LPCSTR lpFileName,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedW(
             LPCWSTR lpFileName,
             HANDLE hTransaction
    );
#line 9583 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3A(
              LPCSTR lpName,
                                  LPSTR lpOemName,
              DWORD OemNameSize,
              PBOOL pbNameContainsSpaces ,
              PBOOL pbNameLegal
    );
__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3W(
              LPCWSTR lpName,
                                  LPSTR lpOemName,
              DWORD OemNameSize,
              PBOOL pbNameContainsSpaces ,
              PBOOL pbNameLegal
    );
#line 9612 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;

typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;




__declspec(dllimport)

HANDLE
__stdcall
FindFirstFileExA(
               LPCSTR lpFileName,
               FINDEX_INFO_LEVELS fInfoLevelId,
               LPVOID lpFindFileData,
               FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
               DWORD dwAdditionalFlags
    );
__declspec(dllimport)

HANDLE
__stdcall
FindFirstFileExW(
               LPCWSTR lpFileName,
               FINDEX_INFO_LEVELS fInfoLevelId,
               LPVOID lpFindFileData,
               FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
               DWORD dwAdditionalFlags
    );
#line 9660 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
FindFirstFileTransactedA(
               LPCSTR lpFileName,
               FINDEX_INFO_LEVELS fInfoLevelId,
               LPVOID lpFindFileData,
               FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
               DWORD dwAdditionalFlags,
               HANDLE hTransaction
    );
__declspec(dllimport)

HANDLE
__stdcall
FindFirstFileTransactedW(
               LPCWSTR lpFileName,
               FINDEX_INFO_LEVELS fInfoLevelId,
               LPVOID lpFindFileData,
               FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
               DWORD dwAdditionalFlags,
               HANDLE hTransaction
    );
#line 9696 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
FindFirstFileA(
          LPCSTR lpFileName,
          LPWIN32_FIND_DATAA lpFindFileData
    );
__declspec(dllimport)

HANDLE
__stdcall
FindFirstFileW(
          LPCWSTR lpFileName,
          LPWIN32_FIND_DATAW lpFindFileData
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextFileA(
          HANDLE hFindFile,
          LPWIN32_FIND_DATAA lpFindFileData
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextFileW(
          HANDLE hFindFile,
          LPWIN32_FIND_DATAW lpFindFileData
    );







__declspec(dllimport)
DWORD
__stdcall
SearchPathA(
              LPCSTR lpPath,
              LPCSTR lpFileName,
              LPCSTR lpExtension,
              DWORD nBufferLength,
                                                     LPSTR lpBuffer,
              LPSTR *lpFilePart
    );
__declspec(dllimport)
DWORD
__stdcall
SearchPathW(
              LPCWSTR lpPath,
              LPCWSTR lpFileName,
              LPCWSTR lpExtension,
              DWORD nBufferLength,
                                                     LPWSTR lpBuffer,
              LPWSTR *lpFilePart
    );






__declspec(dllimport)
BOOL
__stdcall
CopyFileA(
         LPCSTR lpExistingFileName,
         LPCSTR lpNewFileName,
         BOOL bFailIfExists
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileW(
         LPCWSTR lpExistingFileName,
         LPCWSTR lpNewFileName,
         BOOL bFailIfExists
    );
#line 9812 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef
DWORD
(__stdcall *LPPROGRESS_ROUTINE)(
             LARGE_INTEGER TotalFileSize,
             LARGE_INTEGER TotalBytesTransferred,
             LARGE_INTEGER StreamSize,
             LARGE_INTEGER StreamBytesTransferred,
             DWORD dwStreamNumber,
             DWORD dwCallbackReason,
             HANDLE hSourceFile,
             HANDLE hDestinationFile,
             LPVOID lpData
    );

__declspec(dllimport)
BOOL
__stdcall
CopyFileExA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             LPBOOL pbCancel,
             DWORD dwCopyFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileExW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             LPBOOL pbCancel,
             DWORD dwCopyFlags
    );
#line 9856 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             LPBOOL pbCancel,
             DWORD dwCopyFlags,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             LPBOOL pbCancel,
             DWORD dwCopyFlags,
             HANDLE hTransaction
    );
#line 9889 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
MoveFileA(
         LPCSTR lpExistingFileName,
         LPCSTR lpNewFileName
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileW(
         LPCWSTR lpExistingFileName,
         LPCWSTR lpNewFileName
    );
#line 9929 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
MoveFileExA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileExW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             DWORD dwFlags
    );







__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags
    );
#line 9980 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags,
             HANDLE hTransaction
    );
#line 10022 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
ReplaceFileA(
               LPCSTR lpReplacedFileName,
               LPCSTR lpReplacementFileName,
               LPCSTR lpBackupFileName,
               DWORD dwReplaceFlags,
               LPVOID lpExclude,
               LPVOID lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
ReplaceFileW(
               LPCWSTR lpReplacedFileName,
               LPCWSTR lpReplacementFileName,
               LPCWSTR lpBackupFileName,
               DWORD dwReplaceFlags,
               LPVOID lpExclude,
               LPVOID lpReserved
    );
#line 10057 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkA(
               LPCSTR lpFileName,
               LPCSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkW(
               LPCWSTR lpFileName,
               LPCWSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
#line 10086 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedA(
               LPCSTR lpFileName,
               LPCSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedW(
               LPCWSTR lpFileName,
               LPCWSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               HANDLE hTransaction
    );
#line 10119 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef enum _STREAM_INFO_LEVELS {

    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel

} STREAM_INFO_LEVELS;

typedef struct _WIN32_FIND_STREAM_DATA {

    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[ 260 + 36 ];

} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA;

__declspec(dllimport)

HANDLE
__stdcall
FindFirstStreamW(
               LPCWSTR lpFileName,
               STREAM_INFO_LEVELS InfoLevel,
               LPVOID lpFindStreamData,
               DWORD dwFlags
    );


__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamTransactedW (
               LPCWSTR lpFileName,
               STREAM_INFO_LEVELS InfoLevel,
               LPVOID lpFindStreamData,
               DWORD dwFlags,
               HANDLE hTransaction
    );


__declspec(dllimport)
BOOL
__stdcall
FindNextStreamW(
          HANDLE hFindStream,
          LPVOID lpFindStreamData
    );




__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameW (
            LPCWSTR lpFileName,
            DWORD dwFlags,
            LPDWORD StringLength,
                                  PWCHAR LinkName
    );

__declspec(dllimport)
BOOL
__stdcall
FindNextFileNameW (
            HANDLE hFindStream,
            LPDWORD StringLength,
                                  PWCHAR LinkName
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameTransactedW (
             LPCWSTR lpFileName,
             DWORD dwFlags,
             LPDWORD StringLength,
                                  PWCHAR LinkName,
             HANDLE hTransaction
    );




__declspec(dllimport)

HANDLE
__stdcall
CreateNamedPipeA(
             LPCSTR lpName,
             DWORD dwOpenMode,
             DWORD dwPipeMode,
             DWORD nMaxInstances,
             DWORD nOutBufferSize,
             DWORD nInBufferSize,
             DWORD nDefaultTimeOut,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateNamedPipeW(
             LPCWSTR lpName,
             DWORD dwOpenMode,
             DWORD dwPipeMode,
             DWORD nMaxInstances,
             DWORD nOutBufferSize,
             DWORD nInBufferSize,
             DWORD nDefaultTimeOut,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateA(
              HANDLE hNamedPipe,
              LPDWORD lpState,
              LPDWORD lpCurInstances,
              LPDWORD lpMaxCollectionCount,
              LPDWORD lpCollectDataTimeout,
                                       LPSTR lpUserName,
              DWORD nMaxUserNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateW(
              HANDLE hNamedPipe,
              LPDWORD lpState,
              LPDWORD lpCurInstances,
              LPDWORD lpMaxCollectionCount,
              LPDWORD lpCollectDataTimeout,
                                       LPWSTR lpUserName,
              DWORD nMaxUserNameSize
    );






__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeA(
          LPCSTR lpNamedPipeName,
                                   LPVOID lpInBuffer,
          DWORD nInBufferSize,
                                                        LPVOID lpOutBuffer,
          DWORD nOutBufferSize,
          LPDWORD lpBytesRead,
          DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeW(
          LPCWSTR lpNamedPipeName,
                                   LPVOID lpInBuffer,
          DWORD nInBufferSize,
                                                        LPVOID lpOutBuffer,
          DWORD nOutBufferSize,
          LPDWORD lpBytesRead,
          DWORD nTimeOut
    );






__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeA(
         LPCSTR lpNamedPipeName,
         DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeW(
         LPCWSTR lpNamedPipeName,
         DWORD nTimeOut
    );






typedef enum {
    PipeAttribute,
    PipeConnectionAttribute,
    PipeHandleAttribute
} PIPE_ATTRIBUTE_TYPE;

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeAttribute(
         HANDLE Pipe,
         PIPE_ATTRIBUTE_TYPE AttributeType,
         PSTR AttributeName,
                                        PVOID AttributeValue,
            PSIZE_T AttributeValueLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetNamedPipeAttribute(
         HANDLE Pipe,
         PIPE_ATTRIBUTE_TYPE AttributeType,
         PSTR AttributeName,
         PVOID AttributeValue,
         SIZE_T AttributeValueLength
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameA(
         HANDLE Pipe,
                                            LPSTR ClientComputerName,
         ULONG ClientComputerNameLength
    );
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameW(
         HANDLE Pipe,
                                            LPWSTR ClientComputerName,
         ULONG ClientComputerNameLength
    );






__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientProcessId(
         HANDLE Pipe,
          PULONG ClientProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientSessionId(
         HANDLE Pipe,
          PULONG ClientSessionId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerProcessId(
         HANDLE Pipe,
          PULONG ServerProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerSessionId(
         HANDLE Pipe,
          PULONG ServerSessionId
    );

__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelA(
             LPCSTR lpRootPathName,
             LPCSTR lpVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelW(
             LPCWSTR lpRootPathName,
             LPCWSTR lpVolumeName
    );






__declspec(dllimport)
void
__stdcall
SetFileApisToOEM( void );

__declspec(dllimport)
void
__stdcall
SetFileApisToANSI( void );

__declspec(dllimport)
BOOL
__stdcall
AreFileApisANSI( void );

__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationA(
              LPCSTR lpRootPathName,
                                      LPSTR lpVolumeNameBuffer,
              DWORD nVolumeNameSize,
              LPDWORD lpVolumeSerialNumber,
              LPDWORD lpMaximumComponentLength,
              LPDWORD lpFileSystemFlags,
                                          LPSTR lpFileSystemNameBuffer,
              DWORD nFileSystemNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationW(
              LPCWSTR lpRootPathName,
                                      LPWSTR lpVolumeNameBuffer,
              DWORD nVolumeNameSize,
              LPDWORD lpVolumeSerialNumber,
              LPDWORD lpMaximumComponentLength,
              LPDWORD lpFileSystemFlags,
                                          LPWSTR lpFileSystemNameBuffer,
              DWORD nFileSystemNameSize
    );







__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationByHandleW(
              HANDLE hFile,
                                      LPWSTR lpVolumeNameBuffer,
              DWORD nVolumeNameSize,
              LPDWORD lpVolumeSerialNumber,
              LPDWORD lpMaximumComponentLength,
              LPDWORD lpFileSystemFlags,
                                          LPWSTR lpFileSystemNameBuffer,
              DWORD nFileSystemNameSize
    );


__declspec(dllimport)
BOOL
__stdcall
CancelSynchronousIo(
         HANDLE hThread
    );

__declspec(dllimport)
BOOL
__stdcall
CancelIoEx(
         HANDLE hFile,
             LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
CancelIo(
         HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileBandwidthReservation(
          HANDLE hFile,
          DWORD nPeriodMilliseconds,
          DWORD nBytesPerPeriod,
          BOOL bDiscardable,
          LPDWORD lpTransferSize,
          LPDWORD lpNumOutstandingRequests
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileBandwidthReservation(
          HANDLE hFile,
          LPDWORD lpPeriodMilliseconds,
          LPDWORD lpBytesPerPeriod,
          LPBOOL pDiscardable,
          LPDWORD lpTransferSize,
          LPDWORD lpNumOutstandingRequests
    );





__declspec(dllimport)
BOOL
__stdcall
ClearEventLogA (
             HANDLE hEventLog,
             LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
ClearEventLogW (
             HANDLE hEventLog,
             LPCWSTR lpBackupFileName
    );






__declspec(dllimport)
BOOL
__stdcall
BackupEventLogA (
         HANDLE hEventLog,
         LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
BackupEventLogW (
         HANDLE hEventLog,
         LPCWSTR lpBackupFileName
    );






__declspec(dllimport)
BOOL
__stdcall
CloseEventLog (
         HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
DeregisterEventSource (
         HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyChangeEventLog(
         HANDLE hEventLog,
         HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfEventLogRecords (
          HANDLE hEventLog,
          PDWORD NumberOfRecords
    );

__declspec(dllimport)
BOOL
__stdcall
GetOldestEventLogRecord (
          HANDLE hEventLog,
          PDWORD OldestRecord
    );

__declspec(dllimport)

HANDLE
__stdcall
OpenEventLogA (
             LPCSTR lpUNCServerName,
             LPCSTR lpSourceName
    );
__declspec(dllimport)

HANDLE
__stdcall
OpenEventLogW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpSourceName
    );






__declspec(dllimport)

HANDLE
__stdcall
RegisterEventSourceA (
             LPCSTR lpUNCServerName,
             LPCSTR lpSourceName
    );
__declspec(dllimport)

HANDLE
__stdcall
RegisterEventSourceW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpSourceName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenBackupEventLogA (
             LPCSTR lpUNCServerName,
             LPCSTR lpFileName
    );
__declspec(dllimport)

HANDLE
__stdcall
OpenBackupEventLogW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpFileName
    );






__declspec(dllimport)
BOOL
__stdcall
ReadEventLogA (
          HANDLE hEventLog,
          DWORD dwReadFlags,
          DWORD dwRecordOffset,
                                                          LPVOID lpBuffer,
          DWORD nNumberOfBytesToRead,
          DWORD *pnBytesRead,
          DWORD *pnMinNumberOfBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
ReadEventLogW (
          HANDLE hEventLog,
          DWORD dwReadFlags,
          DWORD dwRecordOffset,
                                                          LPVOID lpBuffer,
          DWORD nNumberOfBytesToRead,
          DWORD *pnBytesRead,
          DWORD *pnMinNumberOfBytesNeeded
    );






__declspec(dllimport)
BOOL
__stdcall
ReportEventA (
             HANDLE hEventLog,
             WORD wType,
             WORD wCategory,
             DWORD dwEventID,
             PSID lpUserSid,
             WORD wNumStrings,
             DWORD dwDataSize,
                                 LPCSTR *lpStrings,
                                LPVOID lpRawData
    );
__declspec(dllimport)
BOOL
__stdcall
ReportEventW (
             HANDLE hEventLog,
             WORD wType,
             WORD wCategory,
             DWORD dwEventID,
             PSID lpUserSid,
             WORD wNumStrings,
             DWORD dwDataSize,
                                 LPCWSTR *lpStrings,
                                LPVOID lpRawData
    );
#line 10741 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef struct _EVENTLOG_FULL_INFORMATION
{
    DWORD dwFull;
}
EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetEventLogInformation (
          HANDLE hEventLog,
          DWORD dwInfoLevel,
                                                  LPVOID lpBuffer,
          DWORD cbBufSize,
          LPDWORD pcbBytesNeeded
    );







__declspec(dllimport)
BOOL
__stdcall
DuplicateToken(
                HANDLE ExistingTokenHandle,
                SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
                PHANDLE DuplicateTokenHandle
    );

__declspec(dllimport)
BOOL
__stdcall
GetKernelObjectSecurity (
          HANDLE Handle,
          SECURITY_INFORMATION RequestedInformation,
                              PSECURITY_DESCRIPTOR pSecurityDescriptor,
          DWORD nLength,
          LPDWORD lpnLengthNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
ImpersonateNamedPipeClient(
         HANDLE hNamedPipe
    );

__declspec(dllimport)
BOOL
__stdcall
ImpersonateSelf(
         SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );


__declspec(dllimport)
BOOL
__stdcall
RevertToSelf (
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadToken (
             PHANDLE Thread,
             HANDLE Token
    );

__declspec(dllimport)
BOOL
__stdcall
AccessCheck (
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
            HANDLE ClientToken,
            DWORD DesiredAccess,
            PGENERIC_MAPPING GenericMapping,
                                                                    PPRIVILEGE_SET PrivilegeSet,
            LPDWORD PrivilegeSetLength,
            LPDWORD GrantedAccess,
            LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByType (
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID PrincipalSelfSid,
             HANDLE ClientToken,
             DWORD DesiredAccess,
                                             POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
                                                                    PPRIVILEGE_SET PrivilegeSet,
             LPDWORD PrivilegeSetLength,
             LPDWORD GrantedAccess,
             LPBOOL AccessStatus
    );

__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultList (
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID PrincipalSelfSid,
             HANDLE ClientToken,
             DWORD DesiredAccess,
                                             POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
                                                                    PPRIVILEGE_SET PrivilegeSet,
             LPDWORD PrivilegeSetLength,
             LPDWORD GrantedAccessList,
             LPDWORD AccessStatusList
    );



__declspec(dllimport)
BOOL
__stdcall
OpenProcessToken (
                HANDLE ProcessHandle,
                DWORD DesiredAccess,
                PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
OpenThreadToken (
                HANDLE ThreadHandle,
                DWORD DesiredAccess,
                BOOL OpenAsSelf,
                PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
GetTokenInformation (
              HANDLE TokenHandle,
              TOKEN_INFORMATION_CLASS TokenInformationClass,
                                                                 LPVOID TokenInformation,
              DWORD TokenInformationLength,
              PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetTokenInformation (
         HANDLE TokenHandle,
         TOKEN_INFORMATION_CLASS TokenInformationClass,
                                        LPVOID TokenInformation,
         DWORD TokenInformationLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenPrivileges (
              HANDLE TokenHandle,
              BOOL DisableAllPrivileges,
              PTOKEN_PRIVILEGES NewState,
              DWORD BufferLength,
                                                       PTOKEN_PRIVILEGES PreviousState,
              PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenGroups (
              HANDLE TokenHandle,
              BOOL ResetToDefault,
              PTOKEN_GROUPS NewState,
              DWORD BufferLength,
                                                       PTOKEN_GROUPS PreviousState,
              PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
PrivilegeCheck (
            HANDLE ClientToken,
            PPRIVILEGE_SET RequiredPrivileges,
            LPBOOL pfResult
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPSTR ObjectTypeName,
             LPSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             DWORD DesiredAccess,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPBOOL AccessStatus,
             LPBOOL pfGenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmW (
             LPCWSTR SubsystemName,
             LPVOID HandleId,
             LPWSTR ObjectTypeName,
             LPWSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             DWORD DesiredAccess,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPBOOL AccessStatus,
             LPBOOL pfGenerateOnClose
    );
#line 10985 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                             POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPBOOL AccessStatus,
             LPBOOL pfGenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmW (
             LPCWSTR SubsystemName,
             LPVOID HandleId,
             LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                             POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPBOOL AccessStatus,
             LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                             POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPDWORD AccessStatusList,
             LPBOOL pfGenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmW (
             LPCWSTR SubsystemName,
             LPVOID HandleId,
             LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                             POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPDWORD AccessStatusList,
             LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             HANDLE ClientToken,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                             POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPDWORD AccessStatusList,
             LPBOOL pfGenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleW (
             LPCWSTR SubsystemName,
             LPVOID HandleId,
             HANDLE ClientToken,
             LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                             POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPDWORD AccessStatusList,
             LPBOOL pfGenerateOnClose
    );
#line 11133 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPSTR ObjectTypeName,
             LPSTR ObjectName,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             HANDLE ClientToken,
             DWORD DesiredAccess,
             DWORD GrantedAccess,
             PPRIVILEGE_SET Privileges,
             BOOL ObjectCreation,
             BOOL AccessGranted,
             LPBOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmW (
             LPCWSTR SubsystemName,
             LPVOID HandleId,
             LPWSTR ObjectTypeName,
             LPWSTR ObjectName,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             HANDLE ClientToken,
             DWORD DesiredAccess,
             DWORD GrantedAccess,
             PPRIVILEGE_SET Privileges,
             BOOL ObjectCreation,
             BOOL AccessGranted,
             LPBOOL GenerateOnClose
    );







__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmW (
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );







__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmW (
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );







__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmW (
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );







__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmA (
         LPCSTR SubsystemName,
         LPCSTR ServiceName,
         HANDLE ClientToken,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );
__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmW (
         LPCWSTR SubsystemName,
         LPCWSTR ServiceName,
         HANDLE ClientToken,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );
#line 11280 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
IsWellKnownSid (
         PSID pSid,
         WELL_KNOWN_SID_TYPE WellKnownSidType
    );

__declspec(dllimport)
                           BOOL
__stdcall
CreateWellKnownSid(
             WELL_KNOWN_SID_TYPE WellKnownSidType,
             PSID DomainSid,
                                          PSID pSid,
             DWORD *cbSid
    );

__declspec(dllimport)
                           BOOL
__stdcall
EqualDomainSid(
          PSID pSid1,
          PSID pSid2,
          BOOL *pfEqual
    );

__declspec(dllimport)
                           BOOL
__stdcall
GetWindowsAccountDomainSid(
            PSID pSid,
                                                      PSID pDomainSid,
            DWORD* cbDomainSid
    );



__declspec(dllimport)
BOOL
__stdcall
IsValidSid (
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
EqualSid (
         PSID pSid1,
         PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
EqualPrefixSid (
         PSID pSid1,
         PSID pSid2
    );


__declspec(dllimport)
DWORD
__stdcall
GetSidLengthRequired (
         UCHAR nSubAuthorityCount
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateAndInitializeSid (
                PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
                BYTE nSubAuthorityCount,
                DWORD nSubAuthority0,
                DWORD nSubAuthority1,
                DWORD nSubAuthority2,
                DWORD nSubAuthority3,
                DWORD nSubAuthority4,
                DWORD nSubAuthority5,
                DWORD nSubAuthority6,
                DWORD nSubAuthority7,
                PSID *pSid
    );

__declspec(dllimport)
PVOID
__stdcall
FreeSid(
         PSID pSid
    );

__declspec(dllimport)
BOOL
__stdcall
InitializeSid (
          PSID Sid,
          PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
          BYTE nSubAuthorityCount
    );


__declspec(dllimport)

PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority (
         PSID pSid
    );


__declspec(dllimport)

PDWORD
__stdcall
GetSidSubAuthority (
         PSID pSid,
         DWORD nSubAuthority
    );


__declspec(dllimport)

PUCHAR
__stdcall
GetSidSubAuthorityCount (
         PSID pSid
    );


__declspec(dllimport)
DWORD
__stdcall
GetLengthSid (
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
CopySid (
         DWORD nDestinationSidLength,
                                        PSID pDestinationSid,
         PSID pSourceSid
    );


__declspec(dllimport)
BOOL
__stdcall
AreAllAccessesGranted (
         DWORD GrantedAccess,
         DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
AreAnyAccessesGranted (
         DWORD GrantedAccess,
         DWORD DesiredAccess
    );


__declspec(dllimport)
void
__stdcall
MapGenericMask (
            PDWORD AccessMask,
            PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidAcl (
         PACL pAcl
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeAcl (
                             PACL pAcl,
         DWORD nAclLength,
         DWORD dwAclRevision
    );


__declspec(dllimport)
BOOL
__stdcall
GetAclInformation (
         PACL pAcl,
                                        LPVOID pAclInformation,
         DWORD nAclInformationLength,
         ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetAclInformation (
            PACL pAcl,
                                       LPVOID pAclInformation,
            DWORD nAclInformationLength,
            ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
AddAce (
            PACL pAcl,
            DWORD dwAceRevision,
            DWORD dwStartingAceIndex,
                                LPVOID pAceList,
            DWORD nAceListLength
    );


__declspec(dllimport)
BOOL
__stdcall
DeleteAce (
            PACL pAcl,
            DWORD dwAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
GetAce (
                PACL pAcl,
                DWORD dwAceIndex,
                LPVOID *pAce
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAce (
            PACL pAcl,
            DWORD dwAceRevision,
            DWORD AccessMask,
            PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAceEx (
            PACL pAcl,
            DWORD dwAceRevision,
            DWORD AceFlags,
            DWORD AccessMask,
            PSID pSid
    );



__declspec(dllimport)
BOOL
__stdcall
AddMandatoryAce (
            PACL pAcl,
            DWORD dwAceRevision,
            DWORD AceFlags,
            DWORD MandatoryPolicy,
            PSID pLabelSid
    );



__declspec(dllimport)
BOOL
__stdcall
AddConditionalAce (
            PACL pAcl,
            DWORD dwAceRevision,
            DWORD AceFlags,
            UCHAR AceType,
            DWORD AccessMask,
            PSID pSid,
            PWCHAR ConditionStr,
          DWORD *ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAce (
            PACL pAcl,
            DWORD dwAceRevision,
            DWORD AccessMask,
            PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAceEx (
            PACL pAcl,
            DWORD dwAceRevision,
            DWORD AceFlags,
            DWORD AccessMask,
            PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAce(
            PACL pAcl,
            DWORD dwAceRevision,
            DWORD dwAccessMask,
            PSID pSid,
            BOOL bAuditSuccess,
            BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAceEx(
            PACL pAcl,
            DWORD dwAceRevision,
            DWORD AceFlags,
            DWORD dwAccessMask,
            PSID pSid,
            BOOL bAuditSuccess,
            BOOL bAuditFailure
    );

__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedObjectAce (
             PACL pAcl,
             DWORD dwAceRevision,
             DWORD AceFlags,
             DWORD AccessMask,
             GUID *ObjectTypeGuid,
             GUID *InheritedObjectTypeGuid,
             PSID pSid
    );

__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedObjectAce (
             PACL pAcl,
             DWORD dwAceRevision,
             DWORD AceFlags,
             DWORD AccessMask,
             GUID *ObjectTypeGuid,
             GUID *InheritedObjectTypeGuid,
             PSID pSid
    );

__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessObjectAce (
             PACL pAcl,
             DWORD dwAceRevision,
             DWORD AceFlags,
             DWORD AccessMask,
             GUID *ObjectTypeGuid,
             GUID *InheritedObjectTypeGuid,
             PSID pSid,
             BOOL bAuditSuccess,
             BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
FindFirstFreeAce (
                PACL pAcl,
                LPVOID *pAce
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSecurityDescriptor (
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
          DWORD dwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSecurityDescriptor (
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );

__declspec(dllimport)
BOOL
__stdcall
IsValidRelativeSecurityDescriptor (
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         ULONG SecurityDescriptorLength,
         SECURITY_INFORMATION RequiredInformation
    );

__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorLength (
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorControl (
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
          PSECURITY_DESCRIPTOR_CONTROL pControl,
          LPDWORD lpdwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorControl (
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,
         SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorDacl (
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             BOOL bDaclPresent,
             PACL pDacl,
             BOOL bDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorDacl (
                PSECURITY_DESCRIPTOR pSecurityDescriptor,
                LPBOOL lpbDaclPresent,
                PACL *pDacl,
                LPBOOL lpbDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorSacl (
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             BOOL bSaclPresent,
             PACL pSacl,
             BOOL bSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorSacl (
                PSECURITY_DESCRIPTOR pSecurityDescriptor,
                LPBOOL lpbSaclPresent,
                PACL *pSacl,
                LPBOOL lpbSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorOwner (
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID pOwner,
             BOOL bOwnerDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorOwner (
                PSECURITY_DESCRIPTOR pSecurityDescriptor,
                PSID *pOwner,
                LPBOOL lpbOwnerDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorGroup (
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID pGroup,
             BOOL bGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorGroup (
                PSECURITY_DESCRIPTOR pSecurityDescriptor,
                PSID *pGroup,
                LPBOOL lpbGroupDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
SetSecurityDescriptorRMControl(
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PUCHAR RMControl
    );

__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorRMControl(
          PSECURITY_DESCRIPTOR SecurityDescriptor,
          PUCHAR RMControl
    );

__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurity (
                PSECURITY_DESCRIPTOR ParentDescriptor,
                PSECURITY_DESCRIPTOR CreatorDescriptor,
                PSECURITY_DESCRIPTOR * NewDescriptor,
                BOOL IsDirectoryObject,
                HANDLE Token,
                PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
ConvertToAutoInheritPrivateObjectSecurity(
                PSECURITY_DESCRIPTOR ParentDescriptor,
                PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
                PSECURITY_DESCRIPTOR *NewSecurityDescriptor,
                GUID *ObjectType,
                BOOLEAN IsDirectoryObject,
                PGENERIC_MAPPING GenericMapping
    );

__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityEx (
                PSECURITY_DESCRIPTOR ParentDescriptor,
                PSECURITY_DESCRIPTOR CreatorDescriptor,
                PSECURITY_DESCRIPTOR * NewDescriptor,
                GUID *ObjectType,
                BOOL IsContainerObject,
                ULONG AutoInheritFlags,
                HANDLE Token,
                PGENERIC_MAPPING GenericMapping
    );

__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityWithMultipleInheritance (
                PSECURITY_DESCRIPTOR ParentDescriptor,
                PSECURITY_DESCRIPTOR CreatorDescriptor,
                PSECURITY_DESCRIPTOR * NewDescriptor,
                               GUID **ObjectTypes,
                ULONG GuidCount,
                BOOL IsContainerObject,
                ULONG AutoInheritFlags,
                HANDLE Token,
                PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurity (
                  SECURITY_INFORMATION SecurityInformation,
                  PSECURITY_DESCRIPTOR ModificationDescriptor,
                  PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
                  PGENERIC_MAPPING GenericMapping,
                  HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurityEx (
                  SECURITY_INFORMATION SecurityInformation,
                  PSECURITY_DESCRIPTOR ModificationDescriptor,
                  PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
                  ULONG AutoInheritFlags,
                  PGENERIC_MAPPING GenericMapping,
                  HANDLE Token
    );


__declspec(dllimport)
                           BOOL
__stdcall
GetPrivateObjectSecurity (
          PSECURITY_DESCRIPTOR ObjectDescriptor,
          SECURITY_INFORMATION SecurityInformation,
                                                           PSECURITY_DESCRIPTOR ResultantDescriptor,
          DWORD DescriptorLength,
          PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
DestroyPrivateObjectSecurity (
            PSECURITY_DESCRIPTOR * ObjectDescriptor
    );


__declspec(dllimport)
                           BOOL
__stdcall
MakeSelfRelativeSD (
            PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
                                                                PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
            LPDWORD lpdwBufferLength
    );


__declspec(dllimport)
                           BOOL
__stdcall
MakeAbsoluteSD (
            PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
                                                                                                    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
            LPDWORD lpdwAbsoluteSecurityDescriptorSize,
                                                        PACL pDacl,
            LPDWORD lpdwDaclSize,
                                                        PACL pSacl,
            LPDWORD lpdwSaclSize,
                                                          PSID pOwner,
            LPDWORD lpdwOwnerSize,
                                                                        PSID pPrimaryGroup,
            LPDWORD lpdwPrimaryGroupSize
    );


__declspec(dllimport)
                           BOOL
__stdcall
MakeAbsoluteSD2 (
                                                          PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
            LPDWORD lpdwBufferSize
    );

__declspec(dllimport)
void
__stdcall
QuerySecurityAccessMask(
         SECURITY_INFORMATION SecurityInformation,
          LPDWORD DesiredAccess
    );

__declspec(dllimport)
void
__stdcall
SetSecurityAccessMask(
         SECURITY_INFORMATION SecurityInformation,
          LPDWORD DesiredAccess
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityA (
         LPCSTR lpFileName,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityW (
         LPCWSTR lpFileName,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );







__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityA (
          LPCSTR lpFileName,
          SECURITY_INFORMATION RequestedInformation,
                                                     PSECURITY_DESCRIPTOR pSecurityDescriptor,
          DWORD nLength,
          LPDWORD lpnLengthNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityW (
          LPCWSTR lpFileName,
          SECURITY_INFORMATION RequestedInformation,
                                                     PSECURITY_DESCRIPTOR pSecurityDescriptor,
          DWORD nLength,
          LPDWORD lpnLengthNeeded
    );







__declspec(dllimport)
BOOL
__stdcall
SetKernelObjectSecurity (
         HANDLE Handle,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR SecurityDescriptor
    );

__declspec(dllimport)

HANDLE
__stdcall
FindFirstChangeNotificationA(
         LPCSTR lpPathName,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter
    );
__declspec(dllimport)

HANDLE
__stdcall
FindFirstChangeNotificationW(
         LPCWSTR lpPathName,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextChangeNotification(
         HANDLE hChangeHandle
    );

__declspec(dllimport)
BOOL
__stdcall
FindCloseChangeNotification(
         HANDLE hChangeHandle
    );


__declspec(dllimport)
BOOL
__stdcall
ReadDirectoryChangesW(
                HANDLE hDirectory,
                                                       LPVOID lpBuffer,
                DWORD nBufferLength,
                BOOL bWatchSubtree,
                DWORD dwNotifyFilter,
                LPDWORD lpBytesReturned,
                LPOVERLAPPED lpOverlapped,
                LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualLock(
         LPVOID lpAddress,
         SIZE_T dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualUnlock(
         LPVOID lpAddress,
         SIZE_T dwSize
    );

__declspec(dllimport)

LPVOID
__stdcall
MapViewOfFileEx(
             HANDLE hFileMappingObject,
             DWORD dwDesiredAccess,
             DWORD dwFileOffsetHigh,
             DWORD dwFileOffsetLow,
             SIZE_T dwNumberOfBytesToMap,
             LPVOID lpBaseAddress
    );



__declspec(dllimport)

LPVOID
__stdcall
MapViewOfFileExNuma(
             HANDLE hFileMappingObject,
             DWORD dwDesiredAccess,
             DWORD dwFileOffsetHigh,
             DWORD dwFileOffsetLow,
             SIZE_T dwNumberOfBytesToMap,
             LPVOID lpBaseAddress,
             DWORD nndPreferred
    );



__declspec(dllimport)
BOOL
__stdcall
SetPriorityClass(
         HANDLE hProcess,
         DWORD dwPriorityClass
    );

__declspec(dllimport)
DWORD
__stdcall
GetPriorityClass(
         HANDLE hProcess
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadReadPtr(
             const void *lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadWritePtr(
             LPVOID lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeReadPtr(
             const void *lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeWritePtr(
             LPVOID lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadCodePtr(
             FARPROC lpfn
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrA(
             LPCSTR lpsz,
             UINT_PTR ucchMax
    );
__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrW(
             LPCWSTR lpsz,
             UINT_PTR ucchMax
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidA(
             LPCSTR lpSystemName,
         PSID Sid,
                                                  LPSTR Name,
             LPDWORD cchName,
                                                                                  LPSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidW(
             LPCWSTR lpSystemName,
         PSID Sid,
                                                  LPWSTR Name,
             LPDWORD cchName,
                                                                                  LPWSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidLocalA(
         PSID Sid,
                                                  LPSTR Name,
             LPDWORD cchName,
                                                                                  LPSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidLocalW(
         PSID Sid,
                                                  LPWSTR Name,
             LPDWORD cchName,
                                                                                  LPWSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameA(
             LPCSTR lpSystemName,
             LPCSTR lpAccountName,
                                          PSID Sid,
             LPDWORD cbSid,
                                                                                  LPSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameW(
             LPCWSTR lpSystemName,
             LPCWSTR lpAccountName,
                                          PSID Sid,
             LPDWORD cbSid,
                                                                                  LPWSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameLocalA(
             LPCSTR lpAccountName,
                                          PSID Sid,
             LPDWORD cbSid,
                                                                                  LPSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameLocalW(
             LPCWSTR lpAccountName,
                                          PSID Sid,
             LPDWORD cbSid,
                                                                                  LPWSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );






__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueA(
             LPCSTR lpSystemName,
             LPCSTR lpName,
             PLUID lpLuid
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueW(
             LPCWSTR lpSystemName,
             LPCWSTR lpName,
             PLUID lpLuid
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeNameA(
             LPCSTR lpSystemName,
             PLUID lpLuid,
                                                  LPSTR lpName,
             LPDWORD cchName
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeNameW(
             LPCWSTR lpSystemName,
             PLUID lpLuid,
                                                  LPWSTR lpName,
             LPDWORD cchName
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeDisplayNameA(
             LPCSTR lpSystemName,
             LPCSTR lpName,
                                                                LPSTR lpDisplayName,
             LPDWORD cchDisplayName,
             LPDWORD lpLanguageId
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeDisplayNameW(
             LPCWSTR lpSystemName,
             LPCWSTR lpName,
                                                                LPWSTR lpDisplayName,
             LPDWORD cchDisplayName,
             LPDWORD lpLanguageId
    );






__declspec(dllimport)
BOOL
__stdcall
AllocateLocallyUniqueId(
          PLUID Luid
    );

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBA(
          LPCSTR lpDef,
          LPDCB lpDCB
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBW(
          LPCWSTR lpDef,
          LPDCB lpDCB
    );






__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
          LPCSTR lpDef,
          LPDCB lpDCB,
          LPCOMMTIMEOUTS lpCommTimeouts
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
          LPCWSTR lpDef,
          LPDCB lpDCB,
          LPCOMMTIMEOUTS lpCommTimeouts
    );






__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogA(
             LPCSTR lpszName,
             HWND hWnd,
             LPCOMMCONFIG lpCC
    );
__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogW(
             LPCWSTR lpszName,
             HWND hWnd,
             LPCOMMCONFIG lpCC
    );






__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigA(
            LPCSTR lpszName,
                                            LPCOMMCONFIG lpCC,
            LPDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigW(
            LPCWSTR lpszName,
                                            LPCOMMCONFIG lpCC,
            LPDWORD lpdwSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigA(
         LPCSTR lpszName,
                        LPCOMMCONFIG lpCC,
         DWORD dwSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigW(
         LPCWSTR lpszName,
                        LPCOMMCONFIG lpCC,
         DWORD dwSize
    );
#line 12530 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)

BOOL
__stdcall
GetComputerNameA (
                                              LPSTR lpBuffer,
            LPDWORD nSize
    );
__declspec(dllimport)

BOOL
__stdcall
GetComputerNameW (
                                              LPWSTR lpBuffer,
            LPDWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetComputerNameA (
         LPCSTR lpComputerName
    );
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameW (
         LPCWSTR lpComputerName
    );
#line 12573 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef enum _COMPUTER_NAME_FORMAT {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
} COMPUTER_NAME_FORMAT ;

__declspec(dllimport)

BOOL
__stdcall
GetComputerNameExA (
            COMPUTER_NAME_FORMAT NameType,
                                              LPSTR lpBuffer,
            LPDWORD nSize
    );
__declspec(dllimport)

BOOL
__stdcall
GetComputerNameExW (
            COMPUTER_NAME_FORMAT NameType,
                                              LPWSTR lpBuffer,
            LPDWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExA (
         COMPUTER_NAME_FORMAT NameType,
         LPCSTR lpBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExW (
         COMPUTER_NAME_FORMAT NameType,
         LPCWSTR lpBuffer
    );







__declspec(dllimport)

BOOL
__stdcall
DnsHostnameToComputerNameA (
            LPCSTR Hostname,
                                              LPSTR ComputerName,
            LPDWORD nSize
    );
__declspec(dllimport)

BOOL
__stdcall
DnsHostnameToComputerNameW (
            LPCWSTR Hostname,
                                              LPWSTR ComputerName,
            LPDWORD nSize
    );
#line 12656 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetUserNameA (
                                                  LPSTR lpBuffer,
            LPDWORD pcbBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetUserNameW (
                                                  LPWSTR lpBuffer,
            LPDWORD pcbBuffer
    );
#line 12704 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
LogonUserA (
                LPCSTR lpszUsername,
                LPCSTR lpszDomain,
                LPCSTR lpszPassword,
                DWORD dwLogonType,
                DWORD dwLogonProvider,
                PHANDLE phToken
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserW (
                LPCWSTR lpszUsername,
                LPCWSTR lpszDomain,
                LPCWSTR lpszPassword,
                DWORD dwLogonType,
                DWORD dwLogonProvider,
                PHANDLE phToken
    );






__declspec(dllimport)
BOOL
__stdcall
LogonUserExA (
                    LPCSTR lpszUsername,
                    LPCSTR lpszDomain,
                    LPCSTR lpszPassword,
                    DWORD dwLogonType,
                    DWORD dwLogonProvider,
                    PHANDLE phToken,
                    PSID *ppLogonSid,
                                                   PVOID *ppProfileBuffer,
                    LPDWORD pdwProfileLength,
                    PQUOTA_LIMITS pQuotaLimits
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserExW (
                    LPCWSTR lpszUsername,
                    LPCWSTR lpszDomain,
                    LPCWSTR lpszPassword,
                    DWORD dwLogonType,
                    DWORD dwLogonProvider,
                    PHANDLE phToken,
                    PSID *ppLogonSid,
                                                   PVOID *ppProfileBuffer,
                    LPDWORD pdwProfileLength,
                    PQUOTA_LIMITS pQuotaLimits
    );
#line 12774 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
ImpersonateLoggedOnUser(
         HANDLE hToken
    );

__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserA (
                HANDLE hToken,
                LPCSTR lpApplicationName,
                LPSTR lpCommandLine,
                LPSECURITY_ATTRIBUTES lpProcessAttributes,
                LPSECURITY_ATTRIBUTES lpThreadAttributes,
                BOOL bInheritHandles,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCSTR lpCurrentDirectory,
                LPSTARTUPINFOA lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
    );
__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserW (
                HANDLE hToken,
                LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
                LPSECURITY_ATTRIBUTES lpProcessAttributes,
                LPSECURITY_ATTRIBUTES lpThreadAttributes,
                BOOL bInheritHandles,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCWSTR lpCurrentDirectory,
                LPSTARTUPINFOW lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
    );
#line 12829 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
              BOOL
__stdcall
CreateProcessWithLogonW(
                LPCWSTR lpUsername,
                LPCWSTR lpDomain,
                LPCWSTR lpPassword,
                DWORD dwLogonFlags,
                LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCWSTR lpCurrentDirectory,
                LPSTARTUPINFOW lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
      );

__declspec(dllimport)
              BOOL
__stdcall
CreateProcessWithTokenW(
                HANDLE hToken,
                DWORD dwLogonFlags,
                LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCWSTR lpCurrentDirectory,
                LPSTARTUPINFOW lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
      );



__declspec(dllimport)
BOOL
__stdcall
ImpersonateAnonymousToken(
         HANDLE ThreadHandle
    );

__declspec(dllimport)
BOOL
__stdcall
DuplicateTokenEx(
                HANDLE hExistingToken,
                DWORD dwDesiredAccess,
                LPSECURITY_ATTRIBUTES lpTokenAttributes,
                SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
                TOKEN_TYPE TokenType,
                PHANDLE phNewToken);

__declspec(dllimport)
BOOL
__stdcall
CreateRestrictedToken(
                HANDLE ExistingTokenHandle,
                DWORD Flags,
                DWORD DisableSidCount,
                                     PSID_AND_ATTRIBUTES SidsToDisable,
                DWORD DeletePrivilegeCount,
                                          PLUID_AND_ATTRIBUTES PrivilegesToDelete,
                DWORD RestrictedSidCount,
                                        PSID_AND_ATTRIBUTES SidsToRestrict,
                PHANDLE NewTokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
IsTokenRestricted(
         HANDLE TokenHandle
    );

__declspec(dllimport)
BOOL
__stdcall
IsTokenUntrusted(
         HANDLE TokenHandle
    );

__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembership(
             HANDLE TokenHandle,
             PSID SidToCheck,
             PBOOL IsMember
    );







typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK ;

__declspec(dllimport)
BOOL
__stdcall
RegisterWaitForSingleObject(
                PHANDLE phNewWaitObject,
                HANDLE hObject,
                WAITORTIMERCALLBACK Callback,
                PVOID Context,
                ULONG dwMilliseconds,
                ULONG dwFlags
    );

__declspec(dllimport)
HANDLE
__stdcall
RegisterWaitForSingleObjectEx(
             HANDLE hObject,
             WAITORTIMERCALLBACK Callback,
             PVOID Context,
             ULONG dwMilliseconds,
             ULONG dwFlags
    );

__declspec(dllimport)

BOOL
__stdcall
UnregisterWait(
         HANDLE WaitHandle
    );

__declspec(dllimport)

BOOL
__stdcall
UnregisterWaitEx(
             HANDLE WaitHandle,
             HANDLE CompletionEvent
    );

__declspec(dllimport)
BOOL
__stdcall
QueueUserWorkItem(
             LPTHREAD_START_ROUTINE Function,
             PVOID Context,
             ULONG Flags
    );

__declspec(dllimport)
BOOL
__stdcall
BindIoCompletionCallback (
         HANDLE FileHandle,
         LPOVERLAPPED_COMPLETION_ROUTINE Function,
         ULONG Flags
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateTimerQueue(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
CreateTimerQueueTimer(
                PHANDLE phNewTimer,
                HANDLE TimerQueue,
                WAITORTIMERCALLBACK Callback,
                PVOID Parameter,
                DWORD DueTime,
                DWORD Period,
                ULONG Flags
    ) ;

__declspec(dllimport)

BOOL
__stdcall
ChangeTimerQueueTimer(
             HANDLE TimerQueue,
             HANDLE Timer,
             ULONG DueTime,
             ULONG Period
    );

__declspec(dllimport)

BOOL
__stdcall
DeleteTimerQueueTimer(
             HANDLE TimerQueue,
             HANDLE Timer,
             HANDLE CompletionEvent
    );

__declspec(dllimport)

BOOL
__stdcall
DeleteTimerQueueEx(
             HANDLE TimerQueue,
             HANDLE CompletionEvent
    );

__declspec(dllimport)
HANDLE
__stdcall
SetTimerQueueTimer(
             HANDLE TimerQueue,
             WAITORTIMERCALLBACK Callback,
             PVOID Parameter,
             DWORD DueTime,
             DWORD Period,
             BOOL PreferIo
    );

__declspec(dllimport)

BOOL
__stdcall
CancelTimerQueueTimer(
             HANDLE TimerQueue,
             HANDLE Timer
    );

__declspec(dllimport)

BOOL
__stdcall
DeleteTimerQueue(
         HANDLE TimerQueue
    );



typedef void (__stdcall *PTP_WIN32_IO_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PVOID Overlapped,
                ULONG IoResult,
                ULONG_PTR NumberOfBytesTransferred,
                PTP_IO Io
    );

__declspec(dllimport)


PTP_POOL
__stdcall
CreateThreadpool(
               PVOID reserved
    );

__declspec(dllimport)
void
__stdcall
SetThreadpoolThreadMaximum(
            PTP_POOL ptpp,
            DWORD cthrdMost
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolThreadMinimum(
            PTP_POOL ptpp,
            DWORD cthrdMic
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolStackInformation(
            PTP_POOL ptpp,
            PTP_POOL_STACK_INFORMATION ptpsi
    );

__declspec(dllimport)
BOOL
__stdcall
QueryThreadpoolStackInformation(
            PTP_POOL ptpp,
            PTP_POOL_STACK_INFORMATION ptpsi
    );

__declspec(dllimport)
void
__stdcall
CloseThreadpool(
            PTP_POOL ptpp
    );

__declspec(dllimport)


PTP_CLEANUP_GROUP
__stdcall
CreateThreadpoolCleanupGroup(
    void
    );

__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroupMembers(
                PTP_CLEANUP_GROUP ptpcg,
                BOOL fCancelPendingCallbacks,
                PVOID pvCleanupContext
    );

__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroup(
            PTP_CLEANUP_GROUP ptpcg
    );



__forceinline
void
InitializeThreadpoolEnvironment(
          PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpInitializeCallbackEnviron(pcbe);
}

__forceinline
void
SetThreadpoolCallbackPool(
            PTP_CALLBACK_ENVIRON pcbe,
            PTP_POOL ptpp
    )
{
    TpSetCallbackThreadpool(pcbe, ptpp);
}

__forceinline
void
SetThreadpoolCallbackCleanupGroup(
             PTP_CALLBACK_ENVIRON pcbe,
             PTP_CLEANUP_GROUP ptpcg,
             PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng
    )
{
    TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng);
}

__forceinline
void
SetThreadpoolCallbackRunsLong(
            PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackLongFunction(pcbe);
}

__forceinline
void
SetThreadpoolCallbackLibrary(
            PTP_CALLBACK_ENVIRON pcbe,
            PVOID mod
    )
{
    TpSetCallbackRaceWithDll(pcbe, mod);
}



__forceinline
void
SetThreadpoolCallbackPriority(
            PTP_CALLBACK_ENVIRON pcbe,
            TP_CALLBACK_PRIORITY Priority
    )
{
    TpSetCallbackPriority(pcbe, Priority);
}



__forceinline
void
SetThreadpoolCallbackPersistent(
            PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackPersistent(pcbe);
}

__forceinline
void
DestroyThreadpoolEnvironment(
            PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpDestroyCallbackEnviron(pcbe);
}



__declspec(dllimport)
void
__stdcall
SetEventWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
            HANDLE evt
    );

__declspec(dllimport)
void
__stdcall
ReleaseSemaphoreWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
            HANDLE sem,
            DWORD crel
    );

__declspec(dllimport)
void
__stdcall
ReleaseMutexWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
            HANDLE mut
    );

__declspec(dllimport)
void
__stdcall
LeaveCriticalSectionWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
            PCRITICAL_SECTION pcs
    );

__declspec(dllimport)
void
__stdcall
FreeLibraryWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
            HMODULE mod
    );

__declspec(dllimport)
BOOL
__stdcall
CallbackMayRunLong(
            PTP_CALLBACK_INSTANCE pci
    );

__declspec(dllimport)
void
__stdcall
DisassociateCurrentThreadFromCallback(
            PTP_CALLBACK_INSTANCE pci
    );

__declspec(dllimport)

BOOL
__stdcall
TrySubmitThreadpoolCallback(
                PTP_SIMPLE_CALLBACK pfns,
                PVOID pv,
                PTP_CALLBACK_ENVIRON pcbe
    );

__declspec(dllimport)


PTP_WORK
__stdcall
CreateThreadpoolWork(
                PTP_WORK_CALLBACK pfnwk,
                PVOID pv,
                PTP_CALLBACK_ENVIRON pcbe
    );

__declspec(dllimport)
void
__stdcall
SubmitThreadpoolWork(
            PTP_WORK pwk
    );

__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWorkCallbacks(
            PTP_WORK pwk,
            BOOL fCancelPendingCallbacks
    );

__declspec(dllimport)
void
__stdcall
CloseThreadpoolWork(
            PTP_WORK pwk
    );

__declspec(dllimport)


PTP_TIMER
__stdcall
CreateThreadpoolTimer(
                PTP_TIMER_CALLBACK pfnti,
                PVOID pv,
                PTP_CALLBACK_ENVIRON pcbe
    );

__declspec(dllimport)
void
__stdcall
SetThreadpoolTimer(
             PTP_TIMER pti,
             PFILETIME pftDueTime,
             DWORD msPeriod,
             DWORD msWindowLength
    );

__declspec(dllimport)
BOOL
__stdcall
IsThreadpoolTimerSet(
            PTP_TIMER pti
    );

__declspec(dllimport)
void
__stdcall
WaitForThreadpoolTimerCallbacks(
            PTP_TIMER pti,
            BOOL fCancelPendingCallbacks
    );

__declspec(dllimport)
void
__stdcall
CloseThreadpoolTimer(
            PTP_TIMER pti
    );

__declspec(dllimport)


PTP_WAIT
__stdcall
CreateThreadpoolWait(
                PTP_WAIT_CALLBACK pfnwa,
                PVOID pv,
                PTP_CALLBACK_ENVIRON pcbe
    );

__declspec(dllimport)
void
__stdcall
SetThreadpoolWait(
             PTP_WAIT pwa,
             HANDLE h,
             PFILETIME pftTimeout
    );

__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWaitCallbacks(
            PTP_WAIT pwa,
            BOOL fCancelPendingCallbacks
    );

__declspec(dllimport)
void
__stdcall
CloseThreadpoolWait(
            PTP_WAIT pwa
    );

__declspec(dllimport)


PTP_IO
__stdcall
CreateThreadpoolIo(
                HANDLE fl,
                PTP_WIN32_IO_CALLBACK pfnio,
                PVOID pv,
                PTP_CALLBACK_ENVIRON pcbe
    );

__declspec(dllimport)
void
__stdcall
StartThreadpoolIo(
            PTP_IO pio
    );

__declspec(dllimport)
void
__stdcall
CancelThreadpoolIo(
            PTP_IO pio
    );

__declspec(dllimport)
void
__stdcall
WaitForThreadpoolIoCallbacks(
            PTP_IO pio,
            BOOL fCancelPendingCallbacks
    );

__declspec(dllimport)
void
__stdcall
CloseThreadpoolIo(
            PTP_IO pio
    );





__declspec(dllimport)

HANDLE
__stdcall
CreatePrivateNamespaceA(
             LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
             LPVOID lpBoundaryDescriptor,
             LPCSTR lpAliasPrefix
    );
__declspec(dllimport)

HANDLE
__stdcall
CreatePrivateNamespaceW(
             LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
             LPVOID lpBoundaryDescriptor,
             LPCWSTR lpAliasPrefix
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenPrivateNamespaceA(
             LPVOID lpBoundaryDescriptor,
             LPCSTR lpAliasPrefix
    );
__declspec(dllimport)

HANDLE
__stdcall
OpenPrivateNamespaceW(
             LPVOID lpBoundaryDescriptor,
             LPCWSTR lpAliasPrefix
    );
#line 13505 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOLEAN
__stdcall
ClosePrivateNamespace(
         HANDLE Handle,
         ULONG Flags
    );






__declspec(dllimport)

HANDLE
__stdcall
CreateBoundaryDescriptorA(
         LPCSTR Name,
         ULONG Flags
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateBoundaryDescriptorW(
         LPCWSTR Name,
         ULONG Flags
    );






__declspec(dllimport)
BOOL
__stdcall
AddSIDToBoundaryDescriptor(
            HANDLE * BoundaryDescriptor,
         PSID RequiredSid
    );

__declspec(dllimport)
BOOL
__stdcall
AddIntegrityLabelToBoundaryDescriptor(
            HANDLE * BoundaryDescriptor,
         PSID IntegrityLabel
    );


__declspec(dllimport)
void
__stdcall
DeleteBoundaryDescriptor(
         HANDLE BoundaryDescriptor
    );
#line 13584 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef struct tagHW_PROFILE_INFOA {
    DWORD dwDockInfo;
    CHAR szHwProfileGuid[39];
    CHAR szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[39];
    WCHAR szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;




typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;



__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileA (
          LPHW_PROFILE_INFOA lpHwProfileInfo
    );
__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileW (
          LPHW_PROFILE_INFOW lpHwProfileInfo
    );
#line 13626 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceCounter(
          LARGE_INTEGER *lpPerformanceCount
    );

__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceFrequency(
          LARGE_INTEGER *lpFrequency
    );



__declspec(dllimport)
BOOL
__stdcall
GetVersionExA(
            LPOSVERSIONINFOA lpVersionInformation
    );
__declspec(dllimport)
BOOL
__stdcall
GetVersionExW(
            LPOSVERSIONINFOW lpVersionInformation
    );
#line 13662 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoA(
            LPOSVERSIONINFOEXA lpVersionInformation,
            DWORD dwTypeMask,
            DWORDLONG dwlConditionMask
    );
__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoW(
            LPOSVERSIONINFOEXW lpVersionInformation,
            DWORD dwTypeMask,
            DWORDLONG dwlConditionMask
    );
#line 13686 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetProductInfo(
          DWORD dwOSMajorVersion,
          DWORD dwOSMinorVersion,
          DWORD dwSpMajorVersion,
          DWORD dwSpMinorVersion,
          PDWORD pdwReturnedProductType
    );








#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winerror.h"
#line 23841 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winerror.h"
__forceinline HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (7 << 16) | 0x80000000);}
#line 13703 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
#line 13733 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
} SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

__declspec(dllimport)
BOOL
__stdcall
GetSystemPowerStatus(
          LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemPowerState(
         BOOL fSuspend,
         BOOL fForce
    );
#line 13764 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
AllocateUserPhysicalPages(
            HANDLE hProcess,
            PULONG_PTR NumberOfPages,
                                                      PULONG_PTR PageArray
    );



__declspec(dllimport)
BOOL
__stdcall
AllocateUserPhysicalPagesNuma(
            HANDLE hProcess,
            PULONG_PTR NumberOfPages,
                                                      PULONG_PTR PageArray,
            DWORD nndPreferred
    );



__declspec(dllimport)
BOOL
__stdcall
FreeUserPhysicalPages(
            HANDLE hProcess,
            PULONG_PTR NumberOfPages,
                                PULONG_PTR PageArray
    );

__declspec(dllimport)
BOOL
__stdcall
MapUserPhysicalPages(
         PVOID VirtualAddress,
         ULONG_PTR NumberOfPages,
                                   PULONG_PTR PageArray
    );

__declspec(dllimport)
BOOL
__stdcall
MapUserPhysicalPagesScatter(
                               PVOID *VirtualAddresses,
         ULONG_PTR NumberOfPages,
                                   PULONG_PTR PageArray
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateJobObjectA(
             LPSECURITY_ATTRIBUTES lpJobAttributes,
             LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateJobObjectW(
             LPSECURITY_ATTRIBUTES lpJobAttributes,
             LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenJobObjectA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
OpenJobObjectW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );






__declspec(dllimport)
BOOL
__stdcall
AssignProcessToJobObject(
         HANDLE hJob,
         HANDLE hProcess
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateJobObject(
         HANDLE hJob,
         UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
QueryInformationJobObject(
              HANDLE hJob,
              JOBOBJECTINFOCLASS JobObjectInformationClass,
                                                                     LPVOID lpJobObjectInformation,
              DWORD cbJobObjectInformationLength,
              LPDWORD lpReturnLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetInformationJobObject(
         HANDLE hJob,
         JOBOBJECTINFOCLASS JobObjectInformationClass,
                                              LPVOID lpJobObjectInformation,
         DWORD cbJobObjectInformationLength
    );



__declspec(dllimport)
BOOL
__stdcall
IsProcessInJob (
             HANDLE ProcessHandle,
             HANDLE JobHandle,
             PBOOL Result
    );



__declspec(dllimport)
BOOL
__stdcall
CreateJobSet (
         ULONG NumJob,
                        PJOB_SET_ARRAY UserJobSet,
         ULONG Flags);

__declspec(dllimport)

PVOID
__stdcall
AddVectoredExceptionHandler (
         ULONG First,
         PVECTORED_EXCEPTION_HANDLER Handler
    );

__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredExceptionHandler (
         PVOID Handle
    );

__declspec(dllimport)

PVOID
__stdcall
AddVectoredContinueHandler (
         ULONG First,
         PVECTORED_EXCEPTION_HANDLER Handler
    );

__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredContinueHandler (
         PVOID Handle
    );





__declspec(dllimport)

HANDLE
__stdcall
FindFirstVolumeA(
                                  LPSTR lpszVolumeName,
         DWORD cchBufferLength
    );
__declspec(dllimport)

HANDLE
__stdcall
FindFirstVolumeW(
                                  LPWSTR lpszVolumeName,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeA(
            HANDLE hFindVolume,
                                  LPSTR lpszVolumeName,
            DWORD cchBufferLength
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeW(
            HANDLE hFindVolume,
                                  LPWSTR lpszVolumeName,
            DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindVolumeClose(
         HANDLE hFindVolume
    );

__declspec(dllimport)

HANDLE
__stdcall
FindFirstVolumeMountPointA(
         LPCSTR lpszRootPathName,
                                  LPSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );
__declspec(dllimport)

HANDLE
__stdcall
FindFirstVolumeMountPointW(
         LPCWSTR lpszRootPathName,
                                  LPWSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointA(
         HANDLE hFindVolumeMountPoint,
                                  LPSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointW(
         HANDLE hFindVolumeMountPoint,
                                  LPWSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindVolumeMountPointClose(
         HANDLE hFindVolumeMountPoint
    );

__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint,
         LPCSTR lpszVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint,
         LPCWSTR lpszVolumeName
    );






__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint
    );






__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint,
                                  LPSTR lpszVolumeName,
         DWORD cchBufferLength
    );
__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint,
                                  LPWSTR lpszVolumeName,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameA(
         LPCSTR lpszFileName,
                                  LPSTR lpszVolumePathName,
         DWORD cchBufferLength
    );
__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameW(
         LPCWSTR lpszFileName,
                                  LPWSTR lpszVolumePathName,
         DWORD cchBufferLength
    );
#line 14144 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameA(
          LPCSTR lpszVolumeName,
                                                                                    LPCH lpszVolumePathNames,
          DWORD cchBufferLength,
          PDWORD lpcchReturnLength
    );
__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameW(
          LPCWSTR lpszVolumeName,
                                                                                    LPWCH lpszVolumePathNames,
          DWORD cchBufferLength,
          PDWORD lpcchReturnLength
    );
#line 14181 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
typedef struct tagACTCTXA {
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXA, *PACTCTXA;
typedef struct tagACTCTXW {
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXW, *PACTCTXW;




typedef ACTCTXA ACTCTX;
typedef PACTCTXA PACTCTX;


typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;



typedef PCACTCTXA PCACTCTX;




__declspec(dllimport)

HANDLE
__stdcall
CreateActCtxA(
         PCACTCTXA pActCtx
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateActCtxW(
         PCACTCTXW pActCtx
    );






__declspec(dllimport)
void
__stdcall
AddRefActCtx(
            HANDLE hActCtx
    );


__declspec(dllimport)
void
__stdcall
ReleaseActCtx(
            HANDLE hActCtx
    );

__declspec(dllimport)
BOOL
__stdcall
ZombifyActCtx(
            HANDLE hActCtx
    );


__declspec(dllimport)
BOOL
__stdcall
ActivateActCtx(
                HANDLE hActCtx,
            ULONG_PTR *lpCookie
    );




__declspec(dllimport)
BOOL
__stdcall
DeactivateActCtx(
         DWORD dwFlags,
         ULONG_PTR ulCookie
    );

__declspec(dllimport)
BOOL
__stdcall
GetCurrentActCtx(
                HANDLE *lphActCtx);


typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 * PCACTCTX_SECTION_KEYED_DATA_2600;

typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;

    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA * PCACTCTX_SECTION_KEYED_DATA;







__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringA(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               LPCSTR lpStringToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );
__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringW(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               LPCWSTR lpStringToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );






__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionGuid(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               const GUID *lpGuidToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );





typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE hActCtx;
    DWORD dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;
#line 14424 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
QueryActCtxW(
              DWORD dwFlags,
              HANDLE hActCtx,
              PVOID pvSubInstance,
              ULONG ulInfoClass,
                                                           PVOID pvBuffer,
              SIZE_T cbBuffer,
              SIZE_T *pcbWrittenOrRequired
    );

typedef BOOL (__stdcall * PQUERYACTCTXW_FUNC)(
              DWORD dwFlags,
              HANDLE hActCtx,
              PVOID pvSubInstance,
              ULONG ulInfoClass,
                                                           PVOID pvBuffer,
              SIZE_T cbBuffer,
              SIZE_T *pcbWrittenOrRequired
    );




__declspec(dllimport)
BOOL
__stdcall
ProcessIdToSessionId(
          DWORD dwProcessId,
          DWORD *pSessionId
    );



__declspec(dllimport)
DWORD
__stdcall
WTSGetActiveConsoleSessionId(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
IsWow64Process(
          HANDLE hProcess,
          PBOOL Wow64Process
    );



__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformation(
                                                            PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
            PDWORD ReturnedLength
    );



__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformationEx(
         LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,
                                                            PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,
            PDWORD ReturnedLength
    );

__declspec(dllimport)
WORD
__stdcall
GetActiveProcessorGroupCount(
    void
    );

__declspec(dllimport)
WORD
__stdcall
GetMaximumProcessorGroupCount(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetActiveProcessorCount(
         WORD GroupNumber
    );

__declspec(dllimport)
DWORD
__stdcall
GetMaximumProcessorCount(
         WORD GroupNumber
    );







__declspec(dllimport)
BOOL
__stdcall
GetNumaHighestNodeNumber(
          PULONG HighestNodeNumber
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNode(
          UCHAR Processor,
          PUCHAR NodeNumber
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeNumberFromHandle(
          HANDLE hFile,
          PUSHORT NodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNodeEx(
          PPROCESSOR_NUMBER Processor,
          PUSHORT NodeNumber
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMask(
          UCHAR Node,
          PULONGLONG ProcessorMask
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMaskEx(
          USHORT Node,
          PGROUP_AFFINITY ProcessorMask
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNode(
          UCHAR Node,
          PULONGLONG AvailableBytes
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNodeEx(
          USHORT Node,
          PULONGLONG AvailableBytes
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNode(
          ULONG ProximityId,
          PUCHAR NodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNodeEx(
          ULONG ProximityId,
          PUSHORT NodeNumber
    );






typedef DWORD (__stdcall *APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);
#line 14663 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRecoveryCallback(
          APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,
              PVOID pvParameter,
         DWORD dwPingInterval,
         DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRecoveryCallback(void);

__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRestart(
             PCWSTR pwzCommandline,
         DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRestart(void);




__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRecoveryCallback(
          HANDLE hProcess,
          APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback,
                        PVOID* ppvParameter,
              PDWORD pdwPingInterval,
              PDWORD pdwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRestartSettings(
         HANDLE hProcess,
                                PWSTR pwzCommandline,
            PDWORD pcchSize,
              PDWORD pdwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
ApplicationRecoveryInProgress(
          PBOOL pbCancelled
    );

__declspec(dllimport)
void
__stdcall
ApplicationRecoveryFinished(
         BOOL bSuccess
    );


typedef enum _FILE_INFO_BY_HANDLE_CLASS {
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    FileRemoteProtocolInfo,
    MaximumFileInfoByHandleClass
} FILE_INFO_BY_HANDLE_CLASS, *PFILE_INFO_BY_HANDLE_CLASS;

typedef struct _FILE_BASIC_INFO {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    DWORD FileAttributes;
} FILE_BASIC_INFO, *PFILE_BASIC_INFO;

typedef struct _FILE_STANDARD_INFO {
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO;

typedef struct _FILE_NAME_INFO {
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFO, *PFILE_NAME_INFO;

typedef struct _FILE_RENAME_INFO {
    BOOLEAN ReplaceIfExists;
    HANDLE RootDirectory;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFO, *PFILE_RENAME_INFO;

typedef struct _FILE_ALLOCATION_INFO {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO;

typedef struct _FILE_END_OF_FILE_INFO {
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO;

typedef struct _FILE_STREAM_INFO {
    DWORD NextEntryOffset;
    DWORD StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFO, *PFILE_STREAM_INFO;

typedef struct _FILE_COMPRESSION_INFO {
    LARGE_INTEGER CompressedFileSize;
    WORD CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO;

typedef struct _FILE_ATTRIBUTE_TAG_INFO {
    DWORD FileAttributes;
    DWORD ReparseTag;
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO;

typedef struct _FILE_DISPOSITION_INFO {
    BOOLEAN DeleteFileA;
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO;

typedef struct _FILE_ID_BOTH_DIR_INFO {
    DWORD NextEntryOffset;
    DWORD FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    DWORD FileAttributes;
    DWORD FileNameLength;
    DWORD EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO;

typedef enum _PRIORITY_HINT {
      IoPriorityHintVeryLow = 0,
      IoPriorityHintLow,
      IoPriorityHintNormal,
      MaximumIoPriorityHintType
} PRIORITY_HINT;

typedef struct _FILE_IO_PRIORITY_HINT_INFO {
    PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFO, *PFILE_IO_PRIORITY_HINT_INFO;






typedef struct _FILE_REMOTE_PROTOCOL_INFO
{

    USHORT StructureVersion;
    USHORT StructureSize;

    DWORD Protocol;


    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;

    USHORT Reserved;


    DWORD Flags;

    struct {
        DWORD Reserved[8];
    } GenericReserved;



    struct {
        DWORD Reserved[16];
    } ProtocolSpecificReserved;

} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO;


__declspec(dllimport)
BOOL
__stdcall
SetFileInformationByHandle(
          HANDLE hFile,
          FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
                               LPVOID lpFileInformation,
          DWORD dwBufferSize
);

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandleEx(
          HANDLE hFile,
          FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
                               LPVOID lpFileInformation,
          DWORD dwBufferSize
);

typedef enum _FILE_ID_TYPE {
      FileIdType,
      ObjectIdType,
      MaximumFileIdType
} FILE_ID_TYPE, *PFILE_ID_TYPE;

typedef struct FILE_ID_DESCRIPTOR {
    DWORD dwSize;
    FILE_ID_TYPE Type;
    union {
        LARGE_INTEGER FileId;
        GUID ObjectId;
    } ;
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;

__declspec(dllimport)

HANDLE
__stdcall
OpenFileById (
             HANDLE hVolumeHint,
             LPFILE_ID_DESCRIPTOR lpFileId,
             DWORD dwDesiredAccess,
             DWORD dwShareMode,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             DWORD dwFlagsAndAttributes
    );
#line 14934 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkA (
         LPCSTR lpSymlinkFileName,
         LPCSTR lpTargetFileName,
         DWORD dwFlags
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkW (
         LPCWSTR lpSymlinkFileName,
         LPCWSTR lpTargetFileName,
         DWORD dwFlags
    );






__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedA (
             LPCSTR lpSymlinkFileName,
             LPCSTR lpTargetFileName,
             DWORD dwFlags,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedW (
             LPCWSTR lpSymlinkFileName,
             LPCWSTR lpTargetFileName,
             DWORD dwFlags,
             HANDLE hTransaction
    );






__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleA (
         HANDLE hFile,
                              LPSTR lpszFilePath,
         DWORD cchFilePath,
         DWORD dwFlags
);
__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleW (
         HANDLE hFile,
                              LPWSTR lpszFilePath,
         DWORD cchFilePath,
         DWORD dwFlags
);
#line 15009 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
QueryActCtxSettingsW(
                  DWORD dwFlags,
                  HANDLE hActCtx,
                  PCWSTR settingsNameSpace,
                  PCWSTR settingName,
                                                           PWSTR pvBuffer,
              SIZE_T dwBuffer,
              SIZE_T *pdwWrittenOrRequired
    );





__declspec(dllimport)
BOOL
__stdcall
ReplacePartitionUnit (
         PWSTR TargetPartition,
         PWSTR SparePartition,
         ULONG Flags
    );






__declspec(dllimport)
BOOL
__stdcall
AddSecureMemoryCacheCallback(
                    PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveSecureMemoryCacheCallback(
                    PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );






__declspec(dllimport)
BOOL
__stdcall
CopyExtendedContext(
          PCONTEXT_EX Destination,
         DWORD ContextFlags,
         PCONTEXT_EX Source
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeExtendedContext(
          PVOID Context,
         DWORD ContextFlags,
          PCONTEXT_EX* ContextEx
    );

__declspec(dllimport)
DWORD64
__stdcall
GetEnabledExtendedFeatures(
         DWORD64 FeatureMask
    );


__declspec(dllimport)
BOOL
__stdcall
GetExtendedContextLength(
         DWORD ContextFlags,
          PDWORD ContextLength
    );

__declspec(dllimport)
DWORD64
__stdcall
GetExtendedFeaturesMask(
         PCONTEXT_EX ContextEx
    );

__declspec(dllimport)
PVOID
__stdcall
LocateExtendedFeature(
         PCONTEXT_EX ContextEx,
         DWORD FeatureId,
              PDWORD Length
    );

__declspec(dllimport)
PCONTEXT
__stdcall
LocateLegacyContext(
         PCONTEXT_EX ContextEx,
              PDWORD Length
    );

__declspec(dllimport)
void
__stdcall
SetExtendedFeaturesMask(
          PCONTEXT_EX ContextEx,
         DWORD64 FeatureMask
    );

__declspec(dllimport)
DWORD
__stdcall
EnableThreadProfiling(
         HANDLE ThreadHandle,
         DWORD Flags,
         DWORD64 HardwareCounters,
          HANDLE *PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
DisableThreadProfiling(
         HANDLE PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
QueryThreadProfiling(
         HANDLE ThreadHandle,
          PBOOLEAN Enabled
    );

__declspec(dllimport)
DWORD
__stdcall
ReadThreadProfilingData(
         HANDLE PerformanceDataHandle,
         DWORD Flags,
          PPERFORMANCE_DATA PerformanceData
    );
#line 15171 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
}
#line 15223 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winbase.h"
extern "C++" {

__forceinline
unsigned
InterlockedIncrement(
                              unsigned volatile *Addend
    )
{
    return (unsigned) InterlockedIncrement((volatile long*) Addend);
}

__forceinline
unsigned long
InterlockedIncrement(
                              unsigned long volatile *Addend
    )
{
    return (unsigned long) InterlockedIncrement((volatile long*) Addend);
}



__forceinline
unsigned __int64
InterlockedIncrement(
                              unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) InterlockedIncrement64((volatile __int64*) Addend);
}



__forceinline
unsigned
InterlockedDecrement(
                              unsigned volatile *Addend
    )
{
    return (unsigned long) InterlockedDecrement((volatile long*) Addend);
}

__forceinline
unsigned long
InterlockedDecrement(
                              unsigned long volatile *Addend
    )
{
    return (unsigned long) InterlockedDecrement((volatile long*) Addend);
}



__forceinline
unsigned __int64
InterlockedDecrement(
                              unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) InterlockedDecrement64((volatile __int64*) Addend);
}



__forceinline
unsigned
InterlockedExchange(
                              unsigned volatile *Target,
         unsigned Value
    )
{
    return (unsigned) InterlockedExchange((volatile long*) Target, (long) Value);
}

__forceinline
unsigned long
InterlockedExchange(
                              unsigned long volatile *Target,
         unsigned long Value
    )
{
    return (unsigned long) InterlockedExchange((volatile long*) Target, (long) Value);
}



__forceinline
unsigned __int64
InterlockedExchange(
                              unsigned __int64 volatile *Target,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) InterlockedExchange64((volatile __int64*) Target, (__int64) Value);
}



__forceinline
unsigned
InterlockedExchangeAdd(
                              unsigned volatile *Addend,
         unsigned Value
    )
{
    return (unsigned) InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned
InterlockedExchangeSubtract(
                              unsigned volatile *Addend,
         unsigned Value
    )
{
    return (unsigned) InterlockedExchangeAdd((volatile long*) Addend, - (long) Value);
}

__forceinline
unsigned long
InterlockedExchangeAdd(
                              unsigned long volatile *Addend,
         unsigned long Value
    )
{
    return (unsigned long) InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned long
InterlockedExchangeSubtract(
                              unsigned long volatile *Addend,
         unsigned long Value
    )
{
    return (unsigned long) InterlockedExchangeAdd((volatile long*) Addend, - (long) Value);
}



__forceinline
unsigned __int64
InterlockedExchangeAdd(
                              unsigned __int64 volatile *Addend,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) InterlockedExchangeAdd64((volatile __int64*) Addend, (__int64) Value);
}

__forceinline
unsigned __int64
InterlockedExchangeSubtract(
                              unsigned __int64 volatile *Addend,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) InterlockedExchangeAdd64((volatile __int64*) Addend, - (__int64) Value);
}



__forceinline
unsigned
InterlockedCompareExchange(
                              unsigned volatile *Destination,
         unsigned Exchange,
         unsigned Comperand
    )
{
    return (unsigned) InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}

__forceinline
unsigned long
InterlockedCompareExchange(
                              unsigned long volatile *Destination,
         unsigned long Exchange,
         unsigned long Comperand
    )
{
    return (unsigned long) InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}



__forceinline
unsigned __int64
InterlockedCompareExchange(
                              unsigned __int64 volatile *Destination,
         unsigned __int64 Exchange,
         unsigned __int64 Comperand
    )
{
    return (unsigned __int64) InterlockedCompareExchange64((volatile __int64*) Destination, (__int64) Exchange, (__int64) Comperand);
}

__forceinline
unsigned __int64
InterlockedAnd(
                              unsigned __int64 volatile *Destination,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) InterlockedAnd64((volatile __int64*) Destination, (__int64) Value);
}

__forceinline
unsigned __int64
InterlockedOr(
                              unsigned __int64 volatile *Destination,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) InterlockedOr64((volatile __int64*) Destination, (__int64) Value);
}

__forceinline
unsigned __int64
InterlockedXor(
                              unsigned __int64 volatile *Destination,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) InterlockedXor64((volatile __int64*) Destination, (__int64) Value);
}



}
#line 156 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
#line 16 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
#pragma warning(push)
#pragma warning(disable: 4201)
#line 46 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
extern "C" {
#line 284 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct _DRAWPATRECT {
        POINT ptPosition;
        POINT ptSize;
        WORD wStyle;
        WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;
#line 409 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct _PSINJECTDATA {

    DWORD DataBytes;
    WORD InjectionPoint;
    WORD PageNumber;



} PSINJECTDATA, *PPSINJECTDATA;
#line 491 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct _PSFEATURE_OUTPUT {

    BOOL bPageIndependent;
    BOOL bSetPageDevice;

} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;





typedef struct _PSFEATURE_CUSTPAPER {

    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;

} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;
#line 561 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagXFORM
  {
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
  } XFORM, *PXFORM, *LPXFORM;


typedef struct tagBITMAP
  {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
  } BITMAP, *PBITMAP, *NPBITMAP, *LPBITMAP;


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\pshpack1.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack(push,1)
#line 583 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"

typedef struct tagRGBTRIPLE {
        BYTE rgbtBlue;
        BYTE rgbtGreen;
        BYTE rgbtRed;
} RGBTRIPLE, *PRGBTRIPLE, *NPRGBTRIPLE, *LPRGBTRIPLE;

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 589 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"


typedef struct tagRGBQUAD {
        BYTE rgbBlue;
        BYTE rgbGreen;
        BYTE rgbRed;
        BYTE rgbReserved;
} RGBQUAD;
typedef RGBQUAD * LPRGBQUAD;
#line 616 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef LONG LCSCSTYPE;


typedef LONG LCSGAMUTMATCH;
#line 646 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef long FXPT16DOT16, *LPFXPT16DOT16;
typedef long FXPT2DOT30, *LPFXPT2DOT30;




typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;
typedef CIEXYZ *LPCIEXYZ;

typedef struct tagICEXYZTRIPLE
{
        CIEXYZ ciexyzRed;
        CIEXYZ ciexyzGreen;
        CIEXYZ ciexyzBlue;
} CIEXYZTRIPLE;
typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;






typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;




typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;





typedef struct tagBITMAPCOREHEADER {
        DWORD bcSize;
        WORD bcWidth;
        WORD bcHeight;
        WORD bcPlanes;
        WORD bcBitCount;
} BITMAPCOREHEADER, *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;

typedef struct tagBITMAPINFOHEADER{
        DWORD biSize;
        LONG biWidth;
        LONG biHeight;
        WORD biPlanes;
        WORD biBitCount;
        DWORD biCompression;
        DWORD biSizeImage;
        LONG biXPelsPerMeter;
        LONG biYPelsPerMeter;
        DWORD biClrUsed;
        DWORD biClrImportant;
} BITMAPINFOHEADER, *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;


typedef struct {
        DWORD bV4Size;
        LONG bV4Width;
        LONG bV4Height;
        WORD bV4Planes;
        WORD bV4BitCount;
        DWORD bV4V4Compression;
        DWORD bV4SizeImage;
        LONG bV4XPelsPerMeter;
        LONG bV4YPelsPerMeter;
        DWORD bV4ClrUsed;
        DWORD bV4ClrImportant;
        DWORD bV4RedMask;
        DWORD bV4GreenMask;
        DWORD bV4BlueMask;
        DWORD bV4AlphaMask;
        DWORD bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD bV4GammaRed;
        DWORD bV4GammaGreen;
        DWORD bV4GammaBlue;
} BITMAPV4HEADER, *LPBITMAPV4HEADER, *PBITMAPV4HEADER;



typedef struct {
        DWORD bV5Size;
        LONG bV5Width;
        LONG bV5Height;
        WORD bV5Planes;
        WORD bV5BitCount;
        DWORD bV5Compression;
        DWORD bV5SizeImage;
        LONG bV5XPelsPerMeter;
        LONG bV5YPelsPerMeter;
        DWORD bV5ClrUsed;
        DWORD bV5ClrImportant;
        DWORD bV5RedMask;
        DWORD bV5GreenMask;
        DWORD bV5BlueMask;
        DWORD bV5AlphaMask;
        DWORD bV5CSType;
        CIEXYZTRIPLE bV5Endpoints;
        DWORD bV5GammaRed;
        DWORD bV5GammaGreen;
        DWORD bV5GammaBlue;
        DWORD bV5Intent;
        DWORD bV5ProfileData;
        DWORD bV5ProfileSize;
        DWORD bV5Reserved;
} BITMAPV5HEADER, *LPBITMAPV5HEADER, *PBITMAPV5HEADER;
#line 798 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
} BITMAPINFO, *LPBITMAPINFO, *PBITMAPINFO;

typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
} BITMAPCOREINFO, *LPBITMAPCOREINFO, *PBITMAPCOREINFO;


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack2.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack2.h"
#pragma warning(disable:4103)

#pragma pack(push,2)
#line 808 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"

typedef struct tagBITMAPFILEHEADER {
        WORD bfType;
        DWORD bfSize;
        WORD bfReserved1;
        WORD bfReserved2;
        DWORD bfOffBits;
} BITMAPFILEHEADER, *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 816 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"






typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO, *NPCHARSETINFO, *LPCHARSETINFO;
#line 842 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;
#line 856 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagHANDLETABLE
  {
    HGDIOBJ objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE, *LPHANDLETABLE;

typedef struct tagMETARECORD
  {
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
  } METARECORD;
typedef struct tagMETARECORD *PMETARECORD;
typedef struct tagMETARECORD *LPMETARECORD;

typedef struct tagMETAFILEPICT
  {
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
  } METAFILEPICT, *LPMETAFILEPICT;


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack2.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack2.h"
#pragma warning(disable:4103)

#pragma pack(push,2)
#line 878 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"

typedef struct tagMETAHEADER
{
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER *PMETAHEADER;
typedef struct tagMETAHEADER *LPMETAHEADER;


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 892 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"



typedef struct tagENHMETARECORD
{
    DWORD iType;
    DWORD nSize;
    DWORD dParm[1];
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD iType;
    DWORD nSize;

    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;

    WORD sReserved;
    DWORD nDescription;

    DWORD offDescription;

    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;

    DWORD cbPixelFormat;

    DWORD offPixelFormat;

    DWORD bOpenGL;



    SIZEL szlMicrometers;


} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;
#line 953 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
    typedef BYTE BCHAR;





#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack4.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack4.h"
#pragma warning(disable:4103)

#pragma pack(push,4)
#line 958 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"

typedef struct tagTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA, *NPTEXTMETRICA, *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW, *NPTEXTMETRICW, *LPTEXTMETRICW;






typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 1016 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
#line 1033 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack4.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack4.h"
#pragma warning(disable:4103)

#pragma pack(push,4)
#line 1033 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"

typedef struct tagNEWTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA, *NPNEWTEXTMETRICA, *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW, *NPNEWTEXTMETRICW, *LPNEWTEXTMETRICW;






typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 1099 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"



typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
}NEWTEXTMETRICEXW;



typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;







typedef struct tagPELARRAY
  {
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
  } PELARRAY, *PPELARRAY, *NPPELARRAY, *LPPELARRAY;


typedef struct tagLOGBRUSH
  {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
  } LOGBRUSH, *PLOGBRUSH, *NPLOGBRUSH, *LPLOGBRUSH;

typedef struct tagLOGBRUSH32
  {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
  } LOGBRUSH32, *PLOGBRUSH32, *NPLOGBRUSH32, *LPLOGBRUSH32;

typedef LOGBRUSH PATTERN;
typedef PATTERN *PPATTERN;
typedef PATTERN *NPPATTERN;
typedef PATTERN *LPPATTERN;


typedef struct tagLOGPEN
  {
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
  } LOGPEN, *PLOGPEN, *NPLOGPEN, *LPLOGPEN;

typedef struct tagEXTLOGPEN {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN, *NPEXTLOGPEN, *LPEXTLOGPEN;

typedef struct tagEXTLOGPEN32 {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN32, *PEXTLOGPEN32, *NPEXTLOGPEN32, *LPEXTLOGPEN32;



typedef struct tagPALETTEENTRY {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
} PALETTEENTRY, *PPALETTEENTRY, *LPPALETTEENTRY;





typedef struct tagLOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
                                      PALETTEENTRY palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE, *NPLOGPALETTE, *LPLOGPALETTE;






typedef struct tagLOGFONTA
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[32];
} LOGFONTA, *PLOGFONTA, *NPLOGFONTA, *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
} LOGFONTW, *PLOGFONTW, *NPLOGFONTW, *LPLOGFONTW;






typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef NPLOGFONTA NPLOGFONT;
typedef LPLOGFONTA LPLOGFONT;





typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;




typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;



typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    BYTE elfScript[32];
} ENUMLOGFONTEXA, *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    WCHAR elfScript[32];
} ENUMLOGFONTEXW, *LPENUMLOGFONTEXW;




typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
#line 1425 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagPANOSE
{
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
} PANOSE, * LPPANOSE;
#line 1551 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagEXTLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA, *NPEXTLOGFONTA, *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW, *NPEXTLOGFONTW, *LPEXTLOGFONTW;






typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
#line 1930 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct _devicemodeA {
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {

      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };

      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    };
    DWORD dmDisplayFrequency;

    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;

    DWORD dmPanningWidth;
    DWORD dmPanningHeight;


} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {

      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };

      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    };
    DWORD dmDisplayFrequency;

    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;

    DWORD dmPanningWidth;
    DWORD dmPanningHeight;


} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;






typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;
#line 2458 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct _DISPLAY_DEVICEA {
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;





typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
#line 2514 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct DISPLAYCONFIG_RATIONAL
{
    UINT32 Numerator;
    UINT32 Denominator;
} DISPLAYCONFIG_RATIONAL;

typedef enum
{
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = 0x80000000,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;

typedef enum
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_SCANLINE_ORDERING;

typedef struct DISPLAYCONFIG_2DREGION
{
    UINT32 cx;
    UINT32 cy;
} DISPLAYCONFIG_2DREGION;

typedef struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
    UINT64 pixelRate;
    DISPLAYCONFIG_RATIONAL hSyncFreq;
    DISPLAYCONFIG_RATIONAL vSyncFreq;
    DISPLAYCONFIG_2DREGION activeSize;
    DISPLAYCONFIG_2DREGION totalSize;
    UINT32 videoStandard;
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO;

typedef enum
{
    DISPLAYCONFIG_SCALING_IDENTITY = 1,
    DISPLAYCONFIG_SCALING_CENTERED = 2,
    DISPLAYCONFIG_SCALING_STRETCHED = 3,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4,
    DISPLAYCONFIG_SCALING_CUSTOM = 5,
    DISPLAYCONFIG_SCALING_PREFERRED = 128,
    DISPLAYCONFIG_SCALING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_SCALING;

typedef enum
{
    DISPLAYCONFIG_ROTATION_IDENTITY = 1,
    DISPLAYCONFIG_ROTATION_ROTATE90 = 2,
    DISPLAYCONFIG_ROTATION_ROTATE180 = 3,
    DISPLAYCONFIG_ROTATION_ROTATE270 = 4,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_ROTATION;

typedef enum
{
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_MODE_INFO_TYPE;

typedef enum
{
    DISPLAYCONFIG_PIXELFORMAT_8BPP = 1,
    DISPLAYCONFIG_PIXELFORMAT_16BPP = 2,
    DISPLAYCONFIG_PIXELFORMAT_24BPP = 3,
    DISPLAYCONFIG_PIXELFORMAT_32BPP = 4,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 0xffffffff
} DISPLAYCONFIG_PIXELFORMAT;

typedef struct DISPLAYCONFIG_SOURCE_MODE
{
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_PIXELFORMAT pixelFormat;
    POINTL position;
} DISPLAYCONFIG_SOURCE_MODE;

typedef struct DISPLAYCONFIG_TARGET_MODE
{
    DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
} DISPLAYCONFIG_TARGET_MODE;

typedef struct DISPLAYCONFIG_MODE_INFO
{
    DISPLAYCONFIG_MODE_INFO_TYPE infoType;
    UINT32 id;
    LUID adapterId;
    union
    {
        DISPLAYCONFIG_TARGET_MODE targetMode;
        DISPLAYCONFIG_SOURCE_MODE sourceMode;
    };
} DISPLAYCONFIG_MODE_INFO;



typedef struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
    LUID adapterId;
    UINT32 id;
    UINT32 modeInfoIdx;
    UINT32 statusFlags;
} DISPLAYCONFIG_PATH_SOURCE_INFO;







typedef struct DISPLAYCONFIG_PATH_TARGET_INFO
{
    LUID adapterId;
    UINT32 id;
    UINT32 modeInfoIdx;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    DISPLAYCONFIG_ROTATION rotation;
    DISPLAYCONFIG_SCALING scaling;
    DISPLAYCONFIG_RATIONAL refreshRate;
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
    BOOL targetAvailable;
    UINT32 statusFlags;
} DISPLAYCONFIG_PATH_TARGET_INFO;
#line 2669 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct DISPLAYCONFIG_PATH_INFO
{
    DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
    DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
    UINT32 flags;
} DISPLAYCONFIG_PATH_INFO;







typedef enum
{
      DISPLAYCONFIG_TOPOLOGY_INTERNAL = 0x00000001,
      DISPLAYCONFIG_TOPOLOGY_CLONE = 0x00000002,
      DISPLAYCONFIG_TOPOLOGY_EXTEND = 0x00000004,
      DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 0x00000008,
      DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_TOPOLOGY_ID;

typedef enum
{
      DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4,
      DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5,
      DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_DEVICE_INFO_TYPE;

typedef struct DISPLAYCONFIG_DEVICE_INFO_HEADER
{
    DISPLAYCONFIG_DEVICE_INFO_TYPE type;
    UINT32 size;
    LUID adapterId;
    UINT32 id;
} DISPLAYCONFIG_DEVICE_INFO_HEADER;

typedef struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR viewGdiDeviceName[32];
} DISPLAYCONFIG_SOURCE_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
    union
    {
        struct
        {
            UINT32 friendlyNameFromEdid : 1;
            UINT32 friendlyNameForced : 1;
            UINT32 edidIdsValid : 1;
            UINT32 reserved : 29;
        };
        UINT32 value;
    };
} DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    UINT16 edidManufactureId;
    UINT16 edidProductCodeId;
    UINT32 connectorInstance;
    WCHAR monitorFriendlyDeviceName[64];
    WCHAR monitorDevicePath[128];
} DISPLAYCONFIG_TARGET_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_TARGET_MODE targetMode;
} DISPLAYCONFIG_TARGET_PREFERRED_MODE;

typedef struct DISPLAYCONFIG_ADAPTER_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR adapterDevicePath[128];
} DISPLAYCONFIG_ADAPTER_NAME;

typedef struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
            UINT32 bootPersistenceOn : 1;
            UINT32 reserved : 31;
        };
        UINT32 value;
    };
} DISPLAYCONFIG_SET_TARGET_PERSISTENCE;
#line 2806 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct _RGNDATAHEADER {
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER rdh;
    char Buffer[1];
} RGNDATA, *PRGNDATA, *NPRGNDATA, *LPRGNDATA;






typedef struct _ABC {
    int abcA;
    UINT abcB;
    int abcC;
} ABC, *PABC, *NPABC, *LPABC;

typedef struct _ABCFLOAT {
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
} ABCFLOAT, *PABCFLOAT, *NPABCFLOAT, *LPABCFLOAT;






typedef struct _OUTLINETEXTMETRICA {
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
     int otmsCharSlopeRise;
     int otmsCharSlopeRun;
     int otmItalicAngle;
    UINT otmEMSquare;
     int otmAscent;
     int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
     int otmMacAscent;
     int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
     int otmsStrikeoutPosition;
     int otmsUnderscoreSize;
     int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA, *NPOUTLINETEXTMETRICA, *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
     int otmsCharSlopeRise;
     int otmsCharSlopeRun;
     int otmItalicAngle;
    UINT otmEMSquare;
     int otmAscent;
     int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
     int otmMacAscent;
     int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
     int otmsStrikeoutPosition;
     int otmsUnderscoreSize;
     int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW, *NPOUTLINETEXTMETRICW, *LPOUTLINETEXTMETRICW;






typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
#line 2928 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagPOLYTEXTA
{
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTA, *PPOLYTEXTA, *NPPOLYTEXTA, *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTW, *PPOLYTEXTW, *NPPOLYTEXTW, *LPPOLYTEXTW;






typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;


typedef struct _FIXED {

    WORD fract;
    short value;




} FIXED;


typedef struct _MAT2 {
     FIXED eM11;
     FIXED eM12;
     FIXED eM21;
     FIXED eM22;
} MAT2, *LPMAT2;



typedef struct _GLYPHMETRICS {
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
} GLYPHMETRICS, *LPGLYPHMETRICS;
#line 3012 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD wType;
    WORD cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;
#line 3076 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagGCP_RESULTSA
    {
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;




typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;



typedef struct _RASTERIZER_STATUS {
    short nSize;
    short wFlags;
    short nLanguageID;
} RASTERIZER_STATUS, *LPRASTERIZER_STATUS;






typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, *LPPIXELFORMATDESCRIPTOR;
#line 3184 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);
#line 3201 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;



typedef FONTENUMPROCA FONTENUMPROC;


typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);
#line 3226 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
__declspec(dllimport) int __stdcall AddFontResourceA( LPCSTR);
__declspec(dllimport) int __stdcall AddFontResourceW( LPCWSTR);






            __declspec(dllimport) BOOL __stdcall AnimatePalette( HPALETTE hPal, UINT iStartIndex, UINT cEntries, const PALETTEENTRY * ppe);
            __declspec(dllimport) BOOL __stdcall Arc( HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
            __declspec(dllimport) BOOL __stdcall BitBlt( HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
__declspec(dllimport) BOOL __stdcall CancelDC( HDC hdc);
            __declspec(dllimport) BOOL __stdcall Chord( HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
__declspec(dllimport) int __stdcall ChoosePixelFormat( HDC hdc, const PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) HMETAFILE __stdcall CloseMetaFile( HDC hdc);
__declspec(dllimport) int __stdcall CombineRgn( HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, int iMode);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileA( HMETAFILE, LPCSTR);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileW( HMETAFILE, LPCWSTR);





            __declspec(dllimport) HBITMAP __stdcall CreateBitmap( int nWidth, int nHeight, UINT nPlanes, UINT nBitCount, const void *lpBits);
            __declspec(dllimport) HBITMAP __stdcall CreateBitmapIndirect( const BITMAP *pbm);
            __declspec(dllimport) HBRUSH __stdcall CreateBrushIndirect( const LOGBRUSH *plbrush);
__declspec(dllimport) HBITMAP __stdcall CreateCompatibleBitmap( HDC hdc, int cx, int cy);
__declspec(dllimport) HBITMAP __stdcall CreateDiscardableBitmap( HDC hdc, int cx, int cy);
__declspec(dllimport) HDC __stdcall CreateCompatibleDC( HDC hdc);
__declspec(dllimport) HDC __stdcall CreateDCA( LPCSTR pwszDriver, LPCSTR pwszDevice, LPCSTR pszPort, const DEVMODEA * pdm);
__declspec(dllimport) HDC __stdcall CreateDCW( LPCWSTR pwszDriver, LPCWSTR pwszDevice, LPCWSTR pszPort, const DEVMODEW * pdm);





__declspec(dllimport) HBITMAP __stdcall CreateDIBitmap( HDC hdc, const BITMAPINFOHEADER *pbmih, DWORD flInit, const void *pjBits, const BITMAPINFO *pbmi, UINT iUsage);
__declspec(dllimport) HBRUSH __stdcall CreateDIBPatternBrush( HGLOBAL h, UINT iUsage);
            __declspec(dllimport) HBRUSH __stdcall CreateDIBPatternBrushPt( const void *lpPackedDIB, UINT iUsage);
__declspec(dllimport) HRGN __stdcall CreateEllipticRgn( int x1, int y1, int x2, int y2);
__declspec(dllimport) HRGN __stdcall CreateEllipticRgnIndirect( const RECT *lprect);
            __declspec(dllimport) HFONT __stdcall CreateFontIndirectA( const LOGFONTA *lplf);
            __declspec(dllimport) HFONT __stdcall CreateFontIndirectW( const LOGFONTW *lplf);





__declspec(dllimport) HFONT __stdcall CreateFontA( int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
                                  DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
                                  DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName);
__declspec(dllimport) HFONT __stdcall CreateFontW( int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
                                  DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
                                  DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName);






__declspec(dllimport) HBRUSH __stdcall CreateHatchBrush( int iHatch, COLORREF color);
__declspec(dllimport) HDC __stdcall CreateICA( LPCSTR pszDriver, LPCSTR pszDevice, LPCSTR pszPort, const DEVMODEA * pdm);
__declspec(dllimport) HDC __stdcall CreateICW( LPCWSTR pszDriver, LPCWSTR pszDevice, LPCWSTR pszPort, const DEVMODEW * pdm);





__declspec(dllimport) HDC __stdcall CreateMetaFileA( LPCSTR pszFile);
__declspec(dllimport) HDC __stdcall CreateMetaFileW( LPCWSTR pszFile);





            __declspec(dllimport) HPALETTE __stdcall CreatePalette( const LOGPALETTE * plpal);
__declspec(dllimport) HPEN __stdcall CreatePen( int iStyle, int cWidth, COLORREF color);
            __declspec(dllimport) HPEN __stdcall CreatePenIndirect( const LOGPEN *plpen);
__declspec(dllimport) HRGN __stdcall CreatePolyPolygonRgn( const POINT *pptl,
                                                     const INT *pc,
                                                     int cPoly,
                                                     int iMode);
            __declspec(dllimport) HBRUSH __stdcall CreatePatternBrush( HBITMAP hbm);
__declspec(dllimport) HRGN __stdcall CreateRectRgn( int x1, int y1, int x2, int y2);
__declspec(dllimport) HRGN __stdcall CreateRectRgnIndirect( const RECT *lprect);
__declspec(dllimport) HRGN __stdcall CreateRoundRectRgn( int x1, int y1, int x2, int y2, int w, int h);
__declspec(dllimport) BOOL __stdcall CreateScalableFontResourceA( DWORD fdwHidden, LPCSTR lpszFont, LPCSTR lpszFile, LPCSTR lpszPath);
__declspec(dllimport) BOOL __stdcall CreateScalableFontResourceW( DWORD fdwHidden, LPCWSTR lpszFont, LPCWSTR lpszFile, LPCWSTR lpszPath);





__declspec(dllimport) HBRUSH __stdcall CreateSolidBrush( COLORREF color);

__declspec(dllimport) BOOL __stdcall DeleteDC( HDC hdc);
__declspec(dllimport) BOOL __stdcall DeleteMetaFile( HMETAFILE hmf);
            __declspec(dllimport) BOOL __stdcall DeleteObject( HGDIOBJ ho);
__declspec(dllimport) int __stdcall DescribePixelFormat( HDC hdc,
                                                 int iPixelFormat,
                                                 UINT nBytes,
                                                                     LPPIXELFORMATDESCRIPTOR ppfd);





typedef UINT (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);
#line 3414 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesA(
                        LPCSTR pDevice,
                        LPCSTR pPort,
                        WORD fwCapability,
                        LPSTR pOutput,
                        const DEVMODEA *pDevMode
    );
__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesW(
                        LPCWSTR pDevice,
                        LPCWSTR pPort,
                        WORD fwCapability,
                        LPWSTR pOutput,
                        const DEVMODEW *pDevMode
    );






__declspec(dllimport) int __stdcall DrawEscape( HDC hdc,
                                         int iEscape,
                                         int cjIn,
                                                          LPCSTR lpIn);

            __declspec(dllimport) BOOL __stdcall Ellipse( HDC hdc, int left, int top, int right, int bottom);


__declspec(dllimport) int __stdcall EnumFontFamiliesExA( HDC hdc, LPLOGFONTA lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam, DWORD dwFlags);
__declspec(dllimport) int __stdcall EnumFontFamiliesExW( HDC hdc, LPLOGFONTW lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam, DWORD dwFlags);







__declspec(dllimport) int __stdcall EnumFontFamiliesA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
__declspec(dllimport) int __stdcall EnumFontFamiliesW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);





__declspec(dllimport) int __stdcall EnumFontsA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
__declspec(dllimport) int __stdcall EnumFontsW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);







__declspec(dllimport) int __stdcall EnumObjects( HDC hdc, int nType, GOBJENUMPROC lpFunc, LPARAM lParam);





__declspec(dllimport) BOOL __stdcall EqualRgn( HRGN hrgn1, HRGN hrgn2);
            __declspec(dllimport) int __stdcall Escape( HDC hdc,
                                     int iEscape,
                                     int cjIn,
                                                      LPCSTR pvIn,
                                          LPVOID pvOut);
__declspec(dllimport) int __stdcall ExtEscape( HDC hdc,
                                         int iEscape,
                                         int cjInput,
                                                             LPCSTR lpInData,
                                         int cjOutput,
                                                               LPSTR lpOutData);
            __declspec(dllimport) int __stdcall ExcludeClipRect( HDC hdc, int left, int top, int right, int bottom);
            __declspec(dllimport) HRGN __stdcall ExtCreateRegion( const XFORM * lpx, DWORD nCount, const RGNDATA * lpData);
            __declspec(dllimport) BOOL __stdcall ExtFloodFill( HDC hdc, int x, int y, COLORREF color, UINT type);
            __declspec(dllimport) BOOL __stdcall FillRgn( HDC hdc, HRGN hrgn, HBRUSH hbr);
            __declspec(dllimport) BOOL __stdcall FloodFill( HDC hdc, int x, int y, COLORREF color);
            __declspec(dllimport) BOOL __stdcall FrameRgn( HDC hdc, HRGN hrgn, HBRUSH hbr, int w, int h);
__declspec(dllimport) int __stdcall GetROP2( HDC hdc);
__declspec(dllimport) BOOL __stdcall GetAspectRatioFilterEx( HDC hdc, LPSIZE lpsize);
__declspec(dllimport) COLORREF __stdcall GetBkColor( HDC hdc);


__declspec(dllimport) COLORREF __stdcall GetDCBrushColor( HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetDCPenColor( HDC hdc);


__declspec(dllimport)
int
__stdcall
GetBkMode(
         HDC hdc
    );

__declspec(dllimport)
LONG
__stdcall
GetBitmapBits(
         HBITMAP hbit,
         LONG cb,
                     LPVOID lpvBits
    );

__declspec(dllimport) BOOL __stdcall GetBitmapDimensionEx( HBITMAP hbit, LPSIZE lpsize);
__declspec(dllimport) UINT __stdcall GetBoundsRect( HDC hdc, LPRECT lprect, UINT flags);

__declspec(dllimport) BOOL __stdcall GetBrushOrgEx( HDC hdc, LPPOINT lppt);

__declspec(dllimport) BOOL __stdcall GetCharWidthA( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
__declspec(dllimport) BOOL __stdcall GetCharWidthW( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);





__declspec(dllimport) BOOL __stdcall GetCharWidth32A( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
__declspec(dllimport) BOOL __stdcall GetCharWidth32W( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);





__declspec(dllimport) BOOL __stdcall GetCharWidthFloatA( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
__declspec(dllimport) BOOL __stdcall GetCharWidthFloatW( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);






__declspec(dllimport) BOOL __stdcall GetCharABCWidthsA( HDC hdc,
                                                 UINT wFirst,
                                                 UINT wLast,
                                                                             LPABC lpABC);
__declspec(dllimport) BOOL __stdcall GetCharABCWidthsW( HDC hdc,
                                                 UINT wFirst,
                                                 UINT wLast,
                                                                             LPABC lpABC);






__declspec(dllimport) BOOL __stdcall GetCharABCWidthsFloatA( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
__declspec(dllimport) BOOL __stdcall GetCharABCWidthsFloatW( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);





__declspec(dllimport) int __stdcall GetClipBox( HDC hdc, LPRECT lprect);
__declspec(dllimport) int __stdcall GetClipRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) int __stdcall GetMetaRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) HGDIOBJ __stdcall GetCurrentObject( HDC hdc, UINT type);
__declspec(dllimport) BOOL __stdcall GetCurrentPositionEx( HDC hdc, LPPOINT lppt);
__declspec(dllimport) int __stdcall GetDeviceCaps( HDC hdc, int index);
__declspec(dllimport) int __stdcall GetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines, LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage);


__declspec(dllimport) DWORD __stdcall GetFontData ( HDC hdc,
                                             DWORD dwTable,
                                             DWORD dwOffset,
                                                                                PVOID pvBuffer,
                                             DWORD cjBuffer
                                        );

__declspec(dllimport) DWORD __stdcall GetGlyphOutlineA( HDC hdc,
                                                 UINT uChar,
                                                 UINT fuFormat,
                                                  LPGLYPHMETRICS lpgm,
                                                 DWORD cjBuffer,
                                                                       LPVOID pvBuffer,
                                                 const MAT2 *lpmat2
                                        );
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineW( HDC hdc,
                                                 UINT uChar,
                                                 UINT fuFormat,
                                                  LPGLYPHMETRICS lpgm,
                                                 DWORD cjBuffer,
                                                                       LPVOID pvBuffer,
                                                 const MAT2 *lpmat2
                                        );






__declspec(dllimport) int __stdcall GetGraphicsMode( HDC hdc);
__declspec(dllimport) int __stdcall GetMapMode( HDC hdc);
__declspec(dllimport) UINT __stdcall GetMetaFileBitsEx( HMETAFILE hMF, UINT cbBuffer, LPVOID lpData);
__declspec(dllimport) HMETAFILE __stdcall GetMetaFileA( LPCSTR lpName);
__declspec(dllimport) HMETAFILE __stdcall GetMetaFileW( LPCWSTR lpName);





__declspec(dllimport) COLORREF __stdcall GetNearestColor( HDC hdc, COLORREF color);
__declspec(dllimport) UINT __stdcall GetNearestPaletteIndex( HPALETTE h, COLORREF color);
__declspec(dllimport) DWORD __stdcall GetObjectType( HGDIOBJ h);



__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsA( HDC hdc,
                                                     UINT cjCopy,
                                                                         LPOUTLINETEXTMETRICA potm);
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsW( HDC hdc,
                                                     UINT cjCopy,
                                                                         LPOUTLINETEXTMETRICW potm);
#line 3639 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
__declspec(dllimport) UINT __stdcall GetPaletteEntries( HPALETTE hpal,
                                                 UINT iStart,
                                                 UINT cEntries,
                                                                                   LPPALETTEENTRY pPalEntries);
__declspec(dllimport) COLORREF __stdcall GetPixel( HDC hdc, int x, int y);
__declspec(dllimport) int __stdcall GetPixelFormat( HDC hdc);
__declspec(dllimport) int __stdcall GetPolyFillMode( HDC hdc);
__declspec(dllimport) BOOL __stdcall GetRasterizerCaps( LPRASTERIZER_STATUS lpraststat,
                                                 UINT cjBytes);

__declspec(dllimport) int __stdcall GetRandomRgn ( HDC hdc, HRGN hrgn, INT i);
__declspec(dllimport) DWORD __stdcall GetRegionData( HRGN hrgn,
                                             DWORD nCount,
                                                                              LPRGNDATA lpRgnData);
__declspec(dllimport) int __stdcall GetRgnBox( HRGN hrgn, LPRECT lprc);
__declspec(dllimport) HGDIOBJ __stdcall GetStockObject( int i);
__declspec(dllimport) int __stdcall GetStretchBltMode( HDC hdc);
__declspec(dllimport)
UINT
__stdcall
GetSystemPaletteEntries(
         HDC hdc,
         UINT iStart,
         UINT cEntries,
                               LPPALETTEENTRY pPalEntries
    );

__declspec(dllimport) UINT __stdcall GetSystemPaletteUse( HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharacterExtra( HDC hdc);
__declspec(dllimport) UINT __stdcall GetTextAlign( HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetTextColor( HDC hdc);

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointA(
         HDC hdc,
                   LPCSTR lpString,
         int c,
          LPSIZE lpsz
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointW(
         HDC hdc,
                   LPCWSTR lpString,
         int c,
          LPSIZE lpsz
    );






__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32A(
         HDC hdc,
                   LPCSTR lpString,
         int c,
          LPSIZE psizl
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32W(
         HDC hdc,
                   LPCWSTR lpString,
         int c,
          LPSIZE psizl
    );






__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointA(
         HDC hdc,
                           LPCSTR lpszString,
         int cchString,
         int nMaxExtent,
              LPINT lpnFit,
                                               LPINT lpnDx,
          LPSIZE lpSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointW(
         HDC hdc,
                           LPCWSTR lpszString,
         int cchString,
         int nMaxExtent,
              LPINT lpnFit,
                                               LPINT lpnDx,
          LPSIZE lpSize
    );







__declspec(dllimport) int __stdcall GetTextCharset( HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharsetInfo( HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
__declspec(dllimport) BOOL __stdcall TranslateCharsetInfo( DWORD *lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetFontLanguageInfo( HDC hdc);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementA( HDC hdc, LPCSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSA lpResults, DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementW( HDC hdc, LPCWSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags);
#line 3765 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagWCRANGE
{
    WCHAR wcLow;
    USHORT cGlyphs;
} WCRANGE, *PWCRANGE, *LPWCRANGE;


typedef struct tagGLYPHSET
{
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE ranges[1];
} GLYPHSET, *PGLYPHSET, *LPGLYPHSET;
#line 3789 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
__declspec(dllimport) DWORD __stdcall GetFontUnicodeRanges( HDC hdc, LPGLYPHSET lpgs);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesA( HDC hdc, LPCSTR lpstr, int c, LPWORD pgi, DWORD fl);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesW( HDC hdc, LPCWSTR lpstr, int c, LPWORD pgi, DWORD fl);





__declspec(dllimport) BOOL __stdcall GetTextExtentPointI( HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize);
__declspec(dllimport) BOOL __stdcall GetTextExtentExPointI ( HDC hdc,
                                                                        LPWORD lpwszString,
                                                     int cwchString,
                                                     int nMaxExtent,
                                                          LPINT lpnFit,
                                                                                           LPINT lpnDx,
                                                      LPSIZE lpSize
                                                );

__declspec(dllimport) BOOL __stdcall GetCharWidthI( HDC hdc,
                                             UINT giFirst,
                                             UINT cgi,
                                                             LPWORD pgi,
                                                          LPINT piWidths
                                        );

__declspec(dllimport) BOOL __stdcall GetCharABCWidthsI( HDC hdc,
                                                 UINT giFirst,
                                                 UINT cgi,
                                                                 LPWORD pgi,
                                                              LPABC pabc
                                        );
#line 3828 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagDESIGNVECTOR
{
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR, *LPDESIGNVECTOR;

__declspec(dllimport) int __stdcall AddFontResourceExA( LPCSTR name, DWORD fl, PVOID res);
__declspec(dllimport) int __stdcall AddFontResourceExW( LPCWSTR name, DWORD fl, PVOID res);





__declspec(dllimport) BOOL __stdcall RemoveFontResourceExA( LPCSTR name, DWORD fl, PVOID pdv);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceExW( LPCWSTR name, DWORD fl, PVOID pdv);





__declspec(dllimport) HANDLE __stdcall AddFontMemResourceEx( PVOID pFileView,
                                                     DWORD cjSize,
                                                           PVOID pvResrved,
                                                     DWORD* pNumFonts);

__declspec(dllimport) BOOL __stdcall RemoveFontMemResourceEx( HANDLE h);
#line 3864 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagAXISINFOA
{
    LONG axMinValue;
    LONG axMaxValue;
    BYTE axAxisName[16];
} AXISINFOA, *PAXISINFOA, *LPAXISINFOA;
typedef struct tagAXISINFOW
{
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR axAxisName[16];
} AXISINFOW, *PAXISINFOW, *LPAXISINFOW;





typedef AXISINFOA AXISINFO;
typedef PAXISINFOA PAXISINFO;
typedef LPAXISINFOA LPAXISINFO;


typedef struct tagAXESLISTA
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA axlAxisInfo[16];
} AXESLISTA, *PAXESLISTA, *LPAXESLISTA;
typedef struct tagAXESLISTW
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW axlAxisInfo[16];
} AXESLISTW, *PAXESLISTW, *LPAXESLISTW;





typedef AXESLISTA AXESLIST;
typedef PAXESLISTA PAXESLIST;
typedef LPAXESLISTA LPAXESLIST;






typedef struct tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA, *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW, *LPENUMLOGFONTEXDVW;





typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;


__declspec(dllimport) HFONT __stdcall CreateFontIndirectExA( const ENUMLOGFONTEXDVA *);
__declspec(dllimport) HFONT __stdcall CreateFontIndirectExW( const ENUMLOGFONTEXDVW *);







typedef struct tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA, *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW, *LPENUMTEXTMETRICW;





typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;





__declspec(dllimport) BOOL __stdcall GetViewportExtEx( HDC hdc, LPSIZE lpsize);
__declspec(dllimport) BOOL __stdcall GetViewportOrgEx( HDC hdc, LPPOINT lppoint);
__declspec(dllimport) BOOL __stdcall GetWindowExtEx( HDC hdc, LPSIZE lpsize);
__declspec(dllimport) BOOL __stdcall GetWindowOrgEx( HDC hdc, LPPOINT lppoint);

            __declspec(dllimport) int __stdcall IntersectClipRect( HDC hdc, int left, int top, int right, int bottom);
            __declspec(dllimport) BOOL __stdcall InvertRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) BOOL __stdcall LineDDA( int xStart, int yStart, int xEnd, int yEnd, LINEDDAPROC lpProc, LPARAM data);
            __declspec(dllimport) BOOL __stdcall LineTo( HDC hdc, int x, int y);
__declspec(dllimport) BOOL __stdcall MaskBlt( HDC hdcDest, int xDest, int yDest, int width, int height,
                   HDC hdcSrc, int xSrc, int ySrc, HBITMAP hbmMask, int xMask, int yMask, DWORD rop);
__declspec(dllimport) BOOL __stdcall PlgBlt( HDC hdcDest, const POINT * lpPoint, HDC hdcSrc, int xSrc, int ySrc, int width,
                          int height, HBITMAP hbmMask, int xMask, int yMask);

            __declspec(dllimport) int __stdcall OffsetClipRgn( HDC hdc, int x, int y);
__declspec(dllimport) int __stdcall OffsetRgn( HRGN hrgn, int x, int y);
            __declspec(dllimport) BOOL __stdcall PatBlt( HDC hdc, int x, int y, int w, int h, DWORD rop);
            __declspec(dllimport) BOOL __stdcall Pie( HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
__declspec(dllimport) BOOL __stdcall PlayMetaFile( HDC hdc, HMETAFILE hmf);
            __declspec(dllimport) BOOL __stdcall PaintRgn( HDC hdc, HRGN hrgn);
            __declspec(dllimport) BOOL __stdcall PolyPolygon( HDC hdc, const POINT *apt, const INT *asz, int csz);
__declspec(dllimport) BOOL __stdcall PtInRegion( HRGN hrgn, int x, int y);
__declspec(dllimport) BOOL __stdcall PtVisible( HDC hdc, int x, int y);
__declspec(dllimport) BOOL __stdcall RectInRegion( HRGN hrgn, const RECT * lprect);
__declspec(dllimport) BOOL __stdcall RectVisible( HDC hdc, const RECT * lprect);
            __declspec(dllimport) BOOL __stdcall Rectangle( HDC hdc, int left, int top, int right, int bottom);
            __declspec(dllimport) BOOL __stdcall RestoreDC( HDC hdc, int nSavedDC);
            __declspec(dllimport) HDC __stdcall ResetDCA( HDC hdc, const DEVMODEA * lpdm);
            __declspec(dllimport) HDC __stdcall ResetDCW( HDC hdc, const DEVMODEW * lpdm);





            __declspec(dllimport) UINT __stdcall RealizePalette( HDC hdc);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceA( LPCSTR lpFileName);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceW( LPCWSTR lpFileName);





            __declspec(dllimport) BOOL __stdcall RoundRect( HDC hdc, int left, int top, int right, int bottom, int width, int height);
            __declspec(dllimport) BOOL __stdcall ResizePalette( HPALETTE hpal, UINT n);

            __declspec(dllimport) int __stdcall SaveDC( HDC hdc);
            __declspec(dllimport) int __stdcall SelectClipRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) int __stdcall ExtSelectClipRgn( HDC hdc, HRGN hrgn, int mode);
__declspec(dllimport) int __stdcall SetMetaRgn( HDC hdc);
            __declspec(dllimport) HGDIOBJ __stdcall SelectObject( HDC hdc, HGDIOBJ h);
            __declspec(dllimport) HPALETTE __stdcall SelectPalette( HDC hdc, HPALETTE hPal, BOOL bForceBkgd);
            __declspec(dllimport) COLORREF __stdcall SetBkColor( HDC hdc, COLORREF color);


__declspec(dllimport) COLORREF __stdcall SetDCBrushColor( HDC hdc, COLORREF color);
__declspec(dllimport) COLORREF __stdcall SetDCPenColor( HDC hdc, COLORREF color);


            __declspec(dllimport) int __stdcall SetBkMode( HDC hdc, int mode);

__declspec(dllimport)
LONG __stdcall
SetBitmapBits(
         HBITMAP hbm,
         DWORD cb,
                    const void *pvBits);

__declspec(dllimport) UINT __stdcall SetBoundsRect( HDC hdc, const RECT * lprect, UINT flags);
__declspec(dllimport) int __stdcall SetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines, const void *lpBits, const BITMAPINFO * lpbmi, UINT ColorUse);
            __declspec(dllimport) int __stdcall SetDIBitsToDevice( HDC hdc, int xDest, int yDest, DWORD w, DWORD h, int xSrc,
             int ySrc, UINT StartScan, UINT cLines, const void * lpvBits, const BITMAPINFO * lpbmi, UINT ColorUse);
            __declspec(dllimport) DWORD __stdcall SetMapperFlags( HDC hdc, DWORD flags);
__declspec(dllimport) int __stdcall SetGraphicsMode( HDC hdc, int iMode);
            __declspec(dllimport) int __stdcall SetMapMode( HDC hdc, int iMode);


            __declspec(dllimport) DWORD __stdcall SetLayout( HDC hdc, DWORD l);
__declspec(dllimport) DWORD __stdcall GetLayout( HDC hdc);


__declspec(dllimport) HMETAFILE __stdcall SetMetaFileBitsEx( UINT cbBuffer, const BYTE *lpData);
            __declspec(dllimport) UINT __stdcall SetPaletteEntries( HPALETTE hpal,
                                                 UINT iStart,
                                                 UINT cEntries,
                                                                  const PALETTEENTRY *pPalEntries);
            __declspec(dllimport) COLORREF __stdcall SetPixel( HDC hdc, int x, int y, COLORREF color);
__declspec(dllimport) BOOL __stdcall SetPixelV( HDC hdc, int x, int y, COLORREF color);
__declspec(dllimport) BOOL __stdcall SetPixelFormat( HDC hdc, int format, const PIXELFORMATDESCRIPTOR * ppfd);
            __declspec(dllimport) int __stdcall SetPolyFillMode( HDC hdc, int mode);
            __declspec(dllimport) BOOL __stdcall StretchBlt( HDC hdcDest, int xDest, int yDest, int wDest, int hDest, HDC hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, DWORD rop);
__declspec(dllimport) BOOL __stdcall SetRectRgn( HRGN hrgn, int left, int top, int right, int bottom);
            __declspec(dllimport) int __stdcall StretchDIBits( HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight,
                 const void * lpBits, const BITMAPINFO * lpbmi, UINT iUsage, DWORD rop);
            __declspec(dllimport) int __stdcall SetROP2( HDC hdc, int rop2);
            __declspec(dllimport) int __stdcall SetStretchBltMode( HDC hdc, int mode);
__declspec(dllimport) UINT __stdcall SetSystemPaletteUse( HDC hdc, UINT use);
            __declspec(dllimport) int __stdcall SetTextCharacterExtra( HDC hdc, int extra);
            __declspec(dllimport) COLORREF __stdcall SetTextColor( HDC hdc, COLORREF color);
            __declspec(dllimport) UINT __stdcall SetTextAlign( HDC hdc, UINT align);
            __declspec(dllimport) BOOL __stdcall SetTextJustification( HDC hdc, int extra, int count);
__declspec(dllimport) BOOL __stdcall UpdateColors( HDC hdc);
#line 4102 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;

typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;

typedef struct _BLENDFUNCTION
{
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
}BLENDFUNCTION,*PBLENDFUNCTION;
#line 4148 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
__declspec(dllimport) BOOL __stdcall AlphaBlend(
         HDC hdcDest,
         int xoriginDest,
         int yoriginDest,
         int wDest,
         int hDest,
         HDC hdcSrc,
         int xoriginSrc,
         int yoriginSrc,
         int wSrc,
         int hSrc,
         BLENDFUNCTION ftn);

__declspec(dllimport) BOOL __stdcall TransparentBlt(
         HDC hdcDest,
         int xoriginDest,
         int yoriginDest,
         int wDest,
         int hDest,
         HDC hdcSrc,
         int xoriginSrc,
         int yoriginSrc,
         int wSrc,
         int hSrc,
         UINT crTransparent);
#line 4184 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
__declspec(dllimport)
BOOL
__stdcall
GradientFill(
         HDC hdc,
                         PTRIVERTEX pVertex,
         ULONG nVertex,
         PVOID pMesh,
         ULONG nMesh,
         ULONG ulMode
    );






__declspec(dllimport) BOOL __stdcall GdiAlphaBlend( HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);

__declspec(dllimport) BOOL __stdcall GdiTransparentBlt( HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc,
                                                int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent);

__declspec(dllimport) BOOL __stdcall GdiGradientFill( HDC hdc,
                                                             PTRIVERTEX pVertex,
                                             ULONG nVertex,
                                             PVOID pMesh,
                                             ULONG nCount,
                                             ULONG ulMode);







__declspec(dllimport) BOOL __stdcall PlayMetaFileRecord( HDC hdc,
                                                                LPHANDLETABLE lpHandleTable,
                                                 LPMETARECORD lpMR,
                                                 UINT noObjs);

typedef int (__stdcall* MFENUMPROC)( HDC hdc, HANDLETABLE * lpht, METARECORD * lpMR, int nObj, LPARAM param);
__declspec(dllimport) BOOL __stdcall EnumMetaFile( HDC hdc, HMETAFILE hmf, MFENUMPROC proc, LPARAM param);

typedef int (__stdcall* ENHMFENUMPROC)( HDC hdc, HANDLETABLE * lpht, const ENHMETARECORD * lpmr, int nHandles, LPARAM data);



__declspec(dllimport) HENHMETAFILE __stdcall CloseEnhMetaFile( HDC hdc);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileA( HENHMETAFILE hEnh, LPCSTR lpFileName);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileW( HENHMETAFILE hEnh, LPCWSTR lpFileName);





__declspec(dllimport) HDC __stdcall CreateEnhMetaFileA( HDC hdc, LPCSTR lpFilename, const RECT *lprc, LPCSTR lpDesc);
__declspec(dllimport) HDC __stdcall CreateEnhMetaFileW( HDC hdc, LPCWSTR lpFilename, const RECT *lprc, LPCWSTR lpDesc);





__declspec(dllimport) BOOL __stdcall DeleteEnhMetaFile( HENHMETAFILE hmf);
__declspec(dllimport) BOOL __stdcall EnumEnhMetaFile( HDC hdc, HENHMETAFILE hmf, ENHMFENUMPROC proc,
                                                 LPVOID param, const RECT * lpRect);
__declspec(dllimport) HENHMETAFILE __stdcall GetEnhMetaFileA( LPCSTR lpName);
__declspec(dllimport) HENHMETAFILE __stdcall GetEnhMetaFileW( LPCWSTR lpName);





__declspec(dllimport) UINT __stdcall GetEnhMetaFileBits( HENHMETAFILE hEMF,
                                                 UINT nSize,
                                                                    LPBYTE lpData);
__declspec(dllimport) UINT __stdcall GetEnhMetaFileDescriptionA( HENHMETAFILE hemf,
                                                         UINT cchBuffer,
                                                                                LPSTR lpDescription);
__declspec(dllimport) UINT __stdcall GetEnhMetaFileDescriptionW( HENHMETAFILE hemf,
                                                         UINT cchBuffer,
                                                                                LPWSTR lpDescription);





__declspec(dllimport) UINT __stdcall GetEnhMetaFileHeader( HENHMETAFILE hemf,
                                                     UINT nSize,
                                                                        LPENHMETAHEADER lpEnhMetaHeader);
__declspec(dllimport) UINT __stdcall GetEnhMetaFilePaletteEntries( HENHMETAFILE hemf,
                                                         UINT nNumEntries,
                                                                                  LPPALETTEENTRY lpPaletteEntries);

__declspec(dllimport) UINT __stdcall GetEnhMetaFilePixelFormat( HENHMETAFILE hemf,
                                                         UINT cbBuffer,
                                                                               PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) UINT __stdcall GetWinMetaFileBits( HENHMETAFILE hemf,
                                                 UINT cbData16,
                                                                       LPBYTE pData16,
                                                 INT iMapMode,
                                                 HDC hdcRef);
__declspec(dllimport) BOOL __stdcall PlayEnhMetaFile( HDC hdc, HENHMETAFILE hmf, const RECT * lprect);
__declspec(dllimport) BOOL __stdcall PlayEnhMetaFileRecord( HDC hdc,
                                                                 LPHANDLETABLE pht,
                                                     const ENHMETARECORD *pmr,
                                                     UINT cht);

__declspec(dllimport) HENHMETAFILE __stdcall SetEnhMetaFileBits( UINT nSize,
                                                                       const BYTE * pb);

__declspec(dllimport) HENHMETAFILE __stdcall SetWinMetaFileBits( UINT nSize,
                                                                       const BYTE *lpMeta16Data,
                                                             HDC hdcRef,
                                                             const METAFILEPICT *lpMFP);
__declspec(dllimport) BOOL __stdcall GdiComment( HDC hdc, UINT nSize, const BYTE *lpData);





__declspec(dllimport) BOOL __stdcall GetTextMetricsA( HDC hdc, LPTEXTMETRICA lptm);
__declspec(dllimport) BOOL __stdcall GetTextMetricsW( HDC hdc, LPTEXTMETRICW lptm);
#line 4336 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagDIBSECTION {
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
} DIBSECTION, *LPDIBSECTION, *PDIBSECTION;


__declspec(dllimport) BOOL __stdcall AngleArc( HDC hdc, int x, int y, DWORD r, FLOAT StartAngle, FLOAT SweepAngle);
__declspec(dllimport) BOOL __stdcall PolyPolyline( HDC hdc, const POINT *apt, const DWORD *asz, DWORD csz);
__declspec(dllimport) BOOL __stdcall GetWorldTransform( HDC hdc, LPXFORM lpxf);
__declspec(dllimport) BOOL __stdcall SetWorldTransform( HDC hdc, const XFORM * lpxf);
__declspec(dllimport) BOOL __stdcall ModifyWorldTransform( HDC hdc, const XFORM * lpxf, DWORD mode);
__declspec(dllimport) BOOL __stdcall CombineTransform( LPXFORM lpxfOut, const XFORM *lpxf1, const XFORM *lpxf2);
__declspec(dllimport) HBITMAP __stdcall CreateDIBSection( HDC hdc, const BITMAPINFO *lpbmi, UINT usage, void **ppvBits, HANDLE hSection, DWORD offset);

__declspec(dllimport) UINT __stdcall GetDIBColorTable( HDC hdc,
                                             UINT iStart,
                                             UINT cEntries,
                                                                           RGBQUAD *prgbq);
__declspec(dllimport) UINT __stdcall SetDIBColorTable( HDC hdc,
                                             UINT iStart,
                                             UINT cEntries,
                                                              const RGBQUAD *prgbq);
#line 4397 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagCOLORADJUSTMENT {
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT, *LPCOLORADJUSTMENT;

__declspec(dllimport) BOOL __stdcall SetColorAdjustment( HDC hdc, const COLORADJUSTMENT *lpca);
__declspec(dllimport) BOOL __stdcall GetColorAdjustment( HDC hdc, LPCOLORADJUSTMENT lpca);
__declspec(dllimport) HPALETTE __stdcall CreateHalftonePalette( HDC hdc);


typedef BOOL (__stdcall* ABORTPROC)( HDC, int);




typedef struct _DOCINFOA {
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;

    LPCSTR lpszDatatype;
    DWORD fwType;

} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;

    LPCWSTR lpszDatatype;
    DWORD fwType;

} DOCINFOW, *LPDOCINFOW;




typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;







            __declspec(dllimport) int __stdcall StartDocA( HDC hdc, const DOCINFOA *lpdi);
            __declspec(dllimport) int __stdcall StartDocW( HDC hdc, const DOCINFOW *lpdi);





            __declspec(dllimport) int __stdcall EndDoc( HDC hdc);
            __declspec(dllimport) int __stdcall StartPage( HDC hdc);
            __declspec(dllimport) int __stdcall EndPage( HDC hdc);
            __declspec(dllimport) int __stdcall AbortDoc( HDC hdc);
__declspec(dllimport) int __stdcall SetAbortProc( HDC hdc, ABORTPROC proc);

__declspec(dllimport) BOOL __stdcall AbortPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall ArcTo( HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
__declspec(dllimport) BOOL __stdcall BeginPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall CloseFigure( HDC hdc);
__declspec(dllimport) BOOL __stdcall EndPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall FillPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall FlattenPath( HDC hdc);
__declspec(dllimport) int __stdcall GetPath( HDC hdc, LPPOINT apt, LPBYTE aj, int cpt);
__declspec(dllimport) HRGN __stdcall PathToRegion( HDC hdc);
__declspec(dllimport) BOOL __stdcall PolyDraw( HDC hdc, const POINT * apt, const BYTE * aj, int cpt);
__declspec(dllimport) BOOL __stdcall SelectClipPath( HDC hdc, int mode);
__declspec(dllimport) int __stdcall SetArcDirection( HDC hdc, int dir);
__declspec(dllimport) BOOL __stdcall SetMiterLimit( HDC hdc, FLOAT limit, PFLOAT old);
__declspec(dllimport) BOOL __stdcall StrokeAndFillPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall StrokePath( HDC hdc);
__declspec(dllimport) BOOL __stdcall WidenPath( HDC hdc);
__declspec(dllimport) HPEN __stdcall ExtCreatePen( DWORD iPenStyle,
                                         DWORD cWidth,
                                         const LOGBRUSH *plbrush,
                                         DWORD cStyle,
                                                            const DWORD *pstyle);
__declspec(dllimport) BOOL __stdcall GetMiterLimit( HDC hdc, PFLOAT plimit);
__declspec(dllimport) int __stdcall GetArcDirection( HDC hdc);

__declspec(dllimport) int __stdcall GetObjectA( HANDLE h, int c, LPVOID pv);
__declspec(dllimport) int __stdcall GetObjectW( HANDLE h, int c, LPVOID pv);
#line 4520 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
            __declspec(dllimport) BOOL __stdcall MoveToEx( HDC hdc, int x, int y, LPPOINT lppt);
            __declspec(dllimport) BOOL __stdcall TextOutA( HDC hdc, int x, int y, LPCSTR lpString, int c);
            __declspec(dllimport) BOOL __stdcall TextOutW( HDC hdc, int x, int y, LPCWSTR lpString, int c);





            __declspec(dllimport) BOOL __stdcall ExtTextOutA( HDC hdc, int x, int y, UINT options, const RECT * lprect, LPCSTR lpString, UINT c, const INT * lpDx);
            __declspec(dllimport) BOOL __stdcall ExtTextOutW( HDC hdc, int x, int y, UINT options, const RECT * lprect, LPCWSTR lpString, UINT c, const INT * lpDx);





__declspec(dllimport) BOOL __stdcall PolyTextOutA( HDC hdc, const POLYTEXTA * ppt, int nstrings);
__declspec(dllimport) BOOL __stdcall PolyTextOutW( HDC hdc, const POLYTEXTW * ppt, int nstrings);






__declspec(dllimport) HRGN __stdcall CreatePolygonRgn( const POINT *pptl,
                                                 int cPoint,
                                                 int iMode);
__declspec(dllimport) BOOL __stdcall DPtoLP( HDC hdc, LPPOINT lppt, int c);
__declspec(dllimport) BOOL __stdcall LPtoDP( HDC hdc, LPPOINT lppt, int c);
            __declspec(dllimport) BOOL __stdcall Polygon( HDC hdc, const POINT *apt, int cpt);
            __declspec(dllimport) BOOL __stdcall Polyline( HDC hdc, const POINT *apt, int cpt);

__declspec(dllimport) BOOL __stdcall PolyBezier( HDC hdc, const POINT * apt, DWORD cpt);
__declspec(dllimport) BOOL __stdcall PolyBezierTo( HDC hdc, const POINT * apt, DWORD cpt);
__declspec(dllimport) BOOL __stdcall PolylineTo( HDC hdc, const POINT * apt, DWORD cpt);

            __declspec(dllimport) BOOL __stdcall SetViewportExtEx( HDC hdc, int x, int y, LPSIZE lpsz);
            __declspec(dllimport) BOOL __stdcall SetViewportOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
            __declspec(dllimport) BOOL __stdcall SetWindowExtEx( HDC hdc, int x, int y, LPSIZE lpsz);
            __declspec(dllimport) BOOL __stdcall SetWindowOrgEx( HDC hdc, int x, int y, LPPOINT lppt);

            __declspec(dllimport) BOOL __stdcall OffsetViewportOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
            __declspec(dllimport) BOOL __stdcall OffsetWindowOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
            __declspec(dllimport) BOOL __stdcall ScaleViewportExtEx( HDC hdc, int xn, int dx, int yn, int yd, LPSIZE lpsz);
            __declspec(dllimport) BOOL __stdcall ScaleWindowExtEx( HDC hdc, int xn, int xd, int yn, int yd, LPSIZE lpsz);
__declspec(dllimport) BOOL __stdcall SetBitmapDimensionEx( HBITMAP hbm, int w, int h, LPSIZE lpsz);
__declspec(dllimport) BOOL __stdcall SetBrushOrgEx( HDC hdc, int x, int y, LPPOINT lppt);

__declspec(dllimport) int __stdcall GetTextFaceA( HDC hdc, int c, LPSTR lpName);
__declspec(dllimport) int __stdcall GetTextFaceW( HDC hdc, int c, LPWSTR lpName);
#line 4577 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

__declspec(dllimport) DWORD __stdcall GetKerningPairsA( HDC hdc,
                                                 DWORD nPairs,
                                                                                  LPKERNINGPAIR lpKernPair);
__declspec(dllimport) DWORD __stdcall GetKerningPairsW( HDC hdc,
                                                 DWORD nPairs,
                                                                                  LPKERNINGPAIR lpKernPair);







__declspec(dllimport) BOOL __stdcall GetDCOrgEx( HDC hdc, LPPOINT lppt);
__declspec(dllimport) BOOL __stdcall FixBrushOrgEx( HDC hdc, int x, int y, LPPOINT ptl);
__declspec(dllimport) BOOL __stdcall UnrealizeObject( HGDIOBJ h);

__declspec(dllimport) BOOL __stdcall GdiFlush(void);
__declspec(dllimport) DWORD __stdcall GdiSetBatchLimit( DWORD dw);
__declspec(dllimport) DWORD __stdcall GdiGetBatchLimit(void);
#line 4611 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);






__declspec(dllimport) int __stdcall SetICMMode( HDC hdc, int mode);
__declspec(dllimport) BOOL __stdcall CheckColorsInGamut( HDC hdc,
                                                                        LPRGBTRIPLE lpRGBTriple,
                                                                         LPVOID dlpBuffer,
                                                         DWORD nCount);

__declspec(dllimport) HCOLORSPACE __stdcall GetColorSpace( HDC hdc);
__declspec(dllimport) BOOL __stdcall GetLogColorSpaceA( HCOLORSPACE hColorSpace,
                                                                    LPLOGCOLORSPACEA lpBuffer,
                                                     DWORD nSize);
__declspec(dllimport) BOOL __stdcall GetLogColorSpaceW( HCOLORSPACE hColorSpace,
                                                                    LPLOGCOLORSPACEW lpBuffer,
                                                     DWORD nSize);






__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceA( LPLOGCOLORSPACEA lplcs);
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceW( LPLOGCOLORSPACEW lplcs);





__declspec(dllimport) HCOLORSPACE __stdcall SetColorSpace( HDC hdc, HCOLORSPACE hcs);
__declspec(dllimport) BOOL __stdcall DeleteColorSpace( HCOLORSPACE hcs);
__declspec(dllimport) BOOL __stdcall GetICMProfileA( HDC hdc,
                                                        LPDWORD pBufSize,
                                                                            LPSTR pszFilename);
__declspec(dllimport) BOOL __stdcall GetICMProfileW( HDC hdc,
                                                        LPDWORD pBufSize,
                                                                            LPWSTR pszFilename);






__declspec(dllimport) BOOL __stdcall SetICMProfileA( HDC hdc, LPSTR lpFileName);
__declspec(dllimport) BOOL __stdcall SetICMProfileW( HDC hdc, LPWSTR lpFileName);





__declspec(dllimport) BOOL __stdcall GetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
__declspec(dllimport) BOOL __stdcall SetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
__declspec(dllimport) BOOL __stdcall ColorMatchToTarget( HDC hdc, HDC hdcTarget, DWORD action);
__declspec(dllimport) int __stdcall EnumICMProfilesA( HDC hdc, ICMENUMPROCA proc, LPARAM param);
__declspec(dllimport) int __stdcall EnumICMProfilesW( HDC hdc, ICMENUMPROCW proc, LPARAM param);






__declspec(dllimport) BOOL __stdcall UpdateICMRegKeyA( DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command);

__declspec(dllimport) BOOL __stdcall UpdateICMRegKeyW( DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command);





#pragma deprecated (UpdateICMRegKeyW)
#pragma deprecated (UpdateICMRegKeyA)




__declspec(dllimport) BOOL __stdcall ColorCorrectPalette( HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num);
#line 4856 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
typedef struct tagEMR
{
    DWORD iType;
    DWORD nSize;

} EMR, *PEMR;



typedef struct tagEMRTEXT
{
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;

} EMRTEXT, *PEMRTEXT;



typedef struct tagABORTPATH
{
    EMR emr;
} EMRABORTPATH, *PEMRABORTPATH,
  EMRBEGINPATH, *PEMRBEGINPATH,
  EMRENDPATH, *PEMRENDPATH,
  EMRCLOSEFIGURE, *PEMRCLOSEFIGURE,
  EMRFLATTENPATH, *PEMRFLATTENPATH,
  EMRWIDENPATH, *PEMRWIDENPATH,
  EMRSETMETARGN, *PEMRSETMETARGN,
  EMRSAVEDC, *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR emr;
    DWORD iMode;
} EMRSELECTCLIPPATH, *PEMRSELECTCLIPPATH,
  EMRSETBKMODE, *PEMRSETBKMODE,
  EMRSETMAPMODE, *PEMRSETMAPMODE,

  EMRSETLAYOUT, *PEMRSETLAYOUT,

  EMRSETPOLYFILLMODE, *PEMRSETPOLYFILLMODE,
  EMRSETROP2, *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE, *PEMRSETICMMODE,
  EMRSETTEXTALIGN, *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR emr;
    FLOAT eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR emr;
    LONG iRelative;
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR emr;
    DWORD iArcDirection;

} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR emr;
    DWORD dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR emr;
    COLORREF crColor;
} EMRSETBKCOLOR, *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR emr;
    DWORD ihObject;
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;

typedef struct tagEMRSELECTPALETTE
{
    EMR emr;
    DWORD ihPal;
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;


} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR emr;
    POINTL ptl;
} EMRLINETO, *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR emr;
    POINTL ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR emr;
    RECTL rclBounds;
} EMRFILLPATH, *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH, *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR emr;
    RECTL rclClip;
} EMREXCLUDECLIPRECT, *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR emr;
    POINTL ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX, *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX, *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR emr;
    SIZEL szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX, *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX, *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
    DWORD iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR emr;
    RECTL rclBox;
} EMRELLIPSE, *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;


typedef struct tagEMRROUNDRECT
{
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
} EMRARC, *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE, *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
} EMRPOLYLINE, *PEMRPOLYLINE,
  EMRPOLYBEZIER, *PEMRPOLYBEZIER,
  EMRPOLYGON, *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO, *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
} EMRPOLYLINE16, *PEMRPOLYLINE16,
  EMRPOLYBEZIER16, *PEMRPOLYBEZIER16,
  EMRPOLYGON16, *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16, *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
    BYTE abTypes[1];
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
    BYTE abTypes[1];
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD aPolyCounts[1];
    POINTL aptl[1];
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON, *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD aPolyCounts[1];
    POINTS apts[1];
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16, *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN, *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;

} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT aemrtext[1];

} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR emr;
    RECTL rclBounds;
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEMRCREATEPALETTE
{
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;

} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

typedef struct tagEMRCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;


    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN32 elp;
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH32 lb;

} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;


    DWORD offBits;
    DWORD cbBits;
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;

} EMRFORMAT, *PEMRFORMAT;



typedef struct tagEMRGLSRECORD
{
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbData;
    BYTE Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;

typedef struct tagEMRCREATECOLORSPACE
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEA lcs;
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

typedef struct tagEMRSETCOLORSPACE
{
    EMR emr;
    DWORD ihCS;
} EMRSETCOLORSPACE, *PEMRSETCOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;





typedef struct tagEMREXTESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbEscData;
    BYTE EscData[1];
} EMREXTESCAPE, *PEMREXTESCAPE,
  EMRDRAWESCAPE, *PEMRDRAWESCAPE;

typedef struct tagEMRNAMEDESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbDriver;
    INT cbEscData;
    BYTE EscData[1];
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;



typedef struct tagEMRSETICMPROFILE
{
    EMR emr;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
} EMRSETICMPROFILE, *PEMRSETICMPROFILE,
  EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
  EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;



typedef struct tagEMRCREATECOLORSPACEW
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEW lcs;
    DWORD dwFlags;
    DWORD cbData;
    BYTE Data[1];
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;



typedef struct tagCOLORMATCHTOTARGET
{
    EMR emr;
    DWORD dwAction;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;

typedef struct tagCOLORCORRECTPALETTE
{
    EMR emr;
    DWORD ihPalette;
    DWORD nFirstEntry;
    DWORD nPalEntries;
    DWORD nReserved;
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;

typedef struct tagEMRALPHABLEND
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;

typedef struct tagEMRGRADIENTFILL
{
    EMR emr;
    RECTL rclBounds;
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX Ver[1];
}EMRGRADIENTFILL,*PEMRGRADIENTFILL;

typedef struct tagEMRTRANSPARENTBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;
#line 5624 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
__declspec(dllimport) BOOL __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
__declspec(dllimport) HGLRC __stdcall wglCreateContext(HDC);
__declspec(dllimport) HGLRC __stdcall wglCreateLayerContext(HDC, int);
__declspec(dllimport) BOOL __stdcall wglDeleteContext(HGLRC);
__declspec(dllimport) HGLRC __stdcall wglGetCurrentContext(void);
__declspec(dllimport) HDC __stdcall wglGetCurrentDC(void);
__declspec(dllimport) PROC __stdcall wglGetProcAddress(LPCSTR);
__declspec(dllimport) BOOL __stdcall wglMakeCurrent(HDC, HGLRC);
__declspec(dllimport) BOOL __stdcall wglShareLists(HGLRC, HGLRC);
__declspec(dllimport) BOOL __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
__declspec(dllimport) BOOL __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);





__declspec(dllimport) BOOL __stdcall SwapBuffers(HDC);

typedef struct _POINTFLOAT {
    FLOAT x;
    FLOAT y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT {
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT, *LPGLYPHMETRICSFLOAT;



__declspec(dllimport) BOOL __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
__declspec(dllimport) BOOL __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);







typedef struct tagLAYERPLANEDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR, *LPLAYERPLANEDESCRIPTOR;
#line 5743 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wingdi.h"
__declspec(dllimport) BOOL __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
__declspec(dllimport) int __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
                                                 const COLORREF *);
__declspec(dllimport) int __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
__declspec(dllimport) BOOL __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
__declspec(dllimport) BOOL __stdcall wglSwapLayerBuffers(HDC, UINT);



typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP, *LPWGLSWAP;



__declspec(dllimport) DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP *);






}




#pragma warning(pop)
#line 157 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
#line 35 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
extern "C" {
#line 46 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;



typedef MENUTEMPLATEA MENUTEMPLATE;

typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;



typedef LPMENUTEMPLATEA LPMENUTEMPLATE;


typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);



typedef INT_PTR (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);

typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);

typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);


typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
#line 117 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef PROPENUMPROCA PROPENUMPROC;
typedef PROPENUMPROCEXA PROPENUMPROCEX;
typedef EDITWORDBREAKPROCA EDITWORDBREAKPROC;




typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA WINSTAENUMPROCA;
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef NAMEENUMPROCW WINSTAENUMPROCW;
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
#line 151 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef WINSTAENUMPROCA WINSTAENUMPROC;
typedef DESKTOPENUMPROCA DESKTOPENUMPROC;
#line 214 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
#pragma warning(push)
#pragma warning(disable:4995)


__declspec(dllimport)
int
__stdcall
wvsprintfA(
          LPSTR,
                         LPCSTR,
         va_list arglist);
__declspec(dllimport)
int
__stdcall
wvsprintfW(
          LPWSTR,
                         LPCWSTR,
         va_list arglist);






__declspec(dllimport)
int
__cdecl
wsprintfA(
          LPSTR,
                         LPCSTR,
    ...);
__declspec(dllimport)
int
__cdecl
wsprintfW(
          LPWSTR,
                         LPCWSTR,
    ...);







#pragma warning(pop)
#line 712 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;



typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;




typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;





typedef struct tagCBTACTIVATESTRUCT
{
    BOOL fMouse;
    HWND hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;





typedef struct tagWTSSESSION_NOTIFICATION
{
    DWORD cbSize;
    DWORD dwSessionId;

} WTSSESSION_NOTIFICATION, *PWTSSESSION_NOTIFICATION;
#line 884 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct
{
    HWND hwnd;
    RECT rc;
} SHELLHOOKINFO, *LPSHELLHOOKINFO;




typedef struct tagEVENTMSG {
    UINT message;
    UINT paramL;
    UINT paramH;
    DWORD time;
    HWND hwnd;
} EVENTMSG, *PEVENTMSGMSG, *NPEVENTMSGMSG, *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG, *NPEVENTMSG, *LPEVENTMSG;




typedef struct tagCWPSTRUCT {
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
} CWPSTRUCT, *PCWPSTRUCT, *NPCWPSTRUCT, *LPCWPSTRUCT;





typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT, *NPCWPRETSTRUCT, *LPCWPRETSTRUCT;
#line 943 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagKBDLLHOOKSTRUCT {
    DWORD vkCode;
    DWORD scanCode;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;




typedef struct tagMSLLHOOKSTRUCT {
    POINT pt;
    DWORD mouseData;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT, *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;






typedef struct tagDEBUGHOOKINFO
{
    DWORD idThread;
    DWORD idThreadInstaller;
    LPARAM lParam;
    WPARAM wParam;
    int code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO, *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;




typedef struct tagMOUSEHOOKSTRUCT {
    POINT pt;
    HWND hwnd;
    UINT wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT, *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;



typedef struct tagMOUSEHOOKSTRUCTEX : public tagMOUSEHOOKSTRUCT
{
    DWORD mouseData;
} MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX;
#line 1005 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagHARDWAREHOOKSTRUCT {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
} HARDWAREHOOKSTRUCT, *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;
#line 1049 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutA(
         LPCSTR pwszKLID,
         UINT Flags);
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutW(
         LPCWSTR pwszKLID,
         UINT Flags);
#line 1069 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
HKL
__stdcall
ActivateKeyboardLayout(
         HKL hkl,
         UINT Flags);
#line 1085 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
int
__stdcall
ToUnicodeEx(
         UINT wVirtKey,
         UINT wScanCode,
                     const BYTE *lpKeyState,
                          LPWSTR pwszBuff,
         int cchBuff,
         UINT wFlags,
             HKL dwhkl);


__declspec(dllimport)
BOOL
__stdcall
UnloadKeyboardLayout(
         HKL hkl);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameA(
                                LPSTR pwszKLID);
__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameW(
                                LPWSTR pwszKLID);







__declspec(dllimport)
int
__stdcall
GetKeyboardLayoutList(
         int nBuff,
                                         HKL *lpList);

__declspec(dllimport)
HKL
__stdcall
GetKeyboardLayout(
         DWORD idThread);






typedef struct tagMOUSEMOVEPOINT {
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;







__declspec(dllimport)
int
__stdcall
GetMouseMovePointsEx(
         UINT cbSize,
         LPMOUSEMOVEPOINT lppt,
                             LPMOUSEMOVEPOINT lpptBuf,
         int nBufPoints,
         DWORD resolution);
#line 1186 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopA(
         LPCSTR lpszDesktop,
               LPCSTR lpszDevice,
               DEVMODEA* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopW(
         LPCWSTR lpszDesktop,
               LPCWSTR lpszDevice,
               DEVMODEW* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);






__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExA(
         LPCSTR lpszDesktop,
               LPCSTR lpszDevice,
               DEVMODEA* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa,
         ULONG ulHeapSize,
               PVOID pvoid);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExW(
         LPCWSTR lpszDesktop,
               LPCWSTR lpszDevice,
               DEVMODEW* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa,
         ULONG ulHeapSize,
               PVOID pvoid);
#line 1245 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopA(
         LPCSTR lpszDesktop,
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopW(
         LPCWSTR lpszDesktop,
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);






__declspec(dllimport)
HDESK
__stdcall
OpenInputDesktop(
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);


__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsA(
             HWINSTA hwinsta,
         DESKTOPENUMPROCA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsW(
             HWINSTA hwinsta,
         DESKTOPENUMPROCW lpEnumFunc,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
EnumDesktopWindows(
             HDESK hDesktop,
         WNDENUMPROC lpfn,
         LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
SwitchDesktop(
         HDESK hDesktop);


__declspec(dllimport)
BOOL
__stdcall
SetThreadDesktop(
          HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
CloseDesktop(
         HDESK hDesktop);

__declspec(dllimport)
HDESK
__stdcall
GetThreadDesktop(
         DWORD dwThreadId);
#line 1359 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationA(
             LPCSTR lpwinsta,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationW(
             LPCWSTR lpwinsta,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);






__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationA(
         LPCSTR lpszWinSta,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationW(
         LPCWSTR lpszWinSta,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);






__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsA(
         WINSTAENUMPROCA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsW(
         WINSTAENUMPROCW lpEnumFunc,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
CloseWindowStation(
         HWINSTA hWinSta);

__declspec(dllimport)
BOOL
__stdcall
SetProcessWindowStation(
         HWINSTA hWinSta);

__declspec(dllimport)
HWINSTA
__stdcall
GetProcessWindowStation(
    void);




__declspec(dllimport)
BOOL
__stdcall
SetUserObjectSecurity(
         HANDLE hObj,
         PSECURITY_INFORMATION pSIRequested,
         PSECURITY_DESCRIPTOR pSID);

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectSecurity(
         HANDLE hObj,
         PSECURITY_INFORMATION pSIRequested,
                              PSECURITY_DESCRIPTOR pSID,
         DWORD nLength,
          LPDWORD lpnLengthNeeded);
#line 1467 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationA(
         HANDLE hObj,
         int nIndex,
                              PVOID pvInfo,
         DWORD nLength,
              LPDWORD lpnLengthNeeded);
__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationW(
         HANDLE hObj,
         int nIndex,
                              PVOID pvInfo,
         DWORD nLength,
              LPDWORD lpnLengthNeeded);






__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationA(
         HANDLE hObj,
         int nIndex,
                         PVOID pvInfo,
         DWORD nLength);
__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationW(
         HANDLE hObj,
         int nIndex,
                         PVOID pvInfo,
         DWORD nLength);
#line 1522 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagWNDCLASSEXA {
    UINT cbSize;

    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;

    HICON hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA, *NPWNDCLASSEXA, *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
    UINT cbSize;

    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;

    HICON hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW, *NPWNDCLASSEXW, *LPWNDCLASSEXW;






typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;



typedef struct tagWNDCLASSA {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
} WNDCLASSA, *PWNDCLASSA, *NPWNDCLASSA, *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
} WNDCLASSW, *PWNDCLASSW, *NPWNDCLASSW, *LPWNDCLASSW;






typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef NPWNDCLASSA NPWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;


__declspec(dllimport)
BOOL
__stdcall
IsHungAppWindow(
         HWND hwnd);



__declspec(dllimport)
void
__stdcall
DisableProcessWindowsGhosting(
    void);
#line 1624 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagMSG {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;



} MSG, *PMSG, *NPMSG, *LPMSG;
#line 1775 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;
#line 1825 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
                           PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;


typedef struct tagMDINEXTMENU
{
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND hwndNext;
} MDINEXTMENU, * PMDINEXTMENU, * LPMDINEXTMENU;
#line 2080 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct {
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR Data[1];
} POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING;
#line 2317 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageA(
         LPCSTR lpString);
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageW(
         LPCWSTR lpString);
#line 2355 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagWINDOWPOS {
    HWND hwnd;
    HWND hwndInsertAfter;
    int x;
    int y;
    int cx;
    int cy;
    UINT flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;




typedef struct tagNCCALCSIZE_PARAMS {
    RECT rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;
#line 2421 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

__declspec(dllimport)
BOOL
__stdcall
TrackMouseEvent(
            LPTRACKMOUSEEVENT lpEventTrack);
#line 2625 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawEdge(
         HDC hdc,
            LPRECT qrc,
         UINT edge,
         UINT grfFlags);
#line 2682 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawFrameControl(
         HDC,
            LPRECT,
         UINT,
         UINT);
#line 2705 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawCaption(
         HWND hwnd,
         HDC hdc,
         const RECT * lprect,
         UINT flags);





__declspec(dllimport)
BOOL
__stdcall
DrawAnimatedRects(
             HWND hwnd,
         int idAni,
         const RECT *lprcFrom,
         const RECT *lprcTo);
#line 2795 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagACCEL {

    BYTE fVirt;
    WORD key;
    WORD cmd;





} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT {
    HDC hdc;
    BOOL fErase;
    RECT rcPaint;
    BOOL fRestore;
    BOOL fIncUpdate;
    BYTE rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCREATESTRUCTA {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;




typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;


typedef struct tagWINDOWPLACEMENT {
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;



} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;
#line 2872 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagNMHDR
{
    HWND hwndFrom;
    UINT_PTR idFrom;
    UINT code;
} NMHDR;
typedef NMHDR * LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD styleOld;
    DWORD styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;
#line 2930 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagMEASUREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    ULONG_PTR itemData;
} MEASUREITEMSTRUCT, *PMEASUREITEMSTRUCT, *LPMEASUREITEMSTRUCT;




typedef struct tagDRAWITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ULONG_PTR itemData;
} DRAWITEMSTRUCT, *PDRAWITEMSTRUCT, *LPDRAWITEMSTRUCT;




typedef struct tagDELETEITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    ULONG_PTR itemData;
} DELETEITEMSTRUCT, *PDELETEITEMSTRUCT, *LPDELETEITEMSTRUCT;




typedef struct tagCOMPAREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    ULONG_PTR itemData1;
    UINT itemID2;
    ULONG_PTR itemData2;
    DWORD dwLocaleId;
} COMPAREITEMSTRUCT, *PCOMPAREITEMSTRUCT, *LPCOMPAREITEMSTRUCT;







__declspec(dllimport)
BOOL
__stdcall
GetMessageA(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax);
__declspec(dllimport)
BOOL
__stdcall
GetMessageW(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax);
#line 3032 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
TranslateMessage(
         const MSG *lpMsg);

__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageA(
         const MSG *lpMsg);
__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageW(
         const MSG *lpMsg);
#line 3072 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetMessageQueue(
         int cMessagesMax);

__declspec(dllimport)
BOOL
__stdcall
PeekMessageA(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax,
         UINT wRemoveMsg);
__declspec(dllimport)
BOOL
__stdcall
PeekMessageW(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax,
         UINT wRemoveMsg);
#line 3119 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
RegisterHotKey(
             HWND hWnd,
         int id,
         UINT fsModifiers,
         UINT vk);

__declspec(dllimport)
BOOL
__stdcall
UnregisterHotKey(
             HWND hWnd,
         int id);
#line 3184 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ExitWindowsEx(
         UINT uFlags,
         DWORD dwReason);

__declspec(dllimport)
BOOL
__stdcall
SwapMouseButton(
         BOOL fSwap);

__declspec(dllimport)
DWORD
__stdcall
GetMessagePos(
    void);

__declspec(dllimport)
LONG
__stdcall
GetMessageTime(
    void);

__declspec(dllimport)
LPARAM
__stdcall
GetMessageExtraInfo(
    void);


__declspec(dllimport)
BOOL
__stdcall
IsWow64Message(
    void);



__declspec(dllimport)
LPARAM
__stdcall
SetMessageExtraInfo(
         LPARAM lParam);


__declspec(dllimport)
LRESULT
__stdcall
SendMessageA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
#line 3279 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         UINT fuFlags,
         UINT uTimeout,
              PDWORD_PTR lpdwResult);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         UINT fuFlags,
         UINT uTimeout,
              PDWORD_PTR lpdwResult);






__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         SENDASYNCPROC lpResultCallBack,
         ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         SENDASYNCPROC lpResultCallBack,
         ULONG_PTR dwData);







typedef struct {
    UINT cbSize;
    HDESK hdesk;
    HWND hwnd;
    LUID luid;
} BSMINFO, *PBSMINFO;

__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExA(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
              PBSMINFO pbsmInfo);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExW(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
              PBSMINFO pbsmInfo);
#line 3393 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageA(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageW(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
#line 3461 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef PVOID HDEVNOTIFY;
typedef HDEVNOTIFY *PHDEVNOTIFY;







__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationA(
         HANDLE hRecipient,
         LPVOID NotificationFilter,
         DWORD Flags);
__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationW(
         HANDLE hRecipient,
         LPVOID NotificationFilter,
         DWORD Flags);






__declspec(dllimport)
BOOL
__stdcall
UnregisterDeviceNotification(
         HDEVNOTIFY Handle
    );







typedef PVOID HPOWERNOTIFY;
typedef HPOWERNOTIFY *PHPOWERNOTIFY;



__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterPowerSettingNotification(
       HANDLE hRecipient,
       LPCGUID PowerSettingGuid,
       DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterPowerSettingNotification(
       HPOWERNOTIFY Handle
    );




__declspec(dllimport)
BOOL
__stdcall
PostMessageA(
             HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostMessageW(
             HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageA(
         DWORD idThread,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageW(
         DWORD idThread,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
#line 3590 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
AttachThreadInput(
         DWORD idAttach,
         DWORD idAttachTo,
         BOOL fAttach);


__declspec(dllimport)
BOOL
__stdcall
ReplyMessage(
         LRESULT lResult);

__declspec(dllimport)
BOOL
__stdcall
WaitMessage(
    void);


__declspec(dllimport)
DWORD
__stdcall
WaitForInputIdle(
         HANDLE hProcess,
         DWORD dwMilliseconds);

__declspec(dllimport)

LRESULT
__stdcall




DefWindowProcA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefWindowProcW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
void
__stdcall
PostQuitMessage(
         int nExitCode);



__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcA(
         WNDPROC lpPrevWndFunc,
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcW(
         WNDPROC lpPrevWndFunc,
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
#line 3711 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
InSendMessage(
    void);


__declspec(dllimport)
DWORD
__stdcall
InSendMessageEx(
               LPVOID lpReserved);
#line 3734 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
GetDoubleClickTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetDoubleClickTime(
         UINT);

__declspec(dllimport)
ATOM
__stdcall
RegisterClassA(
         const WNDCLASSA *lpWndClass);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassW(
         const WNDCLASSW *lpWndClass);






__declspec(dllimport)
BOOL
__stdcall
UnregisterClassA(
         LPCSTR lpClassName,
             HINSTANCE hInstance);
__declspec(dllimport)
BOOL
__stdcall
UnregisterClassW(
         LPCWSTR lpClassName,
             HINSTANCE hInstance);






__declspec(dllimport)
BOOL
__stdcall
GetClassInfoA(
             HINSTANCE hInstance,
         LPCSTR lpClassName,
          LPWNDCLASSA lpWndClass);
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoW(
             HINSTANCE hInstance,
         LPCWSTR lpClassName,
          LPWNDCLASSW lpWndClass);







__declspec(dllimport)
ATOM
__stdcall
RegisterClassExA(
         const WNDCLASSEXA *);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassExW(
         const WNDCLASSEXW *);






__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExA(
             HINSTANCE hInstance,
         LPCSTR lpszClass,
          LPWNDCLASSEXA lpwcx);
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExW(
             HINSTANCE hInstance,
         LPCWSTR lpszClass,
          LPWNDCLASSEXW lpwcx);
#line 3847 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef BOOLEAN (__stdcall * PREGISTERCLASSNAMEW)(LPCWSTR);


__declspec(dllimport)
HWND
__stdcall
CreateWindowExA(
         DWORD dwExStyle,
             LPCSTR lpClassName,
             LPCSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HMENU hMenu,
             HINSTANCE hInstance,
             LPVOID lpParam);
__declspec(dllimport)
HWND
__stdcall
CreateWindowExW(
         DWORD dwExStyle,
             LPCWSTR lpClassName,
             LPCWSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HMENU hMenu,
             HINSTANCE hInstance,
             LPVOID lpParam);
#line 3902 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
IsWindow(
             HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
IsMenu(
         HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
IsChild(
         HWND hWndParent,
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
DestroyWindow(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowWindow(
         HWND hWnd,
         int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
AnimateWindow(
         HWND hWnd,
         DWORD dwTime,
         DWORD dwFlags);





__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindow(
         HWND hWnd,
             HDC hdcDst,
             POINT* pptDst,
             SIZE* psize,
             HDC hdcSrc,
             POINT* pptSrc,
         COLORREF crKey,
             BLENDFUNCTION* pblend,
         DWORD dwFlags);




typedef struct tagUPDATELAYEREDWINDOWINFO
{
         DWORD cbSize;
             HDC hdcDst;
             const POINT* pptDst;
             const SIZE* psize;
             HDC hdcSrc;
             const POINT* pptSrc;
             COLORREF crKey;
             const BLENDFUNCTION* pblend;
         DWORD dwFlags;
             const RECT* prcDirty;
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;





__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindowIndirect(
         HWND hWnd,
         const UPDATELAYEREDWINDOWINFO* pULWInfo);




__declspec(dllimport)
BOOL
__stdcall
GetLayeredWindowAttributes(
         HWND hwnd,
              COLORREF* pcrKey,
              BYTE* pbAlpha,
              DWORD* pdwFlags);




__declspec(dllimport)
BOOL
__stdcall
PrintWindow(
         HWND hwnd,
         HDC hdcBlt,
         UINT nFlags);



__declspec(dllimport)
BOOL
__stdcall
SetLayeredWindowAttributes(
         HWND hwnd,
         COLORREF crKey,
         BYTE bAlpha,
         DWORD dwFlags);
#line 4038 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ShowWindowAsync(
          HWND hWnd,
          int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
FlashWindow(
          HWND hWnd,
          BOOL bInvert);


typedef struct {
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;

__declspec(dllimport)
BOOL
__stdcall
FlashWindowEx(
         PFLASHWINFO pfwi);
#line 4077 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ShowOwnedPopups(
          HWND hWnd,
          BOOL fShow);

__declspec(dllimport)
BOOL
__stdcall
OpenIcon(
          HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
CloseWindow(
          HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
MoveWindow(
         HWND hWnd,
         int X,
         int Y,
         int nWidth,
         int nHeight,
         BOOL bRepaint);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPos(
         HWND hWnd,
             HWND hWndInsertAfter,
         int X,
         int Y,
         int cx,
         int cy,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
GetWindowPlacement(
         HWND hWnd,
            WINDOWPLACEMENT *lpwndpl);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPlacement(
         HWND hWnd,
         const WINDOWPLACEMENT *lpwndpl);






__declspec(dllimport)
BOOL
__stdcall
GetWindowDisplayAffinity(
         HWND hWnd,
          DWORD* pdwAffinity);

__declspec(dllimport)
BOOL
__stdcall
SetWindowDisplayAffinity(
         HWND hWnd,
         DWORD dwAffinity);





__declspec(dllimport)
HDWP
__stdcall
BeginDeferWindowPos(
         int nNumWindows);

__declspec(dllimport)
HDWP
__stdcall
DeferWindowPos(
         HDWP hWinPosInfo,
         HWND hWnd,
             HWND hWndInsertAfter,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
EndDeferWindowPos(
         HDWP hWinPosInfo);



__declspec(dllimport)
BOOL
__stdcall
IsWindowVisible(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsIconic(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
AnyPopup(
    void);

__declspec(dllimport)
BOOL
__stdcall
BringWindowToTop(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsZoomed(
         HWND hWnd);
#line 4249 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack2.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack2.h"
#pragma warning(disable:4103)

#pragma pack(push,2)
#line 4249 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"





typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;



typedef LPDLGTEMPLATEA LPDLGTEMPLATE;

typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;



typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;





typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;



typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;

typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;



typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;




#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 4306 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"


__declspec(dllimport)
HWND
__stdcall
CreateDialogParamA(
             HINSTANCE hInstance,
         LPCSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogParamW(
             HINSTANCE hInstance,
         LPCWSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);






__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamA(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEA lpTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamW(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEW lpTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
#line 4376 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamA(
             HINSTANCE hInstance,
         LPCSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamW(
             HINSTANCE hInstance,
         LPCWSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);






__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamA(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEA hDialogTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamW(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEW hDialogTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
#line 4444 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
EndDialog(
         HWND hDlg,
         INT_PTR nResult);

__declspec(dllimport)
HWND
__stdcall
GetDlgItem(
             HWND hDlg,
         int nIDDlgItem);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemInt(
         HWND hDlg,
         int nIDDlgItem,
         UINT uValue,
         BOOL bSigned);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemInt(
         HWND hDlg,
         int nIDDlgItem,
              BOOL *lpTranslated,
         BOOL bSigned);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextA(
         HWND hDlg,
         int nIDDlgItem,
         LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextW(
         HWND hDlg,
         int nIDDlgItem,
         LPCWSTR lpString);






__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextA(
         HWND hDlg,
         int nIDDlgItem,
                         LPSTR lpString,
         int cchMax);
__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextW(
         HWND hDlg,
         int nIDDlgItem,
                         LPWSTR lpString,
         int cchMax);






__declspec(dllimport)
BOOL
__stdcall
CheckDlgButton(
         HWND hDlg,
         int nIDButton,
         UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
CheckRadioButton(
         HWND hDlg,
         int nIDFirstButton,
         int nIDLastButton,
         int nIDCheckButton);

__declspec(dllimport)
UINT
__stdcall
IsDlgButtonChecked(
         HWND hDlg,
         int nIDButton);

__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageA(
         HWND hDlg,
         int nIDDlgItem,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageW(
         HWND hDlg,
         int nIDDlgItem,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
HWND
__stdcall
GetNextDlgGroupItem(
         HWND hDlg,
             HWND hCtl,
         BOOL bPrevious);

__declspec(dllimport)
HWND
__stdcall
GetNextDlgTabItem(
         HWND hDlg,
             HWND hCtl,
         BOOL bPrevious);

__declspec(dllimport)
int
__stdcall
GetDlgCtrlID(
         HWND hWnd);

__declspec(dllimport)
long
__stdcall
GetDialogBaseUnits(void);

__declspec(dllimport)

LRESULT
__stdcall




DefDlgProcA(
         HWND hDlg,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefDlgProcW(
         HWND hDlg,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
#line 4638 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterA(
         LPMSG lpMsg,
         int nCode);
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterW(
         LPMSG lpMsg,
         int nCode);
#line 4664 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
OpenClipboard(
             HWND hWndNewOwner);

__declspec(dllimport)
BOOL
__stdcall
CloseClipboard(
    void);




__declspec(dllimport)
DWORD
__stdcall
GetClipboardSequenceNumber(
    void);



__declspec(dllimport)
HWND
__stdcall
GetClipboardOwner(
    void);

__declspec(dllimport)
HWND
__stdcall
SetClipboardViewer(
         HWND hWndNewViewer);

__declspec(dllimport)
HWND
__stdcall
GetClipboardViewer(
    void);

__declspec(dllimport)
BOOL
__stdcall
ChangeClipboardChain(
         HWND hWndRemove,
         HWND hWndNewNext);

__declspec(dllimport)
HANDLE
__stdcall
SetClipboardData(
         UINT uFormat,
             HANDLE hMem);

__declspec(dllimport)
HANDLE
__stdcall
GetClipboardData(
         UINT uFormat);

__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatA(
         LPCSTR lpszFormat);
__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatW(
         LPCWSTR lpszFormat);






__declspec(dllimport)
int
__stdcall
CountClipboardFormats(
    void);

__declspec(dllimport)
UINT
__stdcall
EnumClipboardFormats(
         UINT format);

__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameA(
         UINT format,
                              LPSTR lpszFormatName,
         int cchMaxCount);
__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameW(
         UINT format,
                              LPWSTR lpszFormatName,
         int cchMaxCount);






__declspec(dllimport)
BOOL
__stdcall
EmptyClipboard(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsClipboardFormatAvailable(
         UINT format);

__declspec(dllimport)
int
__stdcall
GetPriorityClipboardFormat(
                          UINT *paFormatPriorityList,
         int cFormats);

__declspec(dllimport)
HWND
__stdcall
GetOpenClipboardWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
AddClipboardFormatListener(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
RemoveClipboardFormatListener(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
GetUpdatedClipboardFormats(
                                     PUINT lpuiFormats,
         UINT cFormats,
                    PUINT pcFormatsOut);







__declspec(dllimport)
BOOL
__stdcall
CharToOemA(
                                  LPCSTR pSrc,
                                   LPSTR pDst);
__declspec(dllimport)
BOOL
__stdcall
CharToOemW(
                                  LPCWSTR pSrc,
                                   LPSTR pDst);







__declspec(dllimport)
BOOL
__stdcall
OemToCharA(
                                  LPCSTR pSrc,
                                   LPSTR pDst);

__declspec(dllimport)
BOOL
__stdcall
OemToCharW(
                                  LPCSTR pSrc,
                                   LPWSTR pDst);






__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffA(
         LPCSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffW(
         LPCWSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);






__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffA(
         LPCSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffW(
         LPCSTR lpszSrc,
                               LPWSTR lpszDst,
         DWORD cchDstLength);






__declspec(dllimport)
LPSTR
__stdcall
CharUpperA(
            LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharUpperW(
            LPWSTR lpsz);






__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffA(
                              LPSTR lpsz,
         DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffW(
                              LPWSTR lpsz,
         DWORD cchLength);






__declspec(dllimport)
LPSTR
__stdcall
CharLowerA(
            LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharLowerW(
            LPWSTR lpsz);






__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffA(
                              LPSTR lpsz,
         DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffW(
                              LPWSTR lpsz,
         DWORD cchLength);






__declspec(dllimport)
LPSTR
__stdcall
CharNextA(
         LPCSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharNextW(
         LPCWSTR lpsz);






__declspec(dllimport)
LPSTR
__stdcall
CharPrevA(
         LPCSTR lpszStart,
         LPCSTR lpszCurrent);
__declspec(dllimport)
LPWSTR
__stdcall
CharPrevW(
         LPCWSTR lpszStart,
         LPCWSTR lpszCurrent);







__declspec(dllimport)
LPSTR
__stdcall
CharNextExA(
          WORD CodePage,
          LPCSTR lpCurrentChar,
          DWORD dwFlags);

__declspec(dllimport)
LPSTR
__stdcall
CharPrevExA(
          WORD CodePage,
          LPCSTR lpStart,
          LPCSTR lpCurrentChar,
          DWORD dwFlags);
#line 5043 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaW(
         WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericW(
         WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharUpperA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharUpperW(
         WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharLowerA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharLowerW(
         WCHAR ch);
#line 5109 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
SetFocus(
             HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetActiveWindow(
    void);

__declspec(dllimport)
HWND
__stdcall
GetFocus(
    void);

__declspec(dllimport)
UINT
__stdcall
GetKBCodePage(
    void);

__declspec(dllimport)
SHORT
__stdcall
GetKeyState(
         int nVirtKey);

__declspec(dllimport)
SHORT
__stdcall
GetAsyncKeyState(
         int vKey);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardState(
                      PBYTE lpKeyState);

__declspec(dllimport)
BOOL
__stdcall
SetKeyboardState(
                     LPBYTE lpKeyState);

__declspec(dllimport)
int
__stdcall
GetKeyNameTextA(
         LONG lParam,
                          LPSTR lpString,
         int cchSize);
__declspec(dllimport)
int
__stdcall
GetKeyNameTextW(
         LONG lParam,
                          LPWSTR lpString,
         int cchSize);






__declspec(dllimport)
int
__stdcall
GetKeyboardType(
         int nTypeFlag);

__declspec(dllimport)
int
__stdcall
ToAscii(
         UINT uVirtKey,
         UINT uScanCode,
                         const BYTE *lpKeyState,
          LPWORD lpChar,
         UINT uFlags);


__declspec(dllimport)
int
__stdcall
ToAsciiEx(
         UINT uVirtKey,
         UINT uScanCode,
                         const BYTE *lpKeyState,
          LPWORD lpChar,
         UINT uFlags,
             HKL dwhkl);


__declspec(dllimport)
int
__stdcall
ToUnicode(
         UINT wVirtKey,
         UINT wScanCode,
                         const BYTE *lpKeyState,
                          LPWSTR pwszBuff,
         int cchBuff,
         UINT wFlags);

__declspec(dllimport)
DWORD
__stdcall
OemKeyScan(
         WORD wOemChar);

__declspec(dllimport)
SHORT
__stdcall
VkKeyScanA(
         CHAR ch);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanW(
         WCHAR ch);







__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExA(
         CHAR ch,
         HKL dwhkl);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExW(
         WCHAR ch,
         HKL dwhkl);
#line 5265 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
void
__stdcall
keybd_event(
         BYTE bVk,
         BYTE bScan,
         DWORD dwFlags,
         ULONG_PTR dwExtraInfo);
#line 5293 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
void
__stdcall
mouse_event(
         DWORD dwFlags,
         DWORD dx,
         DWORD dy,
         DWORD dwData,
         ULONG_PTR dwExtraInfo);



typedef struct tagMOUSEINPUT {
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, * LPMOUSEINPUT;

typedef struct tagKEYBDINPUT {
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, * LPKEYBDINPUT;

typedef struct tagHARDWAREINPUT {
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT, * LPHARDWAREINPUT;





typedef struct tagINPUT {
    DWORD type;

    union
    {
        MOUSEINPUT mi;
        KEYBDINPUT ki;
        HARDWAREINPUT hi;
    };
} INPUT, *PINPUT, * LPINPUT;

__declspec(dllimport)
UINT
__stdcall
SendInput(
         UINT cInputs,
                         LPINPUT pInputs,
         int cbSize);
#line 5362 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
struct HTOUCHINPUT__{int unused;}; typedef struct HTOUCHINPUT__ *HTOUCHINPUT;

typedef struct tagTOUCHINPUT {
    LONG x;
    LONG y;
    HANDLE hSource;
    DWORD dwID;
    DWORD dwFlags;
    DWORD dwMask;
    DWORD dwTime;
    ULONG_PTR dwExtraInfo;
    DWORD cxContact;
    DWORD cyContact;
} TOUCHINPUT, *PTOUCHINPUT;
typedef TOUCHINPUT const * PCTOUCHINPUT;
#line 5403 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetTouchInputInfo(
         HTOUCHINPUT hTouchInput,
         UINT cInputs,
                          PTOUCHINPUT pInputs,
         int cbSize);

__declspec(dllimport)
BOOL
__stdcall
CloseTouchInputHandle(
         HTOUCHINPUT hTouchInput);
#line 5425 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
RegisterTouchWindow(
         HWND hwnd,
         ULONG ulFlags);

__declspec(dllimport)
BOOL
__stdcall
UnregisterTouchWindow(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
IsTouchWindow(
         HWND hwnd,
              PULONG pulFlags);




typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
} LASTINPUTINFO, * PLASTINPUTINFO;

__declspec(dllimport)
BOOL
__stdcall
GetLastInputInfo(
          PLASTINPUTINFO plii);


__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyA(
         UINT uCode,
         UINT uMapType);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyW(
         UINT uCode,
         UINT uMapType);







__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExA(
         UINT uCode,
         UINT uMapType,
             HKL dwhkl);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExW(
         UINT uCode,
         UINT uMapType,
             HKL dwhkl);
#line 5508 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetInputState(
    void);

__declspec(dllimport)
DWORD
__stdcall
GetQueueStatus(
         UINT flags);


__declspec(dllimport)
HWND
__stdcall
GetCapture(
    void);

__declspec(dllimport)
HWND
__stdcall
SetCapture(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ReleaseCapture(
    void);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjects(
         DWORD nCount,
                            const HANDLE *pHandles,
         BOOL fWaitAll,
         DWORD dwMilliseconds,
         DWORD dwWakeMask);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjectsEx(
         DWORD nCount,
                            const HANDLE *pHandles,
         DWORD dwMilliseconds,
         DWORD dwWakeMask,
         DWORD dwFlags);
#line 5613 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
UINT_PTR
__stdcall
SetTimer(
             HWND hWnd,
         UINT_PTR nIDEvent,
         UINT uElapse,
             TIMERPROC lpTimerFunc);

__declspec(dllimport)
BOOL
__stdcall
KillTimer(
             HWND hWnd,
         UINT_PTR uIDEvent);

__declspec(dllimport)
BOOL
__stdcall
IsWindowUnicode(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
EnableWindow(
         HWND hWnd,
         BOOL bEnable);

__declspec(dllimport)
BOOL
__stdcall
IsWindowEnabled(
         HWND hWnd);

__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsA(
             HINSTANCE hInstance,
         LPCSTR lpTableName);
__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsW(
             HINSTANCE hInstance,
         LPCWSTR lpTableName);






__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableA(
                        LPACCEL paccel,
         int cAccel);
__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableW(
                        LPACCEL paccel,
         int cAccel);






__declspec(dllimport)
BOOL
__stdcall
DestroyAcceleratorTable(
         HACCEL hAccel);

__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableA(
         HACCEL hAccelSrc,
                                                 LPACCEL lpAccelDst,
         int cAccelEntries);
__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableW(
         HACCEL hAccelSrc,
                                                 LPACCEL lpAccelDst,
         int cAccelEntries);
#line 5712 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorA(
         HWND hWnd,
         HACCEL hAccTable,
         LPMSG lpMsg);
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorW(
         HWND hWnd,
         HACCEL hAccTable,
         LPMSG lpMsg);
#line 5891 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
int
__stdcall
GetSystemMetrics(
         int nIndex);






__declspec(dllimport)
HMENU
__stdcall
LoadMenuA(
             HINSTANCE hInstance,
         LPCSTR lpMenuName);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuW(
             HINSTANCE hInstance,
         LPCWSTR lpMenuName);






__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectA(
         const MENUTEMPLATEA *lpMenuTemplate);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectW(
         const MENUTEMPLATEW *lpMenuTemplate);






__declspec(dllimport)
HMENU
__stdcall
GetMenu(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetMenu(
         HWND hWnd,
             HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
ChangeMenuA(
         HMENU hMenu,
         UINT cmd,
             LPCSTR lpszNewItem,
         UINT cmdInsert,
         UINT flags);
__declspec(dllimport)
BOOL
__stdcall
ChangeMenuW(
         HMENU hMenu,
         UINT cmd,
             LPCWSTR lpszNewItem,
         UINT cmdInsert,
         UINT flags);






__declspec(dllimport)
BOOL
__stdcall
HiliteMenuItem(
         HWND hWnd,
         HMENU hMenu,
         UINT uIDHiliteItem,
         UINT uHilite);

__declspec(dllimport)
int
__stdcall
GetMenuStringA(
         HMENU hMenu,
         UINT uIDItem,
                             LPSTR lpString,
         int cchMax,
         UINT flags);
__declspec(dllimport)
int
__stdcall
GetMenuStringW(
         HMENU hMenu,
         UINT uIDItem,
                             LPWSTR lpString,
         int cchMax,
         UINT flags);






__declspec(dllimport)
UINT
__stdcall
GetMenuState(
         HMENU hMenu,
         UINT uId,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DrawMenuBar(
         HWND hWnd);







__declspec(dllimport)
HMENU
__stdcall
GetSystemMenu(
         HWND hWnd,
         BOOL bRevert);


__declspec(dllimport)
HMENU
__stdcall
CreateMenu(
    void);

__declspec(dllimport)
HMENU
__stdcall
CreatePopupMenu(
    void);

__declspec(dllimport)
BOOL
__stdcall
DestroyMenu(
         HMENU hMenu);

__declspec(dllimport)
DWORD
__stdcall
CheckMenuItem(
         HMENU hMenu,
         UINT uIDCheckItem,
         UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
EnableMenuItem(
         HMENU hMenu,
         UINT uIDEnableItem,
         UINT uEnable);

__declspec(dllimport)
HMENU
__stdcall
GetSubMenu(
         HMENU hMenu,
         int nPos);

__declspec(dllimport)
UINT
__stdcall
GetMenuItemID(
         HMENU hMenu,
         int nPos);

__declspec(dllimport)
int
__stdcall
GetMenuItemCount(
             HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
InsertMenuA(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuW(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall
AppendMenuA(
         HMENU hMenu,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
AppendMenuW(
         HMENU hMenu,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall
ModifyMenuA(
         HMENU hMnu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
ModifyMenuW(
         HMENU hMnu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall RemoveMenu(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DeleteMenu(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemBitmaps(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
             HBITMAP hBitmapUnchecked,
             HBITMAP hBitmapChecked);

__declspec(dllimport)
LONG
__stdcall
GetMenuCheckMarkDimensions(
    void);

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenu(
         HMENU hMenu,
         UINT uFlags,
         int x,
         int y,
         int nReserved,
         HWND hWnd,
             const RECT *prcRect);
#line 6208 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagTPMPARAMS
{
    UINT cbSize;
    RECT rcExclude;
} TPMPARAMS;
typedef TPMPARAMS *LPTPMPARAMS;

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenuEx(
         HMENU,
         UINT,
         int,
         int,
         HWND,
             LPTPMPARAMS);



__declspec(dllimport)
BOOL
__stdcall
CalculatePopupWindowPosition(
         const POINT *anchorPoint,
         const SIZE *windowSize,
         UINT flags,
             RECT *excludeRect,
          RECT *popupWindowPosition);
#line 6256 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagMENUINFO
{
    DWORD cbSize;
    DWORD fMask;
    DWORD dwStyle;
    UINT cyMax;
    HBRUSH hbrBack;
    DWORD dwContextHelpID;
    ULONG_PTR dwMenuData;
} MENUINFO, *LPMENUINFO;
typedef MENUINFO const *LPCMENUINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuInfo(
         HMENU,
            LPMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
SetMenuInfo(
         HMENU,
         LPCMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
EndMenu(
        void);







typedef struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
} MENUGETOBJECTINFO, * PMENUGETOBJECTINFO;
#line 6344 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagMENUITEMINFOA
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
                            LPSTR dwTypeData;
    UINT cch;

    HBITMAP hbmpItem;

} MENUITEMINFOA, *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
                            LPWSTR dwTypeData;
    UINT cch;

    HBITMAP hbmpItem;

} MENUITEMINFOW, *LPMENUITEMINFOW;




typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;

typedef MENUITEMINFOA const *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const *LPCMENUITEMINFOW;



typedef LPCMENUITEMINFOA LPCMENUITEMINFO;



__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemA(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
         LPCMENUITEMINFOA lpmi);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemW(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
         LPCMENUITEMINFOW lpmi);






__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoA(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
            LPMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoW(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
            LPMENUITEMINFOW lpmii);






__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoA(
         HMENU hmenu,
         UINT item,
         BOOL fByPositon,
         LPCMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoW(
         HMENU hmenu,
         UINT item,
         BOOL fByPositon,
         LPCMENUITEMINFOW lpmii);
#line 6464 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
GetMenuDefaultItem(
         HMENU hMenu,
         UINT fByPos,
         UINT gmdiFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuDefaultItem(
         HMENU hMenu,
         UINT uItem,
         UINT fByPos);

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemRect(
             HWND hWnd,
         HMENU hMenu,
         UINT uItem,
          LPRECT lprcItem);

__declspec(dllimport)
int
__stdcall
MenuItemFromPoint(
             HWND hWnd,
         HMENU hMenu,
         POINT ptScreen);
#line 6542 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagDROPSTRUCT
{
    HWND hwndSource;
    HWND hwndSink;
    DWORD wFmt;
    ULONG_PTR dwData;
    POINT ptDrop;
    DWORD dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;
#line 6562 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
DWORD
__stdcall
DragObject(
         HWND hwndParent,
         HWND hwndFrom,
         UINT fmt,
         ULONG_PTR data,
             HCURSOR hcur);

__declspec(dllimport)
BOOL
__stdcall
DragDetect(
         HWND hwnd,
         POINT pt);


__declspec(dllimport)
BOOL
__stdcall
DrawIcon(
         HDC hDC,
         int X,
         int Y,
         HICON hIcon);
#line 6625 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagDRAWTEXTPARAMS
{
    UINT cbSize;
    int iTabLength;
    int iLeftMargin;
    int iRightMargin;
    UINT uiLengthDrawn;
} DRAWTEXTPARAMS, *LPDRAWTEXTPARAMS;



__declspec(dllimport)
int
__stdcall
DrawTextA(
         HDC hdc,
                                LPCSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format);
__declspec(dllimport)
int
__stdcall
DrawTextW(
         HDC hdc,
                                LPCWSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format);
#line 6688 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
int
__stdcall
DrawTextExA(
         HDC hdc,
                                LPSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format,
             LPDRAWTEXTPARAMS lpdtp);
__declspec(dllimport)
int
__stdcall
DrawTextExW(
         HDC hdc,
                                LPWSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format,
             LPDRAWTEXTPARAMS lpdtp);
#line 6717 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GrayStringA(
         HDC hDC,
             HBRUSH hBrush,
             GRAYSTRINGPROC lpOutputFunc,
         LPARAM lpData,
         int nCount,
         int X,
         int Y,
         int nWidth,
         int nHeight);
__declspec(dllimport)
BOOL
__stdcall
GrayStringW(
         HDC hDC,
             HBRUSH hBrush,
             GRAYSTRINGPROC lpOutputFunc,
         LPARAM lpData,
         int nCount,
         int X,
         int Y,
         int nWidth,
         int nHeight);
#line 6769 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawStateA(
         HDC hdc,
             HBRUSH hbrFore,
             DRAWSTATEPROC qfnCallBack,
         LPARAM lData,
         WPARAM wData,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);
__declspec(dllimport)
BOOL
__stdcall
DrawStateW(
         HDC hdc,
             HBRUSH hbrFore,
             DRAWSTATEPROC qfnCallBack,
         LPARAM lData,
         WPARAM wData,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);







__declspec(dllimport)
LONG
__stdcall
TabbedTextOutA(
         HDC hdc,
         int x,
         int y,
                         LPCSTR lpString,
         int chCount,
         int nTabPositions,
                                   const INT *lpnTabStopPositions,
         int nTabOrigin);
__declspec(dllimport)
LONG
__stdcall
TabbedTextOutW(
         HDC hdc,
         int x,
         int y,
                         LPCWSTR lpString,
         int chCount,
         int nTabPositions,
                                   const INT *lpnTabStopPositions,
         int nTabOrigin);






__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentA(
         HDC hdc,
                         LPCSTR lpString,
         int chCount,
         int nTabPositions,
                                   const INT *lpnTabStopPositions);
__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentW(
         HDC hdc,
                         LPCWSTR lpString,
         int chCount,
         int nTabPositions,
                                   const INT *lpnTabStopPositions);






__declspec(dllimport)
BOOL
__stdcall
UpdateWindow(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetActiveWindow(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetForegroundWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
PaintDesktop(
         HDC hdc);

__declspec(dllimport)
void
__stdcall
SwitchToThisWindow(
         HWND hwnd,
         BOOL fUnknown);



__declspec(dllimport)
BOOL
__stdcall
SetForegroundWindow(
         HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
AllowSetForegroundWindow(
         DWORD dwProcessId);



__declspec(dllimport)
BOOL
__stdcall
LockSetForegroundWindow(
         UINT uLockCode);






__declspec(dllimport)
HWND
__stdcall
WindowFromDC(
         HDC hDC);

__declspec(dllimport)
HDC
__stdcall
GetDC(
             HWND hWnd);

__declspec(dllimport)
HDC
__stdcall
GetDCEx(
             HWND hWnd,
             HRGN hrgnClip,
         DWORD flags);
#line 6955 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
HDC
__stdcall
GetWindowDC(
             HWND hWnd);

__declspec(dllimport)
int
__stdcall
ReleaseDC(
             HWND hWnd,
         HDC hDC);

__declspec(dllimport)
HDC
__stdcall
BeginPaint(
         HWND hWnd,
          LPPAINTSTRUCT lpPaint);

__declspec(dllimport)
BOOL
__stdcall
EndPaint(
         HWND hWnd,
         const PAINTSTRUCT *lpPaint);

__declspec(dllimport)
BOOL
__stdcall
GetUpdateRect(
         HWND hWnd,
              LPRECT lpRect,
         BOOL bErase);

__declspec(dllimport)
int
__stdcall
GetUpdateRgn(
         HWND hWnd,
         HRGN hRgn,
         BOOL bErase);

__declspec(dllimport)
int
__stdcall
SetWindowRgn(
         HWND hWnd,
             HRGN hRgn,
         BOOL bRedraw);


__declspec(dllimport)
int
__stdcall
GetWindowRgn(
         HWND hWnd,
         HRGN hRgn);



__declspec(dllimport)
int
__stdcall
GetWindowRgnBox(
         HWND hWnd,
          LPRECT lprc);



__declspec(dllimport)
int
__stdcall
ExcludeUpdateRgn(
         HDC hDC,
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRect(
             HWND hWnd,
             const RECT *lpRect,
         BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRect(
             HWND hWnd,
             const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRgn(
         HWND hWnd,
             HRGN hRgn,
         BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRgn(
         HWND hWnd,
             HRGN hRgn);


__declspec(dllimport)
BOOL
__stdcall
RedrawWindow(
             HWND hWnd,
             const RECT *lprcUpdate,
             HRGN hrgnUpdate,
         UINT flags);
#line 7097 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
LockWindowUpdate(
             HWND hWndLock);

__declspec(dllimport)
BOOL
__stdcall
ScrollWindow(
         HWND hWnd,
         int XAmount,
         int YAmount,
             const RECT *lpRect,
             const RECT *lpClipRect);

__declspec(dllimport)
BOOL
__stdcall
ScrollDC(
         HDC hDC,
         int dx,
         int dy,
             const RECT *lprcScroll,
             const RECT *lprcClip,
             HRGN hrgnUpdate,
              LPRECT lprcUpdate);

__declspec(dllimport)
int
__stdcall
ScrollWindowEx(
         HWND hWnd,
         int dx,
         int dy,
             const RECT *prcScroll,
             const RECT *prcClip,
             HRGN hrgnUpdate,
              LPRECT prcUpdate,
         UINT flags);
#line 7147 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
int
__stdcall
SetScrollPos(
         HWND hWnd,
         int nBar,
         int nPos,
         BOOL bRedraw);

__declspec(dllimport)
int
__stdcall
GetScrollPos(
         HWND hWnd,
         int nBar);

__declspec(dllimport)
BOOL
__stdcall
SetScrollRange(
         HWND hWnd,
         int nBar,
         int nMinPos,
         int nMaxPos,
         BOOL bRedraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollRange(
         HWND hWnd,
         int nBar,
          LPINT lpMinPos,
          LPINT lpMaxPos);

__declspec(dllimport)
BOOL
__stdcall
ShowScrollBar(
         HWND hWnd,
         int wBar,
         BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
EnableScrollBar(
         HWND hWnd,
         UINT wSBflags,
         UINT wArrows);
#line 7217 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetPropA(
         HWND hWnd,
         LPCSTR lpString,
             HANDLE hData);
__declspec(dllimport)
BOOL
__stdcall
SetPropW(
         HWND hWnd,
         LPCWSTR lpString,
             HANDLE hData);






__declspec(dllimport)
HANDLE
__stdcall
GetPropA(
         HWND hWnd,
         LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
GetPropW(
         HWND hWnd,
         LPCWSTR lpString);






__declspec(dllimport)
HANDLE
__stdcall
RemovePropA(
         HWND hWnd,
         LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
RemovePropW(
         HWND hWnd,
         LPCWSTR lpString);






__declspec(dllimport)
int
__stdcall
EnumPropsExA(
         HWND hWnd,
         PROPENUMPROCEXA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
int
__stdcall
EnumPropsExW(
         HWND hWnd,
         PROPENUMPROCEXW lpEnumFunc,
         LPARAM lParam);






__declspec(dllimport)
int
__stdcall
EnumPropsA(
         HWND hWnd,
         PROPENUMPROCA lpEnumFunc);
__declspec(dllimport)
int
__stdcall
EnumPropsW(
         HWND hWnd,
         PROPENUMPROCW lpEnumFunc);






__declspec(dllimport)
BOOL
__stdcall
SetWindowTextA(
         HWND hWnd,
             LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetWindowTextW(
         HWND hWnd,
             LPCWSTR lpString);






__declspec(dllimport)
int
__stdcall
GetWindowTextA(
         HWND hWnd,
                            LPSTR lpString,
         int nMaxCount);
__declspec(dllimport)
int
__stdcall
GetWindowTextW(
         HWND hWnd,
                            LPWSTR lpString,
         int nMaxCount);






__declspec(dllimport)
int
__stdcall
GetWindowTextLengthA(
         HWND hWnd);
__declspec(dllimport)
int
__stdcall
GetWindowTextLengthW(
         HWND hWnd);






__declspec(dllimport)
BOOL
__stdcall
GetClientRect(
         HWND hWnd,
          LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetWindowRect(
         HWND hWnd,
          LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRect(
            LPRECT lpRect,
         DWORD dwStyle,
         BOOL bMenu);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRectEx(
            LPRECT lpRect,
         DWORD dwStyle,
         BOOL bMenu,
         DWORD dwExStyle);





typedef struct tagHELPINFO
{
    UINT cbSize;
    int iContextType;
    int iCtrlId;
    HANDLE hItemHandle;
    DWORD_PTR dwContextId;
    POINT MousePos;
} HELPINFO, *LPHELPINFO;

__declspec(dllimport)
BOOL
__stdcall
SetWindowContextHelpId(
         HWND,
         DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetWindowContextHelpId(
         HWND);

__declspec(dllimport)
BOOL
__stdcall
SetMenuContextHelpId(
         HMENU,
         DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetMenuContextHelpId(
         HMENU);
#line 7509 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
int
__stdcall
MessageBoxA(
             HWND hWnd,
             LPCSTR lpText,
             LPCSTR lpCaption,
         UINT uType);
__declspec(dllimport)
int
__stdcall
MessageBoxW(
             HWND hWnd,
             LPCWSTR lpText,
             LPCWSTR lpCaption,
         UINT uType);
#line 7555 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
int
__stdcall
MessageBoxExA(
             HWND hWnd,
             LPCSTR lpText,
             LPCSTR lpCaption,
         UINT uType,
         WORD wLanguageId);
__declspec(dllimport)
int
__stdcall
MessageBoxExW(
             HWND hWnd,
             LPCWSTR lpText,
             LPCWSTR lpCaption,
         UINT uType,
         WORD wLanguageId);
#line 7581 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpszText;
    LPCSTR lpszCaption;
    DWORD dwStyle;
    LPCSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpszText;
    LPCWSTR lpszCaption;
    DWORD dwStyle;
    LPCWSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;





typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;


__declspec(dllimport)
int
__stdcall
MessageBoxIndirectA(
         const MSGBOXPARAMSA * lpmbp);
__declspec(dllimport)
int
__stdcall
MessageBoxIndirectW(
         const MSGBOXPARAMSW * lpmbp);
#line 7637 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
MessageBeep(
         UINT uType);




__declspec(dllimport)
int
__stdcall
ShowCursor(
         BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
SetCursorPos(
         int X,
         int Y);


__declspec(dllimport)
BOOL
__stdcall
SetPhysicalCursorPos(
         int X,
         int Y);


__declspec(dllimport)
HCURSOR
__stdcall
SetCursor(
             HCURSOR hCursor);

__declspec(dllimport)
BOOL
__stdcall
GetCursorPos(
          LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
GetPhysicalCursorPos(
          LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
ClipCursor(
             const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetClipCursor(
          LPRECT lpRect);

__declspec(dllimport)
HCURSOR
__stdcall
GetCursor(
    void);

__declspec(dllimport)
BOOL
__stdcall
CreateCaret(
         HWND hWnd,
             HBITMAP hBitmap,
         int nWidth,
         int nHeight);

__declspec(dllimport)
UINT
__stdcall
GetCaretBlinkTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetCaretBlinkTime(
         UINT uMSeconds);

__declspec(dllimport)
BOOL
__stdcall
DestroyCaret(
    void);

__declspec(dllimport)
BOOL
__stdcall
HideCaret(
             HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowCaret(
             HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetCaretPos(
         int X,
         int Y);

__declspec(dllimport)
BOOL
__stdcall
GetCaretPos(
          LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClientToScreen(
         HWND hWnd,
            LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ScreenToClient(
         HWND hWnd,
            LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
LogicalToPhysicalPoint(
         HWND hWnd,
            LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
PhysicalToLogicalPoint(
         HWND hWnd,
            LPPOINT lpPoint);



__declspec(dllimport)
int
__stdcall
MapWindowPoints(
             HWND hWndFrom,
             HWND hWndTo,
                            LPPOINT lpPoints,
         UINT cPoints);

__declspec(dllimport)
HWND
__stdcall
WindowFromPoint(
         POINT Point);


__declspec(dllimport)
HWND
__stdcall
WindowFromPhysicalPoint(
         POINT Point);


__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPoint(
         HWND hWndParent,
         POINT Point);







__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPointEx(
         HWND hwnd,
         POINT pt,
         UINT flags);
#line 7897 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
DWORD
__stdcall
GetSysColor(
         int nIndex);


__declspec(dllimport)
HBRUSH
__stdcall
GetSysColorBrush(
         int nIndex);




__declspec(dllimport)
BOOL
__stdcall
SetSysColors(
         int cElements,
                           const INT * lpaElements,
                           const COLORREF * lpaRgbValues);



__declspec(dllimport)
BOOL
__stdcall
DrawFocusRect(
         HDC hDC,
         const RECT * lprc);

__declspec(dllimport)
int
__stdcall
FillRect(
         HDC hDC,
         const RECT *lprc,
         HBRUSH hbr);

__declspec(dllimport)
int
__stdcall
FrameRect(
         HDC hDC,
         const RECT *lprc,
         HBRUSH hbr);

__declspec(dllimport)
BOOL
__stdcall
InvertRect(
         HDC hDC,
         const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
SetRect(
          LPRECT lprc,
         int xLeft,
         int yTop,
         int xRight,
         int yBottom);

__declspec(dllimport)
BOOL
__stdcall
SetRectEmpty(
          LPRECT lprc);

__declspec(dllimport)
BOOL
__stdcall
CopyRect(
          LPRECT lprcDst,
         const RECT *lprcSrc);

__declspec(dllimport)
BOOL
__stdcall
InflateRect(
            LPRECT lprc,
         int dx,
         int dy);

__declspec(dllimport)
BOOL
__stdcall
IntersectRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
UnionRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
SubtractRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
OffsetRect(
            LPRECT lprc,
         int dx,
         int dy);

__declspec(dllimport)
BOOL
__stdcall
IsRectEmpty(
         const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
EqualRect(
         const RECT *lprc1,
         const RECT *lprc2);

__declspec(dllimport)
BOOL
__stdcall
PtInRect(
         const RECT *lprc,
         POINT pt);



__declspec(dllimport)
WORD
__stdcall
GetWindowWord(
         HWND hWnd,
         int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetWindowWord(
         HWND hWnd,
         int nIndex,
         WORD wNewWord);

__declspec(dllimport)
LONG
__stdcall
GetWindowLongA(
         HWND hWnd,
         int nIndex);
__declspec(dllimport)
LONG
__stdcall
GetWindowLongW(
         HWND hWnd,
         int nIndex);






__declspec(dllimport)
LONG
__stdcall
SetWindowLongA(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
__declspec(dllimport)
LONG
__stdcall
SetWindowLongW(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
#line 8151 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
WORD
__stdcall
GetClassWord(
         HWND hWnd,
         int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetClassWord(
         HWND hWnd,
         int nIndex,
         WORD wNewWord);

__declspec(dllimport)
DWORD
__stdcall
GetClassLongA(
         HWND hWnd,
         int nIndex);
__declspec(dllimport)
DWORD
__stdcall
GetClassLongW(
         HWND hWnd,
         int nIndex);






__declspec(dllimport)
DWORD
__stdcall
SetClassLongA(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
__declspec(dllimport)
DWORD
__stdcall
SetClassLongW(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
#line 8267 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetProcessDefaultLayout(
          DWORD *pdwDefaultLayout);

__declspec(dllimport)
BOOL
__stdcall
SetProcessDefaultLayout(
         DWORD dwDefaultLayout);


__declspec(dllimport)
HWND
__stdcall
GetDesktopWindow(
    void);


__declspec(dllimport)
HWND
__stdcall
GetParent(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetParent(
         HWND hWndChild,
             HWND hWndNewParent);

__declspec(dllimport)
BOOL
__stdcall
EnumChildWindows(
             HWND hWndParent,
         WNDENUMPROC lpEnumFunc,
         LPARAM lParam);

__declspec(dllimport)
HWND
__stdcall
FindWindowA(
             LPCSTR lpClassName,
             LPCSTR lpWindowName);
__declspec(dllimport)
HWND
__stdcall
FindWindowW(
             LPCWSTR lpClassName,
             LPCWSTR lpWindowName);







__declspec(dllimport)
HWND
__stdcall
FindWindowExA(
             HWND hWndParent,
             HWND hWndChildAfter,
             LPCSTR lpszClass,
             LPCSTR lpszWindow);
__declspec(dllimport)
HWND
__stdcall
FindWindowExW(
             HWND hWndParent,
             HWND hWndChildAfter,
             LPCWSTR lpszClass,
             LPCWSTR lpszWindow);






__declspec(dllimport)
HWND
__stdcall
GetShellWindow(
    void);




__declspec(dllimport)
BOOL
__stdcall
RegisterShellHookWindow(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
DeregisterShellHookWindow(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
EnumWindows(
         WNDENUMPROC lpEnumFunc,
         LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumThreadWindows(
         DWORD dwThreadId,
         WNDENUMPROC lpfn,
         LPARAM lParam);



__declspec(dllimport)
int
__stdcall
GetClassNameA(
         HWND hWnd,
                                         LPSTR lpClassName,
         int nMaxCount
    );
__declspec(dllimport)
int
__stdcall
GetClassNameW(
         HWND hWnd,
                                         LPWSTR lpClassName,
         int nMaxCount
    );
#line 8433 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
GetTopWindow(
             HWND hWnd);





__declspec(dllimport)
DWORD
__stdcall
GetWindowThreadProcessId(
         HWND hWnd,
              LPDWORD lpdwProcessId);


__declspec(dllimport)
BOOL
__stdcall
IsGUIThread(
         BOOL bConvert);







__declspec(dllimport)
HWND
__stdcall
GetLastActivePopup(
         HWND hWnd);
#line 8485 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
GetWindow(
         HWND hWnd,
         UINT uCmd);






__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookA(
         int nFilterType,
         HOOKPROC pfnFilterProc);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookW(
         int nFilterType,
         HOOKPROC pfnFilterProc);
#line 8537 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHook(
         int nCode,
         HOOKPROC pfnFilterProc);

__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExA(
         int idHook,
         HOOKPROC lpfn,
             HINSTANCE hmod,
         DWORD dwThreadId);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExW(
         int idHook,
         HOOKPROC lpfn,
             HINSTANCE hmod,
         DWORD dwThreadId);






__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHookEx(
         HHOOK hhk);

__declspec(dllimport)
LRESULT
__stdcall
CallNextHookEx(
             HHOOK hhk,
         int nCode,
         WPARAM wParam,
         LPARAM lParam);
#line 8670 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
CheckMenuRadioItem(
         HMENU hmenu,
         UINT first,
         UINT last,
         UINT check,
         UINT flags);





typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct {
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;
#line 8744 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapA(
             HINSTANCE hInstance,
         LPCSTR lpBitmapName);
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapW(
             HINSTANCE hInstance,
         LPCWSTR lpBitmapName);






__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorA(
             HINSTANCE hInstance,
         LPCSTR lpCursorName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorW(
             HINSTANCE hInstance,
         LPCWSTR lpCursorName);






__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileA(
         LPCSTR lpFileName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileW(
         LPCWSTR lpFileName);






__declspec(dllimport)
HCURSOR
__stdcall
CreateCursor(
             HINSTANCE hInst,
         int xHotSpot,
         int yHotSpot,
         int nWidth,
         int nHeight,
         const void *pvANDPlane,
         const void *pvXORPlane);

__declspec(dllimport)
BOOL
__stdcall
DestroyCursor(
         HCURSOR hCursor);
#line 8848 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetSystemCursor(
         HCURSOR hcur,
         DWORD id);

typedef struct _ICONINFO {
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;

__declspec(dllimport)
HICON
__stdcall
LoadIconA(
             HINSTANCE hInstance,
         LPCSTR lpIconName);
__declspec(dllimport)
HICON
__stdcall
LoadIconW(
             HINSTANCE hInstance,
         LPCWSTR lpIconName);







__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsA(
         LPCSTR szFileName,
         int nIconIndex,
         int cxIcon,
         int cyIcon,
                                          HICON *phicon,
                                          UINT *piconid,
         UINT nIcons,
         UINT flags);
__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsW(
         LPCWSTR szFileName,
         int nIconIndex,
         int cxIcon,
         int cyIcon,
                                          HICON *phicon,
                                          UINT *piconid,
         UINT nIcons,
         UINT flags);






__declspec(dllimport)
HICON
__stdcall
CreateIcon(
             HINSTANCE hInstance,
         int nWidth,
         int nHeight,
         BYTE cPlanes,
         BYTE cBitsPixel,
         const BYTE *lpbANDbits,
         const BYTE *lpbXORbits);

__declspec(dllimport)
BOOL
__stdcall
DestroyIcon(
         HICON hIcon);

__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectory(
         PBYTE presbits,
         BOOL fIcon);


__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectoryEx(
         PBYTE presbits,
         BOOL fIcon,
         int cxDesired,
         int cyDesired,
         UINT Flags);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResource(
         PBYTE presbits,
         DWORD dwResSize,
         BOOL fIcon,
         DWORD dwVer);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResourceEx(
         PBYTE presbits,
         DWORD dwResSize,
         BOOL fIcon,
         DWORD dwVer,
         int cxDesired,
         int cyDesired,
         UINT Flags);


typedef struct tagCURSORSHAPE
{
    int xHotSpot;
    int yHotSpot;
    int cx;
    int cy;
    int cbWidth;
    BYTE Planes;
    BYTE BitsPixel;
} CURSORSHAPE, *LPCURSORSHAPE;
#line 9005 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
HANDLE
__stdcall
LoadImageA(
             HINSTANCE hInst,
         LPCSTR name,
         UINT type,
         int cx,
         int cy,
         UINT fuLoad);
__declspec(dllimport)
HANDLE
__stdcall
LoadImageW(
             HINSTANCE hInst,
         LPCWSTR name,
         UINT type,
         int cx,
         int cy,
         UINT fuLoad);






__declspec(dllimport)
HANDLE
__stdcall
CopyImage(
         HANDLE h,
         UINT type,
         int cx,
         int cy,
         UINT flags);
#line 9050 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport) BOOL __stdcall DrawIconEx(
         HDC hdc,
         int xLeft,
         int yTop,
         HICON hIcon,
         int cxWidth,
         int cyWidth,
         UINT istepIfAniCur,
             HBRUSH hbrFlickerFreeDraw,
         UINT diFlags);



__declspec(dllimport)
HICON
__stdcall
CreateIconIndirect(
         PICONINFO piconinfo);

__declspec(dllimport)
HICON
__stdcall
CopyIcon(
         HICON hIcon);

__declspec(dllimport)
BOOL
__stdcall
GetIconInfo(
         HICON hIcon,
          PICONINFO piconinfo);


typedef struct _ICONINFOEXA {
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    CHAR szModName[260];
    CHAR szResName[260];
} ICONINFOEXA, *PICONINFOEXA;
typedef struct _ICONINFOEXW {
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    WCHAR szModName[260];
    WCHAR szResName[260];
} ICONINFOEXW, *PICONINFOEXW;




typedef ICONINFOEXA ICONINFOEX;
typedef PICONINFOEXA PICONINFOEX;


__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExA(
         HICON hicon,
            PICONINFOEXA piconinfo);
__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExW(
         HICON hicon,
            PICONINFOEXW piconinfo);
#line 9266 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
int
__stdcall
LoadStringA(
             HINSTANCE hInstance,
         UINT uID,
                                                LPSTR lpBuffer,
         int cchBufferMax);
__declspec(dllimport)
int
__stdcall
LoadStringW(
             HINSTANCE hInstance,
         UINT uID,
                                                LPWSTR lpBuffer,
         int cchBufferMax);
#line 9611 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageA(
         HWND hDlg,
         LPMSG lpMsg);
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageW(
         HWND hDlg,
         LPMSG lpMsg);
#line 9631 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
MapDialogRect(
         HWND hDlg,
            LPRECT lpRect);

__declspec(dllimport)
int
__stdcall
DlgDirListA(
         HWND hDlg,
            LPSTR lpPathSpec,
         int nIDListBox,
         int nIDStaticPath,
         UINT uFileType);
__declspec(dllimport)
int
__stdcall
DlgDirListW(
         HWND hDlg,
            LPWSTR lpPathSpec,
         int nIDListBox,
         int nIDStaticPath,
         UINT uFileType);
#line 9676 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExA(
         HWND hwndDlg,
                          LPSTR lpString,
         int chCount,
         int idListBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExW(
         HWND hwndDlg,
                          LPWSTR lpString,
         int chCount,
         int idListBox);






__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxA(
         HWND hDlg,
            LPSTR lpPathSpec,
         int nIDComboBox,
         int nIDStaticPath,
         UINT uFiletype);
__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxW(
         HWND hDlg,
            LPWSTR lpPathSpec,
         int nIDComboBox,
         int nIDStaticPath,
         UINT uFiletype);






__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExA(
         HWND hwndDlg,
                         LPSTR lpString,
         int cchOut,
         int idComboBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExW(
         HWND hwndDlg,
                         LPWSTR lpString,
         int cchOut,
         int idComboBox);
#line 10086 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagSCROLLINFO
{
    UINT cbSize;
    UINT fMask;
    int nMin;
    int nMax;
    UINT nPage;
    int nPos;
    int nTrackPos;
} SCROLLINFO, *LPSCROLLINFO;
typedef SCROLLINFO const *LPCSCROLLINFO;

__declspec(dllimport)
int
__stdcall
SetScrollInfo(
         HWND hwnd,
         int nBar,
         LPCSCROLLINFO lpsi,
         BOOL redraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollInfo(
         HWND hwnd,
         int nBar,
            LPSCROLLINFO lpsi);
#line 10136 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagMDICREATESTRUCTA {
    LPCSTR szClass;
    LPCSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
    LPCWSTR szClass;
    LPCWSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;




typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;


typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcA(
         HWND hWnd,
             HWND hWndMDIClient,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcW(
         HWND hWnd,
             HWND hWndMDIClient,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)

LRESULT
__stdcall




DefMDIChildProcA(
         HWND hWnd,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefMDIChildProcW(
         HWND hWnd,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
#line 10229 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
TranslateMDISysAccel(
         HWND hWndClient,
         LPMSG lpMsg);



__declspec(dllimport)
UINT
__stdcall
ArrangeIconicWindows(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowA(
         LPCSTR lpClassName,
         LPCSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HINSTANCE hInstance,
         LPARAM lParam);
__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowW(
         LPCWSTR lpClassName,
         LPCWSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HINSTANCE hInstance,
         LPARAM lParam);







__declspec(dllimport)
WORD
__stdcall
TileWindows(
             HWND hwndParent,
         UINT wHow,
             const RECT * lpRect,
         UINT cKids,
                           const HWND * lpKids);

__declspec(dllimport)
WORD
__stdcall CascadeWindows(
             HWND hwndParent,
         UINT wHow,
             const RECT * lpRect,
         UINT cKids,
                           const HWND * lpKids);
#line 10307 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {

    DWORD mkSize;



    CHAR mkKeylist;
    CHAR szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {

    DWORD mkSize;



    WCHAR mkKeylist;
    WCHAR szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;





typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;


typedef struct tagHELPWININFOA {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    CHAR rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    WCHAR rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;





typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;
#line 10404 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
WinHelpA(
             HWND hWndMain,
             LPCSTR lpszHelp,
         UINT uCommand,
         ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
WinHelpW(
             HWND hWndMain,
             LPCWSTR lpszHelp,
         UINT uCommand,
         ULONG_PTR dwData);
#line 10443 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
DWORD
__stdcall
GetGuiResources(
         HANDLE hProcess,
         DWORD uiFlags);
#line 10738 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagNONCLIENTMETRICSA
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;

    int iPaddedBorderWidth;

} NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;

    int iPaddedBorderWidth;

} NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;





typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
#line 10806 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagMINIMIZEDMETRICS
{
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
} MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;



typedef struct tagICONMETRICSA
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
} ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
} ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;





typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;




typedef struct tagANIMATIONINFO
{
    UINT cbSize;
    int iMinAnimate;
} ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagSERIALKEYSA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszActivePort;
    LPSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszActivePort;
    LPWSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSW, *LPSERIALKEYSW;




typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;
#line 10885 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagHIGHCONTRASTA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszDefaultScheme;
} HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszDefaultScheme;
} HIGHCONTRASTW, *LPHIGHCONTRASTW;




typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
#line 10931 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\tvout.h"
#line 17 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\tvout.h"
typedef struct _VIDEOPARAMETERS {
    GUID Guid;
    ULONG dwOffset;
    ULONG dwCommand;
    ULONG dwFlags;
    ULONG dwMode;
    ULONG dwTVStandard;
    ULONG dwAvailableModes;
    ULONG dwAvailableTVStandard;
    ULONG dwFlickerFilter;
    ULONG dwOverScanX;
    ULONG dwOverScanY;
    ULONG dwMaxUnscaledX;
    ULONG dwMaxUnscaledY;
    ULONG dwPositionX;
    ULONG dwPositionY;
    ULONG dwBrightness;
    ULONG dwContrast;
    ULONG dwCPType;
    ULONG dwCPCommand;
    ULONG dwCPStandard;
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;
    UCHAR bOEMCopyProtection[256];
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;
#line 10931 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
#line 10948 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsA(
             DEVMODEA* lpDevMode,
         DWORD dwFlags);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsW(
             DEVMODEW* lpDevMode,
         DWORD dwFlags);






__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExA(
             LPCSTR lpszDeviceName,
             DEVMODEA* lpDevMode,
               HWND hwnd,
         DWORD dwflags,
             LPVOID lParam);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExW(
             LPCWSTR lpszDeviceName,
             DEVMODEW* lpDevMode,
               HWND hwnd,
         DWORD dwflags,
             LPVOID lParam);
#line 10993 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsA(
             LPCSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEA* lpDevMode);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsW(
             LPCWSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEW* lpDevMode);
#line 11015 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExA(
             LPCSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEA* lpDevMode,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExW(
             LPCWSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEW* lpDevMode,
         DWORD dwFlags);
#line 11041 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesA(
             LPCSTR lpDevice,
         DWORD iDevNum,
            PDISPLAY_DEVICEA lpDisplayDevice,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesW(
             LPCWSTR lpDevice,
         DWORD iDevNum,
            PDISPLAY_DEVICEW lpDisplayDevice,
         DWORD dwFlags);
#line 11070 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
LONG
__stdcall
GetDisplayConfigBufferSizes(
         UINT32 flags,
          UINT32* numPathArrayElements,
          UINT32* numModeInfoArrayElements);

__declspec(dllimport)
LONG
__stdcall
SetDisplayConfig(
         UINT32 numPathArrayElements,
                                          DISPLAYCONFIG_PATH_INFO* pathArray,
         UINT32 numModeInfoArrayElements,
                                              DISPLAYCONFIG_MODE_INFO* modeInfoArray,
         UINT32 flags);

__declspec(dllimport)
LONG
__stdcall
QueryDisplayConfig(
         UINT32 flags,
            UINT32* numPathArrayElements,
                                                                    DISPLAYCONFIG_PATH_INFO* pathArray,
            UINT32* numModeInfoArrayElements,
                                                                            DISPLAYCONFIG_MODE_INFO* modeInfoArray,
          DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigGetDeviceInfo(
            DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigSetDeviceInfo(
         DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);







__declspec(dllimport)
BOOL
__stdcall
SystemParametersInfoA(
         UINT uiAction,
         UINT uiParam,
                PVOID pvParam,
         UINT fWinIni);
__declspec(dllimport)
BOOL
__stdcall
SystemParametersInfoW(
         UINT uiAction,
         UINT uiParam,
                PVOID pvParam,
         UINT fWinIni);
#line 11145 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagFILTERKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;
    DWORD iDelayMSec;
    DWORD iRepeatMSec;
    DWORD iBounceMSec;
} FILTERKEYS, *LPFILTERKEYS;
#line 11166 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagSTICKYKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;
#line 11203 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;
#line 11233 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagACCESSTIMEOUT
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;
#line 11263 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;




typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
#line 11309 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SoundSentry(void);


typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;
#line 11332 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagAUDIODESCRIPTION {
    UINT cbSize;
    BOOL Enabled;
    LCID Locale;
} AUDIODESCRIPTION, *LPAUDIODESCRIPTION;







__declspec(dllimport)
void
__stdcall
SetDebugErrorLevel(
         DWORD dwLevel);
#line 11358 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
void
__stdcall
SetLastErrorEx(
         DWORD dwErrCode,
         DWORD dwType);

__declspec(dllimport)
int
__stdcall
InternalGetWindowText(
         HWND hWnd,
                                               LPWSTR pString,
         int cchMaxCount);
#line 11384 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
CancelShutdown(
    void);
#line 11401 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromPoint(
         POINT pt,
         DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromRect(
         LPCRECT lprc,
         DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromWindow(
         HWND hwnd,
         DWORD dwFlags);







typedef struct tagMONITORINFO
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
} MONITORINFO, *LPMONITORINFO;


typedef struct tagMONITORINFOEXA : public tagMONITORINFO
{
    CHAR szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW : public tagMONITORINFO
{
    WCHAR szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;




typedef MONITORINFOEXA MONITORINFOEX;
typedef LPMONITORINFOEXA LPMONITORINFOEX;
#line 11472 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoA(
         HMONITOR hMonitor,
            LPMONITORINFO lpmi);
__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoW(
         HMONITOR hMonitor,
            LPMONITORINFO lpmi);






typedef BOOL (__stdcall* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDisplayMonitors(
             HDC hdc,
             LPCRECT lprcClip,
         MONITORENUMPROC lpfnEnum,
         LPARAM dwData);
#line 11508 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
void
__stdcall
NotifyWinEvent(
         DWORD event,
         HWND hwnd,
         LONG idObject,
         LONG idChild);

typedef void (__stdcall* WINEVENTPROC)(
    HWINEVENTHOOK hWinEventHook,
    DWORD event,
    HWND hwnd,
    LONG idObject,
    LONG idChild,
    DWORD idEventThread,
    DWORD dwmsEventTime);

__declspec(dllimport)
HWINEVENTHOOK
__stdcall
SetWinEventHook(
         DWORD eventMin,
         DWORD eventMax,
             HMODULE hmodWinEventProc,
         WINEVENTPROC pfnWinEventProc,
         DWORD idProcess,
         DWORD idThread,
         DWORD dwFlags);


__declspec(dllimport)
BOOL
__stdcall
IsWinEventHookInstalled(
         DWORD event);
#line 11554 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
UnhookWinEvent(
         HWINEVENTHOOK hWinEventHook);
#line 12058 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagGUITHREADINFO
{
    DWORD cbSize;
    DWORD flags;
    HWND hwndActive;
    HWND hwndFocus;
    HWND hwndCapture;
    HWND hwndMenuOwner;
    HWND hwndMoveSize;
    HWND hwndCaret;
    RECT rcCaret;
} GUITHREADINFO, *PGUITHREADINFO, * LPGUITHREADINFO;
#line 12084 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetGUIThreadInfo(
         DWORD idThread,
            PGUITHREADINFO pgui);

__declspec(dllimport)
BOOL
__stdcall
BlockInput(
    BOOL fBlockIt);





__declspec(dllimport)
BOOL
__stdcall
SetProcessDPIAware(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsProcessDPIAware(
    void);


__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameA(
         HWND hwnd,
                                              LPSTR pszFileName,
         UINT cchFileNameMax);
__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameW(
         HWND hwnd,
                                              LPWSTR pszFileName,
         UINT cchFileNameMax);
#line 12175 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagCURSORINFO
{
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;



__declspec(dllimport)
BOOL
__stdcall
GetCursorInfo(
            PCURSORINFO pci);




typedef struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;



__declspec(dllimport)
BOOL
__stdcall
GetWindowInfo(
         HWND hwnd,
            PWINDOWINFO pwi);




typedef struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetTitleBarInfo(
         HWND hwnd,
            PTITLEBARINFO pti);


typedef struct tagTITLEBARINFOEX
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
    RECT rgrect[5 + 1];
} TITLEBARINFOEX, *PTITLEBARINFOEX, *LPTITLEBARINFOEX;





typedef struct tagMENUBARINFO
{
    DWORD cbSize;
    RECT rcBar;
    HMENU hMenu;
    HWND hwndMenu;
    BOOL fBarFocused:1;
    BOOL fFocused:1;
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuBarInfo(
         HWND hwnd,
         LONG idObject,
         LONG idItem,
            PMENUBARINFO pmbi);




typedef struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetScrollBarInfo(
         HWND hwnd,
         LONG idObject,
            PSCROLLBARINFO psbi);




typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

__declspec(dllimport)
BOOL
__stdcall
GetComboBoxInfo(
         HWND hwndCombo,
            PCOMBOBOXINFO pcbi);
#line 12316 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
GetAncestor(
         HWND hwnd,
         UINT gaFlags);
#line 12330 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
RealChildWindowFromPoint(
         HWND hwndParent,
         POINT ptParentClientCoords);






__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassA(
         HWND hwnd,
                                               LPSTR ptszClassName,
         UINT cchClassNameMax);




__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassW(
         HWND hwnd,
                                               LPWSTR ptszClassName,
         UINT cchClassNameMax);
#line 12369 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoA(
             HWND hwnd,
         int iItem,
            PALTTABINFO pati,
                                  LPSTR pszItemText,
         UINT cchItemText);
__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoW(
             HWND hwnd,
         int iItem,
            PALTTABINFO pati,
                                  LPWSTR pszItemText,
         UINT cchItemText);
#line 12410 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
DWORD
__stdcall
GetListBoxInfo(
         HWND hwnd);






__declspec(dllimport)
BOOL
__stdcall
LockWorkStation(
    void);




__declspec(dllimport)
BOOL
__stdcall
UserHandleGrantAccess(
         HANDLE hUserHandle,
         HANDLE hJob,
         BOOL bGrant);
#line 12446 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
struct HRAWINPUT__{int unused;}; typedef struct HRAWINPUT__ *HRAWINPUT;
#line 12474 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
} RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER;
#line 12491 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagRAWMOUSE {



    USHORT usFlags;




    union {
        ULONG ulButtons;
        struct {
            USHORT usButtonFlags;
            USHORT usButtonData;
        };
    };





    ULONG ulRawButtons;




    LONG lLastX;




    LONG lLastY;




    ULONG ulExtraInformation;

} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;
#line 12574 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagRAWKEYBOARD {



    USHORT MakeCode;





    USHORT Flags;

    USHORT Reserved;




    USHORT VKey;
    UINT Message;




    ULONG ExtraInformation;


} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;
#line 12623 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagRAWHID {
    DWORD dwSizeHid;
    DWORD dwCount;
    BYTE bRawData[1];
} RAWHID, *PRAWHID, *LPRAWHID;




typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
        RAWMOUSE mouse;
        RAWKEYBOARD keyboard;
        RAWHID hid;
    } data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;
#line 12656 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
GetRawInputData(
         HRAWINPUT hRawInput,
         UINT uiCommand,
                                            LPVOID pData,
            PUINT pcbSize,
         UINT cbSizeHeader);
#line 12673 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    BOOL fHasHorizontalWheel;
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE;

typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD;

typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;




    USHORT usUsagePage;
    USHORT usUsage;
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;

typedef struct tagRID_DEVICE_INFO {
    DWORD cbSize;
    DWORD dwType;
    union {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    };
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoA(
             HANDLE hDevice,
         UINT uiCommand,
                                                LPVOID pData,
            PUINT pcbSize);
__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoW(
             HANDLE hDevice,
         UINT uiCommand,
                                                LPVOID pData,
            PUINT pcbSize);
#line 12737 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
GetRawInputBuffer(
                               PRAWINPUT pData,
            PUINT pcbSize,
         UINT cbSizeHeader);




typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage;
    USHORT usUsage;
    DWORD dwFlags;
    HWND hwndTarget;
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;

typedef const RAWINPUTDEVICE* PCRAWINPUTDEVICE;
#line 12787 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
RegisterRawInputDevices(
                              PCRAWINPUTDEVICE pRawInputDevices,
         UINT uiNumDevices,
         UINT cbSize);

__declspec(dllimport)
UINT
__stdcall
GetRegisteredRawInputDevices(
                                      PRAWINPUTDEVICE pRawInputDevices,
            PUINT puiNumDevices,
         UINT cbSize);


typedef struct tagRAWINPUTDEVICELIST {
    HANDLE hDevice;
    DWORD dwType;
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceList(
                                     PRAWINPUTDEVICELIST pRawInputDeviceList,
            PUINT puiNumDevices,
         UINT cbSize);

__declspec(dllimport)
LRESULT
__stdcall
DefRawInputProc(
                        PRAWINPUT* paRawInput,
         INT nInput,
         UINT cbSizeHeader);
#line 12837 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilter(
         UINT message,
         DWORD dwFlag);
#line 12856 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagCHANGEFILTERSTRUCT {
    DWORD cbSize;
    DWORD ExtStatus;
} CHANGEFILTERSTRUCT, *PCHANGEFILTERSTRUCT;
#line 12868 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilterEx(
         HWND hwnd,
         UINT message,
         DWORD action,
                PCHANGEFILTERSTRUCT pChangeFilterStruct);
#line 12889 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
struct HGESTUREINFO__{int unused;}; typedef struct HGESTUREINFO__ *HGESTUREINFO;
#line 12919 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagGESTUREINFO {
    UINT cbSize;
    DWORD dwFlags;
    DWORD dwID;
    HWND hwndTarget;
    POINTS ptsLocation;
    DWORD dwInstanceID;
    DWORD dwSequenceID;
    ULONGLONG ullArguments;
    UINT cbExtraArgs;
} GESTUREINFO, *PGESTUREINFO;
typedef GESTUREINFO const * PCGESTUREINFO;
#line 12940 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagGESTURENOTIFYSTRUCT {
    UINT cbSize;
    DWORD dwFlags;
    HWND hwndTarget;
    POINTS ptsLocation;
    DWORD dwInstanceID;
} GESTURENOTIFYSTRUCT, *PGESTURENOTIFYSTRUCT;
#line 12960 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetGestureInfo(
         HGESTUREINFO hGestureInfo,
          PGESTUREINFO pGestureInfo);







__declspec(dllimport)
BOOL
__stdcall
GetGestureExtraArgs(
         HGESTUREINFO hGestureInfo,
         UINT cbExtraArgs,
                              PBYTE pExtraArgs);
#line 12991 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
CloseGestureInfoHandle(
         HGESTUREINFO hGestureInfo);
#line 13005 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
typedef struct tagGESTURECONFIG {
    DWORD dwID;
    DWORD dwWant;
    DWORD dwBlock;
} GESTURECONFIG, *PGESTURECONFIG;
#line 13053 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetGestureConfig(
         HWND hwnd,
         DWORD dwReserved,
         UINT cIDs,
                      PGESTURECONFIG pGestureConfig,

         UINT cbSize);





__declspec(dllimport)
BOOL
__stdcall
GetGestureConfig(
         HWND hwnd,
         DWORD dwReserved,
         DWORD dwFlags,
         PUINT pcIDs,

                           PGESTURECONFIG pGestureConfig,

         UINT cbSize);
#line 13102 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonCreate(
         HWND hWnd,
         LPCWSTR pwszReason);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonQuery(
         HWND hWnd,
                                LPWSTR pwszBuff,
            DWORD *pcchBuff);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonDestroy(
         HWND hWnd);
#line 13133 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winuser.h"
}
#line 158 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
#line 22 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
extern "C" {
#line 909 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
typedef DWORD LGRPID;





typedef DWORD LCTYPE;





typedef DWORD CALTYPE;





typedef DWORD CALID;






typedef struct _cpinfo {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
} CPINFO, *LPCPINFO;

typedef struct _cpinfoexA {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR CodePageName[260];
} CPINFOEXA, *LPCPINFOEXA;
typedef struct _cpinfoexW {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR CodePageName[260];
} CPINFOEXW, *LPCPINFOEXW;




typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;







typedef struct _numberfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTW, *LPNUMBERFMTW;




typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;







typedef struct _currencyfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
} CURRENCYFMTW, *LPCURRENCYFMTW;




typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;






enum SYSNLS_FUNCTION{
    COMPARE_STRING = 0x0001,
};
typedef DWORD NLS_FUNCTION;






typedef struct _nlsversioninfo{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
} NLSVERSIONINFO, *LPNLSVERSIONINFO;




typedef struct _nlsversioninfoex{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
} NLSVERSIONINFOEX, *LPNLSVERSIONINFOEX;





typedef LONG GEOID;
typedef DWORD GEOTYPE;
typedef DWORD GEOCLASS;







enum SYSGEOTYPE {
    GEO_NATION = 0x0001,
    GEO_LATITUDE = 0x0002,
    GEO_LONGITUDE = 0x0003,
    GEO_ISO2 = 0x0004,
    GEO_ISO3 = 0x0005,
    GEO_RFC1766 = 0x0006,
    GEO_LCID = 0x0007,
    GEO_FRIENDLYNAME= 0x0008,
    GEO_OFFICIALNAME= 0x0009,
    GEO_TIMEZONES = 0x000A,
    GEO_OFFICIALLANGUAGES = 0x000B,
};





enum SYSGEOCLASS {
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
};






typedef enum _NORM_FORM {
    NormalizationOther = 0,
    NormalizationC = 0x1,
    NormalizationD = 0x2,
    NormalizationKC = 0x5,

    NormalizationKD = 0x6

} NORM_FORM;
#line 1126 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);

typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* GEO_ENUMPROC)(GEOID);
#line 1209 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
typedef struct _FILEMUIINFO {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFileType;
    BYTE pChecksum[16];
    BYTE pServiceChecksum[16];
    DWORD dwLanguageNameOffset;
    DWORD dwTypeIDMainSize;
    DWORD dwTypeIDMainOffset;
    DWORD dwTypeNameMainOffset;
    DWORD dwTypeIDMUISize;
    DWORD dwTypeIDMUIOffset;
    DWORD dwTypeNameMUIOffset;
    BYTE abBuffer[8];
} FILEMUIINFO, *PFILEMUIINFO;
#line 1289 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
IsValidCodePage(
         UINT CodePage);

__declspec(dllimport)
UINT
__stdcall
GetACP(void);

__declspec(dllimport)
UINT
__stdcall
GetOEMCP(void);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfo(
         UINT CodePage,
          LPCPINFO lpCPInfo);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExA(
         UINT CodePage,
         DWORD dwFlags,
          LPCPINFOEXA lpCPInfoEx);
__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExW(
         UINT CodePage,
         DWORD dwFlags,
          LPCPINFOEXW lpCPInfoEx);






__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByte(
         BYTE TestChar);

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByteEx(
         UINT CodePage,
         BYTE TestChar);

__declspec(dllimport)
int
__stdcall
MultiByteToWideChar(
         UINT CodePage,
         DWORD dwFlags,
                             LPCSTR lpMultiByteStr,
         int cbMultiByte,
                                                             LPWSTR lpWideCharStr,
         int cchWideChar);

__declspec(dllimport)
int
__stdcall
WideCharToMultiByte(
         UINT CodePage,
         DWORD dwFlags,
                             LPCWSTR lpWideCharStr,
         int cchWideChar,
                                                            LPSTR lpMultiByteStr,
         int cbMultiByte,
             LPCSTR lpDefaultChar,
              LPBOOL lpUsedDefaultChar);







__declspec(dllimport)
int
__stdcall
CompareStringA(
         LCID Locale,
         DWORD dwCmpFlags,
                           PCNZCH lpString1,
         int cchCount1,
                           PCNZCH lpString2,
         int cchCount2);

__declspec(dllimport)
int
__stdcall
CompareStringW(
         LCID Locale,
         DWORD dwCmpFlags,
                           PCNZWCH lpString1,
         int cchCount1,
                           PCNZWCH lpString2,
         int cchCount2);
#line 1434 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
__declspec(dllimport)
int
__stdcall
FindNLSString(
                            LCID Locale,
                            DWORD dwFindNLSStringFlags,
                            LPCWSTR lpStringSource,
                            int cchSource,
                            LPCWSTR lpStringValue,
                            int cchValue,
                            LPINT pcchFound);





__declspec(dllimport)
int
__stdcall
FindStringOrdinal(
                            DWORD dwFindStringOrdinalFlags,
                            LPCWSTR lpStringSource,
                            int cchSource,
                            LPCWSTR lpStringValue,
                            int cchValue,
                            BOOL bIgnoreCase);




__declspec(dllimport)
int
__stdcall
LCMapStringA(
         LCID Locale,
         DWORD dwMapFlags,
                        LPCSTR lpSrcStr,
         int cchSrc,
                              LPSTR lpDestStr,
         int cchDest);

__declspec(dllimport)
int
__stdcall
LCMapStringW(
         LCID Locale,
         DWORD dwMapFlags,
                        LPCWSTR lpSrcStr,
         int cchSrc,
                              LPWSTR lpDestStr,
         int cchDest);







__declspec(dllimport)
int
__stdcall
GetLocaleInfoA(
         LCID Locale,
         LCTYPE LCType,
                              LPSTR lpLCData,
         int cchData);

__declspec(dllimport)
int
__stdcall
GetLocaleInfoW(
         LCID Locale,
         LCTYPE LCType,
                              LPWSTR lpLCData,
         int cchData);






__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoA(
         LCID Locale,
         LCTYPE LCType,
         LPCSTR lpLCData);
__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoW(
         LCID Locale,
         LCTYPE LCType,
         LPCWSTR lpLCData);
#line 1537 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
__declspec(dllimport)
int
__stdcall
GetCalendarInfoA(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
                              LPSTR lpCalData,
         int cchData,
              LPDWORD lpValue);

__declspec(dllimport)
int
__stdcall
GetCalendarInfoW(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
                              LPWSTR lpCalData,
         int cchData,
              LPDWORD lpValue);






__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoA(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
         LPCSTR lpCalData);
__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoW(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
         LPCWSTR lpCalData);
#line 1588 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
__declspec(dllimport)
int
__stdcall
LCIDToLocaleName(
         LCID Locale,
                              LPWSTR lpName,
         int cchName,
         DWORD dwFlags);

__declspec(dllimport)
LCID
__stdcall
LocaleNameToLCID(
         LPCWSTR lpName,
         DWORD dwFlags);




__declspec(dllimport)
int
__stdcall
GetTimeFormatA(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME *lpTime,
             LPCSTR lpFormat,
                              LPSTR lpTimeStr,
         int cchTime);

__declspec(dllimport)
int
__stdcall
GetTimeFormatW(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME *lpTime,
             LPCWSTR lpFormat,
                              LPWSTR lpTimeStr,
         int cchTime);
#line 1637 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
__declspec(dllimport)
int
__stdcall
GetDurationFormat(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME *lpDuration,
         ULONGLONG ullDuration,
             LPCWSTR lpFormat,
                                  LPWSTR lpDurationStr,
         int cchDuration);



__declspec(dllimport)
int
__stdcall
GetDateFormatA(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME *lpDate,
             LPCSTR lpFormat,
                              LPSTR lpDateStr,
         int cchDate);

__declspec(dllimport)
int
__stdcall
GetDateFormatW(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME *lpDate,
             LPCWSTR lpFormat,
                              LPWSTR lpDateStr,
         int cchDate);







__declspec(dllimport)
int
__stdcall
GetNumberFormatA(
         LCID Locale,
         DWORD dwFlags,
         LPCSTR lpValue,
             const NUMBERFMTA *lpFormat,
                                LPSTR lpNumberStr,
         int cchNumber);

__declspec(dllimport)
int
__stdcall
GetNumberFormatW(
         LCID Locale,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const NUMBERFMTW *lpFormat,
                                LPWSTR lpNumberStr,
         int cchNumber);







__declspec(dllimport)
int
__stdcall
GetCurrencyFormatA(
         LCID Locale,
         DWORD dwFlags,
         LPCSTR lpValue,
             const CURRENCYFMTA *lpFormat,
                                  LPSTR lpCurrencyStr,
         int cchCurrency);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatW(
         LCID Locale,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const CURRENCYFMTW *lpFormat,
                                  LPWSTR lpCurrencyStr,
         int cchCurrency);







__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoA(
         CALINFO_ENUMPROCA lpCalInfoEnumProc,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoW(
         CALINFO_ENUMPROCW lpCalInfoEnumProc,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);
#line 1760 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExA(
         CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExW(
         CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);
#line 1785 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsA(
         TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsW(
         TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);







__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsA(
         DATEFMT_ENUMPROCA lpDateFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsW(
         DATEFMT_ENUMPROCW lpDateFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);
#line 1830 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExA(
         DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
         LCID Locale,
         DWORD dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExW(
         DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
         LCID Locale,
         DWORD dwFlags);
#line 1853 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
IsValidLanguageGroup(
         LGRPID LanguageGroup,
         DWORD dwFlags);



__declspec(dllimport)
BOOL
__stdcall
GetNLSVersion(
            NLS_FUNCTION Function,
            LCID Locale,
            LPNLSVERSIONINFO lpVersionInformation);

__declspec(dllimport)
BOOL
__stdcall
IsNLSDefinedString(
         NLS_FUNCTION Function,
         DWORD dwFlags,
         LPNLSVERSIONINFO lpVersionInformation,
                        LPCWSTR lpString,
         INT cchStr);


__declspec(dllimport)
BOOL
__stdcall
IsValidLocale(
         LCID Locale,
         DWORD dwFlags);

__declspec(dllimport)
int
__stdcall
GetGeoInfoA(
         GEOID Location,
         GEOTYPE GeoType,
                              LPSTR lpGeoData,
         int cchData,
         LANGID LangId);
__declspec(dllimport)
int
__stdcall
GetGeoInfoW(
         GEOID Location,
         GEOTYPE GeoType,
                              LPWSTR lpGeoData,
         int cchData,
         LANGID LangId);






__declspec(dllimport)
BOOL
__stdcall
EnumSystemGeoID(
         GEOCLASS GeoClass,
         GEOID ParentGeoId,
         GEO_ENUMPROC lpGeoEnumProc);

__declspec(dllimport)
GEOID
__stdcall
GetUserGeoID(
         GEOCLASS GeoClass);

__declspec(dllimport)
BOOL
__stdcall
SetUserGeoID(
         GEOID GeoId);

__declspec(dllimport)
LCID
__stdcall
ConvertDefaultLocale(
         LCID Locale);

__declspec(dllimport)
LCID
__stdcall
GetThreadLocale(void);

__declspec(dllimport)
BOOL
__stdcall
SetThreadLocale(
         LCID Locale
    );


__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultUILanguage(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultUILanguage(void);


__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultLangID(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultLangID(void);

__declspec(dllimport)
LCID
__stdcall
GetSystemDefaultLCID(void);

__declspec(dllimport)
LCID
__stdcall
GetUserDefaultLCID(void);



__declspec(dllimport)
LANGID
__stdcall
SetThreadUILanguage( LANGID LangId);




__declspec(dllimport)
LANGID
__stdcall
GetThreadUILanguage(void);

__declspec(dllimport)
BOOL
__stdcall
GetProcessPreferredUILanguages(
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetProcessPreferredUILanguages(
                DWORD dwFlags,
                PCZZWSTR pwszLanguagesBuffer,
                PULONG pulNumLanguages
);


__declspec(dllimport)
BOOL
__stdcall
GetUserPreferredUILanguages (
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
GetSystemPreferredUILanguages (
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
GetThreadPreferredUILanguages(
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetThreadPreferredUILanguages(
                DWORD dwFlags,
                PCZZWSTR pwszLanguagesBuffer,
                PULONG pulNumLanguages
);

__declspec(dllimport)

BOOL
__stdcall
GetFileMUIInfo(
                        DWORD dwFlags,
                        PCWSTR pcwszFilePath,
                                                             PFILEMUIINFO pFileMUIInfo,
                        DWORD* pcbFileMUIInfo);

__declspec(dllimport)
BOOL
__stdcall
GetFileMUIPath(
         DWORD dwFlags,
         PCWSTR pcwszFilePath ,
                                            PWSTR pwszLanguage,
            PULONG pcchLanguage,
                                           PWSTR pwszFileMUIPath,
                    PULONG pcchFileMUIPath,
                    PULONGLONG pululEnumerator
);


__declspec(dllimport)
BOOL
__stdcall
GetUILanguageInfo(
         DWORD dwFlags,
         PCZZWSTR pwmszLanguage,
                                             PZZWSTR pwszFallbackLanguages,
                PDWORD pcchFallbackLanguages,
          PDWORD pAttributes
);


__declspec(dllimport)
BOOL
__stdcall
NotifyUILanguageChange(
                DWORD dwFlags,
                    PCWSTR pcwstrNewLanguage,
                PCWSTR pcwstrPreviousLanguage,
                DWORD dwReserved,
                PDWORD pdwStatusRtrn
);







__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExA(
                         LCID Locale,
                         DWORD dwInfoType,
                         LPCSTR lpSrcStr,
                         int cchSrc,
                         LPWORD lpCharType);
__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExW(
                         LCID Locale,
                         DWORD dwInfoType,
                         LPCWSTR lpSrcStr,
                         int cchSrc,
                         LPWORD lpCharType);
#line 2148 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
GetStringTypeA(
         LCID Locale,
         DWORD dwInfoType,
                        LPCSTR lpSrcStr,
         int cchSrc,
          LPWORD lpCharType);

__declspec(dllimport)
BOOL
__stdcall
GetStringTypeW(
         DWORD dwInfoType,
                         LPCWSTR lpSrcStr,
         int cchSrc,
          LPWORD lpCharType);


__declspec(dllimport)
int
__stdcall
FoldStringA(
         DWORD dwMapFlags,
                        LPCSTR lpSrcStr,
         int cchSrc,
                              LPSTR lpDestStr,
         int cchDest);
__declspec(dllimport)
int
__stdcall
FoldStringW(
         DWORD dwMapFlags,
                        LPCWSTR lpSrcStr,
         int cchSrc,
                              LPWSTR lpDestStr,
         int cchDest);







__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsA(
         LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsW(
         LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);






__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesA(
         LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
         LGRPID LanguageGroup,
         DWORD dwFlags,
         LONG_PTR lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesW(
         LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
         LGRPID LanguageGroup,
         DWORD dwFlags,
         LONG_PTR lParam);






__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesA(
         UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesW(
         UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);







__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesA(
         LOCALE_ENUMPROCA lpLocaleEnumProc,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesW(
         LOCALE_ENUMPROCW lpLocaleEnumProc,
         DWORD dwFlags);






__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesA(
         CODEPAGE_ENUMPROCA lpCodePageEnumProc,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesW(
         CODEPAGE_ENUMPROCW lpCodePageEnumProc,
         DWORD dwFlags);
#line 2298 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
__declspec(dllimport)
int
__stdcall NormalizeString( NORM_FORM NormForm,
                                                      LPCWSTR lpSrcString,
                                                      int cwSrcLength,
                                                      LPWSTR lpDstString,
                                                      int cwDstLength );

__declspec(dllimport)
BOOL
__stdcall IsNormalizedString( NORM_FORM NormForm,
                                                  LPCWSTR lpString,
                                                  int cwLength );




__declspec(dllimport)
int
__stdcall IdnToAscii( DWORD dwFlags,
                                                LPCWSTR lpUnicodeCharStr,
                                                int cchUnicodeChar,
                                                 LPWSTR lpASCIICharStr,
                                                int cchASCIIChar);

__declspec(dllimport)
int
__stdcall IdnToNameprepUnicode( DWORD dwFlags,
                                                             LPCWSTR lpUnicodeCharStr,
                                                             int cchUnicodeChar,
                                                                LPWSTR lpNameprepCharStr,
                                                             int cchNameprepChar);

__declspec(dllimport)
int
__stdcall IdnToUnicode( DWORD dwFlags,
                                                   LPCWSTR lpASCIICharStr,
                                                   int cchASCIIChar,
                                                     LPWSTR lpUnicodeCharStr,
                                                   int cchUnicodeChar);

__declspec(dllimport)
BOOL
__stdcall VerifyScripts(
            DWORD dwFlags,
            LPCWSTR lpLocaleScripts,
            int cchLocaleScripts,
            LPCWSTR lpTestScripts,
            int cchTestScripts);

__declspec(dllimport)
int
__stdcall GetStringScripts(
                                     DWORD dwFlags,
                                     LPCWSTR lpString,
                                     int cchString,
                                     LPWSTR lpScripts,
                                     int cchScripts);
#line 2368 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnls.h"
__declspec(dllimport)
int
__stdcall
GetLocaleInfoEx(
             LPCWSTR lpLocaleName,
         LCTYPE LCType,
                              LPWSTR lpLCData,
         int cchData
);

__declspec(dllimport)
int
__stdcall
GetCalendarInfoEx(
             LPCWSTR lpLocaleName,
         CALID Calendar,
             LPCWSTR lpReserved,
         CALTYPE CalType,
                              LPWSTR lpCalData,
         int cchData,
              LPDWORD lpValue
);


__declspec(dllimport)
int
__stdcall
GetTimeFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME *lpTime,
             LPCWSTR lpFormat,
                              LPWSTR lpTimeStr,
         int cchTime
);

__declspec(dllimport)
int
__stdcall
GetDateFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME *lpDate,
             LPCWSTR lpFormat,
                              LPWSTR lpDateStr,
         int cchDate,
             LPCWSTR lpCalendar
);

__declspec(dllimport)
int
__stdcall
GetDurationFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME *lpDuration,
         ULONGLONG ullDuration,
             LPCWSTR lpFormat,
                                  LPWSTR lpDurationStr,
         int cchDuration
);

__declspec(dllimport)
int
__stdcall
GetNumberFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const NUMBERFMTW *lpFormat,
                                LPWSTR lpNumberStr,
         int cchNumber
);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const CURRENCYFMTW *lpFormat,
                                  LPWSTR lpCurrencyStr,
         int cchCurrency
);

__declspec(dllimport)
int
__stdcall
GetUserDefaultLocaleName(
                                LPWSTR lpLocaleName,
         int cchLocaleName
);

__declspec(dllimport)
int
__stdcall
GetSystemDefaultLocaleName(
                                LPWSTR lpLocaleName,
         int cchLocaleName
);

__declspec(dllimport)
BOOL
__stdcall
GetNLSVersionEx(
            NLS_FUNCTION function,
                LPCWSTR lpLocaleName,
            LPNLSVERSIONINFOEX lpVersionInformation
);

__declspec(dllimport)
int
__stdcall
CompareStringEx(
             LPCWSTR lpLocaleName,
         DWORD dwCmpFlags,
                           LPCWSTR lpString1,
         int cchCount1,
                           LPCWSTR lpString2,
         int cchCount2,
             LPNLSVERSIONINFO lpVersionInformation,
             LPVOID lpReserved,
             LPARAM lParam
);

__declspec(dllimport)
int
__stdcall
FindNLSStringEx(
             LPCWSTR lpLocaleName,
         DWORD dwFindNLSStringFlags,
                           LPCWSTR lpStringSource,
         int cchSource,
                          LPCWSTR lpStringValue,
         int cchValue,
              LPINT pcchFound,
             LPNLSVERSIONINFO lpVersionInformation,
             LPVOID lpReserved,
             LPARAM lParam
);


__declspec(dllimport)
int
__stdcall
LCMapStringEx(
             LPCWSTR lpLocaleName,
         DWORD dwMapFlags,
                        LPCWSTR lpSrcStr,
         int cchSrc,
                              LPWSTR lpDestStr,
         int cchDest,
             LPNLSVERSIONINFO lpVersionInformation,
             LPVOID lpReserved,
             LPARAM lParam
);

__declspec(dllimport)
int
__stdcall
CompareStringOrdinal(
         LPCWSTR lpString1,
         int cchCount1,
         LPCWSTR lpString2,
         int cchCount2,
         BOOL bIgnoreCase
);

__declspec(dllimport)
BOOL
__stdcall
IsValidLocaleName(
         LPCWSTR lpLocaleName
);

typedef BOOL (__stdcall* CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExEx(
         CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,
             LPCWSTR lpLocaleName,
         CALID Calendar,
             LPCWSTR lpReserved,
         CALTYPE CalType,
         LPARAM lParam
);

typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExEx(
         DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPARAM lParam
);

typedef BOOL (__stdcall* TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsEx(
         TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPARAM lParam
);

typedef BOOL (__stdcall* LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesEx(
         LOCALE_ENUMPROCEX lpLocaleEnumProcEx,
         DWORD dwFlags,
         LPARAM lParam,
             LPVOID lpReserved
);





__declspec(dllimport)
int
__stdcall
ResolveLocaleName(
                                    LPCWSTR lpNameToResolve,
                                    LPWSTR lpLocaleName,
                                    int cchLocaleName
);







}
#line 160 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"



#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincon.h"
#line 28 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincon.h"
extern "C" {






typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;

typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;

typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;
#line 80 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincon.h"
typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;
#line 108 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincon.h"
typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;
#line 141 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincon.h"
typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;
#line 172 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincon.h"
typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;

typedef struct _CONSOLE_CURSOR_INFO {
    DWORD dwSize;
    BOOL bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;

typedef struct _CONSOLE_FONT_INFO {
    DWORD nFont;
    COORD dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;


typedef struct _CONSOLE_FONT_INFOEX {
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;




typedef struct _CONSOLE_HISTORY_INFO {
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;


typedef struct _CONSOLE_SELECTION_INFO {
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO;
#line 244 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincon.h"
typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
         DWORD CtrlType
    );
#line 283 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincon.h"
__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputA(
         HANDLE hConsoleInput,
                          PINPUT_RECORD lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsRead
    );
__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputW(
         HANDLE hConsoleInput,
                          PINPUT_RECORD lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsRead
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleInputA(
         HANDLE hConsoleInput,
                          PINPUT_RECORD lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleInputW(
         HANDLE hConsoleInput,
                          PINPUT_RECORD lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsRead
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputA(
         HANDLE hConsoleInput,
                         const INPUT_RECORD *lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputW(
         HANDLE hConsoleInput,
                         const INPUT_RECORD *lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputA(
         HANDLE hConsoleOutput,
                                                  PCHAR_INFO lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpReadRegion
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputW(
         HANDLE hConsoleOutput,
                                                  PCHAR_INFO lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpReadRegion
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputA(
         HANDLE hConsoleOutput,
                                                 const CHAR_INFO *lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpWriteRegion
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputW(
         HANDLE hConsoleOutput,
                                                 const CHAR_INFO *lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpWriteRegion
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
                          LPSTR lpCharacter,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfCharsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
                          LPWSTR lpCharacter,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfCharsRead
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputAttribute(
         HANDLE hConsoleOutput,
                          LPWORD lpAttribute,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfAttrsRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
                         LPCSTR lpCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
                         LPCWSTR lpCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputAttribute(
         HANDLE hConsoleOutput,
                         const WORD *lpAttribute,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
         CHAR cCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
         WCHAR cCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputAttribute(
         HANDLE hConsoleOutput,
         WORD wAttribute,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleMode(
         HANDLE hConsoleHandle,
          LPDWORD lpMode
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleInputEvents(
         HANDLE hConsoleInput,
          LPDWORD lpNumberOfEvents
    );




__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfo(
         HANDLE hConsoleOutput,
          PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfoEx(
         HANDLE hConsoleOutput,
                                                                                             PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferInfoEx(
         HANDLE hConsoleOutput,
         PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

__declspec(dllimport)
COORD
__stdcall
GetLargestConsoleWindowSize(
         HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleCursorInfo(
         HANDLE hConsoleOutput,
          PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );



__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFont(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
          PCONSOLE_FONT_INFO lpConsoleCurrentFont
    );


__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFontEx(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
          PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);

__declspec(dllimport)
BOOL
__stdcall
SetCurrentConsoleFontEx(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
         PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);


__declspec(dllimport)
BOOL
__stdcall
GetConsoleHistoryInfo(
          PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleHistoryInfo(
         PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

__declspec(dllimport)
COORD
__stdcall
GetConsoleFontSize(
         HANDLE hConsoleOutput,
         DWORD nFont
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleSelectionInfo(
          PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
          LPDWORD lpNumberOfMouseButtons
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleMode(
         HANDLE hConsoleHandle,
         DWORD dwMode
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleActiveScreenBuffer(
         HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
FlushConsoleInputBuffer(
         HANDLE hConsoleInput
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferSize(
         HANDLE hConsoleOutput,
         COORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorPosition(
         HANDLE hConsoleOutput,
         COORD dwCursorPosition
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorInfo(
         HANDLE hConsoleOutput,
         const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferA(
         HANDLE hConsoleOutput,
         const SMALL_RECT *lpScrollRectangle,
             const SMALL_RECT *lpClipRectangle,
         COORD dwDestinationOrigin,
         const CHAR_INFO *lpFill
    );
__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferW(
         HANDLE hConsoleOutput,
         const SMALL_RECT *lpScrollRectangle,
             const SMALL_RECT *lpClipRectangle,
         COORD dwDestinationOrigin,
         const CHAR_INFO *lpFill
    );






__declspec(dllimport)
BOOL
__stdcall
SetConsoleWindowInfo(
         HANDLE hConsoleOutput,
         BOOL bAbsolute,
         const SMALL_RECT *lpConsoleWindow
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTextAttribute(
         HANDLE hConsoleOutput,
         WORD wAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCtrlHandler(
             PHANDLER_ROUTINE HandlerRoutine,
         BOOL Add);

__declspec(dllimport)
BOOL
__stdcall
GenerateConsoleCtrlEvent(
         DWORD dwCtrlEvent,
         DWORD dwProcessGroupId);

__declspec(dllimport)
BOOL
__stdcall
AllocConsole(
    void);

__declspec(dllimport)
BOOL
__stdcall
FreeConsole(
    void);


__declspec(dllimport)
BOOL
__stdcall
AttachConsole(
         DWORD dwProcessId);





__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleA(
                        LPSTR lpConsoleTitle,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleW(
                        LPWSTR lpConsoleTitle,
         DWORD nSize
    );







__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleA(
                        LPSTR lpConsoleTitle,
         DWORD nSize);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleW(
                        LPWSTR lpConsoleTitle,
         DWORD nSize);







__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleA(
         LPCSTR lpConsoleTitle
    );
__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleW(
         LPCWSTR lpConsoleTitle
    );






typedef struct _CONSOLE_READCONSOLE_CONTROL {
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleA(
         HANDLE hConsoleInput,

       LPVOID lpBuffer,
         DWORD nNumberOfCharsToRead,
          LPDWORD lpNumberOfCharsRead,
             PCONSOLE_READCONSOLE_CONTROL pInputControl
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleW(
         HANDLE hConsoleInput,

       LPVOID lpBuffer,
         DWORD nNumberOfCharsToRead,
          LPDWORD lpNumberOfCharsRead,
             PCONSOLE_READCONSOLE_CONTROL pInputControl
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleA(
         HANDLE hConsoleOutput,
                                       const void *lpBuffer,
         DWORD nNumberOfCharsToWrite,
              LPDWORD lpNumberOfCharsWritten,
               LPVOID lpReserved);
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleW(
         HANDLE hConsoleOutput,
                                       const void *lpBuffer,
         DWORD nNumberOfCharsToWrite,
              LPDWORD lpNumberOfCharsWritten,
               LPVOID lpReserved);
#line 885 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincon.h"
__declspec(dllimport)
HANDLE
__stdcall
CreateConsoleScreenBuffer(
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
             const SECURITY_ATTRIBUTES *lpSecurityAttributes,
         DWORD dwFlags,
               LPVOID lpScreenBufferData
    );

__declspec(dllimport)
UINT
__stdcall
GetConsoleCP(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCP(
         UINT wCodePageID
    );

__declspec(dllimport)
UINT
__stdcall
GetConsoleOutputCP(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleOutputCP(
         UINT wCodePageID
    );






__declspec(dllimport)
BOOL
__stdcall
GetConsoleDisplayMode(
          LPDWORD lpModeFlags);




BOOL
__stdcall
SetConsoleDisplayMode(
         HANDLE hConsoleOutput,
         DWORD dwFlags,
              PCOORD lpNewScreenBufferDimensions);

__declspec(dllimport)
HWND
__stdcall
GetConsoleWindow(
    void
    );





__declspec(dllimport)
DWORD
__stdcall
GetConsoleProcessList(
                                 LPDWORD lpdwProcessList,
         DWORD dwProcessCount);





__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasA(
         LPSTR Source,
         LPSTR Target,
         LPSTR ExeName);
__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasW(
         LPWSTR Source,
         LPWSTR Target,
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasA(
         LPSTR Source,
                                     LPSTR TargetBuffer,
         DWORD TargetBufferLength,
         LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasW(
         LPWSTR Source,
                                     LPWSTR TargetBuffer,
         DWORD TargetBufferLength,
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthA(
         LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthW(
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthA(
    void);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthW(
    void);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesA(
                                    LPSTR AliasBuffer,
         DWORD AliasBufferLength,
         LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesW(
                                    LPWSTR AliasBuffer,
         DWORD AliasBufferLength,
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesA(
                                      LPSTR ExeNameBuffer,
         DWORD ExeNameBufferLength);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesW(
                                      LPWSTR ExeNameBuffer,
         DWORD ExeNameBufferLength);
#line 1080 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincon.h"
}
#line 163 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winver.h"
#line 18 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winver.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\verrsrc.h"
#line 122 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\verrsrc.h"
extern "C" {
#line 136 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\verrsrc.h"
typedef struct tagVS_FIXEDFILEINFO
{
    DWORD dwSignature;
    DWORD dwStrucVersion;
    DWORD dwFileVersionMS;
    DWORD dwFileVersionLS;
    DWORD dwProductVersionMS;
    DWORD dwProductVersionLS;
    DWORD dwFileFlagsMask;
    DWORD dwFileFlags;
    DWORD dwFileOS;
    DWORD dwFileType;
    DWORD dwFileSubtype;
    DWORD dwFileDateMS;
    DWORD dwFileDateLS;
} VS_FIXEDFILEINFO;


}
#line 18 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winver.h"




extern "C" {







DWORD
__stdcall
VerFindFileA(
                                     DWORD uFlags,
                                     LPCSTR szFileName,
                                     LPCSTR szWinDir,
                                     LPCSTR szAppDir,
                                     LPSTR szCurDir,
                                     PUINT lpuCurDirLen,
                                     LPSTR szDestDir,
                                     PUINT lpuDestDirLen
        );
DWORD
__stdcall
VerFindFileW(
                                     DWORD uFlags,
                                     LPCWSTR szFileName,
                                     LPCWSTR szWinDir,
                                     LPCWSTR szAppDir,
                                     LPWSTR szCurDir,
                                     PUINT lpuCurDirLen,
                                     LPWSTR szDestDir,
                                     PUINT lpuDestDirLen
        );






DWORD
__stdcall
VerInstallFileA(
                                     DWORD uFlags,
                                     LPCSTR szSrcFileName,
                                     LPCSTR szDestFileName,
                                     LPCSTR szSrcDir,
                                     LPCSTR szDestDir,
                                     LPCSTR szCurDir,
                                     LPSTR szTmpFile,
                                     PUINT lpuTmpFileLen
        );
DWORD
__stdcall
VerInstallFileW(
                                     DWORD uFlags,
                                     LPCWSTR szSrcFileName,
                                     LPCWSTR szDestFileName,
                                     LPCWSTR szSrcDir,
                                     LPCWSTR szDestDir,
                                     LPCWSTR szCurDir,
                                     LPWSTR szTmpFile,
                                     PUINT lpuTmpFileLen
        );







DWORD
__stdcall
GetFileVersionInfoSizeA(
                    LPCSTR lptstrFilename,
                  LPDWORD lpdwHandle
        );

DWORD
__stdcall
GetFileVersionInfoSizeW(
                    LPCWSTR lptstrFilename,
                  LPDWORD lpdwHandle
        );







BOOL
__stdcall
GetFileVersionInfoA(
                            LPCSTR lptstrFilename,
                            DWORD dwHandle,
                            DWORD dwLen,
                            LPVOID lpData
        );

BOOL
__stdcall
GetFileVersionInfoW(
                            LPCWSTR lptstrFilename,
                            DWORD dwHandle,
                            DWORD dwLen,
                            LPVOID lpData
        );






DWORD __stdcall GetFileVersionInfoSizeExA( DWORD dwFlags, LPCSTR lpwstrFilename, LPDWORD lpdwHandle);
DWORD __stdcall GetFileVersionInfoSizeExW( DWORD dwFlags, LPCWSTR lpwstrFilename, LPDWORD lpdwHandle);






BOOL __stdcall GetFileVersionInfoExA( DWORD dwFlags,
                                         LPCSTR lpwstrFilename,
                                               DWORD dwHandle,
                                         DWORD dwLen,
                                                        LPVOID lpData);
BOOL __stdcall GetFileVersionInfoExW( DWORD dwFlags,
                                         LPCWSTR lpwstrFilename,
                                               DWORD dwHandle,
                                         DWORD dwLen,
                                                        LPVOID lpData);







DWORD
__stdcall
VerLanguageNameA(
                              DWORD wLang,
                              LPSTR szLang,
                              DWORD cchLang
        );
DWORD
__stdcall
VerLanguageNameW(
                              DWORD wLang,
                              LPWSTR szLang,
                              DWORD cchLang
        );






BOOL
__stdcall
VerQueryValueA(
             LPCVOID pBlock,
             LPCSTR lpSubBlock,
                                                            LPVOID * lplpBuffer,
              PUINT puLen
        );
BOOL
__stdcall
VerQueryValueW(
             LPCVOID pBlock,
             LPCWSTR lpSubBlock,
                                                            LPVOID * lplpBuffer,
              PUINT puLen
        );
#line 205 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winver.h"
}
#line 164 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"



#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winreg.h"
#line 25 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winreg.h"
extern "C" {
#line 65 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winreg.h"
typedef ACCESS_MASK REGSAM;
#line 94 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winreg.h"
struct val_context {
    int valuelen;
    LPVOID value_context;
    LPVOID val_buff_ptr;
};

typedef struct val_context *PVALCONTEXT;

typedef struct pvalueA {
    LPSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA, *PPVALUEA;
typedef struct pvalueW {
    LPWSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW, *PPVALUEW;




typedef PVALUEA PVALUE;
typedef PPVALUEA PPVALUE;


typedef
DWORD __cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD *total_outlen, DWORD input_blen);

typedef QUERYHANDLER *PQUERYHANDLER;

typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;
    LPVOID pi_key_context;
}REG_PROVIDER;

typedef struct provider_info *PPROVIDER;

typedef struct value_entA {
    LPSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTA, *PVALENTA;
typedef struct value_entW {
    LPWSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTW, *PVALENTW;




typedef VALENTA VALENT;
typedef PVALENTA PVALENT;
#line 176 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winreg.h"
typedef LONG LSTATUS;

__declspec(dllimport)
LSTATUS
__stdcall
RegCloseKey (
         HKEY hKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOverridePredefKey (
         HKEY hKey,
             HKEY hNewHKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenUserClassesRoot(
         HANDLE hToken,
               DWORD dwOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenCurrentUser(
         REGSAM samDesired,
          PHKEY phkResult
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCache(
    void
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCacheEx(
    void
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryA (
             LPCSTR lpMachineName,
         HKEY hKey,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryW (
             LPCWSTR lpMachineName,
         HKEY hKey,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExA (
             LPCSTR lpMachineName,
         HKEY hKey,
         ULONG Flags,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExW (
             LPCWSTR lpMachineName,
         HKEY hKey,
         ULONG Flags,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExA (
         HKEY hKey,
         LPCSTR lpSubKey,
               DWORD Reserved,
             LPSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExW (
         HKEY hKey,
         LPCWSTR lpSubKey,
               DWORD Reserved,
             LPWSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedA (
         HKEY hKey,
         LPCSTR lpSubKey,
               DWORD Reserved,
             LPSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedW (
         HKEY hKey,
         LPCWSTR lpSubKey,
               DWORD Reserved,
             LPWSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyA (
         HKEY hKey,
         LPCSTR lpSubKey
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyW (
         HKEY hKey,
         LPCWSTR lpSubKey
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExA (
         HKEY hKey,
         LPCSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExW (
         HKEY hKey,
         LPCWSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedA (
         HKEY hKey,
         LPCSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved,
                HANDLE hTransaction,
               PVOID pExtendedParameter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedW (
         HKEY hKey,
         LPCWSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved,
                HANDLE hTransaction,
               PVOID pExtendedParameter
    );






__declspec(dllimport)
LONG
__stdcall
RegDisableReflectionKey (
         HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegEnableReflectionKey (
         HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegQueryReflectionKey (
         HKEY hBase,
          BOOL *bIsReflectionDisabled
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueA (
         HKEY hKey,
             LPCSTR lpValueName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueW (
         HKEY hKey,
             LPCWSTR lpValueName
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyA (
         HKEY hKey,
         DWORD dwIndex,
                                               LPSTR lpName,
         DWORD cchName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyW (
         HKEY hKey,
         DWORD dwIndex,
                                               LPWSTR lpName,
         DWORD cchName
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExA (
         HKEY hKey,
         DWORD dwIndex,
                                                      LPSTR lpName,
            LPDWORD lpcchName,
               LPDWORD lpReserved,
                                                       LPSTR lpClass,
                LPDWORD lpcchClass,
              PFILETIME lpftLastWriteTime
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExW (
         HKEY hKey,
         DWORD dwIndex,
                                                      LPWSTR lpName,
            LPDWORD lpcchName,
               LPDWORD lpReserved,
                                                       LPWSTR lpClass,
                LPDWORD lpcchClass,
              PFILETIME lpftLastWriteTime
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueA (
         HKEY hKey,
         DWORD dwIndex,
                                                                LPSTR lpValueName,
            LPDWORD lpcchValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                            LPBYTE lpData,
                LPDWORD lpcbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueW (
         HKEY hKey,
         DWORD dwIndex,
                                                                LPWSTR lpValueName,
            LPDWORD lpcchValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                            LPBYTE lpData,
                LPDWORD lpcbData
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegFlushKey (
         HKEY hKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegGetKeySecurity (
         HKEY hKey,
         SECURITY_INFORMATION SecurityInformation,
                                              PSECURITY_DESCRIPTOR pSecurityDescriptor,
            LPDWORD lpcbSecurityDescriptor
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
         LPCSTR lpFile
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
         LPCWSTR lpFile
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegNotifyChangeKeyValue (
         HKEY hKey,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter,
             HANDLE hEvent,
         BOOL fAsynchronous
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExA (
         HKEY hKey,
             LPCSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExW (
         HKEY hKey,
             LPCWSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedA (
         HKEY hKey,
             LPCSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedW (
         HKEY hKey,
             LPCWSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyA (
         HKEY hKey,
                                                        LPSTR lpClass,
                LPDWORD lpcchClass,
               LPDWORD lpReserved,
              LPDWORD lpcSubKeys,
              LPDWORD lpcbMaxSubKeyLen,
              LPDWORD lpcbMaxClassLen,
              LPDWORD lpcValues,
              LPDWORD lpcbMaxValueNameLen,
              LPDWORD lpcbMaxValueLen,
              LPDWORD lpcbSecurityDescriptor,
              PFILETIME lpftLastWriteTime
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyW (
         HKEY hKey,
                                                        LPWSTR lpClass,
                LPDWORD lpcchClass,
               LPDWORD lpReserved,
              LPDWORD lpcSubKeys,
              LPDWORD lpcbMaxSubKeyLen,
              LPDWORD lpcbMaxClassLen,
              LPDWORD lpcValues,
              LPDWORD lpcbMaxValueNameLen,
              LPDWORD lpcbMaxValueLen,
              LPDWORD lpcbSecurityDescriptor,
              PFILETIME lpftLastWriteTime
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueA (
         HKEY hKey,
             LPCSTR lpSubKey,
                                                                            LPSTR lpData,
                PLONG lpcbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueW (
         HKEY hKey,
             LPCWSTR lpSubKey,
                                                                            LPWSTR lpData,
                PLONG lpcbData
    );
#line 761 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winreg.h"
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesA (
         HKEY hKey,
                           PVALENTA val_list,
         DWORD num_vals,
                                                                                LPSTR lpValueBuf,
                LPDWORD ldwTotsize
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesW (
         HKEY hKey,
                           PVALENTW val_list,
         DWORD num_vals,
                                                                                LPWSTR lpValueBuf,
                LPDWORD ldwTotsize
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExA (
         HKEY hKey,
             LPCSTR lpValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                            LPBYTE lpData,
                LPDWORD lpcbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExW (
         HKEY hKey,
             LPCWSTR lpValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                            LPBYTE lpData,
                LPDWORD lpcbData
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
         LPCSTR lpNewFile,
         LPCSTR lpOldFile
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
         LPCWSTR lpNewFile,
         LPCWSTR lpOldFile
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyA (
         HKEY hKey,
         LPCSTR lpFile,
         DWORD dwFlags
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyW (
         HKEY hKey,
         LPCWSTR lpFile,
         DWORD dwFlags
    );
#line 864 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winreg.h"
__declspec(dllimport)
LSTATUS
__stdcall
RegRenameKey(
         HKEY hKey,
             LPCWSTR lpSubKeyName,
         LPCWSTR lpNewKeyName
    );



__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyA (
         HKEY hKey,
         LPCSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyW (
         HKEY hKey,
         LPCWSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeySecurity (
         HKEY hKey,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueA (
         HKEY hKey,
             LPCSTR lpSubKey,
         DWORD dwType,
                            LPCSTR lpData,
         DWORD cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueW (
         HKEY hKey,
             LPCWSTR lpSubKey,
         DWORD dwType,
                            LPCWSTR lpData,
         DWORD cbData
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExA (
         HKEY hKey,
             LPCSTR lpValueName,
               DWORD Reserved,
         DWORD dwType,
                            const BYTE* lpData,
         DWORD cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExW (
         HKEY hKey,
             LPCWSTR lpValueName,
               DWORD Reserved,
         DWORD dwType,
                            const BYTE* lpData,
         DWORD cbData
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyA (
         HKEY hKey,
             LPCSTR lpSubKey
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey
    );
#line 986 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winreg.h"
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueA (
              HKEY hKey,
              LPCSTR lpSubKey,
              LPCSTR lpValueName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueW (
              HKEY hKey,
              LPCWSTR lpSubKey,
              LPCWSTR lpValueName
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueA (
                HKEY hKey,
                LPCSTR lpSubKey,
                LPCSTR lpValueName,
                DWORD dwType,
                            LPCVOID lpData,
                DWORD cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueW (
                HKEY hKey,
                LPCWSTR lpSubKey,
                LPCWSTR lpValueName,
                DWORD dwType,
                            LPCVOID lpData,
                DWORD cbData
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeA (
                HKEY hKey,
                LPCSTR lpSubKey
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeW (
                HKEY hKey,
                LPCWSTR lpSubKey
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeA (
                HKEY hKeySrc,
                LPCSTR lpSubKey,
                HKEY hKeyDest
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeW (
                HKEY hKeySrc,
                LPCWSTR lpSubKey,
                HKEY hKeyDest
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueA (
         HKEY hkey,
             LPCSTR lpSubKey,
             LPCSTR lpValue,
             DWORD dwFlags,
              LPDWORD pdwType,
                                             PVOID pvData,
                LPDWORD pcbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueW (
         HKEY hkey,
             LPCWSTR lpSubKey,
             LPCWSTR lpValue,
             DWORD dwFlags,
              LPDWORD pdwType,
                                             PVOID pvData,
                LPDWORD pcbData
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringA (
                                            HKEY hKey,
                                            LPCSTR pszValue,
                                                LPSTR pszOutBuf,
                                            DWORD cbOutBuf,
                                            LPDWORD pcbData,
                                            DWORD Flags,
                                            LPCSTR pszDirectory
                    );
__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringW (
                                            HKEY hKey,
                                            LPCWSTR pszValue,
                                                LPWSTR pszOutBuf,
                                            DWORD cbOutBuf,
                                            LPDWORD pcbData,
                                            DWORD Flags,
                                            LPCWSTR pszDirectory
                    );







__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyA (
                    LPCSTR lpFile,
                    PHKEY phkResult,
                    REGSAM samDesired,
                    DWORD dwOptions,
                    DWORD Reserved
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyW (
                    LPCWSTR lpFile,
                    PHKEY phkResult,
                    REGSAM samDesired,
                    DWORD dwOptions,
                    DWORD Reserved
    );
#line 1172 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winreg.h"
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown
    );

__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown
    );







__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownA(
             LPSTR lpMachineName
    );
__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownW(
             LPWSTR lpMachineName
    );
#line 1222 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winreg.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\reason.h"
#line 1222 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winreg.h"
#line 1244 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winreg.h"
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown,
         DWORD dwReason
    );



__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown,
         DWORD dwReason
    );
#line 1290 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winreg.h"
__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
             DWORD dwGracePeriod,
             DWORD dwShutdownFlags,
             DWORD dwReason
    );
__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
             DWORD dwGracePeriod,
             DWORD dwShutdownFlags,
             DWORD dwReason
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExA (
         HKEY hKey,
         LPCSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD Flags
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExW (
         HKEY hKey,
         LPCWSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD Flags
    );







}
#line 167 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"



#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
#line 30 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
extern "C" {








#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wnnc.h"
#line 38 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
#line 87 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
typedef struct _NETRESOURCEA {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    LPSTR lpComment ;
    LPSTR lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct _NETRESOURCEW {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    LPWSTR lpComment ;
    LPWSTR lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;




typedef NETRESOURCEA NETRESOURCE;
typedef LPNETRESOURCEA LPNETRESOURCE;
#line 145 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
DWORD __stdcall
WNetAddConnectionA(
             LPCSTR lpRemoteName,
             LPCSTR lpPassword,
             LPCSTR lpLocalName
    );

DWORD __stdcall
WNetAddConnectionW(
             LPCWSTR lpRemoteName,
             LPCWSTR lpPassword,
             LPCWSTR lpLocalName
    );







DWORD __stdcall
WNetAddConnection2A(
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserName,
             DWORD dwFlags
    );

DWORD __stdcall
WNetAddConnection2W(
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserName,
             DWORD dwFlags
    );







DWORD __stdcall
WNetAddConnection3A(
             HWND hwndOwner,
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserName,
             DWORD dwFlags
    );

DWORD __stdcall
WNetAddConnection3W(
             HWND hwndOwner,
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserName,
             DWORD dwFlags
    );







DWORD __stdcall
WNetCancelConnectionA(
         LPCSTR lpName,
         BOOL fForce
    );

DWORD __stdcall
WNetCancelConnectionW(
         LPCWSTR lpName,
         BOOL fForce
    );







DWORD __stdcall
WNetCancelConnection2A(
         LPCSTR lpName,
         DWORD dwFlags,
         BOOL fForce
    );

DWORD __stdcall
WNetCancelConnection2W(
         LPCWSTR lpName,
         DWORD dwFlags,
         BOOL fForce
    );







DWORD __stdcall
WNetGetConnectionA(
         LPCSTR lpLocalName,
                                 LPSTR lpRemoteName,
            LPDWORD lpnLength
    );

DWORD __stdcall
WNetGetConnectionW(
         LPCWSTR lpLocalName,
                                 LPWSTR lpRemoteName,
            LPDWORD lpnLength
    );
#line 271 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
DWORD __stdcall
WNetRestoreSingleConnectionW(
             HWND hwndParent,
             LPCWSTR lpDevice,
             BOOL fUseUI
    );
#line 291 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
DWORD __stdcall
WNetUseConnectionA(
             HWND hwndOwner,
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserId,
             DWORD dwFlags,
                                    LPSTR lpAccessName,
                LPDWORD lpBufferSize,
              LPDWORD lpResult
    );

DWORD __stdcall
WNetUseConnectionW(
             HWND hwndOwner,
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserId,
             DWORD dwFlags,
                                    LPWSTR lpAccessName,
                LPDWORD lpBufferSize,
              LPDWORD lpResult
    );
#line 326 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
DWORD __stdcall
WNetConnectionDialog(
         HWND hwnd,
         DWORD dwType
    );


DWORD __stdcall
WNetDisconnectDialog(
             HWND hwnd,
         DWORD dwType
    );


typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
} CONNECTDLGSTRUCTA, *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
} CONNECTDLGSTRUCTW, *LPCONNECTDLGSTRUCTW;




typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
#line 376 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
DWORD __stdcall
WNetConnectionDialog1A(
            LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );

DWORD __stdcall
WNetConnectionDialog1W(
            LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );






typedef struct _DISCDLGSTRUCTA{
    DWORD cbStructure;
    HWND hwndOwner;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    DWORD dwFlags;
} DISCDLGSTRUCTA, *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD cbStructure;
    HWND hwndOwner;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    DWORD dwFlags;
} DISCDLGSTRUCTW, *LPDISCDLGSTRUCTW;




typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;






DWORD __stdcall
WNetDisconnectDialog1A(
         LPDISCDLGSTRUCTA lpConnDlgStruct
    );

DWORD __stdcall
WNetDisconnectDialog1W(
         LPDISCDLGSTRUCTW lpConnDlgStruct
    );
#line 438 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
DWORD __stdcall
WNetOpenEnumA(
          DWORD dwScope,
          DWORD dwType,
          DWORD dwUsage,
             LPNETRESOURCEA lpNetResource,
          LPHANDLE lphEnum
    );

DWORD __stdcall
WNetOpenEnumW(
          DWORD dwScope,
          DWORD dwType,
          DWORD dwUsage,
             LPNETRESOURCEW lpNetResource,
          LPHANDLE lphEnum
    );







DWORD __stdcall
WNetEnumResourceA(
            HANDLE hEnum,
            LPDWORD lpcCount,
                                LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetEnumResourceW(
            HANDLE hEnum,
            LPDWORD lpcCount,
                                LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );







DWORD __stdcall
WNetCloseEnum(
         HANDLE hEnum
    );



DWORD __stdcall
WNetGetResourceParentA(
         LPNETRESOURCEA lpNetResource,
                              LPVOID lpBuffer,
            LPDWORD lpcbBuffer
    );

DWORD __stdcall
WNetGetResourceParentW(
         LPNETRESOURCEW lpNetResource,
                              LPVOID lpBuffer,
            LPDWORD lpcbBuffer
    );







DWORD __stdcall
WNetGetResourceInformationA(
         LPNETRESOURCEA lpNetResource,
                              LPVOID lpBuffer,
            LPDWORD lpcbBuffer,
                LPSTR *lplpSystem
    );

DWORD __stdcall
WNetGetResourceInformationW(
         LPNETRESOURCEW lpNetResource,
                              LPVOID lpBuffer,
            LPDWORD lpcbBuffer,
                LPWSTR *lplpSystem
    );
#line 540 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
typedef struct _UNIVERSAL_NAME_INFOA {
    LPSTR lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW {
    LPWSTR lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;




typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;


typedef struct _REMOTE_NAME_INFOA {
    LPSTR lpUniversalName;
    LPSTR lpConnectionName;
    LPSTR lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW {
    LPWSTR lpUniversalName;
    LPWSTR lpConnectionName;
    LPWSTR lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;




typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;



DWORD __stdcall
WNetGetUniversalNameA(
         LPCSTR lpLocalPath,
         DWORD dwInfoLevel,
                                LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetGetUniversalNameW(
         LPCWSTR lpLocalPath,
         DWORD dwInfoLevel,
                                LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );
#line 598 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
DWORD __stdcall
WNetGetUserA(
             LPCSTR lpName,
                             LPSTR lpUserName,
             LPDWORD lpnLength
    );




DWORD __stdcall
WNetGetUserW(
             LPCWSTR lpName,
                             LPWSTR lpUserName,
             LPDWORD lpnLength
    );
#line 636 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
DWORD __stdcall
WNetGetProviderNameA(
            DWORD dwNetType,
                                LPSTR lpProviderName,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetGetProviderNameW(
            DWORD dwNetType,
                                LPWSTR lpProviderName,
            LPDWORD lpBufferSize
    );






typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT, *LPNETINFOSTRUCT;






DWORD __stdcall
WNetGetNetworkInformationA(
          LPCSTR lpProvider,
          LPNETINFOSTRUCT lpNetInfoStruct
    );

DWORD __stdcall
WNetGetNetworkInformationW(
          LPCWSTR lpProvider,
          LPNETINFOSTRUCT lpNetInfoStruct
    );
#line 695 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
DWORD __stdcall
WNetGetLastErrorA(
          LPDWORD lpError,
                                LPSTR lpErrorBuf,
         DWORD nErrorBufSize,
                               LPSTR lpNameBuf,
         DWORD nNameBufSize
    );

DWORD __stdcall
WNetGetLastErrorW(
          LPDWORD lpError,
                                LPWSTR lpErrorBuf,
         DWORD nErrorBufSize,
                               LPWSTR lpNameBuf,
         DWORD nNameBufSize
    );
#line 787 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT, *LPNETCONNECTINFOSTRUCT;







DWORD __stdcall
MultinetGetConnectionPerformanceA(
          LPNETRESOURCEA lpNetResource,
          LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );

DWORD __stdcall
MultinetGetConnectionPerformanceW(
          LPNETRESOURCEW lpNetResource,
          LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );
#line 821 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winnetwk.h"
}
#line 170 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"




#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\cderr.h"
#line 174 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\dde.h"
#line 20 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\dde.h"
extern "C" {
#line 50 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\dde.h"
typedef struct {

        unsigned short bAppReturnCode:8,
                 reserved:6,
                 fBusy:1,
   fAck:1;



} DDEACK;
#line 69 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\dde.h"
typedef struct {

        unsigned short reserved:14,
                 fDeferUpd:1,
   fAckReq:1;



 short cfFormat;
} DDEADVISE;
#line 90 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\dde.h"
typedef struct {

 unsigned short unused:12,
                 fResponse:1,
                 fRelease:1,
                 reserved:1,
                 fAckReq:1;



 short cfFormat;
 BYTE Value[1];
} DDEDATA;
#line 114 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\dde.h"
typedef struct {

 unsigned short unused:13,

   fRelease:1,
   fReserved:2;



 short cfFormat;
 BYTE Value[1];


} DDEPOKE;
#line 139 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\dde.h"
typedef struct {

        unsigned short unused:13,
                 fRelease:1,
                 fDeferUpd:1,
   fAckReq:1;



 short cfFormat;
} DDELN;

typedef struct {

 unsigned short unused:12,
                 fAck:1,
                 fRelease:1,
                 fReserved:1,
                 fAckReq:1;



 short cfFormat;
 BYTE rgb[1];
} DDEUP;






BOOL
__stdcall
DdeSetQualityOfService(
    HWND hwndClient,
    const SECURITY_QUALITY_OF_SERVICE *pqosNew,
    PSECURITY_QUALITY_OF_SERVICE pqosPrev);

BOOL
__stdcall
ImpersonateDdeClientWindow(
    HWND hWndClient,
    HWND hWndServer);




LPARAM __stdcall PackDDElParam(UINT msg, UINT_PTR uiLo, UINT_PTR uiHi);
BOOL __stdcall UnpackDDElParam(UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi);
BOOL __stdcall FreeDDElParam(UINT msg, LPARAM lParam);
LPARAM __stdcall ReuseDDElParam(LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi);


}
#line 175 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ddeml.h"
#line 17 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ddeml.h"
extern "C" {




struct HCONVLIST__{int unused;}; typedef struct HCONVLIST__ *HCONVLIST;
struct HCONV__{int unused;}; typedef struct HCONV__ *HCONV;
struct HSZ__{int unused;}; typedef struct HSZ__ *HSZ;
struct HDDEDATA__{int unused;}; typedef struct HDDEDATA__ *HDDEDATA;




typedef struct tagHSZPAIR {
    HSZ hszSvc;
    HSZ hszTopic;
} HSZPAIR, *PHSZPAIR;




typedef struct tagCONVCONTEXT {
    UINT cb;
    UINT wFlags;
    UINT wCountryID;
    int iCodePage;
    DWORD dwLangID;
    DWORD dwSecurity;
    SECURITY_QUALITY_OF_SERVICE qos;
} CONVCONTEXT, *PCONVCONTEXT;




typedef struct tagCONVINFO {
    DWORD cb;
    DWORD_PTR hUser;
    HCONV hConvPartner;
    HSZ hszSvcPartner;
    HSZ hszServiceReq;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    UINT wType;
    UINT wStatus;
    UINT wConvst;
    UINT wLastError;
    HCONVLIST hConvList;
    CONVCONTEXT ConvCtxt;
    HWND hwnd;
    HWND hwndPartner;
} CONVINFO, *PCONVINFO;
#line 199 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ddeml.h"
typedef HDDEDATA __stdcall FNCALLBACK(UINT wType, UINT wFmt, HCONV hConv,
        HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);
typedef HDDEDATA (__stdcall *PFNCALLBACK)(UINT wType, UINT wFmt, HCONV hConv,
        HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);





UINT
__stdcall
DdeInitializeA(
            LPDWORD pidInst,
         PFNCALLBACK pfnCallback,
         DWORD afCmd,
               DWORD ulRes);
UINT
__stdcall
DdeInitializeW(
            LPDWORD pidInst,
         PFNCALLBACK pfnCallback,
         DWORD afCmd,
               DWORD ulRes);
#line 259 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ddeml.h"
BOOL
__stdcall
DdeUninitialize(
         DWORD idInst);




HCONVLIST
__stdcall
DdeConnectList(
         DWORD idInst,
         HSZ hszService,
         HSZ hszTopic,
         HCONVLIST hConvList,
             PCONVCONTEXT pCC);

HCONV
__stdcall
DdeQueryNextServer(
         HCONVLIST hConvList,
         HCONV hConvPrev);
BOOL
__stdcall
DdeDisconnectList(
         HCONVLIST hConvList);




HCONV
__stdcall
DdeConnect(
         DWORD idInst,
         HSZ hszService,
         HSZ hszTopic,
             PCONVCONTEXT pCC);

BOOL
__stdcall
DdeDisconnect(
         HCONV hConv);

HCONV
__stdcall
DdeReconnect(
         HCONV hConv);

UINT
__stdcall
DdeQueryConvInfo(
         HCONV hConv,
         DWORD idTransaction,
            PCONVINFO pConvInfo);

BOOL
__stdcall
DdeSetUserHandle(
         HCONV hConv,
         DWORD id,
         DWORD_PTR hUser);

BOOL
__stdcall
DdeAbandonTransaction(
         DWORD idInst,
         HCONV hConv,
         DWORD idTransaction);





BOOL
__stdcall
DdePostAdvise(
         DWORD idInst,
         HSZ hszTopic,
         HSZ hszItem);

BOOL
__stdcall
DdeEnableCallback(
         DWORD idInst,
         HCONV hConv,
         UINT wCmd);

BOOL
__stdcall
DdeImpersonateClient(
         HCONV hConv);







HDDEDATA
__stdcall
DdeNameService(
         DWORD idInst,
             HSZ hsz1,
             HSZ hsz2,
         UINT afCmd);
#line 373 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ddeml.h"
HDDEDATA
__stdcall
DdeClientTransaction(
             LPBYTE pData,
         DWORD cbData,
         HCONV hConv,
             HSZ hszItem,
         UINT wFmt,
         UINT wType,
         DWORD dwTimeout,
              LPDWORD pdwResult);






HDDEDATA
__stdcall
DdeCreateDataHandle(
         DWORD idInst,
                        LPBYTE pSrc,
         DWORD cb,
         DWORD cbOff,
             HSZ hszItem,
         UINT wFmt,
         UINT afCmd);

HDDEDATA
__stdcall
DdeAddData(
         HDDEDATA hData,
                    LPBYTE pSrc,
         DWORD cb,
         DWORD cbOff);

DWORD
__stdcall
DdeGetData(
         HDDEDATA hData,
                            LPBYTE pDst,
         DWORD cbMax,
         DWORD cbOff);

LPBYTE
__stdcall
DdeAccessData(
         HDDEDATA hData,
              LPDWORD pcbDataSize);

BOOL
__stdcall
DdeUnaccessData(
         HDDEDATA hData);

BOOL
__stdcall
DdeFreeDataHandle(
         HDDEDATA hData);




UINT
__stdcall
DdeGetLastError(
         DWORD idInst);
#line 467 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ddeml.h"
HSZ
__stdcall
DdeCreateStringHandleA(
         DWORD idInst,
         LPCSTR psz,
         int iCodePage);
HSZ
__stdcall
DdeCreateStringHandleW(
         DWORD idInst,
         LPCWSTR psz,
         int iCodePage);






DWORD
__stdcall
DdeQueryStringA(
         DWORD idInst,
         HSZ hsz,
                             LPSTR psz,
         DWORD cchMax,
         int iCodePage);
DWORD
__stdcall
DdeQueryStringW(
         DWORD idInst,
         HSZ hsz,
                             LPWSTR psz,
         DWORD cchMax,
         int iCodePage);






BOOL
__stdcall
DdeFreeStringHandle(
         DWORD idInst,
         HSZ hsz);

BOOL
__stdcall
DdeKeepStringHandle(
         DWORD idInst,
         HSZ hsz);

int
__stdcall
DdeCmpStringHandles(
         HSZ hsz1,
         HSZ hsz2);






typedef struct tagDDEML_MSG_HOOK_DATA {
    UINT_PTR uiLo;
    UINT_PTR uiHi;
    DWORD cbData;
    DWORD Data[8];
} DDEML_MSG_HOOK_DATA, *PDDEML_MSG_HOOK_DATA;


typedef struct tagMONMSGSTRUCT {
    UINT cb;
    HWND hwndTo;
    DWORD dwTime;
    HANDLE hTask;
    UINT wMsg;
    WPARAM wParam;
    LPARAM lParam;
    DDEML_MSG_HOOK_DATA dmhd;
} MONMSGSTRUCT, *PMONMSGSTRUCT;

typedef struct tagMONCBSTRUCT {
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    DWORD dwRet;
    UINT wType;
    UINT wFmt;
    HCONV hConv;
    HSZ hsz1;
    HSZ hsz2;
    HDDEDATA hData;
    ULONG_PTR dwData1;
    ULONG_PTR dwData2;
    CONVCONTEXT cc;
    DWORD cbData;
    DWORD Data[8];
} MONCBSTRUCT, *PMONCBSTRUCT;

typedef struct tagMONHSZSTRUCTA {
    UINT cb;
    BOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    CHAR str[1];
} MONHSZSTRUCTA, *PMONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW {
    UINT cb;
    BOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    WCHAR str[1];
} MONHSZSTRUCTW, *PMONHSZSTRUCTW;




typedef MONHSZSTRUCTA MONHSZSTRUCT;
typedef PMONHSZSTRUCTA PMONHSZSTRUCT;







typedef struct tagMONERRSTRUCT {
    UINT cb;
    UINT wLastError;
    DWORD dwTime;
    HANDLE hTask;
} MONERRSTRUCT, *PMONERRSTRUCT;

typedef struct tagMONLINKSTRUCT {
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    BOOL fEstablished;
    BOOL fNoData;
    HSZ hszSvc;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    BOOL fServer;
    HCONV hConvServer;
    HCONV hConvClient;
} MONLINKSTRUCT, *PMONLINKSTRUCT;

typedef struct tagMONCONVSTRUCT {
    UINT cb;
    BOOL fConnect;
    DWORD dwTime;
    HANDLE hTask;
    HSZ hszSvc;
    HSZ hszTopic;
    HCONV hConvClient;
    HCONV hConvServer;
} MONCONVSTRUCT, *PMONCONVSTRUCT;
#line 649 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ddeml.h"
}
#line 176 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\dlgs.h"
#line 256 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\dlgs.h"
typedef struct tagCRGB
{
    BYTE bRed;
    BYTE bGreen;
    BYTE bBlue;
    BYTE bExtra;
} CRGB;
#line 177 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\lzexpand.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\lzexpand.h"
extern "C" {
#line 47 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\lzexpand.h"
INT
__stdcall
LZStart(
    void
    );

void
__stdcall
LZDone(
    void
    );




LONG
__stdcall
CopyLZFile(
         INT hfSource,
         INT hfDest
    );



LONG
__stdcall
LZCopy(
         INT hfSource,
         INT hfDest
    );



INT
__stdcall
LZInit(
         INT hfSource
    );



INT
__stdcall
GetExpandedNameA(
         LPSTR lpszSource,
                           LPSTR lpszBuffer
    );


INT
__stdcall
GetExpandedNameW(
         LPWSTR lpszSource,
                           LPWSTR lpszBuffer
    );
#line 110 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\lzexpand.h"
INT
__stdcall
LZOpenFileA(
         LPSTR lpFileName,
            LPOFSTRUCT lpReOpenBuf,
         WORD wStyle
    );


INT
__stdcall
LZOpenFileW(
         LPWSTR lpFileName,
            LPOFSTRUCT lpReOpenBuf,
         WORD wStyle
    );
#line 134 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\lzexpand.h"
LONG
__stdcall
LZSeek(
         INT hFile,
         LONG lOffset,
         INT iOrigin
    );



INT
__stdcall
LZRead(
         INT hFile,
                                      CHAR* lpBuffer,
         INT cbRead
    );

void
__stdcall
LZClose(
         INT hFile
    );


}
#line 179 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
#line 33 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
#pragma warning(disable:4201)



#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\pshpack1.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack(push,1)
#line 36 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"








extern "C" {
#line 105 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef UINT MMVERSION;



typedef UINT MMRESULT;



typedef UINT *LPUINT;




typedef struct mmtime_tag
{
    UINT wType;
    union
    {
        DWORD ms;
        DWORD sample;
        DWORD cb;
        DWORD ticks;


        struct
        {
            BYTE hour;
            BYTE min;
            BYTE sec;
            BYTE frame;
            BYTE fps;
            BYTE dummy;

            BYTE pad[2];

        } smpte;


        struct
        {
            DWORD songptrpos;
        } midi;
    } u;
} MMTIME, *PMMTIME, *NPMMTIME, *LPMMTIME;
#line 287 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
struct HDRVR__{int unused;}; typedef struct HDRVR__ *HDRVR;
#line 299 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct DRVCONFIGINFOEX {
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
    DWORD dnDevNode;
} DRVCONFIGINFOEX, *PDRVCONFIGINFOEX, *NPDRVCONFIGINFOEX, *LPDRVCONFIGINFOEX;
#line 337 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagDRVCONFIGINFO {
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
} DRVCONFIGINFO, *PDRVCONFIGINFO, *NPDRVCONFIGINFO, *LPDRVCONFIGINFO;
#line 358 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef LRESULT (__stdcall* DRIVERPROC)(DWORD_PTR, HDRVR, UINT, LPARAM, LPARAM);

__declspec(dllimport) LRESULT __stdcall CloseDriver( HDRVR hDriver, LPARAM lParam1, LPARAM lParam2);
__declspec(dllimport) HDRVR __stdcall OpenDriver( LPCWSTR szDriverName, LPCWSTR szSectionName, LPARAM lParam2);
__declspec(dllimport) LRESULT __stdcall SendDriverMessage( HDRVR hDriver, UINT message, LPARAM lParam1, LPARAM lParam2);
__declspec(dllimport) HMODULE __stdcall DrvGetModuleHandle( HDRVR hDriver);
__declspec(dllimport) HMODULE __stdcall GetDriverModuleHandle( HDRVR hDriver);
__declspec(dllimport) LRESULT __stdcall DefDriverProc( DWORD_PTR dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
#line 408 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef void (__stdcall DRVCALLBACK)(HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);

typedef DRVCALLBACK *LPDRVCALLBACK;

typedef DRVCALLBACK *PDRVCALLBACK;
#line 425 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) BOOL __stdcall sndPlaySoundA( LPCSTR pszSound, UINT fuSound);
__declspec(dllimport) BOOL __stdcall sndPlaySoundW( LPCWSTR pszSound, UINT fuSound);
#line 475 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) BOOL __stdcall PlaySoundA( LPCSTR pszSound, HMODULE hmod, DWORD fdwSound);
__declspec(dllimport) BOOL __stdcall PlaySoundW( LPCWSTR pszSound, HMODULE hmod, DWORD fdwSound);
#line 504 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
struct HWAVE__{int unused;}; typedef struct HWAVE__ *HWAVE;
struct HWAVEIN__{int unused;}; typedef struct HWAVEIN__ *HWAVEIN;
struct HWAVEOUT__{int unused;}; typedef struct HWAVEOUT__ *HWAVEOUT;
typedef HWAVEIN *LPHWAVEIN;
typedef HWAVEOUT *LPHWAVEOUT;
typedef DRVCALLBACK WAVECALLBACK;
typedef WAVECALLBACK *LPWAVECALLBACK;
#line 534 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct wavehdr_tag {
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    DWORD dwLoops;
    struct wavehdr_tag *lpNext;
    DWORD_PTR reserved;
} WAVEHDR, *PWAVEHDR, *NPWAVEHDR, *LPWAVEHDR;
#line 555 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagWAVEOUTCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
} WAVEOUTCAPSA, *PWAVEOUTCAPSA, *NPWAVEOUTCAPSA, *LPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
} WAVEOUTCAPSW, *PWAVEOUTCAPSW, *NPWAVEOUTCAPSW, *LPWAVEOUTCAPSW;






typedef WAVEOUTCAPSA WAVEOUTCAPS;
typedef PWAVEOUTCAPSA PWAVEOUTCAPS;
typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS;
typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS;

typedef struct tagWAVEOUTCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEOUTCAPS2A, *PWAVEOUTCAPS2A, *NPWAVEOUTCAPS2A, *LPWAVEOUTCAPS2A;
typedef struct tagWAVEOUTCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEOUTCAPS2W, *PWAVEOUTCAPS2W, *NPWAVEOUTCAPS2W, *LPWAVEOUTCAPS2W;






typedef WAVEOUTCAPS2A WAVEOUTCAPS2;
typedef PWAVEOUTCAPS2A PWAVEOUTCAPS2;
typedef NPWAVEOUTCAPS2A NPWAVEOUTCAPS2;
typedef LPWAVEOUTCAPS2A LPWAVEOUTCAPS2;
#line 648 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagWAVEINCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
} WAVEINCAPSA, *PWAVEINCAPSA, *NPWAVEINCAPSA, *LPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
} WAVEINCAPSW, *PWAVEINCAPSW, *NPWAVEINCAPSW, *LPWAVEINCAPSW;






typedef WAVEINCAPSA WAVEINCAPS;
typedef PWAVEINCAPSA PWAVEINCAPS;
typedef NPWAVEINCAPSA NPWAVEINCAPS;
typedef LPWAVEINCAPSA LPWAVEINCAPS;

typedef struct tagWAVEINCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEINCAPS2A, *PWAVEINCAPS2A, *NPWAVEINCAPS2A, *LPWAVEINCAPS2A;
typedef struct tagWAVEINCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEINCAPS2W, *PWAVEINCAPS2W, *NPWAVEINCAPS2W, *LPWAVEINCAPS2W;






typedef WAVEINCAPS2A WAVEINCAPS2;
typedef PWAVEINCAPS2A PWAVEINCAPS2;
typedef NPWAVEINCAPS2A NPWAVEINCAPS2;
typedef LPWAVEINCAPS2A LPWAVEINCAPS2;
#line 756 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct waveformat_tag {
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
} WAVEFORMAT, *PWAVEFORMAT, *NPWAVEFORMAT, *LPWAVEFORMAT;






typedef struct pcmwaveformat_tag {
    WAVEFORMAT wf;
    WORD wBitsPerSample;
} PCMWAVEFORMAT, *PPCMWAVEFORMAT, *NPPCMWAVEFORMAT, *LPPCMWAVEFORMAT;
#line 782 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tWAVEFORMATEX
{
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wBitsPerSample;
    WORD cbSize;

} WAVEFORMATEX, *PWAVEFORMATEX, *NPWAVEFORMATEX, *LPWAVEFORMATEX;


typedef const WAVEFORMATEX *LPCWAVEFORMATEX;


__declspec(dllimport) UINT __stdcall waveOutGetNumDevs(void);



__declspec(dllimport) MMRESULT __stdcall waveOutGetDevCapsA( UINT_PTR uDeviceID, LPWAVEOUTCAPSA pwoc, UINT cbwoc);
__declspec(dllimport) MMRESULT __stdcall waveOutGetDevCapsW( UINT_PTR uDeviceID, LPWAVEOUTCAPSW pwoc, UINT cbwoc);
#line 815 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall waveOutGetVolume( HWAVEOUT hwo, LPDWORD pdwVolume);
__declspec(dllimport) MMRESULT __stdcall waveOutSetVolume( HWAVEOUT hwo, DWORD dwVolume);







__declspec(dllimport) MMRESULT __stdcall waveOutGetErrorTextA( MMRESULT mmrError, LPSTR pszText, UINT cchText);
__declspec(dllimport) MMRESULT __stdcall waveOutGetErrorTextW( MMRESULT mmrError, LPWSTR pszText, UINT cchText);
#line 836 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall waveOutOpen( LPHWAVEOUT phwo, UINT uDeviceID,
         LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);

__declspec(dllimport) MMRESULT __stdcall waveOutClose( HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutPrepareHeader( HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveOutUnprepareHeader( HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveOutWrite( HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveOutPause( HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutRestart( HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutReset( HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutBreakLoop( HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutGetPosition( HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt);
__declspec(dllimport) MMRESULT __stdcall waveOutGetPitch( HWAVEOUT hwo, LPDWORD pdwPitch);
__declspec(dllimport) MMRESULT __stdcall waveOutSetPitch( HWAVEOUT hwo, DWORD dwPitch);
__declspec(dllimport) MMRESULT __stdcall waveOutGetPlaybackRate( HWAVEOUT hwo, LPDWORD pdwRate);
__declspec(dllimport) MMRESULT __stdcall waveOutSetPlaybackRate( HWAVEOUT hwo, DWORD dwRate);
__declspec(dllimport) MMRESULT __stdcall waveOutGetID( HWAVEOUT hwo, LPUINT puDeviceID);



__declspec(dllimport) MMRESULT __stdcall waveOutMessage( HWAVEOUT hwo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);





__declspec(dllimport) UINT __stdcall waveInGetNumDevs(void);



__declspec(dllimport) MMRESULT __stdcall waveInGetDevCapsA( UINT_PTR uDeviceID, LPWAVEINCAPSA pwic, UINT cbwic);
__declspec(dllimport) MMRESULT __stdcall waveInGetDevCapsW( UINT_PTR uDeviceID, LPWAVEINCAPSW pwic, UINT cbwic);
#line 880 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall waveInGetErrorTextA( MMRESULT mmrError, LPSTR pszText, UINT cchText);
__declspec(dllimport) MMRESULT __stdcall waveInGetErrorTextW( MMRESULT mmrError, LPWSTR pszText, UINT cchText);
#line 892 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall waveInOpen( LPHWAVEIN phwi, UINT uDeviceID,
         LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);

__declspec(dllimport) MMRESULT __stdcall waveInClose( HWAVEIN hwi);
__declspec(dllimport) MMRESULT __stdcall waveInPrepareHeader( HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveInUnprepareHeader( HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveInAddBuffer( HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveInStart( HWAVEIN hwi);
__declspec(dllimport) MMRESULT __stdcall waveInStop( HWAVEIN hwi);
__declspec(dllimport) MMRESULT __stdcall waveInReset( HWAVEIN hwi);
__declspec(dllimport) MMRESULT __stdcall waveInGetPosition( HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt);
__declspec(dllimport) MMRESULT __stdcall waveInGetID( HWAVEIN hwi, LPUINT puDeviceID);



__declspec(dllimport) MMRESULT __stdcall waveInMessage( HWAVEIN hwi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
#line 934 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
struct HMIDI__{int unused;}; typedef struct HMIDI__ *HMIDI;
struct HMIDIIN__{int unused;}; typedef struct HMIDIIN__ *HMIDIIN;
struct HMIDIOUT__{int unused;}; typedef struct HMIDIOUT__ *HMIDIOUT;
struct HMIDISTRM__{int unused;}; typedef struct HMIDISTRM__ *HMIDISTRM;
typedef HMIDI *LPHMIDI;
typedef HMIDIIN *LPHMIDIIN;
typedef HMIDIOUT *LPHMIDIOUT;
typedef HMIDISTRM *LPHMIDISTRM;
typedef DRVCALLBACK MIDICALLBACK;
typedef MIDICALLBACK *LPMIDICALLBACK;

typedef WORD PATCHARRAY[128];
typedef WORD *LPPATCHARRAY;
typedef WORD KEYARRAY[128];
typedef WORD *LPKEYARRAY;
#line 984 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMIDIOUTCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
} MIDIOUTCAPSA, *PMIDIOUTCAPSA, *NPMIDIOUTCAPSA, *LPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
} MIDIOUTCAPSW, *PMIDIOUTCAPSW, *NPMIDIOUTCAPSW, *LPMIDIOUTCAPSW;






typedef MIDIOUTCAPSA MIDIOUTCAPS;
typedef PMIDIOUTCAPSA PMIDIOUTCAPS;
typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS;
typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS;

typedef struct tagMIDIOUTCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIOUTCAPS2A, *PMIDIOUTCAPS2A, *NPMIDIOUTCAPS2A, *LPMIDIOUTCAPS2A;
typedef struct tagMIDIOUTCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIOUTCAPS2W, *PMIDIOUTCAPS2W, *NPMIDIOUTCAPS2W, *LPMIDIOUTCAPS2W;






typedef MIDIOUTCAPS2A MIDIOUTCAPS2;
typedef PMIDIOUTCAPS2A PMIDIOUTCAPS2;
typedef NPMIDIOUTCAPS2A NPMIDIOUTCAPS2;
typedef LPMIDIOUTCAPS2A LPMIDIOUTCAPS2;
#line 1091 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMIDIINCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];

    DWORD dwSupport;

} MIDIINCAPSA, *PMIDIINCAPSA, *NPMIDIINCAPSA, *LPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];

    DWORD dwSupport;

} MIDIINCAPSW, *PMIDIINCAPSW, *NPMIDIINCAPSW, *LPMIDIINCAPSW;






typedef MIDIINCAPSA MIDIINCAPS;
typedef PMIDIINCAPSA PMIDIINCAPS;
typedef NPMIDIINCAPSA NPMIDIINCAPS;
typedef LPMIDIINCAPSA LPMIDIINCAPS;

typedef struct tagMIDIINCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];

    DWORD dwSupport;

    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIINCAPS2A, *PMIDIINCAPS2A, *NPMIDIINCAPS2A, *LPMIDIINCAPS2A;
typedef struct tagMIDIINCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];

    DWORD dwSupport;

    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIINCAPS2W, *PMIDIINCAPS2W, *NPMIDIINCAPS2W, *LPMIDIINCAPS2W;






typedef MIDIINCAPS2A MIDIINCAPS2;
typedef PMIDIINCAPS2A PMIDIINCAPS2;
typedef NPMIDIINCAPS2A NPMIDIINCAPS2;
typedef LPMIDIINCAPS2A LPMIDIINCAPS2;
#line 1170 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct midihdr_tag {
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    struct midihdr_tag *lpNext;
    DWORD_PTR reserved;

    DWORD dwOffset;
    DWORD_PTR dwReserved[8];

} MIDIHDR, *PMIDIHDR, *NPMIDIHDR, *LPMIDIHDR;



typedef struct midievent_tag
{
    DWORD dwDeltaTime;
    DWORD dwStreamID;
    DWORD dwEvent;
    DWORD dwParms[1];
} MIDIEVENT;

typedef struct midistrmbuffver_tag
{
    DWORD dwVersion;
    DWORD dwMid;
    DWORD dwOEMVersion;
} MIDISTRMBUFFVER;
#line 1252 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct midiproptimediv_tag
{
    DWORD cbStruct;
    DWORD dwTimeDiv;
} MIDIPROPTIMEDIV, *LPMIDIPROPTIMEDIV;

typedef struct midiproptempo_tag
{
    DWORD cbStruct;
    DWORD dwTempo;
} MIDIPROPTEMPO, *LPMIDIPROPTEMPO;




__declspec(dllimport) UINT __stdcall midiOutGetNumDevs(void);

__declspec(dllimport) MMRESULT __stdcall midiStreamOpen( LPHMIDISTRM phms, LPUINT puDeviceID, DWORD cMidi, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
__declspec(dllimport) MMRESULT __stdcall midiStreamClose( HMIDISTRM hms);

__declspec(dllimport) MMRESULT __stdcall midiStreamProperty( HMIDISTRM hms, LPBYTE lppropdata, DWORD dwProperty);
__declspec(dllimport) MMRESULT __stdcall midiStreamPosition( HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt);

__declspec(dllimport) MMRESULT __stdcall midiStreamOut( HMIDISTRM hms, LPMIDIHDR pmh, UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiStreamPause( HMIDISTRM hms);
__declspec(dllimport) MMRESULT __stdcall midiStreamRestart( HMIDISTRM hms);
__declspec(dllimport) MMRESULT __stdcall midiStreamStop( HMIDISTRM hms);


__declspec(dllimport) MMRESULT __stdcall midiConnect( HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved);
__declspec(dllimport) MMRESULT __stdcall midiDisconnect( HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved);





__declspec(dllimport) MMRESULT __stdcall midiOutGetDevCapsA( UINT_PTR uDeviceID, LPMIDIOUTCAPSA pmoc, UINT cbmoc);
__declspec(dllimport) MMRESULT __stdcall midiOutGetDevCapsW( UINT_PTR uDeviceID, LPMIDIOUTCAPSW pmoc, UINT cbmoc);
#line 1301 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall midiOutGetVolume( HMIDIOUT hmo, LPDWORD pdwVolume);
__declspec(dllimport) MMRESULT __stdcall midiOutSetVolume( HMIDIOUT hmo, DWORD dwVolume);







__declspec(dllimport) MMRESULT __stdcall midiOutGetErrorTextA( MMRESULT mmrError, LPSTR pszText, UINT cchText);
__declspec(dllimport) MMRESULT __stdcall midiOutGetErrorTextW( MMRESULT mmrError, LPWSTR pszText, UINT cchText);
#line 1322 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall midiOutOpen( LPHMIDIOUT phmo, UINT uDeviceID,
             DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
__declspec(dllimport) MMRESULT __stdcall midiOutClose( HMIDIOUT hmo);
__declspec(dllimport) MMRESULT __stdcall midiOutPrepareHeader( HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiOutUnprepareHeader( HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiOutShortMsg( HMIDIOUT hmo, DWORD dwMsg);
__declspec(dllimport) MMRESULT __stdcall midiOutLongMsg( HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiOutReset( HMIDIOUT hmo);
__declspec(dllimport) MMRESULT __stdcall midiOutCachePatches( HMIDIOUT hmo, UINT uBank, LPWORD pwpa, UINT fuCache);
__declspec(dllimport) MMRESULT __stdcall midiOutCacheDrumPatches( HMIDIOUT hmo, UINT uPatch, LPWORD pwkya, UINT fuCache);
__declspec(dllimport) MMRESULT __stdcall midiOutGetID( HMIDIOUT hmo, LPUINT puDeviceID);



__declspec(dllimport) MMRESULT __stdcall midiOutMessage( HMIDIOUT hmo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);





__declspec(dllimport) UINT __stdcall midiInGetNumDevs(void);



__declspec(dllimport) MMRESULT __stdcall midiInGetDevCapsA( UINT_PTR uDeviceID, LPMIDIINCAPSA pmic, UINT cbmic);
__declspec(dllimport) MMRESULT __stdcall midiInGetDevCapsW( UINT_PTR uDeviceID, LPMIDIINCAPSW pmic, UINT cbmic);





__declspec(dllimport) MMRESULT __stdcall midiInGetErrorTextA( MMRESULT mmrError, LPSTR pszText, UINT cchText);
__declspec(dllimport) MMRESULT __stdcall midiInGetErrorTextW( MMRESULT mmrError, LPWSTR pszText, UINT cchText);
#line 1366 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall midiInOpen( LPHMIDIIN phmi, UINT uDeviceID,
                 DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
__declspec(dllimport) MMRESULT __stdcall midiInClose( HMIDIIN hmi);
__declspec(dllimport) MMRESULT __stdcall midiInPrepareHeader( HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiInUnprepareHeader( HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiInAddBuffer( HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiInStart( HMIDIIN hmi);
__declspec(dllimport) MMRESULT __stdcall midiInStop( HMIDIIN hmi);
__declspec(dllimport) MMRESULT __stdcall midiInReset( HMIDIIN hmi);
__declspec(dllimport) MMRESULT __stdcall midiInGetID( HMIDIIN hmi, LPUINT puDeviceID);



__declspec(dllimport) MMRESULT __stdcall midiInMessage( HMIDIIN hmi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
#line 1402 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagAUXCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
} AUXCAPSA, *PAUXCAPSA, *NPAUXCAPSA, *LPAUXCAPSA;
typedef struct tagAUXCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
} AUXCAPSW, *PAUXCAPSW, *NPAUXCAPSW, *LPAUXCAPSW;






typedef AUXCAPSA AUXCAPS;
typedef PAUXCAPSA PAUXCAPS;
typedef NPAUXCAPSA NPAUXCAPS;
typedef LPAUXCAPSA LPAUXCAPS;

typedef struct tagAUXCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} AUXCAPS2A, *PAUXCAPS2A, *NPAUXCAPS2A, *LPAUXCAPS2A;
typedef struct tagAUXCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} AUXCAPS2W, *PAUXCAPS2W, *NPAUXCAPS2W, *LPAUXCAPS2W;






typedef AUXCAPS2A AUXCAPS2;
typedef PAUXCAPS2A PAUXCAPS2;
typedef NPAUXCAPS2A NPAUXCAPS2;
typedef LPAUXCAPS2A LPAUXCAPS2;
#line 1487 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) UINT __stdcall auxGetNumDevs(void);


__declspec(dllimport) MMRESULT __stdcall auxGetDevCapsA( UINT_PTR uDeviceID, LPAUXCAPSA pac, UINT cbac);
__declspec(dllimport) MMRESULT __stdcall auxGetDevCapsW( UINT_PTR uDeviceID, LPAUXCAPSW pac, UINT cbac);
#line 1501 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall auxSetVolume( UINT uDeviceID, DWORD dwVolume);
__declspec(dllimport) MMRESULT __stdcall auxGetVolume( UINT uDeviceID, LPDWORD pdwVolume);



__declspec(dllimport) MMRESULT __stdcall auxOutMessage( UINT uDeviceID, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
#line 1521 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
struct HMIXEROBJ__{int unused;}; typedef struct HMIXEROBJ__ *HMIXEROBJ;
typedef HMIXEROBJ *LPHMIXEROBJ;

struct HMIXER__{int unused;}; typedef struct HMIXER__ *HMIXER;
typedef HMIXER *LPHMIXER;
#line 1554 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) UINT __stdcall mixerGetNumDevs(void);



typedef struct tagMIXERCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
} MIXERCAPSA, *PMIXERCAPSA, *LPMIXERCAPSA;
typedef struct tagMIXERCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
} MIXERCAPSW, *PMIXERCAPSW, *LPMIXERCAPSW;





typedef MIXERCAPSA MIXERCAPS;
typedef PMIXERCAPSA PMIXERCAPS;
typedef LPMIXERCAPSA LPMIXERCAPS;

typedef struct tagMIXERCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIXERCAPS2A, *PMIXERCAPS2A, *LPMIXERCAPS2A;
typedef struct tagMIXERCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIXERCAPS2W, *PMIXERCAPS2W, *LPMIXERCAPS2W;





typedef MIXERCAPS2A MIXERCAPS2;
typedef PMIXERCAPS2A PMIXERCAPS2;
typedef LPMIXERCAPS2A LPMIXERCAPS2;
#line 1629 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall mixerGetDevCapsA( UINT_PTR uMxId, LPMIXERCAPSA pmxcaps, UINT cbmxcaps);
__declspec(dllimport) MMRESULT __stdcall mixerGetDevCapsW( UINT_PTR uMxId, LPMIXERCAPSW pmxcaps, UINT cbmxcaps);
#line 1641 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall mixerOpen( LPHMIXER phmx, UINT uMxId, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);


__declspec(dllimport) MMRESULT __stdcall mixerClose( HMIXER hmx);

__declspec(dllimport) DWORD __stdcall mixerMessage( HMIXER hmx, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);



typedef struct tagMIXERLINEA {
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    CHAR szShortName[16];
    CHAR szName[64];
    struct {
        DWORD dwType;
        DWORD dwDeviceID;
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        CHAR szPname[32];
    } Target;
} MIXERLINEA, *PMIXERLINEA, *LPMIXERLINEA;
typedef struct tagMIXERLINEW {
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    WCHAR szShortName[16];
    WCHAR szName[64];
    struct {
        DWORD dwType;
        DWORD dwDeviceID;
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        WCHAR szPname[32];
    } Target;
} MIXERLINEW, *PMIXERLINEW, *LPMIXERLINEW;





typedef MIXERLINEA MIXERLINE;
typedef PMIXERLINEA PMIXERLINE;
typedef LPMIXERLINEA LPMIXERLINE;
#line 1784 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall mixerGetLineInfoA( HMIXEROBJ hmxobj, LPMIXERLINEA pmxl, DWORD fdwInfo);
__declspec(dllimport) MMRESULT __stdcall mixerGetLineInfoW( HMIXEROBJ hmxobj, LPMIXERLINEW pmxl, DWORD fdwInfo);
#line 1805 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall mixerGetID( HMIXEROBJ hmxobj, UINT *puMxId, DWORD fdwId);
#line 1814 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMIXERCONTROLA {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    CHAR szShortName[16];
    CHAR szName[64];
    union {
        struct {
            LONG lMinimum;
            LONG lMaximum;
        } ;
        struct {
            DWORD dwMinimum;
            DWORD dwMaximum;
        } ;
        DWORD dwReserved[6];
    } Bounds;
    union {
        DWORD cSteps;
        DWORD cbCustomData;
        DWORD dwReserved[6];
    } Metrics;
} MIXERCONTROLA, *PMIXERCONTROLA, *LPMIXERCONTROLA;
typedef struct tagMIXERCONTROLW {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    WCHAR szShortName[16];
    WCHAR szName[64];
    union {
        struct {
            LONG lMinimum;
            LONG lMaximum;
        } ;
        struct {
            DWORD dwMinimum;
            DWORD dwMaximum;
        } ;
        DWORD dwReserved[6];
    } Bounds;
    union {
        DWORD cSteps;
        DWORD cbCustomData;
        DWORD dwReserved[6];
    } Metrics;
} MIXERCONTROLW, *PMIXERCONTROLW, *LPMIXERCONTROLW;





typedef MIXERCONTROLA MIXERCONTROL;
typedef PMIXERCONTROLA PMIXERCONTROL;
typedef LPMIXERCONTROLA LPMIXERCONTROL;
#line 1990 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMIXERLINECONTROLSA {
    DWORD cbStruct;
    DWORD dwLineID;
    union {
        DWORD dwControlID;
        DWORD dwControlType;
    } ;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLA pamxctrl;
} MIXERLINECONTROLSA, *PMIXERLINECONTROLSA, *LPMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW {
    DWORD cbStruct;
    DWORD dwLineID;
    union {
        DWORD dwControlID;
        DWORD dwControlType;
    } ;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLW pamxctrl;
} MIXERLINECONTROLSW, *PMIXERLINECONTROLSW, *LPMIXERLINECONTROLSW;





typedef MIXERLINECONTROLSA MIXERLINECONTROLS;
typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS;
typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS;
#line 2042 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall mixerGetLineControlsA( HMIXEROBJ hmxobj, LPMIXERLINECONTROLSA pmxlc, DWORD fdwControls);
__declspec(dllimport) MMRESULT __stdcall mixerGetLineControlsW( HMIXEROBJ hmxobj, LPMIXERLINECONTROLSW pmxlc, DWORD fdwControls);
#line 2061 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tMIXERCONTROLDETAILS {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD cChannels;
    union {
        HWND hwndOwner;
        DWORD cMultipleItems;
    } ;
    DWORD cbDetails;
    LPVOID paDetails;
} MIXERCONTROLDETAILS, *PMIXERCONTROLDETAILS, *LPMIXERCONTROLDETAILS;
#line 2080 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
    DWORD dwParam1;
    DWORD dwParam2;
    CHAR szName[64];
} MIXERCONTROLDETAILS_LISTTEXTA, *PMIXERCONTROLDETAILS_LISTTEXTA, *LPMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
    DWORD dwParam1;
    DWORD dwParam2;
    WCHAR szName[64];
} MIXERCONTROLDETAILS_LISTTEXTW, *PMIXERCONTROLDETAILS_LISTTEXTW, *LPMIXERCONTROLDETAILS_LISTTEXTW;





typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT;
typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT;
#line 2112 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
    LONG fValue;
} MIXERCONTROLDETAILS_BOOLEAN,
      *PMIXERCONTROLDETAILS_BOOLEAN,
     *LPMIXERCONTROLDETAILS_BOOLEAN;

typedef struct tMIXERCONTROLDETAILS_SIGNED {
    LONG lValue;
} MIXERCONTROLDETAILS_SIGNED,
      *PMIXERCONTROLDETAILS_SIGNED,
     *LPMIXERCONTROLDETAILS_SIGNED;


typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
    DWORD dwValue;
} MIXERCONTROLDETAILS_UNSIGNED,
      *PMIXERCONTROLDETAILS_UNSIGNED,
     *LPMIXERCONTROLDETAILS_UNSIGNED;




__declspec(dllimport) MMRESULT __stdcall mixerGetControlDetailsA( HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);
__declspec(dllimport) MMRESULT __stdcall mixerGetControlDetailsW( HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);
#line 2152 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall mixerSetControlDetails( HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);
#line 2175 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef void (__stdcall TIMECALLBACK)(UINT uTimerID, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);

typedef TIMECALLBACK *LPTIMECALLBACK;
#line 2198 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct timecaps_tag {
    UINT wPeriodMin;
    UINT wPeriodMax;
} TIMECAPS, *PTIMECAPS, *NPTIMECAPS, *LPTIMECAPS;


__declspec(dllimport) MMRESULT __stdcall timeGetSystemTime( LPMMTIME pmmt, UINT cbmmt);
__declspec(dllimport) DWORD __stdcall timeGetTime(void);
__declspec(dllimport) MMRESULT __stdcall timeSetEvent( UINT uDelay, UINT uResolution,
         LPTIMECALLBACK fptc, DWORD_PTR dwUser, UINT fuEvent);
__declspec(dllimport) MMRESULT __stdcall timeKillEvent( UINT uTimerID);
__declspec(dllimport) MMRESULT __stdcall timeGetDevCaps( LPTIMECAPS ptc, UINT cbtc);
__declspec(dllimport) MMRESULT __stdcall timeBeginPeriod( UINT uPeriod);
__declspec(dllimport) MMRESULT __stdcall timeEndPeriod( UINT uPeriod);
#line 2321 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagJOYCAPSA {
    WORD wMid;
    WORD wPid;
    CHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;

    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR szRegKey[32];
    CHAR szOEMVxD[260];

} JOYCAPSA, *PJOYCAPSA, *NPJOYCAPSA, *LPJOYCAPSA;
typedef struct tagJOYCAPSW {
    WORD wMid;
    WORD wPid;
    WCHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;

    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR szRegKey[32];
    WCHAR szOEMVxD[260];

} JOYCAPSW, *PJOYCAPSW, *NPJOYCAPSW, *LPJOYCAPSW;






typedef JOYCAPSA JOYCAPS;
typedef PJOYCAPSA PJOYCAPS;
typedef NPJOYCAPSA NPJOYCAPS;
typedef LPJOYCAPSA LPJOYCAPS;

typedef struct tagJOYCAPS2A {
    WORD wMid;
    WORD wPid;
    CHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR szRegKey[32];
    CHAR szOEMVxD[260];
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} JOYCAPS2A, *PJOYCAPS2A, *NPJOYCAPS2A, *LPJOYCAPS2A;
typedef struct tagJOYCAPS2W {
    WORD wMid;
    WORD wPid;
    WCHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR szRegKey[32];
    WCHAR szOEMVxD[260];
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} JOYCAPS2W, *PJOYCAPS2W, *NPJOYCAPS2W, *LPJOYCAPS2W;






typedef JOYCAPS2A JOYCAPS2;
typedef PJOYCAPS2A PJOYCAPS2;
typedef NPJOYCAPS2A NPJOYCAPS2;
typedef LPJOYCAPS2A LPJOYCAPS2;
#line 2491 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct joyinfo_tag {
    UINT wXpos;
    UINT wYpos;
    UINT wZpos;
    UINT wButtons;
} JOYINFO, *PJOYINFO, *NPJOYINFO, *LPJOYINFO;


typedef struct joyinfoex_tag {
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwXpos;
    DWORD dwYpos;
    DWORD dwZpos;
    DWORD dwRpos;
    DWORD dwUpos;
    DWORD dwVpos;
    DWORD dwButtons;
    DWORD dwButtonNumber;
    DWORD dwPOV;
    DWORD dwReserved1;
    DWORD dwReserved2;
} JOYINFOEX, *PJOYINFOEX, *NPJOYINFOEX, *LPJOYINFOEX;



__declspec(dllimport) UINT __stdcall joyGetNumDevs(void);


__declspec(dllimport) MMRESULT __stdcall joyGetDevCapsA( UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc);
__declspec(dllimport) MMRESULT __stdcall joyGetDevCapsW( UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc);
#line 2531 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall joyGetPos( UINT uJoyID, LPJOYINFO pji);


__declspec(dllimport) MMRESULT __stdcall joyGetPosEx( UINT uJoyID, LPJOYINFOEX pji);


__declspec(dllimport) MMRESULT __stdcall joyGetThreshold( UINT uJoyID, LPUINT puThreshold);
__declspec(dllimport) MMRESULT __stdcall joyReleaseCapture( UINT uJoyID);
__declspec(dllimport) MMRESULT __stdcall joySetCapture( HWND hwnd, UINT uJoyID, UINT uPeriod,
         BOOL fChanged);
__declspec(dllimport) MMRESULT __stdcall joySetThreshold( UINT uJoyID, UINT uThreshold);
#line 2576 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef DWORD FOURCC;
typedef char * HPSTR;
struct HMMIO__{int unused;}; typedef struct HMMIO__ *HMMIO;
typedef LRESULT (__stdcall MMIOPROC)(LPSTR lpmmioinfo, UINT uMsg,
            LPARAM lParam1, LPARAM lParam2);
typedef MMIOPROC *LPMMIOPROC;



typedef struct _MMIOINFO
{

        DWORD dwFlags;
        FOURCC fccIOProc;
        LPMMIOPROC pIOProc;
        UINT wErrorRet;
        HTASK htask;


        LONG cchBuffer;
        HPSTR pchBuffer;
        HPSTR pchNext;
        HPSTR pchEndRead;
        HPSTR pchEndWrite;
        LONG lBufOffset;


        LONG lDiskOffset;
        DWORD adwInfo[3];


        DWORD dwReserved1;
        DWORD dwReserved2;
        HMMIO hmmio;
} MMIOINFO, *PMMIOINFO, *NPMMIOINFO, *LPMMIOINFO;
typedef const MMIOINFO *LPCMMIOINFO;


typedef struct _MMCKINFO
{
        FOURCC ckid;
        DWORD cksize;
        FOURCC fccType;
        DWORD dwDataOffset;
        DWORD dwFlags;
} MMCKINFO, *PMMCKINFO, *NPMMCKINFO, *LPMMCKINFO;
typedef const MMCKINFO *LPCMMCKINFO;
#line 2705 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) FOURCC __stdcall mmioStringToFOURCCA( LPCSTR sz, UINT uFlags);
__declspec(dllimport) FOURCC __stdcall mmioStringToFOURCCW( LPCWSTR sz, UINT uFlags);





__declspec(dllimport) LPMMIOPROC __stdcall mmioInstallIOProcA( FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags);
__declspec(dllimport) LPMMIOPROC __stdcall mmioInstallIOProcW( FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags);





 __declspec(dllimport) HMMIO __stdcall mmioOpenA( LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen);
 __declspec(dllimport) HMMIO __stdcall mmioOpenW( LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen);





__declspec(dllimport) MMRESULT __stdcall mmioRenameA( LPCSTR pszFileName, LPCSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename);
__declspec(dllimport) MMRESULT __stdcall mmioRenameW( LPCWSTR pszFileName, LPCWSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename);
#line 2742 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall mmioClose( HMMIO hmmio, UINT fuClose);
__declspec(dllimport) LONG __stdcall mmioRead( HMMIO hmmio, HPSTR pch, LONG cch);
__declspec(dllimport) LONG __stdcall mmioWrite( HMMIO hmmio, const char * pch, LONG cch);
__declspec(dllimport) LONG __stdcall mmioSeek( HMMIO hmmio, LONG lOffset, int iOrigin);
__declspec(dllimport) MMRESULT __stdcall mmioGetInfo( HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuInfo);
__declspec(dllimport) MMRESULT __stdcall mmioSetInfo( HMMIO hmmio, LPCMMIOINFO pmmioinfo, UINT fuInfo);
__declspec(dllimport) MMRESULT __stdcall mmioSetBuffer( HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer,
         UINT fuBuffer);
__declspec(dllimport) MMRESULT __stdcall mmioFlush( HMMIO hmmio, UINT fuFlush);
__declspec(dllimport) MMRESULT __stdcall mmioAdvance( HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuAdvance);
__declspec(dllimport) LRESULT __stdcall mmioSendMessage( HMMIO hmmio, UINT uMsg,
             LPARAM lParam1, LPARAM lParam2);
__declspec(dllimport) MMRESULT __stdcall mmioDescend( HMMIO hmmio, LPMMCKINFO pmmcki,
             const MMCKINFO * pmmckiParent, UINT fuDescend);
__declspec(dllimport) MMRESULT __stdcall mmioAscend( HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend);
__declspec(dllimport) MMRESULT __stdcall mmioCreateChunk( HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuCreate);
#line 2770 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef DWORD MCIERROR;




typedef UINT MCIDEVICEID;



typedef UINT (__stdcall *YIELDPROC)(MCIDEVICEID mciId, DWORD dwYieldData);




__declspec(dllimport) MCIERROR __stdcall mciSendCommandA( MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);
__declspec(dllimport) MCIERROR __stdcall mciSendCommandW( MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);





__declspec(dllimport) MCIERROR __stdcall mciSendStringA( LPCSTR lpstrCommand, LPSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback);
__declspec(dllimport) MCIERROR __stdcall mciSendStringW( LPCWSTR lpstrCommand, LPWSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback);





__declspec(dllimport) MCIDEVICEID __stdcall mciGetDeviceIDA( LPCSTR pszDevice);
__declspec(dllimport) MCIDEVICEID __stdcall mciGetDeviceIDW( LPCWSTR pszDevice);





__declspec(dllimport) MCIDEVICEID __stdcall mciGetDeviceIDFromElementIDA( DWORD dwElementID, LPCSTR lpstrType );
__declspec(dllimport) MCIDEVICEID __stdcall mciGetDeviceIDFromElementIDW( DWORD dwElementID, LPCWSTR lpstrType );





__declspec(dllimport) BOOL __stdcall mciGetErrorStringA( MCIERROR mcierr, LPSTR pszText, UINT cchText);
__declspec(dllimport) BOOL __stdcall mciGetErrorStringW( MCIERROR mcierr, LPWSTR pszText, UINT cchText);
#line 2827 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
__declspec(dllimport) BOOL __stdcall mciSetYieldProc( MCIDEVICEID mciId, YIELDPROC fpYieldProc,
         DWORD dwYieldData);


__declspec(dllimport) HTASK __stdcall mciGetCreatorTask( MCIDEVICEID mciId);
__declspec(dllimport) YIELDPROC __stdcall mciGetYieldProc( MCIDEVICEID mciId, LPDWORD pdwYieldData);
#line 3131 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_GENERIC_PARMS {
    DWORD_PTR dwCallback;
} MCI_GENERIC_PARMS, *PMCI_GENERIC_PARMS, *LPMCI_GENERIC_PARMS;





typedef struct tagMCI_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
} MCI_OPEN_PARMSA, *PMCI_OPEN_PARMSA, *LPMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
} MCI_OPEN_PARMSW, *PMCI_OPEN_PARMSW, *LPMCI_OPEN_PARMSW;





typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS;
typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS;
typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS;
#line 3176 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
} MCI_PLAY_PARMS, *PMCI_PLAY_PARMS, *LPMCI_PLAY_PARMS;



typedef struct tagMCI_SEEK_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTo;
} MCI_SEEK_PARMS, *PMCI_SEEK_PARMS, *LPMCI_SEEK_PARMS;



typedef struct tagMCI_STATUS_PARMS {
    DWORD_PTR dwCallback;
    DWORD_PTR dwReturn;
    DWORD dwItem;
    DWORD dwTrack;
} MCI_STATUS_PARMS, *PMCI_STATUS_PARMS, * LPMCI_STATUS_PARMS;





typedef struct tagMCI_INFO_PARMSA {
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
} MCI_INFO_PARMSA, * LPMCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW {
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
} MCI_INFO_PARMSW, * LPMCI_INFO_PARMSW;




typedef MCI_INFO_PARMSA MCI_INFO_PARMS;
typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS;
#line 3230 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_GETDEVCAPS_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwReturn;
    DWORD dwItem;
} MCI_GETDEVCAPS_PARMS, *PMCI_GETDEVCAPS_PARMS, * LPMCI_GETDEVCAPS_PARMS;





typedef struct tagMCI_SYSINFO_PARMSA {
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
} MCI_SYSINFO_PARMSA, *PMCI_SYSINFO_PARMSA, * LPMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW {
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
} MCI_SYSINFO_PARMSW, *PMCI_SYSINFO_PARMSW, * LPMCI_SYSINFO_PARMSW;





typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS;
typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS;
#line 3276 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
} MCI_SET_PARMS, *PMCI_SET_PARMS, *LPMCI_SET_PARMS;



typedef struct tagMCI_BREAK_PARMS {
    DWORD_PTR dwCallback;

    int nVirtKey;
    HWND hwndBreak;






} MCI_BREAK_PARMS, *PMCI_BREAK_PARMS, * LPMCI_BREAK_PARMS;





typedef struct tagMCI_SAVE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
} MCI_SAVE_PARMSA, *PMCI_SAVE_PARMSA, * LPMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
} MCI_SAVE_PARMSW, *PMCI_SAVE_PARMSW, * LPMCI_SAVE_PARMSW;





typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS;
typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS;
typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS;
#line 3330 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_LOAD_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
} MCI_LOAD_PARMSA, *PMCI_LOAD_PARMSA, * LPMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
} MCI_LOAD_PARMSW, *PMCI_LOAD_PARMSW, * LPMCI_LOAD_PARMSW;





typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS;
typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS;
typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS;
#line 3357 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_RECORD_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
} MCI_RECORD_PARMS, *LPMCI_RECORD_PARMS;
#line 3417 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_VD_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
} MCI_VD_PLAY_PARMS, *PMCI_VD_PLAY_PARMS, *LPMCI_VD_PLAY_PARMS;



typedef struct tagMCI_VD_STEP_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrames;
} MCI_VD_STEP_PARMS, *PMCI_VD_STEP_PARMS, *LPMCI_VD_STEP_PARMS;





typedef struct tagMCI_VD_ESCAPE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpstrCommand;
} MCI_VD_ESCAPE_PARMSA, *PMCI_VD_ESCAPE_PARMSA, *LPMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpstrCommand;
} MCI_VD_ESCAPE_PARMSW, *PMCI_VD_ESCAPE_PARMSW, *LPMCI_VD_ESCAPE_PARMSW;





typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS;
typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS;
#line 3511 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_WAVE_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSA, *PMCI_WAVE_OPEN_PARMSA, *LPMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSW, *PMCI_WAVE_OPEN_PARMSW, *LPMCI_WAVE_OPEN_PARMSW;





typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS;
typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS;
#line 3551 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_WAVE_DELETE_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
} MCI_WAVE_DELETE_PARMS, *PMCI_WAVE_DELETE_PARMS, *LPMCI_WAVE_DELETE_PARMS;



typedef struct tagMCI_WAVE_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;

    UINT wInput;
    UINT wOutput;






    WORD wFormatTag;
    WORD wReserved2;
    WORD nChannels;
    WORD wReserved3;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wReserved4;
    WORD wBitsPerSample;
    WORD wReserved5;
} MCI_WAVE_SET_PARMS, *PMCI_WAVE_SET_PARMS, * LPMCI_WAVE_SET_PARMS;
#line 3623 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_SEQ_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
    DWORD dwTempo;
    DWORD dwPort;
    DWORD dwSlave;
    DWORD dwMaster;
    DWORD dwOffset;
} MCI_SEQ_SET_PARMS, *PMCI_SEQ_SET_PARMS, * LPMCI_SEQ_SET_PARMS;
#line 3703 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_ANIM_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_ANIM_OPEN_PARMSA, *PMCI_ANIM_OPEN_PARMSA, *LPMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_ANIM_OPEN_PARMSW, *PMCI_ANIM_OPEN_PARMSW, *LPMCI_ANIM_OPEN_PARMSW;





typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS;
typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS;
#line 3747 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_ANIM_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
} MCI_ANIM_PLAY_PARMS, *PMCI_ANIM_PLAY_PARMS, *LPMCI_ANIM_PLAY_PARMS;



typedef struct tagMCI_ANIM_STEP_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrames;
} MCI_ANIM_STEP_PARMS, *PMCI_ANIM_STEP_PARMS, *LPMCI_ANIM_STEP_PARMS;





typedef struct tagMCI_ANIM_WINDOW_PARMSA {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
} MCI_ANIM_WINDOW_PARMSA, *PMCI_ANIM_WINDOW_PARMSA, * LPMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
} MCI_ANIM_WINDOW_PARMSW, *PMCI_ANIM_WINDOW_PARMSW, * LPMCI_ANIM_WINDOW_PARMSW;





typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS;
typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS;
#line 3800 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_ANIM_RECT_PARMS {
    DWORD_PTR dwCallback;




    RECT rc;

} MCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS * PMCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS * LPMCI_ANIM_RECT_PARMS;



typedef struct tagMCI_ANIM_UPDATE_PARMS {
    DWORD_PTR dwCallback;
    RECT rc;
    HDC hDC;
} MCI_ANIM_UPDATE_PARMS, *PMCI_ANIM_UPDATE_PARMS, * LPMCI_ANIM_UPDATE_PARMS;
#line 3866 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_OVLY_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_OVLY_OPEN_PARMSA, *PMCI_OVLY_OPEN_PARMSA, *LPMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_OVLY_OPEN_PARMSW, *PMCI_OVLY_OPEN_PARMSW, *LPMCI_OVLY_OPEN_PARMSW;





typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS;
typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS;
#line 3912 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_OVLY_WINDOW_PARMSA {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
} MCI_OVLY_WINDOW_PARMSA, *PMCI_OVLY_WINDOW_PARMSA, * LPMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
} MCI_OVLY_WINDOW_PARMSW, *PMCI_OVLY_WINDOW_PARMSW, * LPMCI_OVLY_WINDOW_PARMSW;





typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS;
typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS;
#line 3946 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_OVLY_RECT_PARMS {
    DWORD_PTR dwCallback;




    RECT rc;

} MCI_OVLY_RECT_PARMS, *PMCI_OVLY_RECT_PARMS, * LPMCI_OVLY_RECT_PARMS;





typedef struct tagMCI_OVLY_SAVE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
} MCI_OVLY_SAVE_PARMSA, *PMCI_OVLY_SAVE_PARMSA, * LPMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
} MCI_OVLY_SAVE_PARMSW, *PMCI_OVLY_SAVE_PARMSW, * LPMCI_OVLY_SAVE_PARMSW;





typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS;
typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS;
#line 3991 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
typedef struct tagMCI_OVLY_LOAD_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
} MCI_OVLY_LOAD_PARMSA, *PMCI_OVLY_LOAD_PARMSA, * LPMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
} MCI_OVLY_LOAD_PARMSW, *PMCI_OVLY_LOAD_PARMSW, * LPMCI_OVLY_LOAD_PARMSW;





typedef MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS;
typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS;
typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS;
#line 4060 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
}




#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 4064 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\mmsystem.h"
#line 180 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\nb30.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\nb30.h"
extern "C" {
#line 40 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\nb30.h"
typedef struct _NCB {
    UCHAR ncb_command;
    UCHAR ncb_retcode;
    UCHAR ncb_lsn;
    UCHAR ncb_num;
    PUCHAR ncb_buffer;
    WORD ncb_length;
    UCHAR ncb_callname[16];
    UCHAR ncb_name[16];
    UCHAR ncb_rto;
    UCHAR ncb_sto;
    void (__stdcall *ncb_post)( struct _NCB * );
    UCHAR ncb_lana_num;
    UCHAR ncb_cmd_cplt;



    UCHAR ncb_reserve[10];

    HANDLE ncb_event;



} NCB, *PNCB;






typedef struct _ADAPTER_STATUS {
    UCHAR adapter_address[6];
    UCHAR rev_major;
    UCHAR reserved0;
    UCHAR adapter_type;
    UCHAR rev_minor;
    WORD duration;
    WORD frmr_recv;
    WORD frmr_xmit;

    WORD iframe_recv_err;

    WORD xmit_aborts;
    DWORD xmit_success;
    DWORD recv_success;

    WORD iframe_xmit_err;

    WORD recv_buff_unavail;
    WORD t1_timeouts;
    WORD ti_timeouts;
    DWORD reserved1;
    WORD free_ncbs;
    WORD max_cfg_ncbs;
    WORD max_ncbs;
    WORD xmit_buf_unavail;
    WORD max_dgram_size;
    WORD pending_sess;
    WORD max_cfg_sess;
    WORD max_sess;
    WORD max_sess_pkt_size;
    WORD name_count;
} ADAPTER_STATUS, *PADAPTER_STATUS;

typedef struct _NAME_BUFFER {
    UCHAR name[16];
    UCHAR name_num;
    UCHAR name_flags;
} NAME_BUFFER, *PNAME_BUFFER;
#line 130 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\nb30.h"
typedef struct _SESSION_HEADER {
    UCHAR sess_name;
    UCHAR num_sess;
    UCHAR rcv_dg_outstanding;
    UCHAR rcv_any_outstanding;
} SESSION_HEADER, *PSESSION_HEADER;

typedef struct _SESSION_BUFFER {
    UCHAR lsn;
    UCHAR state;
    UCHAR local_name[16];
    UCHAR remote_name[16];
    UCHAR rcvs_outstanding;
    UCHAR sends_outstanding;
} SESSION_BUFFER, *PSESSION_BUFFER;
#line 162 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\nb30.h"
typedef struct _LANA_ENUM {
    UCHAR length;
    UCHAR lana[254 +1];
} LANA_ENUM, *PLANA_ENUM;






typedef struct _FIND_NAME_HEADER {
    WORD node_count;
    UCHAR reserved;
    UCHAR unique_group;
} FIND_NAME_HEADER, *PFIND_NAME_HEADER;

typedef struct _FIND_NAME_BUFFER {
    UCHAR length;
    UCHAR access_control;
    UCHAR frame_control;
    UCHAR destination_addr[6];
    UCHAR source_addr[6];
    UCHAR routing_info[18];
} FIND_NAME_BUFFER, *PFIND_NAME_BUFFER;






typedef struct _ACTION_HEADER {
    ULONG transport_id;
    USHORT action_code;
    USHORT reserved;
} ACTION_HEADER, *PACTION_HEADER;
#line 297 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\nb30.h"
UCHAR
__stdcall
Netbios(
    PNCB pncb
    );
#line 313 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\nb30.h"
}
#line 181 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpc.h"
#line 32 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpc.h"
extern "C" {
#line 70 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpc.h"
typedef void * I_RPC_HANDLE;



typedef long RPC_STATUS;
#line 148 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpc.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
#line 23 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
extern "C" {
#line 52 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
typedef unsigned char * RPC_CSTR;





typedef unsigned short * RPC_WSTR;
typedef const unsigned short * RPC_CWSTR;


typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;
#line 72 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
typedef GUID UUID;





typedef struct _RPC_BINDING_VECTOR
{
    unsigned long Count;
    RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;




typedef struct _UUID_VECTOR
{
  unsigned long Count;
  UUID *Uuid[1];
} UUID_VECTOR;




typedef void * RPC_IF_HANDLE;



typedef struct _RPC_IF_ID
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;
#line 185 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
typedef struct _RPC_PROTSEQ_VECTORA
{
    unsigned int Count;
    unsigned char * Protseq[1];
} RPC_PROTSEQ_VECTORA;

typedef struct _RPC_PROTSEQ_VECTORW
{
    unsigned int Count;
    unsigned short * Protseq[1];
} RPC_PROTSEQ_VECTORW;
#line 212 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
typedef struct _RPC_POLICY {
    unsigned int Length ;
    unsigned long EndpointFlags ;
    unsigned long NICFlags ;
    } RPC_POLICY, *PRPC_POLICY ;

typedef void __stdcall
RPC_OBJECT_INQ_FN (
         UUID * ObjectUuid,
          UUID * TypeUuid,
          RPC_STATUS * Status
    );


typedef RPC_STATUS __stdcall
RPC_IF_CALLBACK_FN (
         RPC_IF_HANDLE InterfaceUuid,
         void *Context
    ) ;

typedef void __stdcall
RPC_SECURITY_CALLBACK_FN (
         void *Context
    ) ;



typedef struct
{
    unsigned int Count;
    unsigned long Stats[1];
} RPC_STATS_VECTOR;






typedef struct
{
  unsigned long Count;
  RPC_IF_ID * IfId[1];
} RPC_IF_ID_VECTOR;


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCopy (
         RPC_BINDING_HANDLE SourceBinding,
          RPC_BINDING_HANDLE * DestinationBinding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFree (
            RPC_BINDING_HANDLE * Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetOption (
         RPC_BINDING_HANDLE hBinding,
         unsigned long option,
         ULONG_PTR optionValue
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqOption (
          RPC_BINDING_HANDLE hBinding,
          unsigned long option,
          ULONG_PTR *pOptionValue
    );







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFromStringBindingA (
         RPC_CSTR StringBinding,
          RPC_BINDING_HANDLE * Binding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFromStringBindingW (
         RPC_WSTR StringBinding,
          RPC_BINDING_HANDLE * Binding
    );
#line 336 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsGetContextBinding (
         void *ContextHandle,
          RPC_BINDING_HANDLE * Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqObject (
         RPC_BINDING_HANDLE Binding,
          UUID * ObjectUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingReset (
         RPC_BINDING_HANDLE Binding
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetObject (
         RPC_BINDING_HANDLE Binding,
         UUID * ObjectUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqDefaultProtectLevel (
          unsigned long AuthnSvc,
         unsigned long *AuthnLevel
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingToStringBindingA (
         RPC_BINDING_HANDLE Binding,
                RPC_CSTR * StringBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingToStringBindingW (
         RPC_BINDING_HANDLE Binding,
                RPC_WSTR * StringBinding
    );
#line 421 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingVectorFree (
                  RPC_BINDING_VECTOR * * BindingVector
    );







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingComposeA (
             RPC_CSTR ObjUuid,
             RPC_CSTR ProtSeq,
             RPC_CSTR NetworkAddr,
             RPC_CSTR Endpoint,
             RPC_CSTR Options,
                    RPC_CSTR * StringBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingComposeW (
             RPC_WSTR ObjUuid,
             RPC_WSTR ProtSeq,
             RPC_WSTR NetworkAddr,
             RPC_WSTR Endpoint,
             RPC_WSTR Options,
                    RPC_WSTR * StringBinding
    );
#line 484 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingParseA (
         RPC_CSTR StringBinding,
                    RPC_CSTR * ObjUuid,
                    RPC_CSTR * Protseq,
                    RPC_CSTR * NetworkAddr,
                    RPC_CSTR * Endpoint,
                    RPC_CSTR * NetworkOptions
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingParseW (
         RPC_WSTR StringBinding,
                    RPC_WSTR * ObjUuid,
                    RPC_WSTR * Protseq,
                    RPC_WSTR * NetworkAddr,
                    RPC_WSTR * Endpoint,
                    RPC_WSTR * NetworkOptions
    );
#line 536 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeA (
            RPC_CSTR * String
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeW (
            RPC_WSTR * String
    );
#line 568 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcIfInqId (
         RPC_IF_HANDLE RpcIfHandle,
          RPC_IF_ID * RpcIfId
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidA (
         RPC_CSTR Protseq
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidW (
         RPC_WSTR Protseq
    );
#line 612 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqComTimeout (
         RPC_BINDING_HANDLE Binding,
          unsigned int * Timeout
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetComTimeout (
         RPC_BINDING_HANDLE Binding,
         unsigned int Timeout
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetCancelTimeout(
         long Timeout
    );






__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkInqProtseqsA (
                RPC_PROTSEQ_VECTORA * * ProtseqVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkInqProtseqsW (
                RPC_PROTSEQ_VECTORW * * ProtseqVector
    );
#line 674 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcObjectInqType (
         UUID * ObjUuid,
                       UUID * TypeUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcObjectSetInqFn (
         RPC_OBJECT_INQ_FN * InquiryFn
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcObjectSetType (
         UUID * ObjUuid,
                      UUID * TypeUuid
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeA (
                  RPC_PROTSEQ_VECTORA * * ProtseqVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeW (
                  RPC_PROTSEQ_VECTORW * * ProtseqVector
    );
#line 735 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqBindings (
                RPC_BINDING_VECTOR * * BindingVector
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqIf (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
                void * * MgrEpv
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerListen (
         unsigned int MinimumCallThreads,
         unsigned int MaxCalls,
         unsigned int DontWait
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIfEx (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv,
         unsigned int Flags,
         unsigned int MaxCalls,
             RPC_IF_CALLBACK_FN *IfCallback
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf2 (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv,
         unsigned int Flags,
         unsigned int MaxCalls,
         unsigned int MaxRpcSize,
             RPC_IF_CALLBACK_FN *IfCallbackFn
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnregisterIf (
             RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
         unsigned int WaitForCallsToComplete
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnregisterIfEx (
             RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
         int RundownContextHandles
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqs (
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsEx (
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIf (
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIfEx (
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );






__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
#line 940 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
#line 1019 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
#line 1094 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
void
__stdcall
RpcServerYield (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtStatsVectorFree (
            RPC_STATS_VECTOR ** StatsVector
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqStats (
             RPC_BINDING_HANDLE Binding,
                RPC_STATS_VECTOR ** Statistics
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtIsServerListening (
             RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtStopServerListening (
             RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtWaitServerListen (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetServerStackSize (
         unsigned long ThreadStackSize
    );


__declspec(dllimport)
void
__stdcall
RpcSsDontSerializeContext (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEnableIdleCleanup (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqIfIds (
             RPC_BINDING_HANDLE Binding,
                RPC_IF_ID_VECTOR * * IfIdVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcIfIdVectorFree (
                  RPC_IF_ID_VECTOR * * IfIdVector
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameA (
             RPC_BINDING_HANDLE Binding,
         unsigned long AuthnSvc,
                RPC_CSTR * ServerPrincName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameW (
             RPC_BINDING_HANDLE Binding,
         unsigned long AuthnSvc,
                RPC_WSTR * ServerPrincName
    );
#line 1222 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameA (
         unsigned long AuthnSvc,
                RPC_CSTR * PrincName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameW (
         unsigned long AuthnSvc,
                RPC_WSTR * PrincName
    );
#line 1257 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpResolveBinding (
         RPC_BINDING_HANDLE Binding,
         RPC_IF_HANDLE IfSpec
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameA (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
                RPC_CSTR * EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameW (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
                RPC_WSTR * EntryName
    );
#line 1306 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
typedef void * RPC_AUTH_IDENTITY_HANDLE;
typedef void * RPC_AUTHZ_HANDLE;
#line 1376 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
typedef struct _RPC_SECURITY_QOS {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;







typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
                                               unsigned short *User;
  unsigned long UserLength;
                                                 unsigned short *Domain;
  unsigned long DomainLength;
                                                   unsigned short *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;





typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
                               unsigned char *User;
  unsigned long UserLength;
                                 unsigned char *Domain;
  unsigned long DomainLength;
                                   unsigned char *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;
#line 1454 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;



typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
                                         unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_W *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
                                              unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_A *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
    unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;





typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
{
    RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
                                         unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
    RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
                                              unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
{
    RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
                                         unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
    RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
                                              unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;



typedef struct _RPC_SECURITY_QOS_V2_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_W, *PRPC_SECURITY_QOS_V2_W;

typedef struct _RPC_SECURITY_QOS_V2_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_A, *PRPC_SECURITY_QOS_V2_A;




typedef struct _RPC_SECURITY_QOS_V3_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_W, *PRPC_SECURITY_QOS_V3_W;

typedef struct _RPC_SECURITY_QOS_V3_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_A, *PRPC_SECURITY_QOS_V3_A;






typedef struct _RPC_SECURITY_QOS_V4_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_W, *PRPC_SECURITY_QOS_V4_W;

typedef struct _RPC_SECURITY_QOS_V4_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_A, *PRPC_SECURITY_QOS_V4_A;
#line 1709 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned short *NetworkAddress;
    unsigned short *StringEndpoint;
    union
    {
        unsigned short *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_W, *PRPC_BINDING_HANDLE_TEMPLATE_V1_W;

typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned char *NetworkAddress;
    unsigned char *StringEndpoint;
    union
    {
        unsigned char *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_A, *PRPC_BINDING_HANDLE_TEMPLATE_V1_A;

typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_W {
    unsigned long Version;
    unsigned short *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_W *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_W, *PRPC_BINDING_HANDLE_SECURITY_V1_W;



typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_A {
    unsigned long Version;
    unsigned char *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_A *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_A, *PRPC_BINDING_HANDLE_SECURITY_V1_A;



typedef struct _RPC_BINDING_HANDLE_OPTIONS_V1 {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ComTimeout;
    unsigned long CallTimeout;
} RPC_BINDING_HANDLE_OPTIONS_V1, *PRPC_BINDING_HANDLE_OPTIONS_V1;
#line 1788 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCreateA (
         RPC_BINDING_HANDLE_TEMPLATE_V1_A * Template,
             RPC_BINDING_HANDLE_SECURITY_V1_A * Security,
             RPC_BINDING_HANDLE_OPTIONS_V1 * Options,
          RPC_BINDING_HANDLE * Binding
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCreateW (
         RPC_BINDING_HANDLE_TEMPLATE_V1_W * Template,
             RPC_BINDING_HANDLE_SECURITY_V1_W * Security,
             RPC_BINDING_HANDLE_OPTIONS_V1 * Options,
          RPC_BINDING_HANDLE * Binding
    );







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingGetTrainingContextHandle (
         RPC_BINDING_HANDLE Binding,
                void ** ContextHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqBindingHandle (
          RPC_BINDING_HANDLE * Binding
    );



typedef enum _RPC_HTTP_REDIRECTOR_STAGE
{
    RPCHTTP_RS_REDIRECT = 1,
    RPCHTTP_RS_ACCESS_1,
    RPCHTTP_RS_SESSION,
    RPCHTTP_RS_ACCESS_2,
    RPCHTTP_RS_INTERFACE
} RPC_HTTP_REDIRECTOR_STAGE;



typedef RPC_STATUS
(__stdcall * RPC_NEW_HTTP_PROXY_CHANNEL) (
         RPC_HTTP_REDIRECTOR_STAGE RedirectorStage,
         RPC_WSTR ServerName,
         RPC_WSTR ServerPort,
             RPC_WSTR RemoteUser,
             RPC_WSTR AuthType,
            void * ResourceUuid,
            void * SessionId,
             void * Interface,
             void * Reserved,
         unsigned long Flags,
                    RPC_WSTR * NewServerName,
                    RPC_WSTR * NewServerPort
    );
#line 1871 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
typedef void
(__stdcall * RPC_HTTP_PROXY_FREE_STRING) (
         RPC_WSTR String
    );







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcImpersonateClient (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcRevertToSelfEx (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcRevertToSelf (
    void
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientA (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                    RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientW (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                    RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExA (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                    RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc,
          unsigned long Flags
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExW (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                    RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc,
          unsigned long Flags
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoA (
         RPC_BINDING_HANDLE Binding,
                    RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoW (
         RPC_BINDING_HANDLE Binding,
                    RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoA (
         RPC_BINDING_HANDLE Binding,
             RPC_CSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExA (
         RPC_BINDING_HANDLE Binding,
             RPC_CSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc,
             RPC_SECURITY_QOS * SecurityQos
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoW (
         RPC_BINDING_HANDLE Binding,
             RPC_WSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExW (
         RPC_BINDING_HANDLE Binding,
             RPC_WSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
             unsigned long AuthzSvc,
             RPC_SECURITY_QOS * SecurityQOS
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExA (
         RPC_BINDING_HANDLE Binding,
                    RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc,
          unsigned long RpcQosVersion,
              RPC_SECURITY_QOS *SecurityQOS
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExW (
         RPC_BINDING_HANDLE Binding,
                    RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc,
              unsigned long RpcQosVersion,
              RPC_SECURITY_QOS * SecurityQOS
    );

typedef void
(__stdcall * RPC_AUTH_KEY_RETRIEVAL_FN) (
         void * Arg,
         RPC_WSTR ServerPrincName,
         unsigned long KeyVer,
                void * * Key,
          RPC_STATUS * Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerCompleteSecurityCallback(
         RPC_BINDING_HANDLE BindingHandle,
         RPC_STATUS Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoA (
             RPC_CSTR ServerPrincName,
         unsigned long AuthnSvc,
             RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
             void * Arg
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoW (
             RPC_WSTR ServerPrincName,
         unsigned long AuthnSvc,
             RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
             void * Arg
    );
#line 2186 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
typedef struct {
    unsigned char * UserName;
    unsigned char * ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1, * PRPC_CLIENT_INFORMATION1;



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingServerFromClient (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_BINDING_HANDLE * ServerBinding
    );

__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
RpcRaiseException (
         RPC_STATUS exception
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcTestCancel(
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerTestCancel (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcCancelThread(
         void * Thread
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcCancelThreadEx(
         void * Thread,
         long Timeout
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreate (
          UUID * Uuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreateSequential (
          UUID * Uuid
    );




__declspec(dllimport)
RPC_STATUS
__stdcall
UuidToStringA (
         const UUID * Uuid,
                RPC_CSTR * StringUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidFromStringA (
             RPC_CSTR StringUuid,
          UUID * Uuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidToStringW (
         const UUID * Uuid,
                RPC_WSTR * StringUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidFromStringW (
             RPC_WSTR StringUuid,
          UUID * Uuid
    );
#line 2324 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
signed int
__stdcall
UuidCompare (
         UUID * Uuid1,
         UUID * Uuid2,
          RPC_STATUS * Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreateNil (
          UUID * NilUuid
    );

__declspec(dllimport)
int
__stdcall
UuidEqual (
         UUID * Uuid1,
         UUID * Uuid2,
          RPC_STATUS * Status
    );

__declspec(dllimport)
unsigned short
__stdcall
UuidHash (
         UUID * Uuid,
          RPC_STATUS * Status
    );

__declspec(dllimport)
int
__stdcall
UuidIsNil (
         UUID * Uuid,
          RPC_STATUS * Status
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceA (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_CSTR Annotation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceW (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_WSTR Annotation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterA (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_CSTR Annotation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterW (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_WSTR Annotation
    );
#line 2440 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpUnregister(
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
DceErrorInqTextA (
         RPC_STATUS RpcStatus,
                                         RPC_CSTR ErrorText
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
DceErrorInqTextW (
         RPC_STATUS RpcStatus,
                                         RPC_WSTR ErrorText
    );
#line 2487 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
typedef I_RPC_HANDLE * RPC_EP_INQ_HANDLE;
#line 2500 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqBegin (
                  RPC_BINDING_HANDLE EpBinding,
         unsigned long InquiryType,
             RPC_IF_ID * IfId,
             unsigned long VersOption,
             UUID * ObjectUuid,
          RPC_EP_INQ_HANDLE * InquiryContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqDone (
            RPC_EP_INQ_HANDLE * InquiryContext
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextA (
         RPC_EP_INQ_HANDLE InquiryContext,
          RPC_IF_ID * IfId,
              RPC_BINDING_HANDLE * Binding,
              UUID * ObjectUuid,
                    RPC_CSTR * Annotation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextW (
         RPC_EP_INQ_HANDLE InquiryContext,
          RPC_IF_ID * IfId,
              RPC_BINDING_HANDLE * Binding,
              UUID * ObjectUuid,
                    RPC_WSTR * Annotation
    );
#line 2563 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpUnregister (
             RPC_BINDING_HANDLE EpBinding,
         RPC_IF_ID * IfId,
         RPC_BINDING_HANDLE Binding,
             UUID * ObjectUuid
    );

typedef int
(__stdcall * RPC_MGMT_AUTHORIZATION_FN) (
         RPC_BINDING_HANDLE ClientBinding,
         unsigned long RequestedMgmtOperation,
          RPC_STATUS * Status
    );







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetAuthorizationFn (
         RPC_MGMT_AUTHORIZATION_FN AuthorizationFn
    );


__declspec(dllimport)
int
__stdcall
RpcExceptionFilter (
         unsigned long ExceptionCode
    );
#line 2621 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdcep.h"
#line 25 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdcep.h"
extern "C" {


typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER, * PRPC_SYNTAX_IDENTIFIER;

typedef struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void * Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void * RpcInterfaceInformation;
    void * ReservedForRuntime;
    void * ManagerEpv;
    void * ImportContext;
    unsigned long RpcFlags;
} RPC_MESSAGE, * PRPC_MESSAGE;


typedef RPC_STATUS
__stdcall RPC_FORWARD_FUNCTION(
                          UUID * InterfaceId,
                          RPC_VERSION * InterfaceVersion,
                          UUID * ObjectId,
                          unsigned char * Rpcpro,
                          void * * ppDestEndpoint);

enum RPC_ADDRESS_CHANGE_TYPE
{
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED,
    PROTOCOL_ADDRESS_CHANGE
};

typedef void
__stdcall RPC_ADDRESS_CHANGE_FN(
                           void * arg
                        );
#line 133 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdcep.h"
typedef
void
(__stdcall * RPC_DISPATCH_FUNCTION) (
           PRPC_MESSAGE Message
    );

typedef struct {
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION * DispatchTable;
    LONG_PTR Reserved;
} RPC_DISPATCH_TABLE, * PRPC_DISPATCH_TABLE;

typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char * RpcProtocolSequence;
    unsigned char * Endpoint;
} RPC_PROTSEQ_ENDPOINT, * PRPC_PROTSEQ_ENDPOINT;
#line 158 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdcep.h"
typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void *DefaultManagerEpv;
    void const *InterpreterInfo;
    unsigned int Flags ;
} RPC_SERVER_INTERFACE, * PRPC_SERVER_INTERFACE;

typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    ULONG_PTR Reserved;
    void const * InterpreterInfo;
    unsigned int Flags ;
} RPC_CLIENT_INTERFACE, * PRPC_CLIENT_INTERFACE;


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNegotiateTransferSyntax (
           RPC_MESSAGE * Message
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetBuffer (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetBufferWithObject (
           RPC_MESSAGE * Message,
       UUID * ObjectUuid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcSendReceive (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcFreeBuffer (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcSend (
           PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReceive (
           PRPC_MESSAGE Message,
       unsigned int Size
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcFreePipeBuffer (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReallocPipeBuffer (
         PRPC_MESSAGE Message,
               unsigned int NewSize
    );

typedef void * I_RPC_MUTEX;

__declspec(dllimport)
void
__stdcall
I_RpcRequestMutex (
           I_RPC_MUTEX * Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcClearMutex (
       I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcDeleteMutex (
       I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void *
__stdcall
I_RpcAllocate (
       unsigned int Size
    );

__declspec(dllimport)
void
__stdcall
I_RpcFree (
       void * Object
    );

__declspec(dllimport)
void
__stdcall
I_RpcPauseExecution (
       unsigned long Milliseconds
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetExtendedError (
    void
    );

typedef
void
(__stdcall * PRPC_RUNDOWN) (
    void * AssociationContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcMonitorAssociation (
       RPC_BINDING_HANDLE Handle,
       PRPC_RUNDOWN RundownRoutine,
       void * Context
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcStopMonitorAssociation (
       RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
I_RpcGetCurrentCallHandle(
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetAssociationContext (
       RPC_BINDING_HANDLE BindingHandle,
        void * * AssociationContext
    );

__declspec(dllimport)
void *
__stdcall
I_RpcGetServerContextList (
       RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
void
__stdcall
I_RpcSetServerContextList (
       RPC_BINDING_HANDLE BindingHandle,
        void * ServerContextList
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceExported (
       unsigned long EntryNameSyntax,
       unsigned short *EntryName,
       RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceUnexported (
       unsigned long EntryNameSyntax,
       unsigned short *EntryName,
       RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingToStaticStringBindingW (
       RPC_BINDING_HANDLE Binding,
        unsigned short **StringBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContext (
       RPC_BINDING_HANDLE Binding,
        void **SecurityContextHandle
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContextKeyInfo (
             RPC_BINDING_HANDLE Binding,
            void *KeyInfo
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqWireIdForSnego (
         RPC_BINDING_HANDLE Binding,
          RPC_CSTR WireId
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqMarshalledTargetInfo (
         RPC_BINDING_HANDLE Binding,
          unsigned long * MarshalledTargetInfoSize,
                                                   RPC_CSTR * MarshalledTargetInfo
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqLocalClientPID (
       RPC_BINDING_HANDLE Binding,
        unsigned long *Pid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingHandleToAsyncHandle (
       RPC_BINDING_HANDLE Binding,
        void **AsyncHandle
    );




__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameW (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameA (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2A (
             RPC_CSTR NetworkAddress,
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor,
         void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2W (
             RPC_WSTR NetworkAddress,
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor,
         void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2W (
             RPC_WSTR NetworkAddress,
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2A (
             RPC_CSTR NetworkAddress,
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         void * Policy
    );
#line 548 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerStartService (
         RPC_WSTR Protseq,
         RPC_WSTR Endpoint,
         RPC_IF_HANDLE IfSpec
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointW (
         RPC_BINDING_HANDLE Binding,
                    RPC_WSTR *DynamicEndpoint
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointA (
         RPC_BINDING_HANDLE Binding,
                    RPC_CSTR *DynamicEndpoint
    );
#line 594 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerCheckClientRestriction (
       RPC_BINDING_HANDLE Context
    );







__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqTransportType (
       RPC_BINDING_HANDLE Binding,
        unsigned int * Type
    );

typedef struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcIfInqTransferSyntaxes (
       RPC_IF_HANDLE RpcIfHandle,
        RPC_TRANSFER_SYNTAX * TransferSyntaxes,
       unsigned int TransferSyntaxSize,
        unsigned int * TransferSyntaxCount
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_UuidCreate (
        UUID * Uuid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingCopy (
       RPC_BINDING_HANDLE SourceBinding,
        RPC_BINDING_HANDLE * DestinationBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingIsClientLocal (
                RPC_BINDING_HANDLE BindingHandle,
        unsigned int * ClientLocalFlag
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqConnId (
       RPC_BINDING_HANDLE Binding,
        void **ConnId,
        int *pfFirstCall
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingCreateNP (
         RPC_WSTR ServerName,
         RPC_WSTR ServiceName,
         RPC_WSTR NetworkOptions,
          RPC_BINDING_HANDLE *Binding
    );

__declspec(dllimport)
void
__stdcall
I_RpcSsDontSerializeContext (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcLaunchDatagramReceiveThread(
    void * pAddress
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerRegisterForwardFunction (
       RPC_FORWARD_FUNCTION * pForwardFunction
    );

RPC_ADDRESS_CHANGE_FN * __stdcall
I_RpcServerInqAddressChangeFn(
    void
    );

RPC_STATUS __stdcall
I_RpcServerSetAddressChangeFn(
       RPC_ADDRESS_CHANGE_FN * pAddressChangeFn
    );
#line 712 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqLocalConnAddress (
       RPC_BINDING_HANDLE Binding,
           void *Buffer,
           unsigned long *BufferSize,
        unsigned long *AddressFormat
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqRemoteConnAddress (
       RPC_BINDING_HANDLE Binding,
           void *Buffer,
           unsigned long *BufferSize,
        unsigned long *AddressFormat
    );

__declspec(dllimport)
void
__stdcall
I_RpcSessionStrictContextHandle (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcTurnOnEEInfoPropagation (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcConnectionInqSockBuffSize(
      unsigned long * RecvBuffSize,
      unsigned long * SendBuffSize
  );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcConnectionSetSockBuffSize(
      unsigned long RecvBuffSize,
      unsigned long SendBuffSize
   );

typedef
void
(*RPCLT_PDU_FILTER_FUNC) (
       void *Buffer,
       unsigned int BufferLength,
       int fDatagram
    );

typedef
void
(__cdecl *RPC_SETFILTER_FUNC) (
       RPCLT_PDU_FILTER_FUNC pfnFilter
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerStartListening(
    void * hWnd
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerStopListening(
    void
    );

typedef RPC_STATUS (*RPC_BLOCKING_FN) (
       void * hWnd,
       void * Context,
                void * hSyncEvent
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingSetAsync(
       RPC_BINDING_HANDLE Binding,
       RPC_BLOCKING_FN BlockingFn,
       unsigned long ServerTid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcSetThreadParams(
       int fClientFree,
                void *Context,
                void * hWndClient
    );

__declspec(dllimport)
unsigned int
__stdcall
I_RpcWindowProc(
       void * hWnd,
       unsigned int Message,
       unsigned int wParam,
       unsigned long lParam
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointA (
         RPC_CSTR Protseq,
         RPC_CSTR Endpoint
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointW (
         RPC_WSTR Protseq,
         RPC_WSTR Endpoint
    );
#line 849 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqTransportType(
        unsigned int * Type
    );

__declspec(dllimport)
long
__stdcall
I_RpcMapWin32Status (
       RPC_STATUS Status
    );







typedef struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
{
    unsigned long BufferSize;
                               char *Buffer;
} RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;

typedef struct _RDR_CALLOUT_STATE
{

    RPC_STATUS LastError;
    void *LastEEInfo;

    RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;


    unsigned short *ServerName;
    unsigned short *ServerPort;
    unsigned short *RemoteUser;
    unsigned short *AuthType;
    unsigned char ResourceTypePresent;
    unsigned char SessionIdPresent;
    unsigned char InterfacePresent;
    UUID ResourceType;
    UUID SessionId;
    RPC_SYNTAX_IDENTIFIER Interface;
    void *CertContext;


} RDR_CALLOUT_STATE;



typedef RPC_STATUS
(__stdcall *I_RpcProxyIsValidMachineFn)
        (
             RPC_WSTR Machine,
             RPC_WSTR DotMachine,
             unsigned long PortNumber
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientAddressFn)
        (
           void *Context,
            char *Buffer,
            unsigned long *BufferLength
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetConnectionTimeoutFn)
        (
            unsigned long *ConnectionTimeout
        );


typedef RPC_STATUS
(__stdcall *I_RpcPerformCalloutFn)
    (
       void *Context,
       RDR_CALLOUT_STATE *CallOutState,
       RPC_HTTP_REDIRECTOR_STAGE Stage
    );

typedef void
(__stdcall *I_RpcFreeCalloutStateFn)
    (
       RDR_CALLOUT_STATE *CallOutState
    );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientSessionAndResourceUUID)
        (
             void *Context,
                  int *SessionIdPresent,
                  UUID *SessionId,
              int *ResourceIdPresent,
              UUID *ResourceId
        );




typedef RPC_STATUS
(__stdcall *I_RpcProxyFilterIfFn)
    (
         void *Context,
         UUID *IfUuid,
         unsigned short IfMajorVersion,
          int *fAllow
    );

typedef enum RpcProxyPerfCounters
{
    RpcCurrentUniqueUser = 1,
    RpcBackEndConnectionAttempts,
    RpcBackEndConnectionFailed,
    RpcRequestsPerSecond,
    RpcIncomingConnections,
    RpcIncomingBandwidth,
    RpcOutgoingBandwidth,
    RpcAttemptedLbsDecisions,
    RpcFailedLbsDecisions,
    RpcAttemptedLbsMessages,
    RpcFailedLbsMessages,
    RpcLastCounter
} RpcPerfCounters;

typedef void
(__stdcall *I_RpcProxyUpdatePerfCounterFn)
    (
         RpcPerfCounters Counter,
         int ModifyTrend,
         unsigned long Size
    );

 typedef void
(__stdcall *I_RpcProxyUpdatePerfCounterBackendServerFn)
    (
         unsigned short* MachineName,
         int IsConnectEvent
    );







typedef struct tagI_RpcProxyCallbackInterface
{
    I_RpcProxyIsValidMachineFn IsValidMachineFn;
    I_RpcProxyGetClientAddressFn GetClientAddressFn;
    I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
    I_RpcPerformCalloutFn PerformCalloutFn;
    I_RpcFreeCalloutStateFn FreeCalloutStateFn;
    I_RpcProxyGetClientSessionAndResourceUUID GetClientSessionAndResourceUUIDFn;

    I_RpcProxyFilterIfFn ProxyFilterIfFn;
    I_RpcProxyUpdatePerfCounterFn RpcProxyUpdatePerfCounterFn;
    I_RpcProxyUpdatePerfCounterBackendServerFn RpcProxyUpdatePerfCounterBackendServerFn;

} I_RpcProxyCallbackInterface;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcProxyNewConnection (
       unsigned long ConnectionType,
       unsigned short *ServerAddress,
       unsigned short *ServerPort,
       unsigned short *MinConnTimeout,
       void *ConnectionParameter,
                RDR_CALLOUT_STATE *CallOutState,
       I_RpcProxyCallbackInterface *ProxyCallbackInterface
    );
#line 1049 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReplyToClientWithStatus (
       void *ConnectionParameter,
       RPC_STATUS RpcStatus
    );

__declspec(dllimport)
void
__stdcall
I_RpcRecordCalloutFailure (
       RPC_STATUS RpcStatus,
       RDR_CALLOUT_STATE *CallOutState,
       unsigned short *DllName
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcMgmtEnableDedicatedThreadPool (
    );



}
#line 2621 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcdce.h"



}
#line 148 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpc.h"


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcnsi.h"
#line 23 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcnsi.h"
typedef void * RPC_NS_HANDLE;
#line 39 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcnsi.h"
__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             RPC_BINDING_VECTOR *BindingVec,
             UUID_VECTOR *ObjectUuidVec
    );


__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectUuidVec
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             RPC_BINDING_VECTOR *BindingVec,
             UUID_VECTOR *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectUuidVec
    );





RPC_STATUS __stdcall
RpcNsBindingExportPnPA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );



RPC_STATUS __stdcall
RpcNsBindingExportPnPW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );





__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
         unsigned long BindingMaxCount,
          RPC_NS_HANDLE *LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
         unsigned long BindingMaxCount,
          RPC_NS_HANDLE *LookupContext
    );


__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupNext(
        RPC_NS_HANDLE LookupContext,
        RPC_BINDING_VECTOR * * BindingVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupDone(
           RPC_NS_HANDLE * LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteA(
         unsigned long GroupNameSyntax,
             RPC_CSTR GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextA(
            RPC_NS_HANDLE InquiryContext,
                RPC_CSTR *MemberName
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteW(
         unsigned long GroupNameSyntax,
             RPC_WSTR GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextW(
            RPC_NS_HANDLE InquiryContext,
                RPC_WSTR *MemberName
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName,
         unsigned long Priority,
             RPC_CSTR Annotation
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
         unsigned long InquiryType,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
         unsigned long MemberNameSyntax,
             RPC_CSTR MemberName,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextA(
         RPC_NS_HANDLE InquiryContext,
              RPC_IF_ID *IfId,
          RPC_CSTR *MemberName,
          unsigned long *Priority,
          RPC_CSTR *Annotation
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName,
         unsigned long Priority,
             RPC_WSTR Annotation
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
         unsigned long InquiryType,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
         unsigned long MemberNameSyntax,
             RPC_WSTR MemberName,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextW(
         RPC_NS_HANDLE InquiryContext,
              RPC_IF_ID *IfId,
          RPC_WSTR *MemberName,
          unsigned long *Priority,
          RPC_WSTR *Annotation
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_NS_HANDLE *InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_NS_HANDLE *InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqNext(
        RPC_NS_HANDLE InquiryContext,
        UUID * ObjUuid
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_CSTR *ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
             UUID_VECTOR *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_IF_ID_VECTOR * *IfIdVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtHandleSetExpAge(
       RPC_NS_HANDLE NsHandle,
       unsigned long ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtInqExpAge(
        unsigned long * ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtSetExpAge(
       unsigned long ExpirationAge
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_WSTR *ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
             UUID_VECTOR *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_IF_ID_VECTOR * *IfIdVec
    );





__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
          RPC_NS_HANDLE *ImportContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
          RPC_NS_HANDLE *ImportContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportNext(
       RPC_NS_HANDLE ImportContext,
        RPC_BINDING_HANDLE * Binding
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportDone(
           RPC_NS_HANDLE * ImportContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingSelect(
           RPC_BINDING_VECTOR * BindingVec,
        RPC_BINDING_HANDLE * Binding
    );
#line 150 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpc.h"


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcnterr.h"
#line 152 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpc.h"
#line 204 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpc.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcasync.h"
#line 28 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcasync.h"
extern "C" {
#line 48 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcasync.h"
typedef
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,

    RpcNotificationTypeApc,
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,

    RpcNotificationTypeCallback
} RPC_NOTIFICATION_TYPES;


typedef
enum _RPC_ASYNC_EVENT {
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete,
    RpcClientDisconnect,
    RpcClientCancel
    } RPC_ASYNC_EVENT;
#line 82 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcasync.h"
struct _RPC_ASYNC_STATE;

typedef void __stdcall
RPCNOTIFICATION_ROUTINE (
                  struct _RPC_ASYNC_STATE *pAsync,
                  void *Context,
                  RPC_ASYNC_EVENT Event);
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;

typedef union _RPC_ASYNC_NOTIFICATION_INFO {




    struct {
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        HANDLE hThread;
        } APC;







    struct {
        HANDLE hIOPort;
        DWORD dwNumberOfBytesTransferred;
        DWORD_PTR dwCompletionKey;
        LPOVERLAPPED lpOverlapped;
        } IOC;






    struct {
        HWND hWnd;
        UINT Msg;
        } HWND;
#line 132 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcasync.h"
    HANDLE hEvent;
#line 145 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcasync.h"
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO;

typedef struct _RPC_ASYNC_STATE {
    unsigned int Size;
    unsigned long Signature;
    long Lock;
    unsigned long Flags;
    void *StubInfo;
    void *UserInfo;
    void *RuntimeInfo;
    RPC_ASYNC_EVENT Event;

    RPC_NOTIFICATION_TYPES NotificationType;
    RPC_ASYNC_NOTIFICATION_INFO u;

    LONG_PTR Reserved[4];
    } RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncInitializeHandle (
                       PRPC_ASYNC_STATE pAsync,
         unsigned int Size
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncRegisterInfo (
         PRPC_ASYNC_STATE pAsync
    ) ;


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncGetCallStatus (
         PRPC_ASYNC_STATE pAsync
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCompleteCall (
            PRPC_ASYNC_STATE pAsync,
              void *Reply
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncAbortCall (
            PRPC_ASYNC_STATE pAsync,
         unsigned long ExceptionCode
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCancelCall (
            PRPC_ASYNC_STATE pAsync,
         BOOL fAbort
    ) ;






typedef enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString,
    eeptLongVal,
    eeptShortVal,
    eeptPointerVal,
    eeptNone,
    eeptBinary
} ExtendedErrorParamTypes;




typedef struct tagBinaryParam
{
    void *Buffer;
    short Size;
} BinaryParam;

typedef struct tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;
    union
        {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        long LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
        } u;
} RPC_EE_INFO_PARAM;
#line 266 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcasync.h"
typedef struct tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union
        {

        SYSTEMTIME SystemTime;
        FILETIME FileTime;



        } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
} RPC_EXTENDED_ERROR_INFO;

typedef struct tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void *CurrentPos;
    void *Head;
} RPC_ERROR_ENUM_HANDLE;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorStartEnumeration (
          RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorGetNextRecord (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
         BOOL CopyStrings,
          RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorEndEnumeration (
            RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorResetEnumeration (
            RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorGetNumberOfRecords (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
          int *Records
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorSaveErrorInfo (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
                                  PVOID *ErrorBlob,
          size_t *BlobSize
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorLoadErrorInfo (
                          PVOID ErrorBlob,
         size_t BlobSize,
          RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorAddRecord (
         RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
void
__stdcall
RpcErrorClearInformation (
    void
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCleanupThread (
         DWORD dwTimeout
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcGetAuthorizationContextForClient (
             RPC_BINDING_HANDLE ClientBinding,
         BOOL ImpersonateOnReturn,
             PVOID Reserved1,
             PLARGE_INTEGER pExpirationTime,
         LUID Reserved2,
         DWORD Reserved3,
             PVOID Reserved4,
          PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcFreeAuthorizationContext (
            PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockExclusive (
             RPC_BINDING_HANDLE ServerBindingHandle,
         PVOID UserContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockShared (
         RPC_BINDING_HANDLE ServerBindingHandle,
         PVOID UserContext
    );


typedef enum tagRpcLocalAddressFormat
{
    rlafInvalid = 0,
    rlafIPv4,
    rlafIPv6
} RpcLocalAddressFormat;

typedef struct _RPC_CALL_LOCAL_ADDRESS_V1
{
    unsigned int Version;
    void *Buffer;
    unsigned long BufferSize;
    RpcLocalAddressFormat AddressFormat;
} RPC_CALL_LOCAL_ADDRESS_V1, *PRPC_CALL_LOCAL_ADDRESS_V1;
#line 445 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcasync.h"
typedef struct tagRPC_CALL_ATTRIBUTES_V1_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V1_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_A;






typedef enum tagRpcCallType
{
    rctInvalid = 0,
    rctNormal,
    rctTraining,
    rctGuaranteed
} RpcCallType;

typedef enum tagRpcCallClientLocality
{
    rcclInvalid = 0,
    rcclLocal,
    rcclRemote,
    rcclClientUnknownLocality
} RpcCallClientLocality;


typedef struct tagRPC_CALL_ATTRIBUTES_V2_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
} RPC_CALL_ATTRIBUTES_V2_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V2_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
} RPC_CALL_ATTRIBUTES_V2_A;


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesW (
             RPC_BINDING_HANDLE ClientBinding,
            void *RpcCallAttributes
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesA (
             RPC_BINDING_HANDLE ClientBinding,
            void *RpcCallAttributes
    );
#line 569 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcasync.h"
typedef RPC_CALL_ATTRIBUTES_V2_A RPC_CALL_ATTRIBUTES;






typedef enum _RPC_NOTIFICATIONS
{
    RpcNotificationCallNone = 0,
    RpcNotificationClientDisconnect = 1,
    RpcNotificationCallCancel = 2
} RPC_NOTIFICATIONS;



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerSubscribeForNotification (
             RPC_BINDING_HANDLE Binding,
         RPC_NOTIFICATIONS Notification,
         RPC_NOTIFICATION_TYPES NotificationType,
         RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnsubscribeForNotification (
             RPC_BINDING_HANDLE Binding,
         RPC_NOTIFICATIONS Notification,
          unsigned long *NotificationsQueued
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingBind (
             PRPC_ASYNC_STATE pAsync,
         RPC_BINDING_HANDLE Binding,
         RPC_IF_HANDLE IfSpec
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingUnbind (
         RPC_BINDING_HANDLE Binding
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcDiagnoseError (
         RPC_BINDING_HANDLE BindingHandle,
         RPC_IF_HANDLE IfSpec,
         RPC_STATUS RpcStatus,
             RPC_ERROR_ENUM_HANDLE *EnumHandle,
         ULONG Options,
             HWND ParentWindow
    );
#line 647 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcasync.h"
RPC_STATUS __stdcall
I_RpcAsyncSetHandle (
          PRPC_MESSAGE Message,
          PRPC_ASYNC_STATE pAsync
    );

RPC_STATUS __stdcall
I_RpcAsyncAbortCall (
         PRPC_ASYNC_STATE pAsync,
         unsigned long ExceptionCode
    ) ;


int
__stdcall
I_RpcExceptionFilter (
         unsigned long ExceptionCode
    );



}
#line 204 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpc.h"
#line 213 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpc.h"
}
#line 182 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
#line 47 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\pshpack1.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\pshpack1.h"
#pragma warning(disable:4103)

#pragma pack(push,1)
#line 47 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"




extern "C" {




struct HDROP__{int unused;}; typedef struct HDROP__ *HDROP;


extern "C" __declspec(dllimport) UINT __stdcall DragQueryFileA( HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch);

extern "C" __declspec(dllimport) UINT __stdcall DragQueryFileW( HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch);





extern "C" __declspec(dllimport) BOOL __stdcall DragQueryPoint( HDROP hDrop, LPPOINT lppt);
extern "C" __declspec(dllimport) void __stdcall DragFinish( HDROP hDrop);
extern "C" __declspec(dllimport) void __stdcall DragAcceptFiles( HWND hWnd, BOOL fAccept);

extern "C" __declspec(dllimport) HINSTANCE __stdcall ShellExecuteA( HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters,
             LPCSTR lpDirectory, INT nShowCmd);
extern "C" __declspec(dllimport) HINSTANCE __stdcall ShellExecuteW( HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters,
             LPCWSTR lpDirectory, INT nShowCmd);






extern "C" __declspec(dllimport) HINSTANCE __stdcall FindExecutableA( LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult);

extern "C" __declspec(dllimport) HINSTANCE __stdcall FindExecutableW( LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult);





extern "C" __declspec(dllimport) LPWSTR * __stdcall CommandLineToArgvW( LPCWSTR lpCmdLine, int* pNumArgs);

extern "C" __declspec(dllimport) INT __stdcall ShellAboutA( HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
extern "C" __declspec(dllimport) INT __stdcall ShellAboutW( HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon);





extern "C" __declspec(dllimport) HICON __stdcall DuplicateIcon( HINSTANCE hInst, HICON hIcon);
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconA( HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon);
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconW( HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon);





extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconExA( HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId);
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconExW( HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId);





extern "C" __declspec(dllimport) HICON __stdcall ExtractIconA( HINSTANCE hInst, LPCSTR lpszExeFileName, UINT nIconIndex);
extern "C" __declspec(dllimport) HICON __stdcall ExtractIconW( HINSTANCE hInst, LPCWSTR lpszExeFileName, UINT nIconIndex);
#line 123 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef struct _DRAGINFOA {
    UINT uSize;
    POINT pt;
    BOOL fNC;
    LPSTR lpFileList;
    DWORD grfKeyState;
} DRAGINFOA, *LPDRAGINFOA;
typedef struct _DRAGINFOW {
    UINT uSize;
    POINT pt;
    BOOL fNC;
    LPWSTR lpFileList;
    DWORD grfKeyState;
} DRAGINFOW, *LPDRAGINFOW;




typedef DRAGINFOA DRAGINFO;
typedef LPDRAGINFOA LPDRAGINFO;
#line 180 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef struct _AppBarData
{
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam;
} APPBARDATA, *PAPPBARDATA;


extern "C" __declspec(dllimport) UINT_PTR __stdcall SHAppBarMessage( DWORD dwMessage, PAPPBARDATA pData);





extern "C" __declspec(dllimport) DWORD __stdcall DoEnvironmentSubstA( LPSTR szString, UINT cchString);
extern "C" __declspec(dllimport) DWORD __stdcall DoEnvironmentSubstW( LPWSTR szString, UINT cchString);







extern "C" __declspec(dllimport) UINT __stdcall ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
extern "C" __declspec(dllimport) UINT __stdcall ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
#line 246 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef WORD FILEOP_FLAGS;
#line 259 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef WORD PRINTEROP_FLAGS;
#line 268 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef struct _SHFILEOPSTRUCTA
{
    HWND hwnd;
    UINT wFunc;
    LPCSTR pFrom;
    LPCSTR pTo;
    FILEOP_FLAGS fFlags;
    BOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    LPCSTR lpszProgressTitle;
} SHFILEOPSTRUCTA, *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW
{
    HWND hwnd;
    UINT wFunc;
    LPCWSTR pFrom;
    LPCWSTR pTo;
    FILEOP_FLAGS fFlags;
    BOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    LPCWSTR lpszProgressTitle;
} SHFILEOPSTRUCTW, *LPSHFILEOPSTRUCTW;




typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;


extern "C" __declspec(dllimport) int __stdcall SHFileOperationA( LPSHFILEOPSTRUCTA lpFileOp);
extern "C" __declspec(dllimport) int __stdcall SHFileOperationW( LPSHFILEOPSTRUCTW lpFileOp);





extern "C" __declspec(dllimport) void __stdcall SHFreeNameMappings(HANDLE hNameMappings);

typedef struct _SHNAMEMAPPINGA
{
    LPSTR pszOldPath;
    LPSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
} SHNAMEMAPPINGA, *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW
{
    LPWSTR pszOldPath;
    LPWSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
} SHNAMEMAPPINGW, *LPSHNAMEMAPPINGW;




typedef SHNAMEMAPPINGA SHNAMEMAPPING;
typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
#line 415 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
#pragma warning(push)
#pragma warning(disable:4201)



typedef struct _SHELLEXECUTEINFOA
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCSTR lpVerb;
    LPCSTR lpFile;
    LPCSTR lpParameters;
    LPCSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void *lpIDList;
    LPCSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    union
    {
        HANDLE hIcon;

        HANDLE hMonitor;

    } ;
    HANDLE hProcess;
} SHELLEXECUTEINFOA, *LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR lpVerb;
    LPCWSTR lpFile;
    LPCWSTR lpParameters;
    LPCWSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void *lpIDList;
    LPCWSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    union
    {
        HANDLE hIcon;

        HANDLE hMonitor;

    } ;
    HANDLE hProcess;
} SHELLEXECUTEINFOW, *LPSHELLEXECUTEINFOW;




typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;


extern "C" __declspec(dllimport) BOOL __stdcall ShellExecuteExA( SHELLEXECUTEINFOA *pExecInfo);
extern "C" __declspec(dllimport) BOOL __stdcall ShellExecuteExW( SHELLEXECUTEINFOW *pExecInfo);
#line 486 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef struct _SHCREATEPROCESSINFOW
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR pszFile;
    LPCWSTR pszParameters;
    LPCWSTR pszCurrentDirectory;
    HANDLE hUserToken;
    LPSECURITY_ATTRIBUTES lpProcessAttributes;
    LPSECURITY_ATTRIBUTES lpThreadAttributes;
    BOOL bInheritHandles;
    DWORD dwCreationFlags;
    LPSTARTUPINFOW lpStartupInfo;
    LPPROCESS_INFORMATION lpProcessInformation;
} SHCREATEPROCESSINFOW, *PSHCREATEPROCESSINFOW;

extern "C" __declspec(dllimport) BOOL __stdcall SHCreateProcessAsUserW( PSHCREATEPROCESSINFOW pscpi);




extern "C" __declspec(dllimport) HRESULT __stdcall SHEvaluateSystemCommandTemplate( PCWSTR pszCmdTemplate, PWSTR *ppszApplication, PWSTR *ppszCommandLine, PWSTR *ppszParameters);
#line 844 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef enum ASSOCCLASS
{
    ASSOCCLASS_SHELL_KEY = 0,
    ASSOCCLASS_PROGID_KEY,
    ASSOCCLASS_PROGID_STR,
    ASSOCCLASS_CLSID_KEY,
    ASSOCCLASS_CLSID_STR,
    ASSOCCLASS_APP_KEY,
    ASSOCCLASS_APP_STR,
    ASSOCCLASS_SYSTEM_STR,
    ASSOCCLASS_FOLDER,
    ASSOCCLASS_STAR,
} ASSOCCLASS;
typedef struct ASSOCIATIONELEMENT_
{
    ASSOCCLASS ac;
    HKEY hkClass;
    PCWSTR pszClass;
} ASSOCIATIONELEMENT;



extern "C" __declspec(dllimport) HRESULT __stdcall AssocCreateForClasses( const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses, const IID & riid, void **ppv);
#line 912 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef struct _SHQUERYRBINFO {
    DWORD cbSize;

    __int64 i64Size;
    __int64 i64NumItems;




} SHQUERYRBINFO, *LPSHQUERYRBINFO;
#line 931 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);





extern "C" __declspec(dllimport) HRESULT __stdcall SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags);
#line 956 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef enum
{
    QUNS_NOT_PRESENT = 1,
    QUNS_BUSY = 2,
    QUNS_RUNNING_D3D_FULL_SCREEN = 3,
    QUNS_PRESENTATION_MODE = 4,
    QUNS_ACCEPTS_NOTIFICATIONS = 5,

    QUNS_QUIET_TIME = 6,

} QUERY_USER_NOTIFICATION_STATE;

extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryUserNotificationState( QUERY_USER_NOTIFICATION_STATE *pquns);




extern "C" __declspec(dllimport) HRESULT __stdcall SHGetPropertyStoreForWindow( HWND hwnd, const IID & riid, void** ppv);



typedef struct _NOTIFYICONDATAA {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;




    CHAR szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    CHAR szInfo[256];
    union {
        UINT uTimeout;
        UINT uVersion;
    } ;
    CHAR szInfoTitle[64];
    DWORD dwInfoFlags;


    GUID guidItem;


    HICON hBalloonIcon;

} NOTIFYICONDATAA, *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;




    WCHAR szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    WCHAR szInfo[256];
    union {
        UINT uTimeout;
        UINT uVersion;
    } ;
    WCHAR szInfoTitle[64];
    DWORD dwInfoFlags;


    GUID guidItem;


    HICON hBalloonIcon;

} NOTIFYICONDATAW, *PNOTIFYICONDATAW;




typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
#line 1151 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef struct _NOTIFYICONIDENTIFIER {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    GUID guidItem;
} NOTIFYICONIDENTIFIER, *PNOTIFYICONIDENTIFIER;


extern "C" __declspec(dllimport) BOOL __stdcall Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData);
extern "C" __declspec(dllimport) BOOL __stdcall Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData);






extern "C" __declspec(dllimport) HRESULT __stdcall Shell_NotifyIconGetRect( const NOTIFYICONIDENTIFIER* identifier, RECT* iconLocation);
#line 1195 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef struct _SHFILEINFOA
{
        HICON hIcon;
        int iIcon;
        DWORD dwAttributes;
        CHAR szDisplayName[260];
        CHAR szTypeName[80];
} SHFILEINFOA;
typedef struct _SHFILEINFOW
{
        HICON hIcon;
        int iIcon;
        DWORD dwAttributes;
        WCHAR szDisplayName[260];
        WCHAR szTypeName[80];
} SHFILEINFOW;



typedef SHFILEINFOA SHFILEINFO;
#line 1246 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
extern "C" __declspec(dllimport) DWORD_PTR __stdcall SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi,
    UINT cbFileInfo, UINT uFlags);
extern "C" __declspec(dllimport) DWORD_PTR __stdcall SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi,
    UINT cbFileInfo, UINT uFlags);







typedef struct _SHSTOCKICONINFO
{
    DWORD cbSize;
    HICON hIcon;
    int iSysImageIndex;
    int iIcon;
    WCHAR szPath[260];
} SHSTOCKICONINFO;
#line 1278 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef enum SHSTOCKICONID
{
    SIID_DOCNOASSOC = 0,
    SIID_DOCASSOC = 1,
    SIID_APPLICATION = 2,
    SIID_FOLDER = 3,
    SIID_FOLDEROPEN = 4,
    SIID_DRIVE525 = 5,
    SIID_DRIVE35 = 6,
    SIID_DRIVEREMOVE = 7,
    SIID_DRIVEFIXED = 8,
    SIID_DRIVENET = 9,
    SIID_DRIVENETDISABLED = 10,
    SIID_DRIVECD = 11,
    SIID_DRIVERAM = 12,
    SIID_WORLD = 13,
    SIID_SERVER = 15,
    SIID_PRINTER = 16,
    SIID_MYNETWORK = 17,
    SIID_FIND = 22,
    SIID_HELP = 23,
    SIID_SHARE = 28,
    SIID_LINK = 29,
    SIID_SLOWFILE = 30,
    SIID_RECYCLER = 31,
    SIID_RECYCLERFULL = 32,
    SIID_MEDIACDAUDIO = 40,
    SIID_LOCK = 47,
    SIID_AUTOLIST = 49,
    SIID_PRINTERNET = 50,
    SIID_SERVERSHARE = 51,
    SIID_PRINTERFAX = 52,
    SIID_PRINTERFAXNET = 53,
    SIID_PRINTERFILE = 54,
    SIID_STACK = 55,
    SIID_MEDIASVCD = 56,
    SIID_STUFFEDFOLDER = 57,
    SIID_DRIVEUNKNOWN = 58,
    SIID_DRIVEDVD = 59,
    SIID_MEDIADVD = 60,
    SIID_MEDIADVDRAM = 61,
    SIID_MEDIADVDRW = 62,
    SIID_MEDIADVDR = 63,
    SIID_MEDIADVDROM = 64,
    SIID_MEDIACDAUDIOPLUS = 65,
    SIID_MEDIACDRW = 66,
    SIID_MEDIACDR = 67,
    SIID_MEDIACDBURN = 68,
    SIID_MEDIABLANKCD = 69,
    SIID_MEDIACDROM = 70,
    SIID_AUDIOFILES = 71,
    SIID_IMAGEFILES = 72,
    SIID_VIDEOFILES = 73,
    SIID_MIXEDFILES = 74,
    SIID_FOLDERBACK = 75,
    SIID_FOLDERFRONT = 76,
    SIID_SHIELD = 77,
    SIID_WARNING = 78,
    SIID_INFO = 79,
    SIID_ERROR = 80,
    SIID_KEY = 81,
    SIID_SOFTWARE = 82,
    SIID_RENAME = 83,
    SIID_DELETE = 84,
    SIID_MEDIAAUDIODVD = 85,
    SIID_MEDIAMOVIEDVD = 86,
    SIID_MEDIAENHANCEDCD = 87,
    SIID_MEDIAENHANCEDDVD = 88,
    SIID_MEDIAHDDVD = 89,
    SIID_MEDIABLURAY = 90,
    SIID_MEDIAVCD = 91,
    SIID_MEDIADVDPLUSR = 92,
    SIID_MEDIADVDPLUSRW = 93,
    SIID_DESKTOPPC = 94,
    SIID_MOBILEPC = 95,
    SIID_USERS = 96,
    SIID_MEDIASMARTMEDIA = 97,
    SIID_MEDIACOMPACTFLASH = 98,
    SIID_DEVICECELLPHONE = 99,
    SIID_DEVICECAMERA = 100,
    SIID_DEVICEVIDEOCAMERA = 101,
    SIID_DEVICEAUDIOPLAYER = 102,
    SIID_NETWORKCONNECT = 103,
    SIID_INTERNET = 104,
    SIID_ZIPFILE = 105,
    SIID_SETTINGS = 106,


    SIID_DRIVEHDDVD = 132,
    SIID_DRIVEBD = 133,
    SIID_MEDIAHDDVDROM = 134,
    SIID_MEDIAHDDVDR = 135,
    SIID_MEDIAHDDVDRAM = 136,
    SIID_MEDIABDROM = 137,
    SIID_MEDIABDR = 138,
    SIID_MEDIABDRE = 139,
    SIID_CLUSTEREDDRIVE = 140,

    SIID_MAX_ICONS = 174,
} SHSTOCKICONID;



extern "C" __declspec(dllimport) HRESULT __stdcall SHGetStockIconInfo(SHSTOCKICONID siid, UINT uFlags, SHSTOCKICONINFO *psii);







extern "C" __declspec(dllimport) BOOL __stdcall SHGetDiskFreeSpaceExA(LPCSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller,
              ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
extern "C" __declspec(dllimport) BOOL __stdcall SHGetDiskFreeSpaceExW(LPCWSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller,
              ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);






extern "C" __declspec(dllimport) BOOL __stdcall SHGetNewLinkInfoA( LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, BOOL *pfMustCopy, UINT uFlags);

extern "C" __declspec(dllimport) BOOL __stdcall SHGetNewLinkInfoW( LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, BOOL *pfMustCopy, UINT uFlags);
#line 1435 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall SHInvokePrinterCommandA(HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, BOOL fModal);
extern "C" __declspec(dllimport) BOOL __stdcall SHInvokePrinterCommandW(HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, BOOL fModal);
#line 1445 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef struct _OPEN_PRINTER_PROPS_INFOA
{
    DWORD dwSize;
    LPSTR pszSheetName;
    UINT uSheetIndex;
    DWORD dwFlags;
    BOOL bModal;
} OPEN_PRINTER_PROPS_INFOA, *POPEN_PRINTER_PROPS_INFOA;
typedef struct _OPEN_PRINTER_PROPS_INFOW
{
    DWORD dwSize;
    LPWSTR pszSheetName;
    UINT uSheetIndex;
    DWORD dwFlags;
    BOOL bModal;
} OPEN_PRINTER_PROPS_INFOW, *POPEN_PRINTER_PROPS_INFOW;




typedef OPEN_PRINTER_PROPS_INFOA OPEN_PRINTER_PROPS_INFO;
typedef POPEN_PRINTER_PROPS_INFOA POPEN_PRINTER_PROPS_INFO;
#line 1488 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall SHLoadNonloadedIconOverlayIdentifiers(void);
#line 1509 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall SHIsFileAvailableOffline( LPCWSTR pwszPath, LPDWORD pdwStatus);
#line 1522 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall SHSetLocalizedName(LPCWSTR pszPath, LPCWSTR pszResModule, int idsRes);




extern "C" __declspec(dllimport) HRESULT __stdcall SHRemoveLocalizedName(LPCWSTR pszPath);

extern "C" __declspec(dllimport) HRESULT __stdcall SHGetLocalizedName( LPCWSTR pszPath, LPWSTR pszResModule, UINT cch, int *pidsRes);
#line 1558 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
extern "C" __declspec(dllimport) int __cdecl ShellMessageBoxA(
             HINSTANCE hAppInst,
             HWND hWnd,
         LPCSTR lpcText,
             LPCSTR lpcTitle,
         UINT fuStyle, ...);
extern "C" __declspec(dllimport) int __cdecl ShellMessageBoxW(
             HINSTANCE hAppInst,
             HWND hWnd,
         LPCWSTR lpcText,
             LPCWSTR lpcTitle,
         UINT fuStyle, ...);







extern "C" __declspec(dllimport) BOOL __stdcall IsLFNDriveA( LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall IsLFNDriveW( LPCWSTR pszPath);
#line 1589 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
extern "C" HRESULT __stdcall SHEnumerateUnreadMailAccountsA(HKEY hKeyUser, DWORD dwIndex, LPSTR pszMailAddress, int cchMailAddress);
extern "C" HRESULT __stdcall SHEnumerateUnreadMailAccountsW(HKEY hKeyUser, DWORD dwIndex, LPWSTR pszMailAddress, int cchMailAddress);





extern "C" HRESULT __stdcall SHGetUnreadMailCountA(HKEY hKeyUser, LPCSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPSTR pszShellExecuteCommand, int cchShellExecuteCommand);
extern "C" HRESULT __stdcall SHGetUnreadMailCountW(HKEY hKeyUser, LPCWSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand);





extern "C" HRESULT __stdcall SHSetUnreadMailCountA(LPCSTR pszMailAddress, DWORD dwCount, LPCSTR pszShellExecuteCommand);
extern "C" HRESULT __stdcall SHSetUnreadMailCountW(LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand);
#line 1614 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
extern "C" BOOL __stdcall SHTestTokenMembership( HANDLE hToken, ULONG ulRID);





extern "C" __declspec(dllimport) HRESULT __stdcall SHGetImageList( int iImageList, const IID & riid, void **ppvObj);
#line 1638 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef HRESULT (__stdcall *PFNCANSHAREFOLDERW)(LPCWSTR pszPath);
typedef HRESULT (__stdcall *PFNSHOWSHAREFOLDERUIW)(HWND hwndParent, LPCWSTR pszPath);




}




#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 1648 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"




#pragma warning(pop)








extern "C" __declspec(dllimport) BOOL __stdcall InitNetworkAddressControl(void);
#line 1674 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
typedef struct tagNC_ADDRESS
{
   struct NET_ADDRESS_INFO_ *pAddrInfo;
   USHORT PortNumber;
   BYTE PrefixLength;
} NC_ADDRESS, *PNC_ADDRESS;
#line 1702 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\shellapi.h"
extern "C" HRESULT __stdcall SHGetDriveMedia(LPCWSTR pszDrive, DWORD *pdwMediaContent);
#line 184 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"


#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winperf.h"
#line 40 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winperf.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack8.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack8.h"
#pragma warning(disable:4103)

#pragma pack(push,8)
#line 40 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winperf.h"
#line 58 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winperf.h"
typedef struct _PERF_DATA_BLOCK {
    WCHAR Signature[4];
    DWORD LittleEndian;
    DWORD Version;

    DWORD Revision;

    DWORD TotalByteLength;
    DWORD HeaderLength;
    DWORD NumObjectTypes;

    LONG DefaultObject;




    SYSTEMTIME SystemTime;

    LARGE_INTEGER PerfTime;

    LARGE_INTEGER PerfFreq;

    LARGE_INTEGER PerfTime100nSec;

    DWORD SystemNameLength;
    DWORD SystemNameOffset;


} PERF_DATA_BLOCK, *PPERF_DATA_BLOCK;
#line 96 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winperf.h"
typedef struct _PERF_OBJECT_TYPE {
    DWORD TotalByteLength;







    DWORD DefinitionLength;







    DWORD HeaderLength;



    DWORD ObjectNameTitleIndex;




    LPWSTR ObjectNameTitle;



    DWORD ObjectHelpTitleIndex;




    LPWSTR ObjectHelpTitle;



    DWORD DetailLevel;



    DWORD NumCounters;


    LONG DefaultCounter;



    LONG NumInstances;
#line 158 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winperf.h"
    DWORD CodePage;


    LARGE_INTEGER PerfTime;

    LARGE_INTEGER PerfFreq;

} PERF_OBJECT_TYPE, *PPERF_OBJECT_TYPE;
#line 542 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winperf.h"
typedef struct _PERF_COUNTER_DEFINITION {
    DWORD ByteLength;
    DWORD CounterNameTitleIndex;





    LPWSTR CounterNameTitle;



    DWORD CounterHelpTitleIndex;





    LPWSTR CounterHelpTitle;



    LONG DefaultScale;


    DWORD DetailLevel;

    DWORD CounterType;
    DWORD CounterSize;
    DWORD CounterOffset;


} PERF_COUNTER_DEFINITION, *PPERF_COUNTER_DEFINITION;
#line 589 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winperf.h"
typedef struct _PERF_INSTANCE_DEFINITION {
    DWORD ByteLength;

    DWORD ParentObjectTitleIndex;





    DWORD ParentObjectInstance;



    LONG UniqueID;


    DWORD NameOffset;


    DWORD NameLength;





} PERF_INSTANCE_DEFINITION, *PPERF_INSTANCE_DEFINITION;
#line 628 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winperf.h"
typedef struct _PERF_COUNTER_BLOCK {
    DWORD ByteLength;

} PERF_COUNTER_BLOCK, *PPERF_COUNTER_BLOCK;
#line 648 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winperf.h"
typedef DWORD (__stdcall PM_OPEN_PROC) ( LPWSTR);
typedef DWORD (__stdcall PM_COLLECT_PROC) ( LPWSTR, LPVOID *, LPDWORD, LPDWORD);
typedef DWORD (__stdcall PM_CLOSE_PROC) (void);
typedef DWORD (__stdcall PM_QUERY_PROC) (LPDWORD, LPVOID *, LPDWORD, LPDWORD);
#line 672 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winperf.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 672 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winperf.h"
#line 186 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winsock.h"
#line 187 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"



#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
#line 21 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
#pragma warning(push)

#pragma warning(disable:4201)
#line 34 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
extern "C" {
#line 237 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef unsigned int ALG_ID;
#line 316 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef ULONG_PTR HCRYPTPROV;
typedef ULONG_PTR HCRYPTKEY;
typedef ULONG_PTR HCRYPTHASH;
#line 832 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMS_KEY_INFO {
    DWORD dwVersion;
    ALG_ID Algid;
    BYTE *pbOID;
    DWORD cbOID;
} CMS_KEY_INFO, *PCMS_KEY_INFO;


typedef struct _HMAC_Info {
    ALG_ID HashAlgid;
    BYTE *pbInnerString;
    DWORD cbInnerString;
    BYTE *pbOuterString;
    DWORD cbOuterString;
} HMAC_INFO, *PHMAC_INFO;


typedef struct _SCHANNEL_ALG {
    DWORD dwUse;
    ALG_ID Algid;
    DWORD cBits;
    DWORD dwFlags;
    DWORD dwReserved;
} SCHANNEL_ALG, *PSCHANNEL_ALG;
#line 864 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _PROV_ENUMALGS {
    ALG_ID aiAlgid;
    DWORD dwBitLen;
    DWORD dwNameLen;
    CHAR szName[20];
} PROV_ENUMALGS;


typedef struct _PROV_ENUMALGS_EX {
    ALG_ID aiAlgid;
    DWORD dwDefaultLen;
    DWORD dwMinLen;
    DWORD dwMaxLen;
    DWORD dwProtocols;
    DWORD dwNameLen;
    CHAR szName[20];
    DWORD dwLongNameLen;
    CHAR szLongName[40];
} PROV_ENUMALGS_EX;


typedef struct _PUBLICKEYSTRUC {
        BYTE bType;
        BYTE bVersion;
        WORD reserved;
        ALG_ID aiKeyAlg;
} BLOBHEADER, PUBLICKEYSTRUC;

typedef struct _RSAPUBKEY {
        DWORD magic;
        DWORD bitlen;
        DWORD pubexp;

} RSAPUBKEY;

typedef struct _PUBKEY {
        DWORD magic;
        DWORD bitlen;
} DHPUBKEY, DSSPUBKEY, KEAPUBKEY, TEKPUBKEY;

typedef struct _DSSSEED {
        DWORD counter;
        BYTE seed[20];
} DSSSEED;

typedef struct _PUBKEYVER3 {
        DWORD magic;
        DWORD bitlenP;
        DWORD bitlenQ;
        DWORD bitlenJ;
        DSSSEED DSSSeed;
} DHPUBKEY_VER3, DSSPUBKEY_VER3;

typedef struct _PRIVKEYVER3 {
        DWORD magic;
        DWORD bitlenP;
        DWORD bitlenQ;
        DWORD bitlenJ;
        DWORD bitlenX;
        DSSSEED DSSSeed;
} DHPRIVKEY_VER3, DSSPRIVKEY_VER3;

typedef struct _KEY_TYPE_SUBTYPE {
        DWORD dwKeySpec;
        GUID Type;
        GUID Subtype;
} KEY_TYPE_SUBTYPE, *PKEY_TYPE_SUBTYPE;

typedef struct _CERT_FORTEZZA_DATA_PROP {
    unsigned char SerialNumber[8];
    int CertIndex;
    unsigned char CertLabel[36];
} CERT_FORTEZZA_DATA_PROP;


typedef struct _CRYPT_RC4_KEY_STATE {
    unsigned char Key[16];
    unsigned char SBox[256];
    unsigned char i;
    unsigned char j;
} CRYPT_RC4_KEY_STATE, *PCRYPT_RC4_KEY_STATE;

typedef struct _CRYPT_DES_KEY_STATE {
    unsigned char Key[8];
    unsigned char IV[8];
    unsigned char Feedback[8];
} CRYPT_DES_KEY_STATE, *PCRYPT_DES_KEY_STATE;

typedef struct _CRYPT_3DES_KEY_STATE {
    unsigned char Key[24];
    unsigned char IV[8];
    unsigned char Feedback[8];
} CRYPT_3DES_KEY_STATE, *PCRYPT_3DES_KEY_STATE;



typedef struct _CRYPT_AES_128_KEY_STATE {
    unsigned char Key[16];
    unsigned char IV[16];
    unsigned char EncryptionState[11][16];
    unsigned char DecryptionState[11][16];
    unsigned char Feedback[16];
} CRYPT_AES_128_KEY_STATE, *PCRYPT_AES_128_KEY_STATE;

typedef struct _CRYPT_AES_256_KEY_STATE {
    unsigned char Key[32];
    unsigned char IV[16];
    unsigned char EncryptionState[15][16];
    unsigned char DecryptionState[15][16];
    unsigned char Feedback[16];
} CRYPT_AES_256_KEY_STATE, *PCRYPT_AES_256_KEY_STATE;
#line 984 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPTOAPI_BLOB {
                            DWORD cbData;
                            BYTE *pbData;
} CRYPT_INTEGER_BLOB, *PCRYPT_INTEGER_BLOB,
CRYPT_UINT_BLOB, *PCRYPT_UINT_BLOB,
CRYPT_OBJID_BLOB, *PCRYPT_OBJID_BLOB,
CERT_NAME_BLOB, *PCERT_NAME_BLOB,
CERT_RDN_VALUE_BLOB, *PCERT_RDN_VALUE_BLOB,
CERT_BLOB, *PCERT_BLOB,
CRL_BLOB, *PCRL_BLOB,
DATA_BLOB, *PDATA_BLOB,
CRYPT_DATA_BLOB, *PCRYPT_DATA_BLOB,
CRYPT_HASH_BLOB, *PCRYPT_HASH_BLOB,
CRYPT_DIGEST_BLOB, *PCRYPT_DIGEST_BLOB,
CRYPT_DER_BLOB, *PCRYPT_DER_BLOB,
CRYPT_ATTR_BLOB, *PCRYPT_ATTR_BLOB;




typedef struct _CMS_DH_KEY_INFO {
    DWORD dwVersion;
    ALG_ID Algid;
    LPSTR pszContentEncObjId;
    CRYPT_DATA_BLOB PubInfo;
    void *pReserved;
} CMS_DH_KEY_INFO, *PCMS_DH_KEY_INFO;


__declspec(dllimport)
BOOL
__stdcall
CryptAcquireContextA(
                HCRYPTPROV *phProv,
                LPCSTR szContainer,
                LPCSTR szProvider,
                DWORD dwProvType,
                DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptAcquireContextW(
                HCRYPTPROV *phProv,
                LPCWSTR szContainer,
                LPCWSTR szProvider,
                DWORD dwProvType,
                DWORD dwFlags
    );
#line 1096 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptReleaseContext(
            HCRYPTPROV hProv,
            DWORD dwFlags
    );
#line 1115 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptGenKey(
            HCRYPTPROV hProv,
            ALG_ID Algid,
            DWORD dwFlags,
            HCRYPTKEY *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDeriveKey(
            HCRYPTPROV hProv,
            ALG_ID Algid,
            HCRYPTHASH hBaseData,
            DWORD dwFlags,
            HCRYPTKEY *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDestroyKey(
            HCRYPTKEY hKey
    );


__declspec(dllimport)
BOOL
__stdcall
CryptSetKeyParam(
            HCRYPTKEY hKey,
            DWORD dwParam,
            const BYTE *pbData,
            DWORD dwFlags
    );
#line 1167 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptGetKeyParam(
                                                    HCRYPTKEY hKey,
                                                    DWORD dwParam,
                                                    BYTE *pbData,
                                                    DWORD *pdwDataLen,
                                                    DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
CryptSetHashParam(
            HCRYPTHASH hHash,
            DWORD dwParam,
            const BYTE *pbData,
            DWORD dwFlags
    );
#line 1202 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptGetHashParam(
                                                HCRYPTHASH hHash,
                                                DWORD dwParam,
                                                    BYTE *pbData,
                                                DWORD *pdwDataLen,
                                                DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
CryptSetProvParam(
            HCRYPTPROV hProv,
            DWORD dwParam,
            const BYTE *pbData,
            DWORD dwFlags
    );
#line 1237 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptGetProvParam(
                                                    HCRYPTPROV hProv,
                                                    DWORD dwParam,
                                                    BYTE *pbData,
                                                    DWORD *pdwDataLen,
                                                    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGenRandom(
                            HCRYPTPROV hProv,
                            DWORD dwLen,
                            BYTE *pbBuffer
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetUserKey(
            HCRYPTPROV hProv,
            DWORD dwKeySpec,
            HCRYPTKEY *phUserKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptExportKey(
                                                    HCRYPTKEY hKey,
                                                    HCRYPTKEY hExpKey,
                                                    DWORD dwBlobType,
                                                    DWORD dwFlags,
                                                    BYTE *pbData,
                                                    DWORD *pdwDataLen
    );

__declspec(dllimport)
BOOL
__stdcall
CryptImportKey(
                            HCRYPTPROV hProv,
                            const BYTE *pbData,
                            DWORD dwDataLen,
                            HCRYPTKEY hPubKey,
                            DWORD dwFlags,
                            HCRYPTKEY *phKey
    );

__declspec(dllimport)
                       BOOL
__stdcall
CryptEncrypt(
                                                    HCRYPTKEY hKey,
                                                    HCRYPTHASH hHash,
                                                    BOOL Final,
                                                    DWORD dwFlags,
                                                    BYTE *pbData,
                                                    DWORD *pdwDataLen,
                                                    DWORD dwBufLen
    );

__declspec(dllimport)
                       BOOL
__stdcall
CryptDecrypt(
                                                    HCRYPTKEY hKey,
                                                    HCRYPTHASH hHash,
                                                    BOOL Final,
                                                    DWORD dwFlags,
                                                    BYTE *pbData,
                                                    DWORD *pdwDataLen
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCreateHash(
            HCRYPTPROV hProv,
            ALG_ID Algid,
            HCRYPTKEY hKey,
            DWORD dwFlags,
            HCRYPTHASH *phHash
    );

__declspec(dllimport)
BOOL
__stdcall
CryptHashData(
                            HCRYPTHASH hHash,
                            const BYTE *pbData,
                            DWORD dwDataLen,
                            DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptHashSessionKey(
            HCRYPTHASH hHash,
            HCRYPTKEY hKey,
            DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDestroyHash(
            HCRYPTHASH hHash
    );


__declspec(dllimport)
BOOL
__stdcall
CryptSignHashA(
                                                  HCRYPTHASH hHash,
                                                  DWORD dwKeySpec,
                                                  LPCSTR szDescription,
                                                  DWORD dwFlags,
                                                  BYTE *pbSignature,
                                                  DWORD *pdwSigLen
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSignHashW(
                                                  HCRYPTHASH hHash,
                                                  DWORD dwKeySpec,
                                                  LPCWSTR szDescription,
                                                  DWORD dwFlags,
                                                  BYTE *pbSignature,
                                                  DWORD *pdwSigLen
    );
#line 1441 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptVerifySignatureA(
                            HCRYPTHASH hHash,
                            const BYTE *pbSignature,
                            DWORD dwSigLen,
                            HCRYPTKEY hPubKey,
                            LPCSTR szDescription,
                            DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptVerifySignatureW(
                            HCRYPTHASH hHash,
                            const BYTE *pbSignature,
                            DWORD dwSigLen,
                            HCRYPTKEY hPubKey,
                            LPCWSTR szDescription,
                            DWORD dwFlags
    );
#line 1529 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderA(
            LPCSTR pszProvName,
            DWORD dwProvType
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderW(
            LPCWSTR pszProvName,
            DWORD dwProvType
    );
#line 1573 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderExA(
                LPCSTR pszProvName,
                DWORD dwProvType,
                DWORD *pdwReserved,
                DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderExW(
                LPCWSTR pszProvName,
                DWORD dwProvType,
                DWORD *pdwReserved,
                DWORD dwFlags
    );
#line 1625 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
                       BOOL
__stdcall
CryptGetDefaultProviderA(
                                                    DWORD dwProvType,
                                                    DWORD *pdwReserved,
                                                    DWORD dwFlags,
                                                        LPSTR pszProvName,
                                                    DWORD *pcbProvName
    );
__declspec(dllimport)
                       BOOL
__stdcall
CryptGetDefaultProviderW(
                                                    DWORD dwProvType,
                                                    DWORD *pdwReserved,
                                                    DWORD dwFlags,
                                                        LPWSTR pszProvName,
                                                    DWORD *pcbProvName
    );
#line 1681 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
                       BOOL
__stdcall
CryptEnumProviderTypesA(
                                                    DWORD dwIndex,
                                                    DWORD *pdwReserved,
                                                    DWORD dwFlags,
                                                    DWORD *pdwProvType,
                                                        LPSTR szTypeName,
                                                    DWORD *pcbTypeName
    );
__declspec(dllimport)
                       BOOL
__stdcall
CryptEnumProviderTypesW(
                                                    DWORD dwIndex,
                                                    DWORD *pdwReserved,
                                                    DWORD dwFlags,
                                                    DWORD *pdwProvType,
                                                        LPWSTR szTypeName,
                                                    DWORD *pcbTypeName
    );
#line 1769 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
                       BOOL
__stdcall
CryptEnumProvidersA(
                                                        DWORD dwIndex,
                                                        DWORD *pdwReserved,
                                                        DWORD dwFlags,
                                                        DWORD *pdwProvType,
                                                        LPSTR szProvName,
                                                        DWORD *pcbProvName
    );
__declspec(dllimport)
                       BOOL
__stdcall
CryptEnumProvidersW(
                                                        DWORD dwIndex,
                                                        DWORD *pdwReserved,
                                                        DWORD dwFlags,
                                                        DWORD *pdwProvType,
                                                        LPWSTR szProvName,
                                                        DWORD *pcbProvName
    );
#line 1856 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptContextAddRef(
                HCRYPTPROV hProv,
                DWORD *pdwReserved,
                DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDuplicateKey(
                HCRYPTKEY hKey,
                DWORD *pdwReserved,
                DWORD dwFlags,
                HCRYPTKEY *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDuplicateHash(
                HCRYPTHASH hHash,
                DWORD *pdwReserved,
                DWORD dwFlags,
                HCRYPTHASH *phHash
    );
#line 1892 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
BOOL
__cdecl
GetEncSChannel(
    BYTE **pData,
    DWORD *dwDecSize
    );
#line 1908 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
#line 16 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
extern "C" {







typedef LONG NTSTATUS;
typedef NTSTATUS *PNTSTATUS;
#line 110 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
typedef struct __BCRYPT_KEY_LENGTHS_STRUCT
{
    ULONG dwMinLength;
    ULONG dwMaxLength;
    ULONG dwIncrement;
} BCRYPT_KEY_LENGTHS_STRUCT;

typedef BCRYPT_KEY_LENGTHS_STRUCT BCRYPT_AUTH_TAG_LENGTHS_STRUCT;

typedef struct _BCRYPT_OID
{
    ULONG cbOID;
    PUCHAR pbOID;
} BCRYPT_OID;

typedef struct _BCRYPT_OID_LIST
{
    ULONG dwOIDCount;
    BCRYPT_OID *pOIDs;
} BCRYPT_OID_LIST;

typedef struct _BCRYPT_PKCS1_PADDING_INFO
{
    LPCWSTR pszAlgId;
} BCRYPT_PKCS1_PADDING_INFO;

typedef struct _BCRYPT_PSS_PADDING_INFO
{
    LPCWSTR pszAlgId;
    ULONG cbSalt;
} BCRYPT_PSS_PADDING_INFO;

typedef struct _BCRYPT_OAEP_PADDING_INFO
{
    LPCWSTR pszAlgId;
    PUCHAR pbLabel;
    ULONG cbLabel;
} BCRYPT_OAEP_PADDING_INFO;






typedef struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
{
    ULONG cbSize;
    ULONG dwInfoVersion;
    PUCHAR pbNonce;
    ULONG cbNonce;
    PUCHAR pbAuthData;
    ULONG cbAuthData;
    PUCHAR pbTag;
    ULONG cbTag;
    PUCHAR pbMacContext;
    ULONG cbMacContext;
    ULONG cbAAD;
    ULONGLONG cbData;
    ULONG dwFlags;
} BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO, *PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;
#line 242 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
typedef struct _BCryptBuffer {
    ULONG cbBuffer;
    ULONG BufferType;
    PVOID pvBuffer;
} BCryptBuffer, * PBCryptBuffer;

typedef struct _BCryptBufferDesc {
    ULONG ulVersion;
    ULONG cBuffers;
    PBCryptBuffer pBuffers;
} BCryptBufferDesc, * PBCryptBufferDesc;






typedef PVOID BCRYPT_HANDLE;
typedef PVOID BCRYPT_ALG_HANDLE;
typedef PVOID BCRYPT_KEY_HANDLE;
typedef PVOID BCRYPT_HASH_HANDLE;
typedef PVOID BCRYPT_SECRET_HANDLE;
#line 273 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
typedef struct _BCRYPT_KEY_BLOB
{
    ULONG Magic;
} BCRYPT_KEY_BLOB;
#line 295 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
typedef struct _BCRYPT_RSAKEY_BLOB
{
    ULONG Magic;
    ULONG BitLength;
    ULONG cbPublicExp;
    ULONG cbModulus;
    ULONG cbPrime1;
    ULONG cbPrime2;
} BCRYPT_RSAKEY_BLOB;
#line 339 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
typedef struct _BCRYPT_ECCKEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
} BCRYPT_ECCKEY_BLOB, *PBCRYPT_ECCKEY_BLOB;
#line 356 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
typedef struct _BCRYPT_DH_KEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
} BCRYPT_DH_KEY_BLOB, *PBCRYPT_DH_KEY_BLOB;






typedef struct _BCRYPT_DH_PARAMETER_HEADER
{
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
} BCRYPT_DH_PARAMETER_HEADER;
#line 388 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
typedef struct _BCRYPT_DSA_KEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
    UCHAR Count[4];
    UCHAR Seed[20];
    UCHAR q[20];
} BCRYPT_DSA_KEY_BLOB, *PBCRYPT_DSA_KEY_BLOB;

typedef struct _BCRYPT_KEY_DATA_BLOB_HEADER
{
    ULONG dwMagic;
    ULONG dwVersion;
    ULONG cbKeyData;
} BCRYPT_KEY_DATA_BLOB_HEADER, *PBCRYPT_KEY_DATA_BLOB_HEADER;
#line 413 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
typedef struct _BCRYPT_DSA_PARAMETER_HEADER
{
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
    UCHAR Count[4];
    UCHAR Seed[20];
    UCHAR q[20];
} BCRYPT_DSA_PARAMETER_HEADER;
#line 481 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
NTSTATUS
__stdcall
BCryptOpenAlgorithmProvider(
                BCRYPT_ALG_HANDLE *phAlgorithm,
                LPCWSTR pszAlgId,
                LPCWSTR pszImplementation,
                ULONG dwFlags);
#line 502 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
typedef struct _BCRYPT_ALGORITHM_IDENTIFIER
{
    LPWSTR pszName;
    ULONG dwClass;
    ULONG dwFlags;

} BCRYPT_ALGORITHM_IDENTIFIER;



NTSTATUS
__stdcall
BCryptEnumAlgorithms(
            ULONG dwAlgOperations,
            ULONG *pAlgCount,
            BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList,
            ULONG dwFlags);

typedef struct _BCRYPT_PROVIDER_NAME
{
    LPWSTR pszProviderName;
} BCRYPT_PROVIDER_NAME;


NTSTATUS
__stdcall
BCryptEnumProviders(
            LPCWSTR pszAlgId,
            ULONG *pImplCount,
            BCRYPT_PROVIDER_NAME **ppImplList,
            ULONG dwFlags);







NTSTATUS
__stdcall
BCryptGetProperty(
                                                BCRYPT_HANDLE hObject,
                                                LPCWSTR pszProperty,
                                                PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptSetProperty(
                            BCRYPT_HANDLE hObject,
                            LPCWSTR pszProperty,
                            PUCHAR pbInput,
                            ULONG cbInput,
                            ULONG dwFlags);


NTSTATUS
__stdcall
BCryptCloseAlgorithmProvider(
            BCRYPT_ALG_HANDLE hAlgorithm,
            ULONG dwFlags);


void
__stdcall
BCryptFreeBuffer(
         PVOID pvBuffer);






NTSTATUS
__stdcall
BCryptGenerateSymmetricKey(
                                        BCRYPT_ALG_HANDLE hAlgorithm,
                                        BCRYPT_KEY_HANDLE *phKey,
                                        PUCHAR pbKeyObject,
                                        ULONG cbKeyObject,
                                        PUCHAR pbSecret,
                                        ULONG cbSecret,
                                        ULONG dwFlags);



NTSTATUS
__stdcall
BCryptGenerateKeyPair(
            BCRYPT_ALG_HANDLE hAlgorithm,
            BCRYPT_KEY_HANDLE *phKey,
            ULONG dwLength,
            ULONG dwFlags);



NTSTATUS
__stdcall
BCryptEncrypt(
                                                BCRYPT_KEY_HANDLE hKey,
                                                PUCHAR pbInput,
                                                ULONG cbInput,
                                                void *pPaddingInfo,
                                                PUCHAR pbIV,
                                                ULONG cbIV,
                                                PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptDecrypt(
                                                BCRYPT_KEY_HANDLE hKey,
                                                PUCHAR pbInput,
                                                ULONG cbInput,
                                                void *pPaddingInfo,
                                                PUCHAR pbIV,
                                                ULONG cbIV,
                                                PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptExportKey(
                                                BCRYPT_KEY_HANDLE hKey,
                                                BCRYPT_KEY_HANDLE hExportKey,
                                                LPCWSTR pszBlobType,
                                                PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptImportKey(
                                        BCRYPT_ALG_HANDLE hAlgorithm,
                                        BCRYPT_KEY_HANDLE hImportKey,
                                        LPCWSTR pszBlobType,
                                        BCRYPT_KEY_HANDLE *phKey,
                                        PUCHAR pbKeyObject,
                                        ULONG cbKeyObject,
                                        PUCHAR pbInput,
                                        ULONG cbInput,
                                        ULONG dwFlags);




NTSTATUS
__stdcall
BCryptImportKeyPair(
                                    BCRYPT_ALG_HANDLE hAlgorithm,
                                    BCRYPT_KEY_HANDLE hImportKey,
                                    LPCWSTR pszBlobType,
                                    BCRYPT_KEY_HANDLE *phKey,
                                    PUCHAR pbInput,
                                    ULONG cbInput,
                                    ULONG dwFlags);



NTSTATUS
__stdcall
BCryptDuplicateKey(
                                        BCRYPT_KEY_HANDLE hKey,
                                        BCRYPT_KEY_HANDLE *phNewKey,
                                        PUCHAR pbKeyObject,
                                        ULONG cbKeyObject,
                                        ULONG dwFlags);



NTSTATUS
__stdcall
BCryptFinalizeKeyPair(
            BCRYPT_KEY_HANDLE hKey,
            ULONG dwFlags);


NTSTATUS
__stdcall
BCryptDestroyKey(
            BCRYPT_KEY_HANDLE hKey);


NTSTATUS
__stdcall
BCryptDestroySecret(
            BCRYPT_SECRET_HANDLE hSecret);



NTSTATUS
__stdcall
BCryptSignHash(
                                                BCRYPT_KEY_HANDLE hKey,
                                                void *pPaddingInfo,
                                                PUCHAR pbInput,
                                                ULONG cbInput,
                                                PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptVerifySignature(
                                BCRYPT_KEY_HANDLE hKey,
                                void *pPaddingInfo,
                                PUCHAR pbHash,
                                ULONG cbHash,
                                PUCHAR pbSignature,
                                ULONG cbSignature,
                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptSecretAgreement(
            BCRYPT_KEY_HANDLE hPrivKey,
            BCRYPT_KEY_HANDLE hPubKey,
            BCRYPT_SECRET_HANDLE *phAgreedSecret,
            ULONG dwFlags);



NTSTATUS
__stdcall
BCryptDeriveKey(
                BCRYPT_SECRET_HANDLE hSharedSecret,
                LPCWSTR pwszKDF,
                BCryptBufferDesc *pParameterList,
                                                    PUCHAR pbDerivedKey,
                ULONG cbDerivedKey,
                ULONG *pcbResult,
                ULONG dwFlags);






NTSTATUS
__stdcall
BCryptCreateHash(
                                        BCRYPT_ALG_HANDLE hAlgorithm,
                                        BCRYPT_HASH_HANDLE *phHash,
                                        PUCHAR pbHashObject,
                                        ULONG cbHashObject,
                                        PUCHAR pbSecret,
                                        ULONG cbSecret,
                                        ULONG dwFlags);



NTSTATUS
__stdcall
BCryptHashData(
                            BCRYPT_HASH_HANDLE hHash,
                            PUCHAR pbInput,
                            ULONG cbInput,
                            ULONG dwFlags);



NTSTATUS
__stdcall
BCryptFinishHash(
                                BCRYPT_HASH_HANDLE hHash,
                                PUCHAR pbOutput,
                                ULONG cbOutput,
                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptDuplicateHash(
                                        BCRYPT_HASH_HANDLE hHash,
                                        BCRYPT_HASH_HANDLE *phNewHash,
                                        PUCHAR pbHashObject,
                                        ULONG cbHashObject,
                                        ULONG dwFlags);


NTSTATUS
__stdcall
BCryptDestroyHash(
            BCRYPT_HASH_HANDLE hHash);
#line 818 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
NTSTATUS
__stdcall
BCryptGenRandom(
                                    BCRYPT_ALG_HANDLE hAlgorithm,
                                    PUCHAR pbBuffer,
                                    ULONG cbBuffer,
                                    ULONG dwFlags);






NTSTATUS
__stdcall
BCryptDeriveKeyCapi(
                                    BCRYPT_HASH_HANDLE hHash,
                                    BCRYPT_ALG_HANDLE hTargetAlg,
                                    PUCHAR pbDerivedKey,
                                    ULONG cbDerivedKey,
                                    ULONG dwFlags);



NTSTATUS
__stdcall
BCryptDeriveKeyPBKDF2(
                                    BCRYPT_ALG_HANDLE hPrf,
                                    PUCHAR pbPassword,
                                    ULONG cbPassword,
                                    PUCHAR pbSalt,
                                    ULONG cbSalt,
                                    ULONGLONG cIterations,
                                    PUCHAR pbDerivedKey,
                                    ULONG cbDerivedKey,
                                    ULONG dwFlags);





typedef struct _BCRYPT_INTERFACE_VERSION
{
    USHORT MajorVersion;
    USHORT MinorVersion;

} BCRYPT_INTERFACE_VERSION, *PBCRYPT_INTERFACE_VERSION;
#line 944 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
typedef struct _CRYPT_INTERFACE_REG
{
    ULONG dwInterface;
    ULONG dwFlags;

    ULONG cFunctions;
    PWSTR *rgpszFunctions;
}
CRYPT_INTERFACE_REG, *PCRYPT_INTERFACE_REG;

typedef struct _CRYPT_IMAGE_REG
{
    PWSTR pszImage;

    ULONG cInterfaces;
    PCRYPT_INTERFACE_REG *rgpInterfaces;
}
CRYPT_IMAGE_REG, *PCRYPT_IMAGE_REG;

typedef struct _CRYPT_PROVIDER_REG
{
    ULONG cAliases;
    PWSTR *rgpszAliases;

    PCRYPT_IMAGE_REG pUM;
    PCRYPT_IMAGE_REG pKM;
}
CRYPT_PROVIDER_REG, *PCRYPT_PROVIDER_REG;

typedef struct _CRYPT_PROVIDERS
{
    ULONG cProviders;
    PWSTR *rgpszProviders;
}
CRYPT_PROVIDERS, *PCRYPT_PROVIDERS;





typedef struct _CRYPT_CONTEXT_CONFIG
{
    ULONG dwFlags;
    ULONG dwReserved;
}
CRYPT_CONTEXT_CONFIG, *PCRYPT_CONTEXT_CONFIG;

typedef struct _CRYPT_CONTEXT_FUNCTION_CONFIG
{
    ULONG dwFlags;
    ULONG dwReserved;
}
CRYPT_CONTEXT_FUNCTION_CONFIG, *PCRYPT_CONTEXT_FUNCTION_CONFIG;

typedef struct _CRYPT_CONTEXTS
{
    ULONG cContexts;
    PWSTR *rgpszContexts;
}
CRYPT_CONTEXTS, *PCRYPT_CONTEXTS;

typedef struct _CRYPT_CONTEXT_FUNCTIONS
{
    ULONG cFunctions;
    PWSTR *rgpszFunctions;
}
CRYPT_CONTEXT_FUNCTIONS, *PCRYPT_CONTEXT_FUNCTIONS;

typedef struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS
{
    ULONG cProviders;
    PWSTR *rgpszProviders;
}
CRYPT_CONTEXT_FUNCTION_PROVIDERS, *PCRYPT_CONTEXT_FUNCTION_PROVIDERS;





typedef struct _CRYPT_PROPERTY_REF
{
    PWSTR pszProperty;

    ULONG cbValue;
    PUCHAR pbValue;
}
CRYPT_PROPERTY_REF, *PCRYPT_PROPERTY_REF;

typedef struct _CRYPT_IMAGE_REF
{
    PWSTR pszImage;
    ULONG dwFlags;
}
CRYPT_IMAGE_REF, *PCRYPT_IMAGE_REF;

typedef struct _CRYPT_PROVIDER_REF
{
    ULONG dwInterface;
    PWSTR pszFunction;
    PWSTR pszProvider;

    ULONG cProperties;
    PCRYPT_PROPERTY_REF *rgpProperties;

    PCRYPT_IMAGE_REF pUM;
    PCRYPT_IMAGE_REF pKM;
}
CRYPT_PROVIDER_REF, *PCRYPT_PROVIDER_REF;

typedef struct _CRYPT_PROVIDER_REFS
{
    ULONG cProviders;
    PCRYPT_PROVIDER_REF *rgpProviders;
}
CRYPT_PROVIDER_REFS, *PCRYPT_PROVIDER_REFS;
#line 1068 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
NTSTATUS
__stdcall
BCryptQueryProviderRegistration(
         LPCWSTR pszProvider,
         ULONG dwMode,
         ULONG dwInterface,
            ULONG* pcbBuffer,
                                                              PCRYPT_PROVIDER_REG *ppBuffer);


NTSTATUS
__stdcall
BCryptEnumRegisteredProviders(
            ULONG* pcbBuffer,
                                                              PCRYPT_PROVIDERS *ppBuffer);





NTSTATUS
__stdcall
BCryptCreateContext(
         ULONG dwTable,
         LPCWSTR pszContext,
             PCRYPT_CONTEXT_CONFIG pConfig);


NTSTATUS
__stdcall
BCryptDeleteContext(
         ULONG dwTable,
         LPCWSTR pszContext);


NTSTATUS
__stdcall
BCryptEnumContexts(
         ULONG dwTable,
            ULONG* pcbBuffer,
                                                              PCRYPT_CONTEXTS *ppBuffer);


NTSTATUS
__stdcall
BCryptConfigureContext(
         ULONG dwTable,
         LPCWSTR pszContext,
         PCRYPT_CONTEXT_CONFIG pConfig);


NTSTATUS
__stdcall
BCryptQueryContextConfiguration(
         ULONG dwTable,
         LPCWSTR pszContext,
            ULONG* pcbBuffer,
                                                              PCRYPT_CONTEXT_CONFIG *ppBuffer);


NTSTATUS
__stdcall
BCryptAddContextFunction(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
         ULONG dwPosition);


NTSTATUS
__stdcall
BCryptRemoveContextFunction(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction);


NTSTATUS
__stdcall
BCryptEnumContextFunctions(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
            ULONG* pcbBuffer,
                                                              PCRYPT_CONTEXT_FUNCTIONS *ppBuffer);


NTSTATUS
__stdcall
BCryptConfigureContextFunction(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
         PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig);


NTSTATUS
__stdcall
BCryptQueryContextFunctionConfiguration(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
            ULONG* pcbBuffer,
                                                              PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer);


NTSTATUS
__stdcall
BCryptEnumContextFunctionProviders(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
            ULONG* pcbBuffer,
                                                              PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer);


NTSTATUS
__stdcall
BCryptSetContextFunctionProperty(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
         LPCWSTR pszProperty,
         ULONG cbValue,
                             PUCHAR pbValue);


NTSTATUS
__stdcall
BCryptQueryContextFunctionProperty(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
         LPCWSTR pszProperty,
            ULONG* pcbValue,
                                                            PUCHAR *ppbValue);
#line 1227 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
NTSTATUS
__stdcall
BCryptRegisterConfigChangeNotify(
          HANDLE *phEvent);
#line 1240 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\bcrypt.h"
NTSTATUS
__stdcall
BCryptUnregisterConfigChangeNotify(
         HANDLE hEvent);






NTSTATUS __stdcall
BCryptResolveProviders(
             LPCWSTR pszContext,
             ULONG dwInterface,
             LPCWSTR pszFunction,
             LPCWSTR pszProvider,
         ULONG dwMode,
         ULONG dwFlags,
            ULONG* pcbBuffer,
                                                              PCRYPT_PROVIDER_REFS *ppBuffer);




NTSTATUS
__stdcall
BCryptGetFipsAlgorithmMode(
          BOOLEAN *pfEnabled
    );


}
#line 1908 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ncrypt.h"
#line 16 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ncrypt.h"
extern "C" {







typedef LONG SECURITY_STATUS;
#line 111 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ncrypt.h"
typedef BCryptBuffer NCryptBuffer;
typedef BCryptBuffer* PNCryptBuffer;
typedef BCryptBufferDesc NCryptBufferDesc;
typedef BCryptBufferDesc* PNCryptBufferDesc;





typedef ULONG_PTR NCRYPT_HANDLE;
typedef ULONG_PTR NCRYPT_PROV_HANDLE;
typedef ULONG_PTR NCRYPT_KEY_HANDLE;
typedef ULONG_PTR NCRYPT_HASH_HANDLE;
typedef ULONG_PTR NCRYPT_SECRET_HANDLE;
#line 151 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ncrypt.h"
SECURITY_STATUS
__stdcall
NCryptOpenStorageProvider(
            NCRYPT_PROV_HANDLE *phProvider,
             LPCWSTR pszProviderName,
            DWORD dwFlags);
#line 171 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ncrypt.h"
typedef struct _NCryptAlgorithmName
{
    LPWSTR pszName;
    DWORD dwClass;
    DWORD dwAlgOperations;
    DWORD dwFlags;
} NCryptAlgorithmName;



SECURITY_STATUS
__stdcall
NCryptEnumAlgorithms(
            NCRYPT_PROV_HANDLE hProvider,
            DWORD dwAlgOperations,
            DWORD * pdwAlgCount,
                                     NCryptAlgorithmName **ppAlgList,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptIsAlgSupported(
            NCRYPT_PROV_HANDLE hProvider,
            LPCWSTR pszAlgId,
            DWORD dwFlags);






typedef struct NCryptKeyName
{
    LPWSTR pszName;
    LPWSTR pszAlgid;
    DWORD dwLegacyKeySpec;
    DWORD dwFlags;
} NCryptKeyName;


SECURITY_STATUS
__stdcall
NCryptEnumKeys(
            NCRYPT_PROV_HANDLE hProvider,
             LPCWSTR pszScope,
                NCryptKeyName **ppKeyName,
            PVOID * ppEnumState,
            DWORD dwFlags);



typedef struct NCryptProviderName
{
    LPWSTR pszName;
    LPWSTR pszComment;
} NCryptProviderName;


SECURITY_STATUS
__stdcall
NCryptEnumStorageProviders(
            DWORD * pdwProviderCount,
                                          NCryptProviderName **ppProviderList,
            DWORD dwFlags);



SECURITY_STATUS
__stdcall
NCryptFreeBuffer(
            PVOID pvInput);
#line 253 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ncrypt.h"
SECURITY_STATUS
__stdcall
NCryptOpenKey(
            NCRYPT_PROV_HANDLE hProvider,
            NCRYPT_KEY_HANDLE *phKey,
            LPCWSTR pszKeyName,
             DWORD dwLegacyKeySpec,
            DWORD dwFlags);
#line 269 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ncrypt.h"
SECURITY_STATUS
__stdcall
NCryptCreatePersistedKey(
            NCRYPT_PROV_HANDLE hProvider,
            NCRYPT_KEY_HANDLE *phKey,
            LPCWSTR pszAlgId,
             LPCWSTR pszKeyName,
            DWORD dwLegacyKeySpec,
            DWORD dwFlags);
#line 345 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ncrypt.h"
typedef struct __NCRYPT_UI_POLICY_BLOB
{
    DWORD dwVersion;
    DWORD dwFlags;
    DWORD cbCreationTitle;
    DWORD cbFriendlyName;
    DWORD cbDescription;



} NCRYPT_UI_POLICY_BLOB;

typedef struct __NCRYPT_UI_POLICY
{
    DWORD dwVersion;
    DWORD dwFlags;
    LPCWSTR pszCreationTitle;
    LPCWSTR pszFriendlyName;
    LPCWSTR pszDescription;
} NCRYPT_UI_POLICY;



typedef struct __NCRYPT_SUPPORTED_LENGTHS
{
    DWORD dwMinLength;
    DWORD dwMaxLength;
    DWORD dwIncrement;
    DWORD dwDefaultLength;
} NCRYPT_SUPPORTED_LENGTHS;





SECURITY_STATUS
__stdcall
NCryptGetProperty(
            NCRYPT_HANDLE hObject,
            LPCWSTR pszProperty,
                                                PBYTE pbOutput,
            DWORD cbOutput,
            DWORD * pcbResult,
            DWORD dwFlags);
#line 397 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ncrypt.h"
SECURITY_STATUS
__stdcall
NCryptSetProperty(
            NCRYPT_HANDLE hObject,
            LPCWSTR pszProperty,
                         PBYTE pbInput,
            DWORD cbInput,
            DWORD dwFlags);






SECURITY_STATUS
__stdcall
NCryptFinalizeKey(
            NCRYPT_KEY_HANDLE hKey,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptEncrypt(
            NCRYPT_KEY_HANDLE hKey,
                             PBYTE pbInput,
            DWORD cbInput,
                void *pPaddingInfo,
                                                PBYTE pbOutput,
            DWORD cbOutput,
            DWORD * pcbResult,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptDecrypt(
            NCRYPT_KEY_HANDLE hKey,
                             PBYTE pbInput,
            DWORD cbInput,
                void *pPaddingInfo,
                                                PBYTE pbOutput,
            DWORD cbOutput,
            DWORD * pcbResult,
            DWORD dwFlags);
#line 458 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ncrypt.h"
SECURITY_STATUS
__stdcall
NCryptImportKey(
            NCRYPT_PROV_HANDLE hProvider,
             NCRYPT_KEY_HANDLE hImportKey,
            LPCWSTR pszBlobType,
             NCryptBufferDesc *pParameterList,
            NCRYPT_KEY_HANDLE *phKey,
                        PBYTE pbData,
            DWORD cbData,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptExportKey(
            NCRYPT_KEY_HANDLE hKey,
             NCRYPT_KEY_HANDLE hExportKey,
            LPCWSTR pszBlobType,
             NCryptBufferDesc *pParameterList,
                                                PBYTE pbOutput,
            DWORD cbOutput,
            DWORD * pcbResult,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptSignHash(
            NCRYPT_KEY_HANDLE hKey,
                void *pPaddingInfo,
                             PBYTE pbHashValue,
            DWORD cbHashValue,
                                                   PBYTE pbSignature,
            DWORD cbSignature,
            DWORD * pcbResult,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptVerifySignature(
            NCRYPT_KEY_HANDLE hKey,
                void *pPaddingInfo,
                             PBYTE pbHashValue,
            DWORD cbHashValue,
                             PBYTE pbSignature,
            DWORD cbSignature,
            DWORD dwFlags);



SECURITY_STATUS
__stdcall
NCryptDeleteKey(
            NCRYPT_KEY_HANDLE hKey,
            DWORD dwFlags);



SECURITY_STATUS
__stdcall
NCryptFreeObject(
            NCRYPT_HANDLE hObject);



BOOL
__stdcall
NCryptIsKeyHandle(
            NCRYPT_KEY_HANDLE hKey);


SECURITY_STATUS
__stdcall
NCryptTranslateHandle(
              NCRYPT_PROV_HANDLE *phProvider,
            NCRYPT_KEY_HANDLE *phKey,
            HCRYPTPROV hLegacyProv,
             HCRYPTKEY hLegacyKey,
             DWORD dwLegacyKeySpec,
            DWORD dwFlags);
#line 555 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ncrypt.h"
SECURITY_STATUS
__stdcall
NCryptNotifyChangeKey(
            NCRYPT_PROV_HANDLE hProvider,
            HANDLE *phEvent,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptSecretAgreement(
            NCRYPT_KEY_HANDLE hPrivKey,
            NCRYPT_KEY_HANDLE hPubKey,
            NCRYPT_SECRET_HANDLE *phAgreedSecret,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptDeriveKey(
                NCRYPT_SECRET_HANDLE hSharedSecret,
                LPCWSTR pwszKDF,
                NCryptBufferDesc *pParameterList,
                                                    PBYTE pbDerivedKey,
                DWORD cbDerivedKey,
                DWORD *pcbResult,
                ULONG dwFlags);
#line 594 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\ncrypt.h"
}
#line 1909 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"





typedef ULONG_PTR HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;



typedef ULONG_PTR HCRYPTPROV_LEGACY;






typedef struct _CRYPT_BIT_BLOB {
    DWORD cbData;
    BYTE *pbData;
    DWORD cUnusedBits;
} CRYPT_BIT_BLOB, *PCRYPT_BIT_BLOB;







typedef struct _CRYPT_ALGORITHM_IDENTIFIER {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
} CRYPT_ALGORITHM_IDENTIFIER, *PCRYPT_ALGORITHM_IDENTIFIER;
#line 2175 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_OBJID_TABLE {
    DWORD dwAlgId;
    LPCSTR pszObjId;
} CRYPT_OBJID_TABLE, *PCRYPT_OBJID_TABLE;





typedef struct _CRYPT_HASH_INFO {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB Hash;
} CRYPT_HASH_INFO, *PCRYPT_HASH_INFO;







typedef struct _CERT_EXTENSION {
    LPSTR pszObjId;
    BOOL fCritical;
    CRYPT_OBJID_BLOB Value;
} CERT_EXTENSION, *PCERT_EXTENSION;
typedef const CERT_EXTENSION* PCCERT_EXTENSION;
#line 2209 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} CRYPT_ATTRIBUTE_TYPE_VALUE, *PCRYPT_ATTRIBUTE_TYPE_VALUE;
#line 2221 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_ATTRIBUTE {
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_ATTR_BLOB rgValue;
} CRYPT_ATTRIBUTE, *PCRYPT_ATTRIBUTE;

typedef struct _CRYPT_ATTRIBUTES {
    DWORD cAttr;
    PCRYPT_ATTRIBUTE rgAttr;
} CRYPT_ATTRIBUTES, *PCRYPT_ATTRIBUTES;
#line 2239 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_RDN_ATTR {
    LPSTR pszObjId;
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
} CERT_RDN_ATTR, *PCERT_RDN_ATTR;
#line 2426 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_RDN {
    DWORD cRDNAttr;
    PCERT_RDN_ATTR rgRDNAttr;
} CERT_RDN, *PCERT_RDN;





typedef struct _CERT_NAME_INFO {
    DWORD cRDN;
    PCERT_RDN rgRDN;
} CERT_NAME_INFO, *PCERT_NAME_INFO;







typedef struct _CERT_NAME_VALUE {
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
} CERT_NAME_VALUE, *PCERT_NAME_VALUE;
#line 2458 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_PUBLIC_KEY_INFO {
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_BIT_BLOB PublicKey;
} CERT_PUBLIC_KEY_INFO, *PCERT_PUBLIC_KEY_INFO;
#line 2472 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_PRIVATE_KEY_INFO{
    DWORD Version;
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DER_BLOB PrivateKey;
    PCRYPT_ATTRIBUTES pAttributes;
} CRYPT_PRIVATE_KEY_INFO, *PCRYPT_PRIVATE_KEY_INFO;





typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO{
    CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedPrivateKey;
} CRYPT_ENCRYPTED_PRIVATE_KEY_INFO, *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
#line 2504 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(
         CRYPT_ALGORITHM_IDENTIFIER Algorithm,
         CRYPT_DATA_BLOB EncryptedPrivateKey,
                                        BYTE* pbClearTextKey,
            DWORD* pcbClearTextKey,
         LPVOID pVoidDecryptFunc);
#line 2527 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(
          CRYPT_ALGORITHM_IDENTIFIER* pAlgorithm,
         CRYPT_DATA_BLOB* pClearTextPrivateKey,
                                        BYTE* pbEncryptedKey,
            DWORD* pcbEncryptedKey,
         LPVOID pVoidEncryptFunc);
#line 2546 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(
                                                       CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo,
                                                       HCRYPTPROV *phCryptProv,
                                                       LPVOID pVoidResolveFunc);
#line 2560 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS{
    CRYPT_DIGEST_BLOB PrivateKey;
    PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
    LPVOID pVoidResolveFunc;
    PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
    LPVOID pVoidDecryptFunc;
} CRYPT_PKCS8_IMPORT_PARAMS, *PCRYPT_PKCS8_IMPORT_PARAMS, CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS, *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
#line 2576 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_PKCS8_EXPORT_PARAMS{
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    LPSTR pszPrivateKeyObjId;

    PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
    LPVOID pVoidEncryptFunc;
} CRYPT_PKCS8_EXPORT_PARAMS, *PCRYPT_PKCS8_EXPORT_PARAMS;
#line 2592 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_INFO {
    DWORD dwVersion;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME NotBefore;
    FILETIME NotAfter;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    CRYPT_BIT_BLOB IssuerUniqueId;
    CRYPT_BIT_BLOB SubjectUniqueId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CERT_INFO, *PCERT_INFO;
#line 2635 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRL_ENTRY {
    CRYPT_INTEGER_BLOB SerialNumber;
    FILETIME RevocationDate;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CRL_ENTRY, *PCRL_ENTRY;







typedef struct _CRL_INFO {
    DWORD dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    DWORD cCRLEntry;
    PCRL_ENTRY rgCRLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CRL_INFO, *PCRL_INFO;
#line 2672 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_OR_CRL_BLOB {
    DWORD dwChoice;
    DWORD cbEncoded;

    BYTE *pbEncoded;
} CERT_OR_CRL_BLOB, * PCERT_OR_CRL_BLOB;

typedef struct _CERT_OR_CRL_BUNDLE {
    DWORD cItem;

    PCERT_OR_CRL_BLOB rgItem;
} CERT_OR_CRL_BUNDLE, *PCERT_OR_CRL_BUNDLE;







typedef struct _CERT_REQUEST_INFO {
    DWORD dwVersion;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CERT_REQUEST_INFO, *PCERT_REQUEST_INFO;
#line 2707 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_KEYGEN_REQUEST_INFO {
    DWORD dwVersion;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    LPWSTR pwszChallengeString;
} CERT_KEYGEN_REQUEST_INFO, *PCERT_KEYGEN_REQUEST_INFO;
#line 2723 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_SIGNED_CONTENT_INFO {
    CRYPT_DER_BLOB ToBeSigned;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
} CERT_SIGNED_CONTENT_INFO, *PCERT_SIGNED_CONTENT_INFO;
#line 2737 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CTL_USAGE {
    DWORD cUsageIdentifier;
    LPSTR *rgpszUsageIdentifier;
} CTL_USAGE, *PCTL_USAGE,
CERT_ENHKEY_USAGE, *PCERT_ENHKEY_USAGE;
typedef const CTL_USAGE* PCCTL_USAGE;
typedef const CERT_ENHKEY_USAGE* PCCERT_ENHKEY_USAGE;





typedef struct _CTL_ENTRY {
    CRYPT_DATA_BLOB SubjectIdentifier;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CTL_ENTRY, *PCTL_ENTRY;




typedef struct _CTL_INFO {
    DWORD dwVersion;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    CRYPT_INTEGER_BLOB SequenceNumber;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    DWORD cCTLEntry;
    PCTL_ENTRY rgCTLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CTL_INFO, *PCTL_INFO;
#line 2785 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO {
    LPSTR pszTimeStampAlgorithm;
    LPSTR pszContentType;
    CRYPT_OBJID_BLOB Content;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CRYPT_TIME_STAMP_REQUEST_INFO, *PCRYPT_TIME_STAMP_REQUEST_INFO;




typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {
    LPWSTR pwszName;
    LPWSTR pwszValue;
} CRYPT_ENROLLMENT_NAME_VALUE_PAIR, * PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;




typedef struct _CRYPT_CSP_PROVIDER {
    DWORD dwKeySpec;
    LPWSTR pwszProviderName;
    CRYPT_BIT_BLOB Signature;
} CRYPT_CSP_PROVIDER, * PCRYPT_CSP_PROVIDER;
#line 2853 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptFormatObject(
         DWORD dwCertEncodingType,
         DWORD dwFormatType,
         DWORD dwFormatStrType,
             void *pFormatStruct,
             LPCSTR lpszStructType,
                           const BYTE *pbEncoded,
         DWORD cbEncoded,
                                                                     void *pbFormat,
            DWORD *pcbFormat
    );
#line 2936 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef LPVOID (__stdcall *PFN_CRYPT_ALLOC)(
         size_t cbSize
    );

typedef void (__stdcall *PFN_CRYPT_FREE)(
         LPVOID pv
    );


typedef struct _CRYPT_ENCODE_PARA {
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
} CRYPT_ENCODE_PARA, *PCRYPT_ENCODE_PARA;


__declspec(dllimport)
BOOL
__stdcall
CryptEncodeObjectEx(
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
         const void *pvStructInfo,
         DWORD dwFlags,
             PCRYPT_ENCODE_PARA pEncodePara,
              void *pvEncoded,
            DWORD *pcbEncoded
    );

__declspec(dllimport)
BOOL
__stdcall
CryptEncodeObject(
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
         const void *pvStructInfo,
                                                    BYTE *pbEncoded,
            DWORD *pcbEncoded
    );
#line 3035 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_DECODE_PARA {
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
} CRYPT_DECODE_PARA, *PCRYPT_DECODE_PARA;

__declspec(dllimport)
BOOL
__stdcall
CryptDecodeObjectEx(
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
                           const BYTE *pbEncoded,
         DWORD cbEncoded,
         DWORD dwFlags,
             PCRYPT_DECODE_PARA pDecodePara,
              void *pvStructInfo,
            DWORD *pcbStructInfo
    );


__declspec(dllimport)
BOOL
__stdcall
CryptDecodeObject(
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
                           const BYTE *pbEncoded,
         DWORD cbEncoded,
         DWORD dwFlags,
                                                          void *pvStructInfo,
            DWORD *pcbStructInfo
    );
#line 3742 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_EXTENSIONS {
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CERT_EXTENSIONS, *PCERT_EXTENSIONS;
#line 3909 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_AUTHORITY_KEY_ID_INFO {
    CRYPT_DATA_BLOB KeyId;
    CERT_NAME_BLOB CertIssuer;
    CRYPT_INTEGER_BLOB CertSerialNumber;
} CERT_AUTHORITY_KEY_ID_INFO, *PCERT_AUTHORITY_KEY_ID_INFO;







typedef struct _CERT_PRIVATE_KEY_VALIDITY {
    FILETIME NotBefore;
    FILETIME NotAfter;
} CERT_PRIVATE_KEY_VALIDITY, *PCERT_PRIVATE_KEY_VALIDITY;

typedef struct _CERT_KEY_ATTRIBUTES_INFO {
    CRYPT_DATA_BLOB KeyId;
    CRYPT_BIT_BLOB IntendedKeyUsage;
    PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;
} CERT_KEY_ATTRIBUTES_INFO, *PCERT_KEY_ATTRIBUTES_INFO;
#line 3953 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_POLICY_ID {
    DWORD cCertPolicyElementId;
    LPSTR *rgpszCertPolicyElementId;
} CERT_POLICY_ID, *PCERT_POLICY_ID;

typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO {
    DWORD cCertPolicyId;
    PCERT_POLICY_ID rgCertPolicyId;
    CRYPT_BIT_BLOB RestrictedKeyUsage;
} CERT_KEY_USAGE_RESTRICTION_INFO, *PCERT_KEY_USAGE_RESTRICTION_INFO;
#line 3977 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_OTHER_NAME {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} CERT_OTHER_NAME, *PCERT_OTHER_NAME;

typedef struct _CERT_ALT_NAME_ENTRY {
    DWORD dwAltNameChoice;
    union {
        PCERT_OTHER_NAME pOtherName;
        LPWSTR pwszRfc822Name;
        LPWSTR pwszDNSName;

        CERT_NAME_BLOB DirectoryName;

        LPWSTR pwszURL;
        CRYPT_DATA_BLOB IPAddress;
        LPSTR pszRegisteredID;
    } ;
} CERT_ALT_NAME_ENTRY, *PCERT_ALT_NAME_ENTRY;
#line 4011 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_ALT_NAME_INFO {
    DWORD cAltEntry;
    PCERT_ALT_NAME_ENTRY rgAltEntry;
} CERT_ALT_NAME_INFO, *PCERT_ALT_NAME_INFO;
#line 4046 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_BASIC_CONSTRAINTS_INFO {
    CRYPT_BIT_BLOB SubjectType;
    BOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
    DWORD cSubtreesConstraint;
    CERT_NAME_BLOB *rgSubtreesConstraint;
} CERT_BASIC_CONSTRAINTS_INFO, *PCERT_BASIC_CONSTRAINTS_INFO;
#line 4063 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_BASIC_CONSTRAINTS2_INFO {
    BOOL fCA;
    BOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
} CERT_BASIC_CONSTRAINTS2_INFO, *PCERT_BASIC_CONSTRAINTS2_INFO;
#line 4088 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_POLICY_QUALIFIER_INFO {
    LPSTR pszPolicyQualifierId;
    CRYPT_OBJID_BLOB Qualifier;
} CERT_POLICY_QUALIFIER_INFO, *PCERT_POLICY_QUALIFIER_INFO;

typedef struct _CERT_POLICY_INFO {
    LPSTR pszPolicyIdentifier;
    DWORD cPolicyQualifier;
    CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;
} CERT_POLICY_INFO, *PCERT_POLICY_INFO;

typedef struct _CERT_POLICIES_INFO {
    DWORD cPolicyInfo;
    CERT_POLICY_INFO *rgPolicyInfo;
} CERT_POLICIES_INFO, *PCERT_POLICIES_INFO;
#line 4112 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {
    LPSTR pszOrganization;
    DWORD cNoticeNumbers;
    int *rgNoticeNumbers;
} CERT_POLICY_QUALIFIER_NOTICE_REFERENCE, *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;

typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE {
    CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference;
    LPWSTR pszDisplayText;
} CERT_POLICY_QUALIFIER_USER_NOTICE, *PCERT_POLICY_QUALIFIER_USER_NOTICE;







typedef struct _CPS_URLS {
    LPWSTR pszURL;
    CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm;
    CRYPT_DATA_BLOB *pDigest;
} CPS_URLS, *PCPS_URLS;

typedef struct _CERT_POLICY95_QUALIFIER1 {
    LPWSTR pszPracticesReference;
    LPSTR pszNoticeIdentifier;
    LPSTR pszNSINoticeIdentifier;
    DWORD cCPSURLs;
    CPS_URLS *rgCPSURLs;
} CERT_POLICY95_QUALIFIER1, *PCERT_POLICY95_QUALIFIER1;
#line 4157 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_POLICY_MAPPING {
    LPSTR pszIssuerDomainPolicy;
    LPSTR pszSubjectDomainPolicy;
} CERT_POLICY_MAPPING, *PCERT_POLICY_MAPPING;

typedef struct _CERT_POLICY_MAPPINGS_INFO {
    DWORD cPolicyMapping;
    PCERT_POLICY_MAPPING rgPolicyMapping;
} CERT_POLICY_MAPPINGS_INFO, *PCERT_POLICY_MAPPINGS_INFO;







typedef struct _CERT_POLICY_CONSTRAINTS_INFO {
    BOOL fRequireExplicitPolicy;
    DWORD dwRequireExplicitPolicySkipCerts;

    BOOL fInhibitPolicyMapping;
    DWORD dwInhibitPolicyMappingSkipCerts;
} CERT_POLICY_CONSTRAINTS_INFO, *PCERT_POLICY_CONSTRAINTS_INFO;
#line 4250 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
} CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY, *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
#line 4264 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_CONTENT_INFO {
    LPSTR pszObjId;
    CRYPT_DER_BLOB Content;
} CRYPT_CONTENT_INFO, *PCRYPT_CONTENT_INFO;
#line 4322 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_SEQUENCE_OF_ANY {
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
} CRYPT_SEQUENCE_OF_ANY, *PCRYPT_SEQUENCE_OF_ANY;
#line 4339 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO {
    CRYPT_DATA_BLOB KeyId;
    CERT_ALT_NAME_INFO AuthorityCertIssuer;

    CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;
} CERT_AUTHORITY_KEY_ID2_INFO, *PCERT_AUTHORITY_KEY_ID2_INFO;
#line 4375 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_ACCESS_DESCRIPTION {
    LPSTR pszAccessMethod;
    CERT_ALT_NAME_ENTRY AccessLocation;
} CERT_ACCESS_DESCRIPTION, *PCERT_ACCESS_DESCRIPTION;


typedef struct _CERT_AUTHORITY_INFO_ACCESS {
    DWORD cAccDescr;
    PCERT_ACCESS_DESCRIPTION rgAccDescr;
} CERT_AUTHORITY_INFO_ACCESS, *PCERT_AUTHORITY_INFO_ACCESS,
  CERT_SUBJECT_INFO_ACCESS, *PCERT_SUBJECT_INFO_ACCESS;
#line 4437 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRL_DIST_POINT_NAME {
    DWORD dwDistPointNameChoice;
    union {
        CERT_ALT_NAME_INFO FullName;

    } ;
} CRL_DIST_POINT_NAME, *PCRL_DIST_POINT_NAME;





typedef struct _CRL_DIST_POINT {
    CRL_DIST_POINT_NAME DistPointName;
    CRYPT_BIT_BLOB ReasonFlags;
    CERT_ALT_NAME_INFO CRLIssuer;
} CRL_DIST_POINT, *PCRL_DIST_POINT;
#line 4463 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRL_DIST_POINTS_INFO {
    DWORD cDistPoint;
    PCRL_DIST_POINT rgDistPoint;
} CRL_DIST_POINTS_INFO, *PCRL_DIST_POINTS_INFO;
#line 4494 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CROSS_CERT_DIST_POINTS_INFO {

    DWORD dwSyncDeltaTime;

    DWORD cDistPoint;
    PCERT_ALT_NAME_INFO rgDistPoint;
} CROSS_CERT_DIST_POINTS_INFO, *PCROSS_CERT_DIST_POINTS_INFO;
#line 4522 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_PAIR {
   CERT_BLOB Forward;
   CERT_BLOB Reverse;
} CERT_PAIR, *PCERT_PAIR;
#line 4555 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRL_ISSUING_DIST_POINT {
    CRL_DIST_POINT_NAME DistPointName;
    BOOL fOnlyContainsUserCerts;
    BOOL fOnlyContainsCACerts;
    CRYPT_BIT_BLOB OnlySomeReasonFlags;
    BOOL fIndirectCRL;
} CRL_ISSUING_DIST_POINT, *PCRL_ISSUING_DIST_POINT;
#line 4586 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_GENERAL_SUBTREE {
    CERT_ALT_NAME_ENTRY Base;
    DWORD dwMinimum;
    BOOL fMaximum;
    DWORD dwMaximum;
} CERT_GENERAL_SUBTREE, *PCERT_GENERAL_SUBTREE;

typedef struct _CERT_NAME_CONSTRAINTS_INFO {
    DWORD cPermittedSubtree;
    PCERT_GENERAL_SUBTREE rgPermittedSubtree;
    DWORD cExcludedSubtree;
    PCERT_GENERAL_SUBTREE rgExcludedSubtree;
} CERT_NAME_CONSTRAINTS_INFO, *PCERT_NAME_CONSTRAINTS_INFO;
#line 4687 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_DSS_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB g;
} CERT_DSS_PARAMETERS, *PCERT_DSS_PARAMETERS;
#line 4718 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_DH_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
} CERT_DH_PARAMETERS, *PCERT_DH_PARAMETERS;
#line 4731 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_ECC_SIGNATURE {
    CRYPT_UINT_BLOB r;
    CRYPT_UINT_BLOB s;
} CERT_ECC_SIGNATURE, *PCERT_ECC_SIGNATURE;
#line 4743 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_X942_DH_VALIDATION_PARAMS {
    CRYPT_BIT_BLOB seed;
    DWORD pgenCounter;
} CERT_X942_DH_VALIDATION_PARAMS, *PCERT_X942_DH_VALIDATION_PARAMS;

typedef struct _CERT_X942_DH_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB j;
    PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;
} CERT_X942_DH_PARAMETERS, *PCERT_X942_DH_PARAMETERS;
#line 4766 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_X942_OTHER_INFO {
    LPSTR pszContentEncryptionObjId;
    BYTE rgbCounter[4];
    BYTE rgbKeyLength[4];
    CRYPT_DATA_BLOB PubInfo;
} CRYPT_X942_OTHER_INFO, *PCRYPT_X942_OTHER_INFO;
#line 4782 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_ECC_CMS_SHARED_INFO {
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DATA_BLOB EntityUInfo;
    BYTE rgbSuppPubInfo[4];
} CRYPT_ECC_CMS_SHARED_INFO, *PCRYPT_ECC_CMS_SHARED_INFO;
#line 4795 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_RC2_CBC_PARAMETERS {
    DWORD dwVersion;
    BOOL fIV;
    BYTE rgbIV[8];
} CRYPT_RC2_CBC_PARAMETERS, *PCRYPT_RC2_CBC_PARAMETERS;
#line 4819 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_SMIME_CAPABILITY {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
} CRYPT_SMIME_CAPABILITY, *PCRYPT_SMIME_CAPABILITY;

typedef struct _CRYPT_SMIME_CAPABILITIES {
    DWORD cCapability;
    PCRYPT_SMIME_CAPABILITY rgCapability;
} CRYPT_SMIME_CAPABILITIES, *PCRYPT_SMIME_CAPABILITIES;
#line 4844 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_QC_STATEMENT {
    LPSTR pszStatementId;
    CRYPT_OBJID_BLOB StatementInfo;
} CERT_QC_STATEMENT, *PCERT_QC_STATEMENT;

typedef struct _CERT_QC_STATEMENTS_EXT_INFO {
    DWORD cStatement;
    PCERT_QC_STATEMENT rgStatement;
} CERT_QC_STATEMENTS_EXT_INFO, *PCERT_QC_STATEMENTS_EXT_INFO;
#line 4896 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_MASK_GEN_ALGORITHM {
    LPSTR pszObjId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
} CRYPT_MASK_GEN_ALGORITHM, *PCRYPT_MASK_GEN_ALGORITHM;

typedef struct _CRYPT_RSA_SSA_PSS_PARAMETERS {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
    DWORD dwSaltLength;
    DWORD dwTrailerField;
} CRYPT_RSA_SSA_PSS_PARAMETERS, *PCRYPT_RSA_SSA_PSS_PARAMETERS;
#line 4931 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_PSOURCE_ALGORITHM {
    LPSTR pszObjId;
    CRYPT_DATA_BLOB EncodingParameters;
} CRYPT_PSOURCE_ALGORITHM, *PCRYPT_PSOURCE_ALGORITHM;

typedef struct _CRYPT_RSAES_OAEP_PARAMETERS {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
    CRYPT_PSOURCE_ALGORITHM PSourceAlgorithm;
} CRYPT_RSAES_OAEP_PARAMETERS, *PCRYPT_RSAES_OAEP_PARAMETERS;
#line 5210 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMC_TAGGED_ATTRIBUTE {
    DWORD dwBodyPartID;
    CRYPT_ATTRIBUTE Attribute;
} CMC_TAGGED_ATTRIBUTE, *PCMC_TAGGED_ATTRIBUTE;

typedef struct _CMC_TAGGED_CERT_REQUEST {
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB SignedCertRequest;
} CMC_TAGGED_CERT_REQUEST, *PCMC_TAGGED_CERT_REQUEST;

typedef struct _CMC_TAGGED_REQUEST {
    DWORD dwTaggedRequestChoice;
    union {

        PCMC_TAGGED_CERT_REQUEST pTaggedCertRequest;
    } ;
} CMC_TAGGED_REQUEST, *PCMC_TAGGED_REQUEST;



typedef struct _CMC_TAGGED_CONTENT_INFO {
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB EncodedContentInfo;
} CMC_TAGGED_CONTENT_INFO, *PCMC_TAGGED_CONTENT_INFO;

typedef struct _CMC_TAGGED_OTHER_MSG {
    DWORD dwBodyPartID;
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} CMC_TAGGED_OTHER_MSG, *PCMC_TAGGED_OTHER_MSG;



typedef struct _CMC_DATA_INFO {
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedRequest;
    PCMC_TAGGED_REQUEST rgTaggedRequest;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
} CMC_DATA_INFO, *PCMC_DATA_INFO;



typedef struct _CMC_RESPONSE_INFO {
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
} CMC_RESPONSE_INFO, *PCMC_RESPONSE_INFO;
#line 5273 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMC_PEND_INFO {
    CRYPT_DATA_BLOB PendToken;
    FILETIME PendTime;
} CMC_PEND_INFO, *PCMC_PEND_INFO;

typedef struct _CMC_STATUS_INFO {
    DWORD dwStatus;
    DWORD cBodyList;
    DWORD *rgdwBodyList;
    LPWSTR pwszStatusString;
    DWORD dwOtherInfoChoice;
    union {



        DWORD dwFailInfo;

        PCMC_PEND_INFO pPendInfo;
    } ;
} CMC_STATUS_INFO, *PCMC_STATUS_INFO;
#line 5370 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMC_ADD_EXTENSIONS_INFO {
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD *rgdwCertReference;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CMC_ADD_EXTENSIONS_INFO, *PCMC_ADD_EXTENSIONS_INFO;
#line 5387 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMC_ADD_ATTRIBUTES_INFO {
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD *rgdwCertReference;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CMC_ADD_ATTRIBUTES_INFO, *PCMC_ADD_ATTRIBUTES_INFO;
#line 5403 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_TEMPLATE_EXT {
    LPSTR pszObjId;
    DWORD dwMajorVersion;
    BOOL fMinorVersion;
    DWORD dwMinorVersion;
} CERT_TEMPLATE_EXT, *PCERT_TEMPLATE_EXT;
#line 5419 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_HASHED_URL {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB Hash;
    LPWSTR pwszUrl;

} CERT_HASHED_URL, *PCERT_HASHED_URL;

typedef struct _CERT_LOGOTYPE_DETAILS {
    LPWSTR pwszMimeType;
    DWORD cHashedUrl;
    PCERT_HASHED_URL rgHashedUrl;
} CERT_LOGOTYPE_DETAILS, *PCERT_LOGOTYPE_DETAILS;

typedef struct _CERT_LOGOTYPE_REFERENCE {
    DWORD cHashedUrl;
    PCERT_HASHED_URL rgHashedUrl;
} CERT_LOGOTYPE_REFERENCE, *PCERT_LOGOTYPE_REFERENCE;

typedef struct _CERT_LOGOTYPE_IMAGE_INFO {


    DWORD dwLogotypeImageInfoChoice;

    DWORD dwFileSize;
    DWORD dwXSize;
    DWORD dwYSize;

    DWORD dwLogotypeImageResolutionChoice;
    union {




        DWORD dwNumBits;


        DWORD dwTableSize;
    } ;
    LPWSTR pwszLanguage;

} CERT_LOGOTYPE_IMAGE_INFO, *PCERT_LOGOTYPE_IMAGE_INFO;
#line 5468 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_LOGOTYPE_IMAGE {
    CERT_LOGOTYPE_DETAILS LogotypeDetails;

    PCERT_LOGOTYPE_IMAGE_INFO pLogotypeImageInfo;
} CERT_LOGOTYPE_IMAGE, *PCERT_LOGOTYPE_IMAGE;


typedef struct _CERT_LOGOTYPE_AUDIO_INFO {
    DWORD dwFileSize;
    DWORD dwPlayTime;
    DWORD dwChannels;
    DWORD dwSampleRate;

    LPWSTR pwszLanguage;

} CERT_LOGOTYPE_AUDIO_INFO, *PCERT_LOGOTYPE_AUDIO_INFO;

typedef struct _CERT_LOGOTYPE_AUDIO {
    CERT_LOGOTYPE_DETAILS LogotypeDetails;

    PCERT_LOGOTYPE_AUDIO_INFO pLogotypeAudioInfo;
} CERT_LOGOTYPE_AUDIO, *PCERT_LOGOTYPE_AUDIO;


typedef struct _CERT_LOGOTYPE_DATA {
    DWORD cLogotypeImage;
    PCERT_LOGOTYPE_IMAGE rgLogotypeImage;

    DWORD cLogotypeAudio;
    PCERT_LOGOTYPE_AUDIO rgLogotypeAudio;
} CERT_LOGOTYPE_DATA, *PCERT_LOGOTYPE_DATA;


typedef struct _CERT_LOGOTYPE_INFO {
    DWORD dwLogotypeInfoChoice;
    union {

        PCERT_LOGOTYPE_DATA pLogotypeDirectInfo;


        PCERT_LOGOTYPE_REFERENCE pLogotypeIndirectInfo;
    } ;
} CERT_LOGOTYPE_INFO, *PCERT_LOGOTYPE_INFO;




typedef struct _CERT_OTHER_LOGOTYPE_INFO {
    LPSTR pszObjId;
    CERT_LOGOTYPE_INFO LogotypeInfo;
} CERT_OTHER_LOGOTYPE_INFO, *PCERT_OTHER_LOGOTYPE_INFO;




typedef struct _CERT_LOGOTYPE_EXT_INFO {
    DWORD cCommunityLogo;
    PCERT_LOGOTYPE_INFO rgCommunityLogo;
    PCERT_LOGOTYPE_INFO pIssuerLogo;
    PCERT_LOGOTYPE_INFO pSubjectLogo;
    DWORD cOtherLogo;
    PCERT_OTHER_LOGOTYPE_INFO rgOtherLogo;
} CERT_LOGOTYPE_EXT_INFO, *PCERT_LOGOTYPE_EXT_INFO;
#line 5542 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_BIOMETRIC_DATA {
    DWORD dwTypeOfBiometricDataChoice;
    union {

        DWORD dwPredefined;


        LPSTR pszObjId;
    } ;

    CERT_HASHED_URL HashedUrl;
} CERT_BIOMETRIC_DATA, *PCERT_BIOMETRIC_DATA;
#line 5562 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_BIOMETRIC_EXT_INFO {
    DWORD cBiometricData;
    PCERT_BIOMETRIC_DATA rgBiometricData;
} CERT_BIOMETRIC_EXT_INFO, *PCERT_BIOMETRIC_EXT_INFO;
#line 5582 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _OCSP_SIGNATURE_INFO {
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
} OCSP_SIGNATURE_INFO, *POCSP_SIGNATURE_INFO;

typedef struct _OCSP_SIGNED_REQUEST_INFO {
    CRYPT_DER_BLOB ToBeSigned;
    POCSP_SIGNATURE_INFO pOptionalSignatureInfo;
} OCSP_SIGNED_REQUEST_INFO, *POCSP_SIGNED_REQUEST_INFO;







typedef struct _OCSP_CERT_ID {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB IssuerNameHash;
    CRYPT_HASH_BLOB IssuerKeyHash;
    CRYPT_INTEGER_BLOB SerialNumber;
} OCSP_CERT_ID, *POCSP_CERT_ID;

typedef struct _OCSP_REQUEST_ENTRY {
    OCSP_CERT_ID CertId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_REQUEST_ENTRY, *POCSP_REQUEST_ENTRY;

typedef struct _OCSP_REQUEST_INFO {
    DWORD dwVersion;
    PCERT_ALT_NAME_ENTRY pRequestorName;
    DWORD cRequestEntry;
    POCSP_REQUEST_ENTRY rgRequestEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_REQUEST_INFO, *POCSP_REQUEST_INFO;
#line 5629 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _OCSP_RESPONSE_INFO {
    DWORD dwStatus;
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} OCSP_RESPONSE_INFO, *POCSP_RESPONSE_INFO;
#line 5652 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _OCSP_BASIC_SIGNED_RESPONSE_INFO {
    CRYPT_DER_BLOB ToBeSigned;
    OCSP_SIGNATURE_INFO SignatureInfo;
} OCSP_BASIC_SIGNED_RESPONSE_INFO, *POCSP_BASIC_SIGNED_RESPONSE_INFO;







typedef struct _OCSP_BASIC_REVOKED_INFO {
    FILETIME RevocationDate;


    DWORD dwCrlReasonCode;
} OCSP_BASIC_REVOKED_INFO, *POCSP_BASIC_REVOKED_INFO;

typedef struct _OCSP_BASIC_RESPONSE_ENTRY {
    OCSP_CERT_ID CertId;
    DWORD dwCertStatus;
    union {





        POCSP_BASIC_REVOKED_INFO pRevokedInfo;

    } ;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;

    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_BASIC_RESPONSE_ENTRY, *POCSP_BASIC_RESPONSE_ENTRY;






typedef struct _OCSP_BASIC_RESPONSE_INFO {
    DWORD dwVersion;
    DWORD dwResponderIdChoice;
    union {

        CERT_NAME_BLOB ByNameResponderId;

        CRYPT_HASH_BLOB ByKeyResponderId;
    } ;
    FILETIME ProducedAt;
    DWORD cResponseEntry;
    POCSP_BASIC_RESPONSE_ENTRY rgResponseEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_BASIC_RESPONSE_INFO, *POCSP_BASIC_RESPONSE_INFO;
#line 5720 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef void *HCRYPTOIDFUNCSET;
typedef void *HCRYPTOIDFUNCADDR;
#line 5797 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_OID_FUNC_ENTRY {
    LPCSTR pszOID;
    void *pvFuncAddr;
} CRYPT_OID_FUNC_ENTRY, *PCRYPT_OID_FUNC_ENTRY;
#line 5821 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptInstallOIDFunctionAddress(
             HMODULE hModule,
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         DWORD cFuncEntry,
                            const CRYPT_OID_FUNC_ENTRY rgFuncEntry[],
         DWORD dwFlags
    );







__declspec(dllimport)
HCRYPTOIDFUNCSET
__stdcall
CryptInitOIDFunctionSet(
         LPCSTR pszFuncName,
         DWORD dwFlags
    );
#line 5865 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CryptGetOIDFunctionAddress(
         HCRYPTOIDFUNCSET hFuncSet,
         DWORD dwEncodingType,
         LPCSTR pszOID,
         DWORD dwFlags,
                void **ppvFuncAddr,
          HCRYPTOIDFUNCADDR *phFuncAddr
    );
#line 5889 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptGetDefaultOIDDllList(
         HCRYPTOIDFUNCSET hFuncSet,
         DWORD dwEncodingType,
                                                                           WCHAR *pwszDllList,
            DWORD *pcchDllList
    );
#line 5922 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CryptGetDefaultOIDFunctionAddress(
         HCRYPTOIDFUNCSET hFuncSet,
         DWORD dwEncodingType,
             LPCWSTR pwszDll,
         DWORD dwFlags,
                void **ppvFuncAddr,
            HCRYPTOIDFUNCADDR *phFuncAddr
    );
#line 5947 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptFreeOIDFunctionAddress(
         HCRYPTOIDFUNCADDR hFuncAddr,
         DWORD dwFlags
    );
#line 5969 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptRegisterOIDFunction(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID,
             LPCWSTR pwszDll,
             LPCSTR pszOverrideFuncName
    );





__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterOIDFunction(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID
    );
#line 6008 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptRegisterDefaultOIDFunction(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         DWORD dwIndex,
         LPCWSTR pwszDll
    );
#line 6025 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterDefaultOIDFunction(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCWSTR pwszDll
    );
#line 6042 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSetOIDFunctionValue(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID,
             LPCWSTR pwszValueName,
         DWORD dwValueType,
                                 const BYTE *pbValueData,
         DWORD cbValueData
    );
#line 6063 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptGetOIDFunctionValue(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID,
             LPCWSTR pwszValueName,
              DWORD *pdwValueType,
                                                        BYTE *pbValueData,
                DWORD *pcbValueData
    );

typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_FUNC)(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID,
         DWORD cValue,
                        const DWORD rgdwValueType[],
                        LPCWSTR const rgpwszValueName[],
                        const BYTE * const rgpbValueData[],
                        const DWORD rgcbValueData[],
                void *pvArg
    );
#line 6101 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptEnumOIDFunction(
         DWORD dwEncodingType,
             LPCSTR pszFuncName,
             LPCSTR pszOID,
         DWORD dwFlags,
                void *pvArg,
               PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc
    );
#line 6147 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_OID_INFO {
    DWORD cbSize;
    LPCSTR pszOID;
    LPCWSTR pwszName;
    DWORD dwGroupId;
    union {
        DWORD dwValue;
        ALG_ID Algid;
        DWORD dwLength;
    } ;
    CRYPT_DATA_BLOB ExtraInfo;
#line 6185 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
} CRYPT_OID_INFO, *PCRYPT_OID_INFO;
typedef const CRYPT_OID_INFO CCRYPT_OID_INFO, *PCCRYPT_OID_INFO;
#line 6279 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCRYPT_OID_INFO
__stdcall
CryptFindOIDInfo(
         DWORD dwKeyType,
         void *pvKey,
         DWORD dwGroupId
    );
#line 6349 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptRegisterOIDInfo(
         PCCRYPT_OID_INFO pInfo,
         DWORD dwFlags
    );







__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterOIDInfo(
         PCCRYPT_OID_INFO pInfo
    );


typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_INFO)(
         PCCRYPT_OID_INFO pInfo,
                void *pvArg
    );
#line 6386 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptEnumOIDInfo(
         DWORD dwGroupId,
         DWORD dwFlags,
                void *pvArg,
               PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo
    );
#line 6419 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
LPCWSTR
__stdcall
CryptFindLocalizedName(
         LPCWSTR pwszCryptName
    );
#line 6433 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef void *HCRYPTMSG;
#line 6470 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_ISSUER_SERIAL_NUMBER {
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
} CERT_ISSUER_SERIAL_NUMBER, *PCERT_ISSUER_SERIAL_NUMBER;




typedef struct _CERT_ID {
    DWORD dwIdChoice;
    union {

        CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;

        CRYPT_HASH_BLOB KeyId;

        CRYPT_HASH_BLOB HashId;
    } ;
} CERT_ID, *PCERT_ID;
#line 6543 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_SIGNER_ENCODE_INFO {
    DWORD cbSize;
    PCERT_INFO pCertInfo;


    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;


    DWORD dwKeySpec;

    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
#line 6570 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
} CMSG_SIGNER_ENCODE_INFO, *PCMSG_SIGNER_ENCODE_INFO;

typedef struct _CMSG_SIGNED_ENCODE_INFO {
    DWORD cbSize;
    DWORD cSigners;
    PCMSG_SIGNER_ENCODE_INFO rgSigners;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
    DWORD cCrlEncoded;
    PCRL_BLOB rgCrlEncoded;





} CMSG_SIGNED_ENCODE_INFO, *PCMSG_SIGNED_ENCODE_INFO;
#line 6630 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO,
    *PCMSG_RECIPIENT_ENCODE_INFO;

typedef struct _CMSG_ENVELOPED_ENCODE_INFO {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;




    PCERT_INFO *rgpRecipients;
#line 6658 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
} CMSG_ENVELOPED_ENCODE_INFO, *PCMSG_ENVELOPED_ENCODE_INFO;
#line 6683 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;
} CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
#line 6732 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;



    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,
    *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;

typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
    void *pvKeyWrapAuxInfo;







    HCRYPTPROV_LEGACY hCryptProv;
    DWORD dwKeySpec;

    DWORD dwKeyChoice;
    union {



        PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;




        PCERT_ID pSenderId;
    } ;
    CRYPT_DATA_BLOB UserKeyingMaterial;

    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
#line 6800 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV hCryptProv;
    DWORD dwKeyChoice;
    union {

        HCRYPTKEY hKeyEncryptionKey;

        void *pvKeyEncryptionKey;
    } ;
    CRYPT_DATA_BLOB KeyId;


    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO, *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
#line 6826 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
struct _CMSG_RECIPIENT_ENCODE_INFO {
    DWORD dwRecipientChoice;
    union {

        PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;

        PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;

        PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;
    } ;
};
#line 6858 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_RC2_AUX_INFO {
    DWORD cbSize;
    DWORD dwBitLen;
} CMSG_RC2_AUX_INFO, *PCMSG_RC2_AUX_INFO;
#line 6876 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO {
    DWORD cbSize;
    DWORD dwFlags;
} CMSG_SP3_COMPATIBLE_AUX_INFO, *PCMSG_SP3_COMPATIBLE_AUX_INFO;
#line 6898 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_RC4_AUX_INFO {
    DWORD cbSize;
    DWORD dwBitLen;
} CMSG_RC4_AUX_INFO, *PCMSG_RC4_AUX_INFO;
#line 6912 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {
    DWORD cbSize;
    CMSG_SIGNED_ENCODE_INFO SignedInfo;
    CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;
} CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO, *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
#line 6934 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_HASHED_ENCODE_INFO {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
} CMSG_HASHED_ENCODE_INFO, *PCMSG_HASHED_ENCODE_INFO;
#line 6951 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
} CMSG_ENCRYPTED_ENCODE_INFO, *PCMSG_ENCRYPTED_ENCODE_INFO;
#line 6972 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_STREAM_OUTPUT)(
             const void *pvArg,
                            BYTE *pbData,
         DWORD cbData,
         BOOL fFinal
    );



typedef struct _CMSG_STREAM_INFO {
    DWORD cbContent;
    PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;
    void *pvArg;
} CMSG_STREAM_INFO, *PCMSG_STREAM_INFO;
#line 7020 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgOpenToEncode(
         DWORD dwMsgEncodingType,
         DWORD dwFlags,
         DWORD dwMsgType,
         void const *pvMsgEncodeInfo,
             LPSTR pszInnerContentObjID,
             PCMSG_STREAM_INFO pStreamInfo
    );
#line 7040 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
DWORD
__stdcall
CryptMsgCalculateEncodedLength(
         DWORD dwMsgEncodingType,
         DWORD dwFlags,
         DWORD dwMsgType,
         void const *pvMsgEncodeInfo,
             LPSTR pszInnerContentObjID,
         DWORD cbData
    );
#line 7064 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgOpenToDecode(
         DWORD dwMsgEncodingType,
         DWORD dwFlags,
         DWORD dwMsgType,
             HCRYPTPROV_LEGACY hCryptProv,
               PCERT_INFO pRecipientInfo,
             PCMSG_STREAM_INFO pStreamInfo
    );




__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgDuplicate(
             HCRYPTMSG hCryptMsg
    );






__declspec(dllimport)
BOOL
__stdcall
CryptMsgClose(
             HCRYPTMSG hCryptMsg
    );
#line 7107 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptMsgUpdate(
         HCRYPTMSG hCryptMsg,
                            const BYTE *pbData,
         DWORD cbData,
         BOOL fFinal
    );
#line 7141 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptMsgGetParam(
         HCRYPTMSG hCryptMsg,
         DWORD dwParamType,
         DWORD dwIndex,
                                              void *pvData,
            DWORD *pcbData
    );
#line 7276 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_SIGNER_INFO {
    DWORD dwVersion;
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;


    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;

    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
} CMSG_SIGNER_INFO, *PCMSG_SIGNER_INFO;
#line 7311 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_CMS_SIGNER_INFO {
    DWORD dwVersion;
    CERT_ID SignerId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;


    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;

    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
} CMSG_CMS_SIGNER_INFO, *PCMSG_CMS_SIGNER_INFO;
#line 7344 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef CRYPT_ATTRIBUTES CMSG_ATTR;
typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;
#line 7585 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO {
    DWORD dwVersion;


    CERT_ID RecipientId;

    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
} CMSG_KEY_TRANS_RECIPIENT_INFO, *PCMSG_KEY_TRANS_RECIPIENT_INFO;

typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {

    CERT_ID RecipientId;

    CRYPT_DATA_BLOB EncryptedKey;


    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_INFO, *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;

typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO {
    DWORD dwVersion;
    DWORD dwOriginatorChoice;
    union {

        CERT_ID OriginatorCertId;

        CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    } ;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;

    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_INFO, *PCMSG_KEY_AGREE_RECIPIENT_INFO;





typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO {
    DWORD dwVersion;
    CRYPT_DATA_BLOB KeyId;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;


    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_INFO, *PCMSG_MAIL_LIST_RECIPIENT_INFO;

typedef struct _CMSG_CMS_RECIPIENT_INFO {
    DWORD dwRecipientChoice;
    union {

        PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;

        PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;

        PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    } ;
} CMSG_CMS_RECIPIENT_INFO, *PCMSG_CMS_RECIPIENT_INFO;
#line 7680 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptMsgControl(
         HCRYPTMSG hCryptMsg,
         DWORD dwFlags,
         DWORD dwCtrlType,
             void const *pvCtrlPara
    );
#line 7758 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    DWORD dwSignerIndex;
    DWORD dwSignerType;
    void *pvSigner;
} CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA, *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
#line 7802 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_CTRL_DECRYPT_PARA {
    DWORD cbSize;


    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;


    DWORD dwKeySpec;

    DWORD dwRecipientIndex;
} CMSG_CTRL_DECRYPT_PARA, *PCMSG_CTRL_DECRYPT_PARA;
#line 7842 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {
    DWORD cbSize;

    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;


    DWORD dwKeySpec;

    PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
    DWORD dwRecipientIndex;
} CMSG_CTRL_KEY_TRANS_DECRYPT_PARA, *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
#line 7886 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {
    DWORD cbSize;


    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;


    DWORD dwKeySpec;

    PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
    DWORD dwRecipientIndex;
    DWORD dwRecipientEncryptedKeyIndex;
    CRYPT_BIT_BLOB OriginatorPublicKey;
} CMSG_CTRL_KEY_AGREE_DECRYPT_PARA, *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
#line 7930 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    DWORD dwRecipientIndex;
    DWORD dwKeyChoice;
    union {

        HCRYPTKEY hKeyEncryptionKey;

        void *pvKeyEncryptionKey;
    } ;
} CMSG_CTRL_MAIL_LIST_DECRYPT_PARA, *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
#line 7992 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {
    DWORD cbSize;
    DWORD dwSignerIndex;
    CRYPT_DATA_BLOB blob;
} CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
#line 8008 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {
    DWORD cbSize;
    DWORD dwSignerIndex;
    DWORD dwUnauthAttrIndex;
} CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
#line 8079 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
BOOL
__stdcall
CryptMsgVerifyCountersignatureEncoded(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwEncodingType,
                              PBYTE pbSignerInfo,
         DWORD cbSignerInfo,
                                              PBYTE pbSignerInfoCountersignature,
         DWORD cbSignerInfoCountersignature,
         PCERT_INFO pciCountersigner
    );
#line 8102 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
BOOL
__stdcall
CryptMsgVerifyCountersignatureEncodedEx(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwEncodingType,
                              PBYTE pbSignerInfo,
         DWORD cbSignerInfo,
                                              PBYTE pbSignerInfoCountersignature,
         DWORD cbSignerInfoCountersignature,
         DWORD dwSignerType,
         void *pvSigner,
               DWORD dwFlags,
               void *pvReserved
    );
#line 8126 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
BOOL
__stdcall
CryptMsgCountersign(
         HCRYPTMSG hCryptMsg,
         DWORD dwIndex,
         DWORD cCountersigners,
                                 PCMSG_SIGNER_ENCODE_INFO rgCountersigners
    );







BOOL
__stdcall
CryptMsgCountersignEncoded(
         DWORD dwEncodingType,
                              PBYTE pbSignerInfo,
         DWORD cbSignerInfo,
         DWORD cCountersigners,
                                 PCMSG_SIGNER_ENCODE_INFO rgCountersigners,
                                                                      PBYTE pbCountersignature,
            PDWORD pcbCountersignature
    );
#line 8160 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef void * (__stdcall *PFN_CMSG_ALLOC) (
         size_t cb
    );

typedef void (__stdcall *PFN_CMSG_FREE)(
            void *pv
    );
#line 8181 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_GEN_ENCRYPT_KEY) (
            HCRYPTPROV *phCryptProv,
         PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
             PVOID pvEncryptAuxInfo,
         PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
               PFN_CMSG_ALLOC pfnAlloc,
          HCRYPTKEY *phEncryptKey,
                                              PBYTE *ppbEncryptParameters,
          PDWORD pcbEncryptParameters
    );


typedef BOOL (__stdcall *PFN_CMSG_EXPORT_ENCRYPT_KEY) (
         HCRYPTPROV hCryptProv,
         HCRYPTKEY hEncryptKey,
         PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
                                              PBYTE pbData,
            PDWORD pcbData
    );


typedef BOOL (__stdcall *PFN_CMSG_IMPORT_ENCRYPT_KEY) (
         HCRYPTPROV hCryptProv,
         DWORD dwKeySpec,
         PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
         PCRYPT_ALGORITHM_IDENTIFIER paiPubKey,
                              PBYTE pbEncodedKey,
         DWORD cbEncodedKey,
          HCRYPTKEY *phEncryptKey
    );
#line 8235 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_CONTENT_ENCRYPT_INFO {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;
    PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;
    DWORD dwEncryptFlags;
    union {

        HCRYPTKEY hContentEncryptKey;

        BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
    } ;
    DWORD dwFlags;

    BOOL fCNG;

    BYTE *pbCNGContentEncryptKeyObject;
    BYTE *pbContentEncryptKey;
    DWORD cbContentEncryptKey;
} CMSG_CONTENT_ENCRYPT_INFO, *PCMSG_CONTENT_ENCRYPT_INFO;
#line 8323 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY) (
            PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
#line 8340 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
} CMSG_KEY_TRANS_ENCRYPT_INFO, *PCMSG_KEY_TRANS_ENCRYPT_INFO;
#line 8381 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_TRANS) (
         PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
         PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo,
            PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
#line 8401 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {
    DWORD cbSize;
    CRYPT_DATA_BLOB EncryptedKey;
} CMSG_KEY_AGREE_KEY_ENCRYPT_INFO, *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;







typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    DWORD dwOriginatorChoice;
    union {

        CERT_ID OriginatorCertId;

        CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    } ;
    DWORD cKeyAgreeKeyEncryptInfo;
    PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;
    DWORD dwFlags;
} CMSG_KEY_AGREE_ENCRYPT_INFO, *PCMSG_KEY_AGREE_ENCRYPT_INFO;
#line 8488 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_AGREE) (
         PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
         PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo,
            PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
#line 8507 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
} CMSG_MAIL_LIST_ENCRYPT_INFO, *PCMSG_MAIL_LIST_ENCRYPT_INFO;
#line 8549 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_MAIL_LIST) (
         PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
         PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo,
            PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
#line 8578 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_TRANS) (
         PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
         PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
         DWORD dwFlags,
               void *pvReserved,
          HCRYPTKEY *phContentEncryptKey
    );



typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_AGREE) (
         PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
         PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
         DWORD dwFlags,
               void *pvReserved,
          HCRYPTKEY *phContentEncryptKey
    );



typedef BOOL (__stdcall *PFN_CMSG_IMPORT_MAIL_LIST) (
         PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
         PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara,
         DWORD dwFlags,
               void *pvReserved,
          HCRYPTKEY *phContentEncryptKey
    );
#line 8616 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CMSG_CNG_CONTENT_DECRYPT_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;




    NCRYPT_KEY_HANDLE hNCryptKey;

    BYTE *pbContentEncryptKey;
    DWORD cbContentEncryptKey;

    BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
    BYTE *pbCNGContentEncryptKeyObject;
} CMSG_CNG_CONTENT_DECRYPT_INFO, *PCMSG_CNG_CONTENT_DECRYPT_INFO;
#line 8652 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_TRANS) (
            PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
         PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
         DWORD dwFlags,
               void *pvReserved
    );
#line 8677 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_AGREE) (
            PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
         PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
         DWORD dwFlags,
               void *pvReserved
    );
#line 8702 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY) (
            PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
#line 8783 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef void *HCERTSTORE;
#line 8795 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_CONTEXT {
    DWORD dwCertEncodingType;
    BYTE *pbCertEncoded;
    DWORD cbCertEncoded;
    PCERT_INFO pCertInfo;
    HCERTSTORE hCertStore;
} CERT_CONTEXT, *PCERT_CONTEXT;
typedef const CERT_CONTEXT *PCCERT_CONTEXT;
#line 8814 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRL_CONTEXT {
    DWORD dwCertEncodingType;
    BYTE *pbCrlEncoded;
    DWORD cbCrlEncoded;
    PCRL_INFO pCrlInfo;
    HCERTSTORE hCertStore;
} CRL_CONTEXT, *PCRL_CONTEXT;
typedef const CRL_CONTEXT *PCCRL_CONTEXT;
#line 8833 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CTL_CONTEXT {
    DWORD dwMsgAndCertEncodingType;
    BYTE *pbCtlEncoded;
    DWORD cbCtlEncoded;
    PCTL_INFO pCtlInfo;
    HCERTSTORE hCertStore;
    HCRYPTMSG hCryptMsg;
    BYTE *pbCtlContent;
    DWORD cbCtlContent;
} CTL_CONTEXT, *PCTL_CONTEXT;
typedef const CTL_CONTEXT *PCCTL_CONTEXT;
#line 9001 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_KEY_PROV_PARAM {
    DWORD dwParam;
    BYTE *pbData;
    DWORD cbData;
    DWORD dwFlags;
} CRYPT_KEY_PROV_PARAM, *PCRYPT_KEY_PROV_PARAM;

typedef struct _CRYPT_KEY_PROV_INFO {
    LPWSTR pwszContainerName;
    LPWSTR pwszProvName;
    DWORD dwProvType;
    DWORD dwFlags;
    DWORD cProvParam;
    PCRYPT_KEY_PROV_PARAM rgProvParam;
    DWORD dwKeySpec;
} CRYPT_KEY_PROV_INFO, *PCRYPT_KEY_PROV_INFO;
#line 9041 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_KEY_CONTEXT {
    DWORD cbSize;
    union {
        HCRYPTPROV hCryptProv;


        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;
    DWORD dwKeySpec;
} CERT_KEY_CONTEXT, *PCERT_KEY_CONTEXT;







typedef struct _ROOT_INFO_LUID {
    DWORD LowPart;
    LONG HighPart;
} ROOT_INFO_LUID, *PROOT_INFO_LUID;

typedef struct _CRYPT_SMART_CARD_ROOT_INFO {
    BYTE rgbCardID [16];
    ROOT_INFO_LUID luid;
} CRYPT_SMART_CARD_ROOT_INFO, *PCRYPT_SMART_CARD_ROOT_INFO;
#line 9167 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA {
    union {
        HKEY hKeyBase;
        void *pvBase;
    } ;
    union {
        void *pvSystemStore;
        LPCSTR pszSystemStore;
        LPCWSTR pwszSystemStore;
    } ;
} CERT_SYSTEM_STORE_RELOCATE_PARA, *PCERT_SYSTEM_STORE_RELOCATE_PARA;
#line 9453 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA {
    HKEY hKeyBase;
    LPWSTR pwszRegPath;
} CERT_REGISTRY_STORE_CLIENT_GPT_PARA, *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;
#line 9466 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA {
    HKEY hKey;
    LPWSTR pwszStoreDirectory;
} CERT_REGISTRY_STORE_ROAMING_PARA, *PCERT_REGISTRY_STORE_ROAMING_PARA;
#line 9545 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_LDAP_STORE_OPENED_PARA {
    void *pvLdapSessionHandle;

    LPCWSTR pwszLdapUrl;
} CERT_LDAP_STORE_OPENED_PARA, *PCERT_LDAP_STORE_OPENED_PARA;
#line 9913 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

HCERTSTORE
__stdcall
CertOpenStore(
         LPCSTR lpszStoreProvider,
         DWORD dwEncodingType,
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwFlags,
             const void *pvPara
    );







typedef void *HCERTSTOREPROV;
#line 9942 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_STORE_PROV_INFO {
    DWORD cbSize;
    DWORD cStoreProvFunc;
    void **rgpvStoreProvFunc;
    HCERTSTOREPROV hStoreProv;
    DWORD dwStoreProvFlags;
    HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;
} CERT_STORE_PROV_INFO, *PCERT_STORE_PROV_INFO;
#line 9958 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(
         LPCSTR lpszStoreProvider,
         DWORD dwEncodingType,
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwFlags,
             const void *pvPara,
         HCERTSTORE hCertStore,
            PCERT_STORE_PROV_INFO pStoreProvInfo
    );
#line 10024 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef void (__stdcall *PFN_CERT_STORE_PROV_CLOSE)(
                HCERTSTOREPROV hStoreProv,
         DWORD dwFlags
    );






typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pStoreCertContext,
         DWORD dwFlags,
                PCCERT_CONTEXT *ppProvCertContext
    );
#line 10050 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         DWORD dwFlags
    );





typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         DWORD dwFlags
    );
#line 10074 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );






typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pStoreCrlContext,
         DWORD dwFlags,
                PCCRL_CONTEXT *ppProvCrlContext
    );
#line 10101 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwFlags
    );




typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwFlags
    );
#line 10124 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );






typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CTL)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pStoreCtlContext,
         DWORD dwFlags,
                PCCTL_CONTEXT *ppProvCtlContext
    );
#line 10151 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CTL)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags
    );




typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CTL)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags
                                                     );
#line 10174 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_CONTROL)(
            HCERTSTOREPROV hStoreProv,
         DWORD dwFlags,
         DWORD dwCtrlType,
             void const *pvCtrlPara
    );

typedef struct _CERT_STORE_PROV_FIND_INFO {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD dwFindFlags;
    DWORD dwFindType;
    const void *pvFindPara;
} CERT_STORE_PROV_FIND_INFO, *PCERT_STORE_PROV_FIND_INFO;
typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO,
*PCCERT_STORE_PROV_FIND_INFO;

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_STORE_PROV_FIND_INFO pFindInfo,
         PCCERT_CONTEXT pPrevCertContext,
         DWORD dwFlags,
                  void **ppvStoreProvFindInfo,
                PCCERT_CONTEXT *ppProvCertContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         void *pvStoreProvFindInfo,
         DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId,
         DWORD dwFlags,
                                              void *pvData,
            DWORD *pcbData
    );


typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_STORE_PROV_FIND_INFO pFindInfo,
         PCCRL_CONTEXT pPrevCrlContext,
         DWORD dwFlags,
                  void **ppvStoreProvFindInfo,
                PCCRL_CONTEXT *ppProvCrlContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         void *pvStoreProvFindInfo,
         DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId,
         DWORD dwFlags,
                                              void *pvData,
            DWORD *pcbData
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CTL)(
         HCERTSTOREPROV hStoreProv,
         PCCERT_STORE_PROV_FIND_INFO pFindInfo,
         PCCTL_CONTEXT pPrevCtlContext,
         DWORD dwFlags,
                  void **ppvStoreProvFindInfo,
                PCCTL_CONTEXT *ppProvCtlContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CTL)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         void *pvStoreProvFindInfo,
         DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId,
         DWORD dwFlags,
                                              void *pvData,
            DWORD *pcbData
    );





__declspec(dllimport)
HCERTSTORE
__stdcall
CertDuplicateStore(
         HCERTSTORE hCertStore
    );
#line 10348 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertSaveStore(
         HCERTSTORE hCertStore,
         DWORD dwEncodingType,
         DWORD dwSaveAs,
         DWORD dwSaveTo,
            void *pvSaveToPara,
         DWORD dwFlags
    );
#line 10390 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertCloseStore(
             HCERTSTORE hCertStore,
         DWORD dwFlags
    );
#line 10410 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertGetSubjectCertificateFromStore(
         HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
         PCERT_INFO pCertId

    );
#line 10436 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertEnumCertificatesInStore(
         HCERTSTORE hCertStore,
             PCCERT_CONTEXT pPrevCertContext
    );
#line 10468 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertFindCertificateInStore(
         HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
         DWORD dwFindFlags,
         DWORD dwFindType,
             const void *pvFindPara,
             PCCERT_CONTEXT pPrevCertContext
    );
#line 10815 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertGetIssuerCertificateFromStore(
         HCERTSTORE hCertStore,
         PCCERT_CONTEXT pSubjectContext,
             PCCERT_CONTEXT pPrevIssuerContext,
            DWORD *pdwFlags
    );
#line 10835 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertVerifySubjectCertificateContext(
         PCCERT_CONTEXT pSubject,
             PCCERT_CONTEXT pIssuer,
            DWORD *pdwFlags
    );




__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertDuplicateCertificateContext(
             PCCERT_CONTEXT pCertContext
    );
#line 10868 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertCreateCertificateContext(
         DWORD dwCertEncodingType,
                               const BYTE *pbCertEncoded,
         DWORD cbCertEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCertificateContext(
             PCCERT_CONTEXT pCertContext
    );
#line 11027 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertSetCertificateContextProperty(
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );
#line 11104 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertGetCertificateContextProperty(
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId,
                                              void *pvData,
            DWORD *pcbData
    );
#line 11128 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
DWORD
__stdcall
CertEnumCertificateContextProperties(
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId
    );
#line 11153 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertCreateCTLEntryFromCertificateContextProperties(
         PCCERT_CONTEXT pCertContext,
         DWORD cOptAttr,
                              PCRYPT_ATTRIBUTE rgOptAttr,
         DWORD dwFlags,
               void *pvReserved,
                                                      PCTL_ENTRY pCtlEntry,
            DWORD *pcbCtlEntry
    );
#line 11181 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertSetCertificateContextPropertiesFromCTLEntry(
         PCCERT_CONTEXT pCertContext,
         PCTL_ENTRY pCtlEntry,
         DWORD dwFlags
    );
#line 11242 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertGetCRLFromStore(
         HCERTSTORE hCertStore,
             PCCERT_CONTEXT pIssuerContext,
             PCCRL_CONTEXT pPrevCrlContext,
            DWORD *pdwFlags
    );
#line 11268 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertEnumCRLsInStore(
         HCERTSTORE hCertStore,
             PCCRL_CONTEXT pPrevCrlContext
    );
#line 11299 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertFindCRLInStore(
         HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
         DWORD dwFindFlags,
         DWORD dwFindType,
             const void *pvFindPara,
             PCCRL_CONTEXT pPrevCrlContext
    );
#line 11384 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRL_FIND_ISSUED_FOR_PARA {
    PCCERT_CONTEXT pSubjectCert;
    PCCERT_CONTEXT pIssuerCert;
} CRL_FIND_ISSUED_FOR_PARA, *PCRL_FIND_ISSUED_FOR_PARA;





__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertDuplicateCRLContext(
             PCCRL_CONTEXT pCrlContext
    );
#line 11414 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertCreateCRLContext(
         DWORD dwCertEncodingType,
                              const BYTE *pbCrlEncoded,
         DWORD cbCrlEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCRLContext(
             PCCRL_CONTEXT pCrlContext
    );






__declspec(dllimport)
BOOL
__stdcall
CertSetCRLContextProperty(
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );
#line 11459 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertGetCRLContextProperty(
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId,
                                              void *pvData,
            DWORD *pcbData
    );
#line 11479 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
DWORD
__stdcall
CertEnumCRLContextProperties(
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId
    );
#line 11500 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertFindCertificateInCRL(
         PCCERT_CONTEXT pCert,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwFlags,
               void *pvReserved,
                    PCRL_ENTRY *ppCrlEntry
    );
#line 11523 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertIsValidCRLForCertificate(
         PCCERT_CONTEXT pCert,
         PCCRL_CONTEXT pCrl,
         DWORD dwFlags,
               void *pvReserved
    );
#line 11591 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertAddEncodedCertificateToStore(
             HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
                               const BYTE *pbCertEncoded,
         DWORD cbCertEncoded,
         DWORD dwAddDisposition,
                    PCCERT_CONTEXT *ppCertContext
    );
#line 11661 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertAddCertificateContextToStore(
             HCERTSTORE hCertStore,
         PCCERT_CONTEXT pCertContext,
         DWORD dwAddDisposition,
                    PCCERT_CONTEXT *ppStoreContext
    );
#line 11716 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertAddSerializedElementToStore(
             HCERTSTORE hCertStore,
                           const BYTE *pbElement,
         DWORD cbElement,
         DWORD dwAddDisposition,
         DWORD dwFlags,
         DWORD dwContextTypeFlags,
              DWORD *pdwContextType,
                    const void **ppvContext
    );
#line 11746 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertDeleteCertificateFromStore(
         PCCERT_CONTEXT pCertContext
    );
#line 11769 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertAddEncodedCRLToStore(
             HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
                              const BYTE *pbCrlEncoded,
         DWORD cbCrlEncoded,
         DWORD dwAddDisposition,
                    PCCRL_CONTEXT *ppCrlContext
    );
#line 11802 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertAddCRLContextToStore(
             HCERTSTORE hCertStore,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwAddDisposition,
                    PCCRL_CONTEXT *ppStoreContext
    );
#line 11825 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertDeleteCRLFromStore(
         PCCRL_CONTEXT pCrlContext
    );





__declspec(dllimport)
BOOL
__stdcall
CertSerializeCertificateStoreElement(
         PCCERT_CONTEXT pCertContext,
         DWORD dwFlags,
                                                    BYTE *pbElement,
            DWORD *pcbElement
    );





__declspec(dllimport)
BOOL
__stdcall
CertSerializeCRLStoreElement(
         PCCRL_CONTEXT pCrlContext,
         DWORD dwFlags,
                                                    BYTE *pbElement,
            DWORD *pcbElement
    );
#line 11869 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertDuplicateCTLContext(
             PCCTL_CONTEXT pCtlContext
    );
#line 11890 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertCreateCTLContext(
         DWORD dwMsgAndCertEncodingType,
                              const BYTE *pbCtlEncoded,
         DWORD cbCtlEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCTLContext(
             PCCTL_CONTEXT pCtlContext
    );






__declspec(dllimport)
BOOL
__stdcall
CertSetCTLContextProperty(
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );
#line 11935 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertGetCTLContextProperty(
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId,
                                              void *pvData,
            DWORD *pcbData
    );




__declspec(dllimport)
DWORD
__stdcall
CertEnumCTLContextProperties(
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId
    );
#line 11972 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertEnumCTLsInStore(
         HCERTSTORE hCertStore,
             PCCTL_CONTEXT pPrevCtlContext
    );
#line 11998 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCTL_ENTRY
__stdcall
CertFindSubjectInCTL(
         DWORD dwEncodingType,
         DWORD dwSubjectType,
         void *pvSubject,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags
    );







typedef struct _CTL_ANY_SUBJECT_INFO {
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    CRYPT_DATA_BLOB SubjectIdentifier;
} CTL_ANY_SUBJECT_INFO, *PCTL_ANY_SUBJECT_INFO;
#line 12043 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertFindCTLInStore(
         HCERTSTORE hCertStore,
         DWORD dwMsgAndCertEncodingType,
         DWORD dwFindFlags,
         DWORD dwFindType,
             const void *pvFindPara,
             PCCTL_CONTEXT pPrevCtlContext
    );
#line 12062 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CTL_FIND_USAGE_PARA {
    DWORD cbSize;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    PCERT_INFO pSigner;
} CTL_FIND_USAGE_PARA, *PCTL_FIND_USAGE_PARA;







typedef struct _CTL_FIND_SUBJECT_PARA {
    DWORD cbSize;
    PCTL_FIND_USAGE_PARA pUsagePara;
    DWORD dwSubjectType;
    void *pvSubject;
} CTL_FIND_SUBJECT_PARA, *PCTL_FIND_SUBJECT_PARA;
#line 12149 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertAddEncodedCTLToStore(
             HCERTSTORE hCertStore,
         DWORD dwMsgAndCertEncodingType,
                              const BYTE *pbCtlEncoded,
         DWORD cbCtlEncoded,
         DWORD dwAddDisposition,
                    PCCTL_CONTEXT *ppCtlContext
    );
#line 12182 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertAddCTLContextToStore(
             HCERTSTORE hCertStore,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwAddDisposition,
                    PCCTL_CONTEXT *ppStoreContext
    );




__declspec(dllimport)
BOOL
__stdcall
CertSerializeCTLStoreElement(
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags,
                                                    BYTE *pbElement,
            DWORD *pcbElement
    );
#line 12218 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertDeleteCTLFromStore(
         PCCTL_CONTEXT pCtlContext
    );


__declspec(dllimport)

BOOL
__stdcall
CertAddCertificateLinkToStore(
         HCERTSTORE hCertStore,
         PCCERT_CONTEXT pCertContext,
         DWORD dwAddDisposition,
                    PCCERT_CONTEXT *ppStoreContext
    );

__declspec(dllimport)

BOOL
__stdcall
CertAddCRLLinkToStore(
         HCERTSTORE hCertStore,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwAddDisposition,
                    PCCRL_CONTEXT *ppStoreContext
    );

__declspec(dllimport)

BOOL
__stdcall
CertAddCTLLinkToStore(
         HCERTSTORE hCertStore,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwAddDisposition,
                    PCCTL_CONTEXT *ppStoreContext
    );

__declspec(dllimport)
BOOL
__stdcall
CertAddStoreToCollection(
         HCERTSTORE hCollectionStore,
             HCERTSTORE hSiblingStore,
         DWORD dwUpdateFlags,
         DWORD dwPriority
    );

__declspec(dllimport)
void
__stdcall
CertRemoveStoreFromCollection(
         HCERTSTORE hCollectionStore,
         HCERTSTORE hSiblingStore
    );


__declspec(dllimport)
BOOL
__stdcall
CertControlStore(
         HCERTSTORE hCertStore,
         DWORD dwFlags,
         DWORD dwCtrlType,
             void const *pvCtrlPara
    );
#line 12414 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertSetStoreProperty(
         HCERTSTORE hCertStore,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );
#line 12437 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertGetStoreProperty(
         HCERTSTORE hCertStore,
         DWORD dwPropId,
                                              void *pvData,
            DWORD *pcbData
    );
#line 12459 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_CREATE_CONTEXT_SORT_FUNC)(
         DWORD cbTotalEncoded,
         DWORD cbRemainEncoded,
         DWORD cEntry,
                void *pvSort
    );

typedef struct _CERT_CREATE_CONTEXT_PARA {
    DWORD cbSize;
    PFN_CRYPT_FREE pfnFree;
    void *pvFree;



    PFN_CERT_CREATE_CONTEXT_SORT_FUNC pfnSort;
    void *pvSort;
} CERT_CREATE_CONTEXT_PARA, *PCERT_CREATE_CONTEXT_PARA;
#line 12510 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
const void *
__stdcall
CertCreateContext(
         DWORD dwContextType,
         DWORD dwEncodingType,
                           const BYTE *pbEncoded,
         DWORD cbEncoded,
         DWORD dwFlags,
             PCERT_CREATE_CONTEXT_PARA pCreatePara
    );
#line 12570 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_SYSTEM_STORE_INFO {
    DWORD cbSize;
} CERT_SYSTEM_STORE_INFO, *PCERT_SYSTEM_STORE_INFO;
#line 12616 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_PHYSICAL_STORE_INFO {
    DWORD cbSize;
    LPSTR pszOpenStoreProvider;
    DWORD dwOpenEncodingType;
    DWORD dwOpenFlags;
    CRYPT_DATA_BLOB OpenParameters;
    DWORD dwFlags;
    DWORD dwPriority;
} CERT_PHYSICAL_STORE_INFO, *PCERT_PHYSICAL_STORE_INFO;
#line 12662 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertRegisterSystemStore(
         const void *pvSystemStore,
         DWORD dwFlags,
             PCERT_SYSTEM_STORE_INFO pStoreInfo,
               void *pvReserved
    );
#line 12688 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertRegisterPhysicalStore(
         const void *pvSystemStore,
         DWORD dwFlags,
         LPCWSTR pwszStoreName,
         PCERT_PHYSICAL_STORE_INFO pStoreInfo,
               void *pvReserved
    );
#line 12714 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertUnregisterSystemStore(
         const void *pvSystemStore,
         DWORD dwFlags
    );
#line 12737 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertUnregisterPhysicalStore(
         const void *pvSystemStore,
         DWORD dwFlags,
         LPCWSTR pwszStoreName
    );
#line 12763 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(
         LPCWSTR pwszStoreLocation,
         DWORD dwFlags,
               void *pvReserved,
                void *pvArg
    );

typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE)(
         const void *pvSystemStore,
         DWORD dwFlags,
         PCERT_SYSTEM_STORE_INFO pStoreInfo,
               void *pvReserved,
                void *pvArg
    );

typedef BOOL (__stdcall *PFN_CERT_ENUM_PHYSICAL_STORE)(
         const void *pvSystemStore,
         DWORD dwFlags,
         LPCWSTR pwszStoreName,
         PCERT_PHYSICAL_STORE_INFO pStoreInfo,
               void *pvReserved,
                void *pvArg
    );
#line 12806 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertEnumSystemStoreLocation(
         DWORD dwFlags,
                void *pvArg,
               PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum
    );
#line 12846 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertEnumSystemStore(
         DWORD dwFlags,
             void *pvSystemStoreLocationPara,
                void *pvArg,
               PFN_CERT_ENUM_SYSTEM_STORE pfnEnum
    );
#line 12872 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertEnumPhysicalStore(
         const void *pvSystemStore,
         DWORD dwFlags,
                void *pvArg,
               PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum
    );
#line 12935 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertGetEnhancedKeyUsage(
         PCCERT_CONTEXT pCertContext,
         DWORD dwFlags,
                                                PCERT_ENHKEY_USAGE pUsage,
            DWORD *pcbUsage
    );




__declspec(dllimport)
BOOL
__stdcall
CertSetEnhancedKeyUsage(
         PCCERT_CONTEXT pCertContext,
             PCERT_ENHKEY_USAGE pUsage
    );




__declspec(dllimport)
BOOL
__stdcall
CertAddEnhancedKeyUsageIdentifier(
         PCCERT_CONTEXT pCertContext,
         LPCSTR pszUsageIdentifier
    );






__declspec(dllimport)
BOOL
__stdcall
CertRemoveEnhancedKeyUsageIdentifier(
         PCCERT_CONTEXT pCertContext,
         LPCSTR pszUsageIdentifier
    );
#line 12988 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertGetValidUsages(
         DWORD cCerts,
                        PCCERT_CONTEXT *rghCerts,
          int *cNumOIDs,
                                              LPSTR *rghOIDs,
            DWORD *pcbOIDs);
#line 13026 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CryptMsgGetAndVerifySigner(
         HCRYPTMSG hCryptMsg,
         DWORD cSignerStore,
                                  HCERTSTORE *rghSignerStore,
         DWORD dwFlags,
                    PCCERT_CONTEXT *ppSigner,
                DWORD *pdwSignerIndex
    );
#line 13052 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptMsgSignCTL(
         DWORD dwMsgEncodingType,
                              BYTE *pbCtlContent,
         DWORD cbCtlContent,
         PCMSG_SIGNED_ENCODE_INFO pSignInfo,
         DWORD dwFlags,
                                                    BYTE *pbEncoded,
            DWORD *pcbEncoded
    );
#line 13081 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptMsgEncodeAndSignCTL(
         DWORD dwMsgEncodingType,
         PCTL_INFO pCtlInfo,
         PCMSG_SIGNED_ENCODE_INFO pSignInfo,
         DWORD dwFlags,
                                                    BYTE *pbEncoded,
            DWORD *pcbEncoded
    );
#line 13108 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertFindSubjectInSortedCTL(
         PCRYPT_DATA_BLOB pSubjectIdentifier,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags,
               void *pvReserved,
              PCRYPT_DER_BLOB pEncodedAttributes
    );
#line 13132 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertEnumSubjectInSortedCTL(
         PCCTL_CONTEXT pCtlContext,
                      void **ppvNextSubject,
              PCRYPT_DER_BLOB pSubjectIdentifier,
              PCRYPT_DER_BLOB pEncodedAttributes
    );






typedef struct _CTL_VERIFY_USAGE_PARA {
    DWORD cbSize;
    CRYPT_DATA_BLOB ListIdentifier;
    DWORD cCtlStore;
    HCERTSTORE *rghCtlStore;
    DWORD cSignerStore;
    HCERTSTORE *rghSignerStore;
} CTL_VERIFY_USAGE_PARA, *PCTL_VERIFY_USAGE_PARA;

typedef struct _CTL_VERIFY_USAGE_STATUS {
    DWORD cbSize;
    DWORD dwError;
    DWORD dwFlags;
    PCCTL_CONTEXT *ppCtl;
    DWORD dwCtlEntryIndex;
    PCCERT_CONTEXT *ppSigner;
    DWORD dwSignerIndex;
} CTL_VERIFY_USAGE_STATUS, *PCTL_VERIFY_USAGE_STATUS;
#line 13222 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertVerifyCTLUsage(
         DWORD dwEncodingType,
         DWORD dwSubjectType,
         void *pvSubject,
         PCTL_USAGE pSubjectUsage,
         DWORD dwFlags,
             PCTL_VERIFY_USAGE_PARA pVerifyUsagePara,
            PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus
    );
#line 13244 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_REVOCATION_CRL_INFO {
    DWORD cbSize;
    PCCRL_CONTEXT pBaseCrlContext;
    PCCRL_CONTEXT pDeltaCrlContext;



    PCRL_ENTRY pCrlEntry;
    BOOL fDeltaCrlEntry;
} CERT_REVOCATION_CRL_INFO, *PCERT_REVOCATION_CRL_INFO;
#line 13264 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_REVOCATION_CHAIN_PARA
    CERT_REVOCATION_CHAIN_PARA,
    *PCERT_REVOCATION_CHAIN_PARA;
#line 13285 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_REVOCATION_PARA {
    DWORD cbSize;
    PCCERT_CONTEXT pIssuerCert;
    DWORD cCertStore;
    HCERTSTORE *rgCertStore;
    HCERTSTORE hCrlStore;
    LPFILETIME pftTimeToUse;
#line 13328 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
} CERT_REVOCATION_PARA, *PCERT_REVOCATION_PARA;
#line 13345 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_REVOCATION_STATUS {
    DWORD cbSize;
    DWORD dwIndex;
    DWORD dwError;
    DWORD dwReason;
#line 13359 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
    BOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;
} CERT_REVOCATION_STATUS, *PCERT_REVOCATION_STATUS;
#line 13440 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertVerifyRevocation(
         DWORD dwEncodingType,
         DWORD dwRevType,
         DWORD cContext,
                          PVOID rgpvContext[],
         DWORD dwFlags,
             PCERT_REVOCATION_PARA pRevPara,
            PCERT_REVOCATION_STATUS pRevStatus
    );
#line 13512 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
BOOL
__stdcall
CertCompareIntegerBlob(
         PCRYPT_INTEGER_BLOB pInt1,
         PCRYPT_INTEGER_BLOB pInt2
    );
#line 13527 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertCompareCertificate(
         DWORD dwCertEncodingType,
         PCERT_INFO pCertId1,
         PCERT_INFO pCertId2
    );






__declspec(dllimport)
BOOL
__stdcall
CertCompareCertificateName(
         DWORD dwCertEncodingType,
         PCERT_NAME_BLOB pCertName1,
         PCERT_NAME_BLOB pCertName2
    );
#line 13568 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertIsRDNAttrsInCertificateName(
         DWORD dwCertEncodingType,
         DWORD dwFlags,
         PCERT_NAME_BLOB pCertName,
         PCERT_RDN pRDN
    );
#line 13586 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertComparePublicKeyInfo(
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pPublicKey1,
         PCERT_PUBLIC_KEY_INFO pPublicKey2
    );






__declspec(dllimport)
DWORD
__stdcall
CertGetPublicKeyLength(
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pPublicKey
    );
#line 13617 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CryptVerifyCertificateSignature(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwCertEncodingType,
                           const BYTE *pbEncoded,
         DWORD cbEncoded,
         PCERT_PUBLIC_KEY_INFO pPublicKey
    );
#line 13654 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CryptVerifyCertificateSignatureEx(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwCertEncodingType,
         DWORD dwSubjectType,
         void *pvSubject,
         DWORD dwIssuerType,
             void *pvIssuer,
         DWORD dwFlags,
               void *pvReserved
    );
#line 13697 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptHashToBeSigned(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwCertEncodingType,
                           const BYTE *pbEncoded,
         DWORD cbEncoded,
                                                              BYTE *pbComputedHash,
            DWORD *pcbComputedHash
    );
#line 13718 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptHashCertificate(
             HCRYPTPROV_LEGACY hCryptProv,
         ALG_ID Algid,
         DWORD dwFlags,
                               const BYTE *pbEncoded,
         DWORD cbEncoded,
                                                              BYTE *pbComputedHash,
            DWORD *pcbComputedHash
    );






__declspec(dllimport)
BOOL
__stdcall
CryptHashCertificate2(
         LPCWSTR pwszCNGHashAlgid,
         DWORD dwFlags,
               void *pvReserved,
                               const BYTE *pbEncoded,
         DWORD cbEncoded,
                                                              BYTE *pbComputedHash,
            DWORD *pcbComputedHash
    );
#line 13762 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSignCertificate(
             HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
             DWORD dwKeySpec,
         DWORD dwCertEncodingType,
                                     const BYTE *pbEncodedToBeSigned,
         DWORD cbEncodedToBeSigned,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
             const void *pvHashAuxInfo,
                                                        BYTE *pbSignature,
            DWORD *pcbSignature
    );
#line 13789 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSignAndEncodeCertificate(
             HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
             DWORD dwKeySpec,
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
         const void *pvStructInfo,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
             const void *pvHashAuxInfo,
                                                    BYTE *pbEncoded,
            DWORD *pcbEncoded
    );
#line 13825 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC)(
         DWORD dwCertEncodingType,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
                    void **ppvDecodedSignPara,
                LPWSTR *ppwszCNGHashAlgid
    );




typedef BOOL (__stdcall *PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC)(
         NCRYPT_KEY_HANDLE hKey,
         DWORD dwCertEncodingType,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
             void *pvDecodedSignPara,
         LPCWSTR pwszCNGPubKeyAlgid,
         LPCWSTR pwszCNGHashAlgid,
                                BYTE *pbComputedHash,
         DWORD cbComputedHash,
                                                        BYTE *pbSignature,
            DWORD *pcbSignature
    );





typedef BOOL (__stdcall *PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC)(
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pPubKeyInfo,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
             void *pvDecodedSignPara,
         LPCWSTR pwszCNGPubKeyAlgid,
         LPCWSTR pwszCNGHashAlgid,
                                BYTE *pbComputedHash,
         DWORD cbComputedHash,
                             BYTE *pbSignature,
         DWORD cbSignature
    );
#line 13874 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
LONG
__stdcall
CertVerifyTimeValidity(
             LPFILETIME pTimeToVerify,
         PCERT_INFO pCertInfo
    );
#line 13891 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
LONG
__stdcall
CertVerifyCRLTimeValidity(
             LPFILETIME pTimeToVerify,
         PCRL_INFO pCrlInfo
    );







__declspec(dllimport)
BOOL
__stdcall
CertVerifyValidityNesting(
         PCERT_INFO pSubjectInfo,
         PCERT_INFO pIssuerInfo
    );






__declspec(dllimport)
BOOL
__stdcall
CertVerifyCRLRevocation(
         DWORD dwCertEncodingType,
         PCERT_INFO pCertId,

         DWORD cCrlInfo,
                          PCRL_INFO rgpCrlInfo[]
    );






__declspec(dllimport)
LPCSTR
__stdcall
CertAlgIdToOID(
         DWORD dwAlgId
    );






__declspec(dllimport)
DWORD
__stdcall
CertOIDToAlgId(
         LPCSTR pszObjId
    );






__declspec(dllimport)
PCERT_EXTENSION
__stdcall
CertFindExtension(
         LPCSTR pszObjId,
         DWORD cExtensions,
                             CERT_EXTENSION rgExtensions[]
    );






__declspec(dllimport)
PCRYPT_ATTRIBUTE
__stdcall
CertFindAttribute(
         LPCSTR pszObjId,
         DWORD cAttr,
                       CRYPT_ATTRIBUTE rgAttr[]
    );







__declspec(dllimport)
PCERT_RDN_ATTR
__stdcall
CertFindRDNAttr(
         LPCSTR pszObjId,
         PCERT_NAME_INFO pName
    );
#line 14003 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertGetIntendedKeyUsage(
         DWORD dwCertEncodingType,
         PCERT_INFO pCertInfo,
                                  BYTE *pbKeyUsage,
         DWORD cbKeyUsage
    );

typedef void *HCRYPTDEFAULTCONTEXT;
#line 14042 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptInstallDefaultContext(
         HCRYPTPROV hCryptProv,
         DWORD dwDefaultType,
             const void *pvDefaultPara,
         DWORD dwFlags,
               void *pvReserved,
          HCRYPTDEFAULTCONTEXT *phDefaultContext
    );
#line 14083 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {
    DWORD cOID;
    LPSTR *rgpszOID;
} CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA, *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
#line 14097 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptUninstallDefaultContext(
             HCRYPTDEFAULTCONTEXT hDefaultContext,
         DWORD dwFlags,
               void *pvReserved
    );
#line 14113 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptExportPublicKeyInfo(
         HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
             DWORD dwKeySpec,
         DWORD dwCertEncodingType,
                                              PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );
#line 14144 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptExportPublicKeyInfoEx(
         HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
             DWORD dwKeySpec,
         DWORD dwCertEncodingType,
             LPSTR pszPublicKeyObjId,
         DWORD dwFlags,
             void *pvAuxInfo,
                                              PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );
#line 14167 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC) (
         NCRYPT_KEY_HANDLE hNCryptKey,
         DWORD dwCertEncodingType,
         LPSTR pszPublicKeyObjId,
         DWORD dwFlags,
             void *pvAuxInfo,
                                              PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );
#line 14199 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptExportPublicKeyInfoFromBCryptKeyHandle(
         BCRYPT_KEY_HANDLE hBCryptKey,
         DWORD dwCertEncodingType,
             LPSTR pszPublicKeyObjId,
         DWORD dwFlags,
             void *pvAuxInfo,
                                              PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );







typedef BOOL (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC) (
         BCRYPT_KEY_HANDLE hBCryptKey,
         DWORD dwCertEncodingType,
         LPSTR pszPublicKeyObjId,
         DWORD dwFlags,
             void *pvAuxInfo,
                                              PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );
#line 14237 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptImportPublicKeyInfo(
         HCRYPTPROV hCryptProv,
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
          HCRYPTKEY *phKey
    );
#line 14263 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptImportPublicKeyInfoEx(
         HCRYPTPROV hCryptProv,
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
         ALG_ID aiKeyAlg,
         DWORD dwFlags,
             void *pvAuxInfo,
          HCRYPTKEY *phKey
    );
#line 14293 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptImportPublicKeyInfoEx2(
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
         DWORD dwFlags,
             void *pvAuxInfo,
          BCRYPT_KEY_HANDLE *phKey
    );






typedef BOOL (__stdcall *PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC) (
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
         DWORD dwFlags,
             void *pvAuxInfo,
          BCRYPT_KEY_HANDLE *phKey
    );
#line 14382 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptAcquireCertificatePrivateKey(
         PCCERT_CONTEXT pCert,
         DWORD dwFlags,
               void *pvReserved,
          HCRYPTPROV_OR_NCRYPT_KEY_HANDLE *phCryptProvOrNCryptKey,
              DWORD *pdwKeySpec,
              BOOL *pfCallerFreeProvOrNCryptKey
    );
#line 14429 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptFindCertificateKeyProvInfo(
         PCCERT_CONTEXT pCert,
         DWORD dwFlags,
               void *pvReserved
    );
#line 14457 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_IMPORT_PRIV_KEY_FUNC) (
         HCRYPTPROV hCryptProv,
         CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo,
         DWORD dwFlags,
             void* pvAuxInfo
    );
#line 14484 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptImportPKCS8(
         CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams,
         DWORD dwFlags,
              HCRYPTPROV *phCryptProv,
             void* pvAuxInfo
    );




typedef BOOL (__stdcall *PFN_EXPORT_PRIV_KEY_FUNC) (
         HCRYPTPROV hCryptProv,
         DWORD dwKeySpec,
         LPSTR pszPrivateKeyObjId,
         DWORD dwFlags,
             void* pvAuxInfo,
                                          CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo,
            DWORD* pcbPrivateKeyInfo
    );
#line 14515 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptExportPKCS8(
         HCRYPTPROV hCryptProv,
         DWORD dwKeySpec,
         LPSTR pszPrivateKeyObjId,
         DWORD dwFlags,
             void* pvAuxInfo,
                                          BYTE* pbPrivateKeyBlob,
            DWORD *pcbPrivateKeyBlob
    );
#line 14550 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptExportPKCS8Ex(
         CRYPT_PKCS8_EXPORT_PARAMS* psExportParams,
         DWORD dwFlags,
             void* pvAuxInfo,
                                          BYTE* pbPrivateKeyBlob,
            DWORD* pcbPrivateKeyBlob
    );






__declspec(dllimport)
BOOL
__stdcall
CryptHashPublicKeyInfo(
             HCRYPTPROV_LEGACY hCryptProv,
         ALG_ID Algid,
         DWORD dwFlags,
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
                                                              BYTE *pbComputedHash,
            DWORD *pcbComputedHash
    );
#line 14590 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
DWORD
__stdcall
CertRDNValueToStrA(
         DWORD dwValueType,
         PCERT_RDN_VALUE_BLOB pValue,
                                       LPSTR psz,
         DWORD csz
    );
#line 14610 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
DWORD
__stdcall
CertRDNValueToStrW(
         DWORD dwValueType,
         PCERT_RDN_VALUE_BLOB pValue,
                                       LPWSTR psz,
         DWORD csz
    );
#line 14721 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
DWORD
__stdcall
CertNameToStrA(
         DWORD dwCertEncodingType,
         PCERT_NAME_BLOB pName,
         DWORD dwStrType,
                                       LPSTR psz,
         DWORD csz
    );


__declspec(dllimport)
DWORD
__stdcall
CertNameToStrW(
         DWORD dwCertEncodingType,
         PCERT_NAME_BLOB pName,
         DWORD dwStrType,
                                       LPWSTR psz,
         DWORD csz
    );
#line 14888 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertStrToNameA(
         DWORD dwCertEncodingType,
         LPCSTR pszX500,
         DWORD dwStrType,
               void *pvReserved,
                                                    BYTE *pbEncoded,
            DWORD *pcbEncoded,
                        LPCSTR *ppszError
    );


__declspec(dllimport)
BOOL
__stdcall
CertStrToNameW(
         DWORD dwCertEncodingType,
         LPCWSTR pszX500,
         DWORD dwStrType,
               void *pvReserved,
                                                    BYTE *pbEncoded,
            DWORD *pcbEncoded,
                        LPCWSTR *ppszError
    );
#line 15013 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
DWORD
__stdcall
CertGetNameStringA(
         PCCERT_CONTEXT pCertContext,
         DWORD dwType,
         DWORD dwFlags,
             void *pvTypePara,
                                                 LPSTR pszNameString,
         DWORD cchNameString
    );


__declspec(dllimport)
DWORD
__stdcall
CertGetNameStringW(
         PCCERT_CONTEXT pCertContext,
         DWORD dwType,
         DWORD dwFlags,
             void *pvTypePara,
                                                 LPWSTR pszNameString,
         DWORD cchNameString
    );
#line 15115 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef PCCERT_CONTEXT (__stdcall *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(
                void *pvGetArg,
         DWORD dwCertEncodingType,
         PCERT_INFO pSignerId,

         HCERTSTORE hMsgCertStore
    );
#line 15174 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_SIGN_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    PCCERT_CONTEXT pSigningCert;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cMsgCert;
    PCCERT_CONTEXT *rgpMsgCert;
    DWORD cMsgCrl;
    PCCRL_CONTEXT *rgpMsgCrl;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
    DWORD dwFlags;
    DWORD dwInnerContentType;






} CRYPT_SIGN_MESSAGE_PARA, *PCRYPT_SIGN_MESSAGE_PARA;
#line 15226 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_VERIFY_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;
    void *pvGetArg;
} CRYPT_VERIFY_MESSAGE_PARA, *PCRYPT_VERIFY_MESSAGE_PARA;
#line 15273 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD dwFlags;
    DWORD dwInnerContentType;
} CRYPT_ENCRYPT_MESSAGE_PARA, *PCRYPT_ENCRYPT_MESSAGE_PARA;
#line 15307 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD cCertStore;
    HCERTSTORE *rghCertStore;
#line 15321 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
} CRYPT_DECRYPT_MESSAGE_PARA, *PCRYPT_DECRYPT_MESSAGE_PARA;
#line 15334 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_HASH_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
} CRYPT_HASH_MESSAGE_PARA, *PCRYPT_HASH_MESSAGE_PARA;
#line 15354 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;


    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;


    DWORD dwKeySpec;

    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;

    CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;
} CRYPT_KEY_SIGN_MESSAGE_PARA, *PCRYPT_KEY_SIGN_MESSAGE_PARA;
#line 15384 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
} CRYPT_KEY_VERIFY_MESSAGE_PARA, *PCRYPT_KEY_VERIFY_MESSAGE_PARA;
#line 15397 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSignMessage(
         PCRYPT_SIGN_MESSAGE_PARA pSignPara,
         BOOL fDetachedSignature,
         DWORD cToBeSigned,
                                 const BYTE *rgpbToBeSigned[],
                             DWORD rgcbToBeSigned[],
                                                          BYTE *pbSignedBlob,
            DWORD *pcbSignedBlob
    );
#line 15446 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageSignature(
         PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
         DWORD dwSignerIndex,
                              const BYTE *pbSignedBlob,
         DWORD cbSignedBlob,
                                                    BYTE *pbDecoded,
                DWORD *pcbDecoded,
                        PCCERT_CONTEXT *ppSignerCert
    );





__declspec(dllimport)
LONG
__stdcall
CryptGetMessageSignerCount(
         DWORD dwMsgEncodingType,
                              const BYTE *pbSignedBlob,
         DWORD cbSignedBlob
    );





__declspec(dllimport)
HCERTSTORE
__stdcall
CryptGetMessageCertificates(
         DWORD dwMsgAndCertEncodingType,
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwFlags,
                              const BYTE *pbSignedBlob,
         DWORD cbSignedBlob
    );






__declspec(dllimport)
BOOL
__stdcall
CryptVerifyDetachedMessageSignature(
         PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
         DWORD dwSignerIndex,
                                    const BYTE *pbDetachedSignBlob,
         DWORD cbDetachedSignBlob,
         DWORD cToBeSigned,
                             const BYTE *rgpbToBeSigned[],
                             DWORD rgcbToBeSigned[],
                        PCCERT_CONTEXT *ppSignerCert
    );




__declspec(dllimport)
BOOL
__stdcall
CryptEncryptMessage(
         PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
         DWORD cRecipientCert,
                                PCCERT_CONTEXT rgpRecipientCert[],
                                     const BYTE *pbToBeEncrypted,
         DWORD cbToBeEncrypted,
                                                                BYTE *pbEncryptedBlob,
            DWORD *pcbEncryptedBlob
    );
#line 15536 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptDecryptMessage(
         PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
                                 const BYTE *pbEncryptedBlob,
         DWORD cbEncryptedBlob,
                                                        BYTE *pbDecrypted,
                DWORD *pcbDecrypted,
                        PCCERT_CONTEXT *ppXchgCert
    );
#line 15555 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSignAndEncryptMessage(
         PCRYPT_SIGN_MESSAGE_PARA pSignPara,
         PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
         DWORD cRecipientCert,
                                PCCERT_CONTEXT rgpRecipientCert[],
                                          const BYTE *pbToBeSignedAndEncrypted,
         DWORD cbToBeSignedAndEncrypted,
                                                                                  BYTE *pbSignedAndEncryptedBlob,
            DWORD *pcbSignedAndEncryptedBlob
    );
#line 15596 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptDecryptAndVerifyMessageSignature(
         PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
         PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
         DWORD dwSignerIndex,
                                 const BYTE *pbEncryptedBlob,
         DWORD cbEncryptedBlob,
                                                        BYTE *pbDecrypted,
                DWORD *pcbDecrypted,
                        PCCERT_CONTEXT *ppXchgCert,
                        PCCERT_CONTEXT *ppSignerCert
    );
#line 15643 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptDecodeMessage(
         DWORD dwMsgTypeFlags,
             PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
             PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
         DWORD dwSignerIndex,
                               const BYTE *pbEncodedBlob,
         DWORD cbEncodedBlob,
         DWORD dwPrevInnerContentType,
              DWORD *pdwMsgType,
              DWORD *pdwInnerContentType,
                                                    BYTE *pbDecoded,
                DWORD *pcbDecoded,
                        PCCERT_CONTEXT *ppXchgCert,
                        PCCERT_CONTEXT *ppSignerCert
    );
#line 15672 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptHashMessage(
         PCRYPT_HASH_MESSAGE_PARA pHashPara,
         BOOL fDetachedHash,
         DWORD cToBeHashed,
                             const BYTE *rgpbToBeHashed[],
                             DWORD rgcbToBeHashed[],
                                                          BYTE *pbHashedBlob,
                DWORD *pcbHashedBlob,
                                                              BYTE *pbComputedHash,
                DWORD *pcbComputedHash
    );







__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageHash(
         PCRYPT_HASH_MESSAGE_PARA pHashPara,
                              BYTE *pbHashedBlob,
         DWORD cbHashedBlob,
                                                          BYTE *pbToBeHashed,
                DWORD *pcbToBeHashed,
                                                              BYTE *pbComputedHash,
                DWORD *pcbComputedHash
    );
#line 15714 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptVerifyDetachedMessageHash(
         PCRYPT_HASH_MESSAGE_PARA pHashPara,
                                    BYTE *pbDetachedHashBlob,
         DWORD cbDetachedHashBlob,
         DWORD cToBeHashed,
                             const BYTE *rgpbToBeHashed[],
                             DWORD rgcbToBeHashed[],
                                                              BYTE *pbComputedHash,
                DWORD *pcbComputedHash
    );







__declspec(dllimport)
BOOL
__stdcall
CryptSignMessageWithKey(
         PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara,
                              const BYTE *pbToBeSigned,
         DWORD cbToBeSigned,
                                                          BYTE *pbSignedBlob,
            DWORD *pcbSignedBlob
    );
#line 15758 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageSignatureWithKey(
         PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara,
             PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
                              const BYTE *pbSignedBlob,
         DWORD cbSignedBlob,
                                                    BYTE *pbDecoded,
                DWORD *pcbDecoded
    );
#line 15797 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
HCERTSTORE
__stdcall
CertOpenSystemStoreA(
             HCRYPTPROV_LEGACY hProv,
         LPCSTR szSubsystemProtocol
    );
__declspec(dllimport)
HCERTSTORE
__stdcall
CertOpenSystemStoreW(
             HCRYPTPROV_LEGACY hProv,
         LPCWSTR szSubsystemProtocol
    );






__declspec(dllimport)
BOOL
__stdcall
CertAddEncodedCertificateToSystemStoreA(
         LPCSTR szCertStoreName,
                               const BYTE * pbCertEncoded,
         DWORD cbCertEncoded
    );
__declspec(dllimport)
BOOL
__stdcall
CertAddEncodedCertificateToSystemStoreW(
         LPCWSTR szCertStoreName,
                               const BYTE * pbCertEncoded,
         DWORD cbCertEncoded
    );
#line 15851 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_CHAIN {
    DWORD cCerts;
    PCERT_BLOB certs;

    CRYPT_KEY_PROV_INFO keyLocatorInfo;
} CERT_CHAIN, *PCERT_CHAIN;



HRESULT
__stdcall
FindCertsByIssuer(
                                                          PCERT_CHAIN pCertChains,
            DWORD *pcbCertChains,
          DWORD *pcCertChains,
                                         BYTE* pbEncodedIssuerName,
         DWORD cbEncodedIssuerName,
             LPCWSTR pwszPurpose,
         DWORD dwKeySpec

    );
#line 16003 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptQueryObject(
         DWORD dwObjectType,
         const void *pvObject,
         DWORD dwExpectedContentTypeFlags,
         DWORD dwExpectedFormatTypeFlags,
         DWORD dwFlags,
              DWORD *pdwMsgAndCertEncodingType,
              DWORD *pdwContentType,
              DWORD *pdwFormatType,
              HCERTSTORE *phCertStore,
              HCRYPTMSG *phMsg,
                        const void **ppvContext
    );
#line 16178 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
LPVOID
__stdcall
CryptMemAlloc (
         ULONG cbSize
    );

__declspec(dllimport)
LPVOID
__stdcall
CryptMemRealloc (
             LPVOID pv,
         ULONG cbSize
    );

__declspec(dllimport)
void
__stdcall
CryptMemFree (
             LPVOID pv
    );
#line 16210 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef HANDLE HCRYPTASYNC, *PHCRYPTASYNC;

typedef void (__stdcall *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC) (
         LPSTR pszParamOid,
         LPVOID pvParam
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCreateAsyncHandle (
         DWORD dwFlags,
          PHCRYPTASYNC phAsync
    );

__declspec(dllimport)
BOOL
__stdcall
CryptSetAsyncParam (
         HCRYPTASYNC hAsync,
         LPSTR pszParamOid,
             LPVOID pvParam,
               PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetAsyncParam (
         HCRYPTASYNC hAsync,
         LPSTR pszParamOid,
                        LPVOID* ppvParam,
                                    PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* ppfnFree
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCloseAsyncHandle (
             HCRYPTASYNC hAsync
    );
#line 16266 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_BLOB_ARRAY {
    DWORD cBlob;
    PCRYPT_DATA_BLOB rgBlob;
} CRYPT_BLOB_ARRAY, *PCRYPT_BLOB_ARRAY;

typedef struct _CRYPT_CREDENTIALS {
    DWORD cbSize;
    LPCSTR pszCredentialsOid;
    LPVOID pvCredentials;
} CRYPT_CREDENTIALS, *PCRYPT_CREDENTIALS;
#line 16286 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_PASSWORD_CREDENTIALSA {
    DWORD cbSize;
    LPSTR pszUsername;
    LPSTR pszPassword;
} CRYPT_PASSWORD_CREDENTIALSA, *PCRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW {
    DWORD cbSize;
    LPWSTR pszUsername;
    LPWSTR pszPassword;
} CRYPT_PASSWORD_CREDENTIALSW, *PCRYPT_PASSWORD_CREDENTIALSW;




typedef CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALS;
typedef PCRYPT_PASSWORD_CREDENTIALSA PCRYPT_PASSWORD_CREDENTIALS;
#line 16315 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef void (__stdcall *PFN_FREE_ENCODED_OBJECT_FUNC) (
             LPCSTR pszObjectOid,
            PCRYPT_BLOB_ARRAY pObject,
                LPVOID pvFreeContext
    );
#line 16486 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO {
    DWORD cbSize;
    DWORD dwObjectType;







    DWORD dwError;
    DWORD dwReserved;

    FILETIME ThisUpdateTime;
    FILETIME NextUpdateTime;
    FILETIME PublishTime;
} CRYPTNET_URL_CACHE_PRE_FETCH_INFO, *PCRYPTNET_URL_CACHE_PRE_FETCH_INFO;
#line 16516 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPTNET_URL_CACHE_FLUSH_INFO {
    DWORD cbSize;




    DWORD dwExemptSeconds;




    FILETIME ExpireTime;
} CRYPTNET_URL_CACHE_FLUSH_INFO, *PCRYPTNET_URL_CACHE_FLUSH_INFO;
#line 16537 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPTNET_URL_CACHE_RESPONSE_INFO {
    DWORD cbSize;
    WORD wResponseType;
    WORD wResponseFlags;


    FILETIME LastModifiedTime;
    DWORD dwMaxAge;
    LPCWSTR pwszETag;
    DWORD dwProxyId;
} CRYPTNET_URL_CACHE_RESPONSE_INFO, *PCRYPTNET_URL_CACHE_RESPONSE_INFO;
#line 16564 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_RETRIEVE_AUX_INFO {
    DWORD cbSize;
    FILETIME *pLastSyncTime;


    DWORD dwMaxUrlRetrievalByteCount;





    PCRYPTNET_URL_CACHE_PRE_FETCH_INFO pPreFetchInfo;





    PCRYPTNET_URL_CACHE_FLUSH_INFO pFlushInfo;





    PCRYPTNET_URL_CACHE_RESPONSE_INFO *ppResponseInfo;



    LPWSTR pwszCacheFileNamePrefix;





    LPFILETIME pftCacheResync;





    BOOL fProxyCacheRetrieval;
#line 16613 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
    DWORD dwHttpStatusCode;
} CRYPT_RETRIEVE_AUX_INFO, *PCRYPT_RETRIEVE_AUX_INFO;


__declspec(dllimport)

BOOL
__stdcall
CryptRetrieveObjectByUrlA (
         LPCSTR pszUrl,
             LPCSTR pszObjectOid,
         DWORD dwRetrievalFlags,
         DWORD dwTimeout,
                LPVOID* ppvObject,
             HCRYPTASYNC hAsyncRetrieve,
             PCRYPT_CREDENTIALS pCredentials,
             LPVOID pvVerify,
                PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
    );
__declspec(dllimport)

BOOL
__stdcall
CryptRetrieveObjectByUrlW (
         LPCWSTR pszUrl,
             LPCSTR pszObjectOid,
         DWORD dwRetrievalFlags,
         DWORD dwTimeout,
                LPVOID* ppvObject,
             HCRYPTASYNC hAsyncRetrieve,
             PCRYPT_CREDENTIALS pCredentials,
             LPVOID pvVerify,
                PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
    );
#line 16665 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CRYPT_CANCEL_RETRIEVAL)(
         DWORD dwFlags,
                void *pvArg
    );
#line 16678 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptInstallCancelRetrieval(
               PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel,
             const void *pvArg,
         DWORD dwFlags,
               void *pvReserved
);


__declspec(dllimport)
BOOL
__stdcall
CryptUninstallCancelRetrieval(
             DWORD dwFlags,
                   void *pvReserved
        );


__declspec(dllimport)
BOOL
__stdcall
CryptCancelAsyncRetrieval (
             HCRYPTASYNC hAsyncRetrieval
    );
#line 16716 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef void (__stdcall *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC) (
                LPVOID pvCompletion,
         DWORD dwCompletionCode,
         LPCSTR pszUrl,
             LPSTR pszObjectOid,
         LPVOID pvObject
    );

typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION {
               PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;
                LPVOID pvCompletion;
} CRYPT_ASYNC_RETRIEVAL_COMPLETION, *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;
#line 16736 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC) (
             HCRYPTASYNC hAsyncRetrieve
    );
#line 16749 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_URL_ARRAY {
    DWORD cUrl;
    LPWSTR* rgwszUrl;
} CRYPT_URL_ARRAY, *PCRYPT_URL_ARRAY;

typedef struct _CRYPT_URL_INFO {
    DWORD cbSize;


    DWORD dwSyncDeltaTime;




    DWORD cGroup;
    DWORD *rgcGroupEntry;
} CRYPT_URL_INFO, *PCRYPT_URL_INFO;

__declspec(dllimport)
BOOL
__stdcall
CryptGetObjectUrl (
         LPCSTR pszUrlOid,
         LPVOID pvPara,
         DWORD dwFlags,
                                                      PCRYPT_URL_ARRAY pUrlArray,
            DWORD* pcbUrlArray,
                                                    PCRYPT_URL_INFO pUrlInfo,
                DWORD* pcbUrlInfo,
               LPVOID pvReserved
    );
#line 16903 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_CRL_CONTEXT_PAIR {
    PCCERT_CONTEXT pCertContext;
    PCCRL_CONTEXT pCrlContext;
} CERT_CRL_CONTEXT_PAIR, *PCERT_CRL_CONTEXT_PAIR;
typedef const CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;
#line 16921 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO {
    DWORD cbSize;



    int iDeltaCrlIndicator;



    LPFILETIME pftCacheResync;


    LPFILETIME pLastSyncTime;




    LPFILETIME pMaxAgeTime;



    PCERT_REVOCATION_CHAIN_PARA pChainPara;



    PCRYPT_INTEGER_BLOB pDeltaCrlIndicator;

} CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO,
    *PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;

__declspec(dllimport)

BOOL
__stdcall
CryptGetTimeValidObject (
         LPCSTR pszTimeValidOid,
         LPVOID pvPara,
         PCCERT_CONTEXT pIssuer,
             LPFILETIME pftValidFor,
         DWORD dwFlags,
         DWORD dwTimeout,
                    LPVOID* ppvObject,
             PCRYPT_CREDENTIALS pCredentials,
                PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO pExtraInfo
    );
#line 17002 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptFlushTimeValidObject (
          LPCSTR pszFlushTimeValidOid,
          LPVOID pvPara,
          PCCERT_CONTEXT pIssuer,
          DWORD dwFlags,
                LPVOID pvReserved
     );
#line 17066 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPTPROTECT_PROMPTSTRUCT
{
    DWORD cbSize;
    DWORD dwPromptFlags;
    HWND hwndApp;
    LPCWSTR szPrompt;
} CRYPTPROTECT_PROMPTSTRUCT, *PCRYPTPROTECT_PROMPTSTRUCT;
#line 17147 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptProtectData(
                    DATA_BLOB* pDataIn,
                    LPCWSTR szDataDescr,
                    DATA_BLOB* pOptionalEntropy,
                    PVOID pvReserved,
                    CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct,
                    DWORD dwFlags,
                    DATA_BLOB* pDataOut
    );

__declspec(dllimport)
BOOL
__stdcall
CryptUnprotectData(
                    DATA_BLOB* pDataIn,
                        LPWSTR* ppszDataDescr,
                    DATA_BLOB* pOptionalEntropy,
                    PVOID pvReserved,
                    CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct,
                    DWORD dwFlags,
                    DATA_BLOB* pDataOut
    );



__declspec(dllimport)
BOOL
__stdcall
CryptUpdateProtectedState(
                    PSID pOldSid,
                    LPCWSTR pwszOldPassword,
                    DWORD dwFlags,
                    DWORD *pdwSuccessCount,
                    DWORD *pdwFailureCount);
#line 17221 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptProtectMemory(
                    LPVOID pDataIn,
                    DWORD cbDataIn,
                    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptUnprotectMemory(
                    LPVOID pDataIn,
                    DWORD cbDataIn,
                    DWORD dwFlags
    );
#line 17275 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertCreateSelfSignCertificate(
              HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
              PCERT_NAME_BLOB pSubjectIssuerBlob,
              DWORD dwFlags,
              PCRYPT_KEY_PROV_INFO pKeyProvInfo,
              PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
              PSYSTEMTIME pStartTime,
              PSYSTEMTIME pEndTime,
              PCERT_EXTENSIONS pExtensions
    );
#line 17321 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptGetKeyIdentifierProperty(
         const CRYPT_HASH_BLOB *pKeyIdentifier,
         DWORD dwPropId,
         DWORD dwFlags,
             LPCWSTR pwszComputerName,
               void *pvReserved,
                                              void *pvData,
            DWORD *pcbData
    );
#line 17362 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSetKeyIdentifierProperty(
         const CRYPT_HASH_BLOB *pKeyIdentifier,
         DWORD dwPropId,
         DWORD dwFlags,
             LPCWSTR pwszComputerName,
               void *pvReserved,
             const void *pvData
    );
#line 17389 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CRYPT_ENUM_KEYID_PROP)(
         const CRYPT_HASH_BLOB *pKeyIdentifier,
         DWORD dwFlags,
               void *pvReserved,
                void *pvArg,
         DWORD cProp,
                       DWORD *rgdwPropId,
                       void **rgpvData,
                       DWORD *rgcbData
    );
#line 17414 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptEnumKeyIdentifierProperties(
             const CRYPT_HASH_BLOB *pKeyIdentifier,
         DWORD dwPropId,
         DWORD dwFlags,
             LPCWSTR pwszComputerName,
               void *pvReserved,
                void *pvArg,
               PFN_CRYPT_ENUM_KEYID_PROP pfnEnum
    );
#line 17438 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptCreateKeyIdentifierFromCSP(
         DWORD dwCertEncodingType,
             LPCSTR pszPubKeyOID,
                               const PUBLICKEYSTRUC *pPubKeyStruc,
         DWORD cbPubKeyStruc,
         DWORD dwFlags,
               void *pvReserved,
                                              BYTE *pbHash,
            DWORD *pcbHash
    );
#line 17851 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef HANDLE HCERTCHAINENGINE;
#line 17933 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_CHAIN_ENGINE_CONFIG {

    DWORD cbSize;
    HCERTSTORE hRestrictedRoot;
    HCERTSTORE hRestrictedTrust;
    HCERTSTORE hRestrictedOther;
    DWORD cAdditionalStore;
    HCERTSTORE* rghAdditionalStore;
    DWORD dwFlags;
    DWORD dwUrlRetrievalTimeout;
    DWORD MaximumCachedCertificates;
    DWORD CycleDetectionModulus;


    HCERTSTORE hExclusiveRoot;
    HCERTSTORE hExclusiveTrustedPeople;


} CERT_CHAIN_ENGINE_CONFIG, *PCERT_CHAIN_ENGINE_CONFIG;

__declspec(dllimport)

BOOL
__stdcall
CertCreateCertificateChainEngine (
         PCERT_CHAIN_ENGINE_CONFIG pConfig,
          HCERTCHAINENGINE* phChainEngine
    );





__declspec(dllimport)
void
__stdcall
CertFreeCertificateChainEngine (
             HCERTCHAINENGINE hChainEngine
    );






__declspec(dllimport)
BOOL
__stdcall
CertResyncCertificateChainEngine (
             HCERTCHAINENGINE hChainEngine
    );
#line 17999 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_TRUST_STATUS {

    DWORD dwErrorStatus;
    DWORD dwInfoStatus;

} CERT_TRUST_STATUS, *PCERT_TRUST_STATUS;
#line 18091 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_REVOCATION_INFO {

    DWORD cbSize;
    DWORD dwRevocationResult;
    LPCSTR pszRevocationOid;
    LPVOID pvOidSpecificInfo;



    BOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;


    PCERT_REVOCATION_CRL_INFO pCrlInfo;

} CERT_REVOCATION_INFO, *PCERT_REVOCATION_INFO;





typedef struct _CERT_TRUST_LIST_INFO {

    DWORD cbSize;
    PCTL_ENTRY pCtlEntry;
    PCCTL_CONTEXT pCtlContext;

} CERT_TRUST_LIST_INFO, *PCERT_TRUST_LIST_INFO;





typedef struct _CERT_CHAIN_ELEMENT {

    DWORD cbSize;
    PCCERT_CONTEXT pCertContext;
    CERT_TRUST_STATUS TrustStatus;
    PCERT_REVOCATION_INFO pRevocationInfo;

    PCERT_ENHKEY_USAGE pIssuanceUsage;
    PCERT_ENHKEY_USAGE pApplicationUsage;

    LPCWSTR pwszExtendedErrorInfo;
} CERT_CHAIN_ELEMENT, *PCERT_CHAIN_ELEMENT;
typedef const CERT_CHAIN_ELEMENT* PCCERT_CHAIN_ELEMENT;
#line 18147 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_SIMPLE_CHAIN {

    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cElement;
    PCERT_CHAIN_ELEMENT* rgpElement;
    PCERT_TRUST_LIST_INFO pTrustListInfo;







    BOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;

} CERT_SIMPLE_CHAIN, *PCERT_SIMPLE_CHAIN;
typedef const CERT_SIMPLE_CHAIN* PCCERT_SIMPLE_CHAIN;
#line 18177 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT, *PCERT_CHAIN_CONTEXT;
typedef const CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;

struct _CERT_CHAIN_CONTEXT {
    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cChain;
    PCERT_SIMPLE_CHAIN* rgpChain;



    DWORD cLowerQualityChainContext;
    PCCERT_CHAIN_CONTEXT* rgpLowerQualityChainContext;







    BOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;


    DWORD dwCreateFlags;


    GUID ChainId;
};
#line 18218 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_USAGE_MATCH {

    DWORD dwType;
    CERT_ENHKEY_USAGE Usage;

} CERT_USAGE_MATCH, *PCERT_USAGE_MATCH;

typedef struct _CTL_USAGE_MATCH {

    DWORD dwType;
    CTL_USAGE Usage;

} CTL_USAGE_MATCH, *PCTL_USAGE_MATCH;

typedef struct _CERT_CHAIN_PARA {

    DWORD cbSize;
    CERT_USAGE_MATCH RequestedUsage;
#line 18255 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
} CERT_CHAIN_PARA, *PCERT_CHAIN_PARA;
#line 18350 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertGetCertificateChain (
             HCERTCHAINENGINE hChainEngine,
         PCCERT_CONTEXT pCertContext,
             LPFILETIME pTime,
             HCERTSTORE hAdditionalStore,
         PCERT_CHAIN_PARA pChainPara,
         DWORD dwFlags,
               LPVOID pvReserved,
          PCCERT_CHAIN_CONTEXT* ppChainContext
    );





__declspec(dllimport)
void
__stdcall
CertFreeCertificateChain (
         PCCERT_CHAIN_CONTEXT pChainContext
    );





__declspec(dllimport)
PCCERT_CHAIN_CONTEXT
__stdcall
CertDuplicateCertificateChain (
         PCCERT_CHAIN_CONTEXT pChainContext
    );







struct _CERT_REVOCATION_CHAIN_PARA {
    DWORD cbSize;
    HCERTCHAINENGINE hChainEngine;
    HCERTSTORE hAdditionalStore;
    DWORD dwChainFlags;
    DWORD dwUrlRetrievalTimeout;
    LPFILETIME pftCurrentTime;
    LPFILETIME pftCacheResync;



    DWORD cbMaxUrlRetrievalByteCount;
};
#line 18425 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRL_REVOCATION_INFO {

    PCRL_ENTRY pCrlEntry;
    PCCRL_CONTEXT pCrlContext;
    PCCERT_CHAIN_CONTEXT pCrlIssuerChain;

} CRL_REVOCATION_INFO, *PCRL_REVOCATION_INFO;
#line 18454 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCERT_CHAIN_CONTEXT
__stdcall
CertFindChainInStore(
         HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
         DWORD dwFindFlags,
         DWORD dwFindType,
             const void *pvFindPara,
             PCCERT_CHAIN_CONTEXT pPrevChainContext
    );
#line 18513 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(
         PCCERT_CONTEXT pCert,
                void *pvFindArg
    );

typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {
    DWORD cbSize;


    LPCSTR pszUsageIdentifier;


    DWORD dwKeySpec;






    DWORD dwAcquirePrivateKeyFlags;



    DWORD cIssuer;
    CERT_NAME_BLOB *rgIssuer;




    PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
    void *pvFindArg;
#line 18565 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
} CERT_CHAIN_FIND_ISSUER_PARA, *PCERT_CHAIN_FIND_ISSUER_PARA,
    CERT_CHAIN_FIND_BY_ISSUER_PARA, *PCERT_CHAIN_FIND_BY_ISSUER_PARA;
#line 18605 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwFlags;
    void *pvExtraPolicyPara;
} CERT_CHAIN_POLICY_PARA, *PCERT_CHAIN_POLICY_PARA;






typedef struct _CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    DWORD dwError;
    LONG lChainIndex;
    LONG lElementIndex;
    void *pvExtraPolicyStatus;
} CERT_CHAIN_POLICY_STATUS, *PCERT_CHAIN_POLICY_STATUS;
#line 18683 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertVerifyCertificateChainPolicy(
         LPCSTR pszPolicyOID,
         PCCERT_CHAIN_CONTEXT pChainContext,
         PCERT_CHAIN_POLICY_PARA pPolicyPara,
            PCERT_CHAIN_POLICY_STATUS pPolicyStatus
    );
#line 18732 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    PCMSG_SIGNER_INFO pSignerInfo;
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;

typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    BOOL fCommercial;
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS,
    *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
#line 18757 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    BOOL fCommercial;
} AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
#line 18775 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _HTTPSPolicyCallbackData
{
    union {
        DWORD cbStruct;
        DWORD cbSize;
    } ;

    DWORD dwAuthType;



    DWORD fdwChecks;

    WCHAR *pwszServerName;

} HTTPSPolicyCallbackData, *PHTTPSPolicyCallbackData,
    SSL_EXTRA_CERT_CHAIN_POLICY_PARA, *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
#line 18885 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRootProgramQualifierFlags;
} EV_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PEV_EXTRA_CERT_CHAIN_POLICY_PARA;

typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    DWORD dwQualifiers;
    DWORD dwIssuanceUsageIndex;
} EV_EXTRA_CERT_CHAIN_POLICY_STATUS, *PEV_EXTRA_CERT_CHAIN_POLICY_STATUS;
#line 18906 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptStringToBinaryA(
                           LPCSTR pszString,
         DWORD cchString,
         DWORD dwFlags,
                                                  BYTE *pbBinary,
            DWORD *pcbBinary,
              DWORD *pdwSkip,
              DWORD *pdwFlags
    );
#line 18927 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptStringToBinaryW(
                           LPCWSTR pszString,
         DWORD cchString,
         DWORD dwFlags,
                                                  BYTE *pbBinary,
            DWORD *pcbBinary,
              DWORD *pdwSkip,
              DWORD *pdwFlags
    );
#line 18951 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptBinaryToStringA(
                          const BYTE *pbBinary,
         DWORD cbBinary,
         DWORD dwFlags,
                                                    LPSTR pszString,
            DWORD *pcchString
    );






__declspec(dllimport)
BOOL
__stdcall
CryptBinaryToStringW(
                          const BYTE *pbBinary,
         DWORD cbBinary,
         DWORD dwFlags,
                                                    LPWSTR pszString,
            DWORD *pcchString
    );
#line 19061 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_PKCS12_PBE_PARAMS
{
    int iIterations;
    ULONG cbSalt;
}
CRYPT_PKCS12_PBE_PARAMS;
#line 19091 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
HCERTSTORE
__stdcall
PFXImportCertStore(
         CRYPT_DATA_BLOB* pPFX,
         LPCWSTR szPassword,
         DWORD dwFlags);
#line 19119 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
PFXIsPFXBlob(
         CRYPT_DATA_BLOB* pPFX);
#line 19137 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
PFXVerifyPassword(
         CRYPT_DATA_BLOB* pPFX,
         LPCWSTR szPassword,
         DWORD dwFlags);
#line 19171 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
PFXExportCertStoreEx(
         HCERTSTORE hStore,
            CRYPT_DATA_BLOB* pPFX,
         LPCWSTR szPassword,
               void* pvReserved,
         DWORD dwFlags);
#line 19198 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
PFXExportCertStore(
         HCERTSTORE hStore,
            CRYPT_DATA_BLOB* pPFX,
         LPCWSTR szPassword,
         DWORD dwFlags);
#line 19221 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef void *HCERT_SERVER_OCSP_RESPONSE;
#line 19247 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
HCERT_SERVER_OCSP_RESPONSE
__stdcall
CertOpenServerOcspResponse(
         PCCERT_CHAIN_CONTEXT pChainContext,
         DWORD dwFlags,
               LPVOID pvReserved
    );






__declspec(dllimport)
void
__stdcall
CertAddRefServerOcspResponse(
             HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse
    );







__declspec(dllimport)
void
__stdcall
CertCloseServerOcspResponse(
             HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,
         DWORD dwFlags
    );





typedef struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT
    CERT_SERVER_OCSP_RESPONSE_CONTEXT,
    *PCERT_SERVER_OCSP_RESPONSE_CONTEXT;
typedef const CERT_SERVER_OCSP_RESPONSE_CONTEXT
    *PCCERT_SERVER_OCSP_RESPONSE_CONTEXT;

struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT {
    DWORD cbSize;
    BYTE *pbEncodedOcspResponse;
    DWORD cbEncodedOcspResponse;
};
#line 19310 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
PCCERT_SERVER_OCSP_RESPONSE_CONTEXT
__stdcall
CertGetServerOcspResponseContext(
         HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,
         DWORD dwFlags,
               LPVOID pvReserved
    );






__declspec(dllimport)
void
__stdcall
CertAddRefServerOcspResponseContext(
             PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
    );





__declspec(dllimport)
void
__stdcall
CertFreeServerOcspResponseContext(
             PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
    );
#line 19392 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertRetrieveLogoOrBiometricInfo(
         PCCERT_CONTEXT pCertContext,
         LPCSTR lpszLogoOrBiometricType,
         DWORD dwRetrievalFlags,
         DWORD dwTimeout,
         DWORD dwFlags,
               void *pvReserved,
                                     BYTE **ppbData,
          DWORD *pcbData,
                        LPWSTR *ppwszMimeType
    );
#line 19429 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CERT_SELECT_CHAIN_PARA
{
    HCERTCHAINENGINE hChainEngine;
    PFILETIME pTime;
    HCERTSTORE hAdditionalStore;
    PCERT_CHAIN_PARA pChainPara;
    DWORD dwFlags;
}
CERT_SELECT_CHAIN_PARA, *PCERT_SELECT_CHAIN_PARA;
typedef const CERT_SELECT_CHAIN_PARA* PCCERT_SELECT_CHAIN_PARA;



typedef struct _CERT_SELECT_CRITERIA
{
    DWORD dwType;
    DWORD cPara;
                          void** ppPara;
}
CERT_SELECT_CRITERIA, *PCERT_SELECT_CRITERIA;
typedef const CERT_SELECT_CRITERIA* PCCERT_SELECT_CRITERIA;
#line 19486 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertSelectCertificateChains(
             LPCGUID pSelectionContext,
         DWORD dwFlags,
             PCCERT_SELECT_CHAIN_PARA pChainParameters,
         DWORD cCriteria,
                               PCCERT_SELECT_CRITERIA rgpCriteria,
         HCERTSTORE hStore,
          PDWORD pcSelection,
                               PCCERT_CHAIN_CONTEXT** pprgpSelection
    );






__declspec(dllimport)
void
__stdcall
CertFreeCertificateChainList(
         PCCERT_CHAIN_CONTEXT* prgpSelection
    );
#line 19526 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_TIMESTAMP_REQUEST
{
    DWORD dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_DER_BLOB HashedMessage;
    LPSTR pszTSAPolicyId;
    CRYPT_INTEGER_BLOB Nonce;
    BOOL fCertReq;
    DWORD cExtension;

    PCERT_EXTENSION rgExtension;
} CRYPT_TIMESTAMP_REQUEST, *PCRYPT_TIMESTAMP_REQUEST;





typedef struct _CRYPT_TIMESTAMP_RESPONSE
{
    DWORD dwStatus;
    DWORD cFreeText;

    LPWSTR* rgFreeText;
    CRYPT_BIT_BLOB FailureInfo;
    CRYPT_DER_BLOB ContentInfo;
} CRYPT_TIMESTAMP_RESPONSE, *PCRYPT_TIMESTAMP_RESPONSE;
#line 19573 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_TIMESTAMP_ACCURACY
{
    DWORD dwSeconds;
    DWORD dwMillis;
    DWORD dwMicros;
} CRYPT_TIMESTAMP_ACCURACY, *PCRYPT_TIMESTAMP_ACCURACY;





typedef struct _CRYPT_TIMESTAMP_INFO
{
    DWORD dwVersion;
    LPSTR pszTSAPolicyId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_DER_BLOB HashedMessage;
    CRYPT_INTEGER_BLOB SerialNumber;
    FILETIME ftTime;
    PCRYPT_TIMESTAMP_ACCURACY pvAccuracy;
    BOOL fOrdering;
    CRYPT_DER_BLOB Nonce;
    CRYPT_DER_BLOB Tsa;
    DWORD cExtension;

    PCERT_EXTENSION rgExtension;
} CRYPT_TIMESTAMP_INFO, *PCRYPT_TIMESTAMP_INFO;





typedef struct _CRYPT_TIMESTAMP_CONTEXT
{
    DWORD cbEncoded;

    BYTE *pbEncoded;
    PCRYPT_TIMESTAMP_INFO pTimeStamp;
} CRYPT_TIMESTAMP_CONTEXT, *PCRYPT_TIMESTAMP_CONTEXT;
#line 19632 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
typedef struct _CRYPT_TIMESTAMP_PARA
{
    LPCSTR pszTSAPolicyId;
    BOOL fRequestCerts;
    CRYPT_INTEGER_BLOB Nonce;
    DWORD cExtension;

    PCERT_EXTENSION rgExtension;
} CRYPT_TIMESTAMP_PARA, *PCRYPT_TIMESTAMP_PARA;
#line 19686 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
BOOL
__stdcall
CryptRetrieveTimeStamp(
                                LPCWSTR wszUrl,
                                DWORD dwRetrievalFlags,
                                DWORD dwTimeout,
                                LPCSTR pszHashId,
                                const CRYPT_TIMESTAMP_PARA *pPara,

                                const BYTE *pbData,
                                DWORD cbData,
                                PCRYPT_TIMESTAMP_CONTEXT *ppTsContext,
                                PCCERT_CONTEXT *ppTsSigner,
                                HCERTSTORE *phStore
    );
#line 19749 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wincrypt.h"
BOOL
__stdcall
CryptVerifyTimeStampSignature (

                                const BYTE *pbTSContentInfo,
                                DWORD cbTSContentInfo,

                                const BYTE *pbData,
                                DWORD cbData,
                                HCERTSTORE hAdditionalStore,
                                PCRYPT_TIMESTAMP_CONTEXT *ppTsContext,
                                PCCERT_CONTEXT *ppTsSigner,
                                HCERTSTORE *phStore
    );






}






#pragma warning(pop)
#line 190 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winefs.h"
#line 25 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winefs.h"
extern "C" {
#line 54 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winefs.h"
typedef struct _CERTIFICATE_BLOB {

    DWORD dwCertEncodingType;





    DWORD cbData;




    PBYTE pbData;

} EFS_CERTIFICATE_BLOB, *PEFS_CERTIFICATE_BLOB;





typedef struct _EFS_HASH_BLOB {




    DWORD cbData;




    PBYTE pbData;

} EFS_HASH_BLOB, *PEFS_HASH_BLOB;
#line 97 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winefs.h"
typedef struct _EFS_RPC_BLOB {




    DWORD cbData;




    PBYTE pbData;

} EFS_RPC_BLOB, *PEFS_RPC_BLOB;






typedef struct _EFS_PIN_BLOB {




    DWORD cbPadding;




    DWORD cbData;




    PBYTE pbData;

} EFS_PIN_BLOB, *PEFS_PIN_BLOB;







typedef struct _EFS_KEY_INFO {

    DWORD dwVersion;
    ULONG Entropy;
    ALG_ID Algorithm;
    ULONG KeyLength;

} EFS_KEY_INFO, *PEFS_KEY_INFO;






typedef struct _EFS_COMPATIBILITY_INFO {

    DWORD EfsVersion;

} EFS_COMPATIBILITY_INFO, *PEFS_COMPATIBILITY_INFO;







typedef struct _EFS_DECRYPTION_STATUS_INFO {

    DWORD dwDecryptionError;
    DWORD dwHashOffset;
    DWORD cbHash;

} EFS_DECRYPTION_STATUS_INFO, *PEFS_DECRYPTION_STATUS_INFO;

typedef struct _EFS_ENCRYPTION_STATUS_INFO {

    BOOL bHasCurrentKey;
    DWORD dwEncryptionError;

} EFS_ENCRYPTION_STATUS_INFO, *PEFS_ENCRYPTION_STATUS_INFO;







typedef struct _ENCRYPTION_CERTIFICATE {
    DWORD cbTotalLength;
    SID * pUserSid;
    PEFS_CERTIFICATE_BLOB pCertBlob;
} ENCRYPTION_CERTIFICATE, *PENCRYPTION_CERTIFICATE;




typedef struct _ENCRYPTION_CERTIFICATE_HASH {
    DWORD cbTotalLength;
    SID * pUserSid;
    PEFS_HASH_BLOB pHash;




    LPWSTR lpDisplayInformation;

} ENCRYPTION_CERTIFICATE_HASH, *PENCRYPTION_CERTIFICATE_HASH;

typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST {



    DWORD nCert_Hash;



     PENCRYPTION_CERTIFICATE_HASH * pUsers;
} ENCRYPTION_CERTIFICATE_HASH_LIST, *PENCRYPTION_CERTIFICATE_HASH_LIST;



typedef struct _ENCRYPTION_CERTIFICATE_LIST {



    DWORD nUsers;



     PENCRYPTION_CERTIFICATE * pUsers;
} ENCRYPTION_CERTIFICATE_LIST, *PENCRYPTION_CERTIFICATE_LIST;
#line 241 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winefs.h"
typedef struct _ENCRYPTED_FILE_METADATA_SIGNATURE {

 DWORD dwEfsAccessType;
 PENCRYPTION_CERTIFICATE_HASH_LIST pCertificatesAdded;
    PENCRYPTION_CERTIFICATE pEncryptionCertificate;
    PEFS_RPC_BLOB pEfsStreamSignature;

} ENCRYPTED_FILE_METADATA_SIGNATURE, *PENCRYPTED_FILE_METADATA_SIGNATURE;
#line 261 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winefs.h"
__declspec(dllimport)
DWORD
__stdcall
QueryUsersOnEncryptedFile(
                    LPCWSTR lpFileName,
                    PENCRYPTION_CERTIFICATE_HASH_LIST *pUsers
    );


__declspec(dllimport)
DWORD
__stdcall
QueryRecoveryAgentsOnEncryptedFile(
                    LPCWSTR lpFileName,
                    PENCRYPTION_CERTIFICATE_HASH_LIST *pRecoveryAgents
    );


__declspec(dllimport)
DWORD
__stdcall
RemoveUsersFromEncryptedFile(
            LPCWSTR lpFileName,
            PENCRYPTION_CERTIFICATE_HASH_LIST pHashes
    );

__declspec(dllimport)
DWORD
__stdcall
AddUsersToEncryptedFile(
            LPCWSTR lpFileName,
            PENCRYPTION_CERTIFICATE_LIST pEncryptionCertificates
    );







__declspec(dllimport)
DWORD
__stdcall
SetUserFileEncryptionKey(
                PENCRYPTION_CERTIFICATE pEncryptionCertificate
    );
#line 322 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winefs.h"
__declspec(dllimport)
DWORD
__stdcall
SetUserFileEncryptionKeyEx(
                    PENCRYPTION_CERTIFICATE pEncryptionCertificate,
                    DWORD dwCapabilities,
                    DWORD dwFlags,
                    LPVOID pvReserved
    );



__declspec(dllimport)
void
__stdcall
FreeEncryptionCertificateHashList(
            PENCRYPTION_CERTIFICATE_HASH_LIST pUsers
    );

__declspec(dllimport)
BOOL
__stdcall
EncryptionDisable(
         LPCWSTR DirPath,
         BOOL Disable
    );







__declspec(dllimport)
DWORD
__stdcall
DuplicateEncryptionInfoFile(
                LPCWSTR SrcFileName,
                LPCWSTR DstFileName,
                DWORD dwCreationDistribution,
                DWORD dwAttributes,
                const LPSECURITY_ATTRIBUTES lpSecurityAttributes
     );
#line 387 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winefs.h"
__declspec(deprecated)
__declspec(dllimport)
DWORD
__stdcall
GetEncryptedFileMetadata(
                                        LPCWSTR lpFileName,
                                        PDWORD pcbMetadata,
                                        PBYTE *ppbMetadata
    );

__declspec(deprecated)
__declspec(dllimport)
DWORD
__stdcall
SetEncryptedFileMetadata(
                LPCWSTR lpFileName,
                PBYTE pbOldMetadata,
                PBYTE pbNewMetadata,
                PENCRYPTION_CERTIFICATE_HASH pOwnerHash,
                DWORD dwOperation,
                PENCRYPTION_CERTIFICATE_HASH_LIST pCertificatesAdded
    );

__declspec(deprecated)
__declspec(dllimport)
void
__stdcall
FreeEncryptedFileMetadata(
            PBYTE pbMetadata
    );




}
#line 191 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\Windows.h"

#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winscard.h"
#line 30 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\winscard.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wtypes.h"
#line 17 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wtypes.h"
#pragma warning( disable: 4049 )
#line 31 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wtypes.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
#line 38 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack8.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/pshpack8.h"
#pragma warning(disable:4103)

#pragma pack(push,8)
#line 38 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"



#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcnsip.h"
#line 24 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcnsip.h"
extern "C" {


typedef struct
{
   RPC_NS_HANDLE LookupContext;
   RPC_BINDING_HANDLE ProposedHandle;
   RPC_BINDING_VECTOR * Bindings;

} RPC_IMPORT_CONTEXT_P, * PRPC_IMPORT_CONTEXT_P;




__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsGetBuffer(
       PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsSendReceive(
       PRPC_MESSAGE Message,
        RPC_BINDING_HANDLE * Handle
    );

__declspec(dllimport)
void
__stdcall
I_RpcNsRaiseException(
       PRPC_MESSAGE Message,
       RPC_STATUS Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReBindBuffer(
       PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_NsServerBindSearch(
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_NsClientBindSearch(
    void
    );

__declspec(dllimport)
void
__stdcall
I_NsClientBindDone(
    void
    );


}
#line 41 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"



#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcsal.h"
#line 152 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcsal.h"
extern "C" {
#line 498 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\rpcsal.h"
}
#line 44 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"



extern "C" {
#line 160 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
typedef unsigned char byte;
typedef byte cs_byte;
typedef unsigned char boolean;
#line 206 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
void * __stdcall MIDL_user_allocate(size_t size);
void __stdcall MIDL_user_free( void * );


void * __stdcall I_RpcDefaultAllocate(
         handle_t bh, size_t size, void * (* RealAlloc)(size_t) );

void __stdcall I_RpcDefaultFree(
         handle_t bh, void *, void (*RealFree)(void *) );
#line 239 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
typedef void * NDR_CCONTEXT;

typedef struct
    {
    void * pad[2];
    void * userContext;
    } * NDR_SCONTEXT;





typedef void (__stdcall * NDR_RUNDOWN)(void * context);

typedef void (__stdcall * NDR_NOTIFY_ROUTINE)(void);
typedef void (__stdcall * NDR_NOTIFY2_ROUTINE)(boolean flag);

typedef struct _SCONTEXT_QUEUE {
    unsigned long NumberOfObjects;
    NDR_SCONTEXT * ArrayOfObjects;
    } SCONTEXT_QUEUE, * PSCONTEXT_QUEUE;

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
NDRCContextBinding (
         NDR_CCONTEXT CContext
    );

__declspec(dllimport)
void
__stdcall
NDRCContextMarshall (
          NDR_CCONTEXT CContext,
          void *pBuff
    );

__declspec(dllimport)
void
__stdcall
NDRCContextUnmarshall (
            NDR_CCONTEXT * pCContext,
          RPC_BINDING_HANDLE hBinding,
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRCContextUnmarshall2 (
            NDR_CCONTEXT * pCContext,
          RPC_BINDING_HANDLE hBinding,
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall (
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall (
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshallEx (
          RPC_BINDING_HANDLE BindingHandle,
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall2 (
          RPC_BINDING_HANDLE BindingHandle,
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn,
          void * CtxGuard,
         unsigned long Flags
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshallEx (
          RPC_BINDING_HANDLE BindingHandle,
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall2(
          RPC_BINDING_HANDLE BindingHandle,
          void * pBuff,
          unsigned long DataRepresentation,
          void * CtxGuard,
         unsigned long Flags
    );

__declspec(dllimport)
void
__stdcall
RpcSsDestroyClientContext (
         void * * ContextHandle
    );
#line 431 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
typedef unsigned long error_status_t;
#line 514 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;

typedef unsigned char * RPC_BUFPTR;
typedef unsigned long RPC_LENGTH;


typedef void (__stdcall * EXPR_EVAL)( struct _MIDL_STUB_MESSAGE * );

typedef const unsigned char * PFORMAT_STRING;




typedef struct
    {
    long Dimension;


    unsigned long * BufferConformanceMark;
    unsigned long * BufferVarianceMark;


    unsigned long * MaxCountArray;
    unsigned long * OffsetArray;
    unsigned long * ActualCountArray;
    } ARRAY_INFO, *PARRAY_INFO;


typedef struct _NDR_ASYNC_MESSAGE * PNDR_ASYNC_MESSAGE;
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;





typedef const unsigned char * PFORMAT_STRING;
typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct NDR_POINTER_QUEUE_STATE;
struct _NDR_PROC_CONTEXT;

typedef struct _MIDL_STUB_MESSAGE
    {

    PRPC_MESSAGE RpcMsg;


    unsigned char * Buffer;





    unsigned char * BufferStart;
    unsigned char * BufferEnd;
#line 580 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
    unsigned char * BufferMark;


    unsigned long BufferLength;


    unsigned long MemorySize;


    unsigned char * Memory;


    unsigned char IsClient;
    unsigned char Pad;
    unsigned short uFlags2;


    int ReuseBuffer;


    struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
    struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;






    int IgnoreEmbeddedPointers;





    unsigned char * PointerBufferMark;




    unsigned char CorrDespIncrement;

    unsigned char uFlags;
    unsigned short UniquePtrCount;





    ULONG_PTR MaxCount;





    unsigned long Offset;





    unsigned long ActualCount;


    void * ( __stdcall * pfnAllocate)( size_t );
    void ( __stdcall * pfnFree)(void *);







    unsigned char * StackTop;





    unsigned char * pPresentedType;
    unsigned char * pTransmitType;
#line 669 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
    handle_t SavedHandle;




    const struct _MIDL_STUB_DESC * StubDesc;




    struct _FULL_PTR_XLAT_TABLES * FullPtrXlatTables;
    unsigned long FullPtrRefId;

    unsigned long PointerLength;

    int fInDontFree :1;
    int fDontCallFreeInst :1;
    int fInOnlyParam :1;
    int fHasReturn :1;
    int fHasExtensions :1;
    int fHasNewCorrDesc :1;
    int fIsIn :1;
    int fIsOut :1;
    int fIsOicf :1;
    int fBufferValid :1;
    int fHasMemoryValidateCallback: 1;
    int fInFree :1;
    int fNeedMCCP :1;
    int fUnused :3;
    int fUnused2 :16;


    unsigned long dwDestContext;
    void * pvDestContext;

    NDR_SCONTEXT * SavedContextHandles;

    long ParamNumber;

    struct IRpcChannelBuffer * pRpcChannelBuffer;

    PARRAY_INFO pArrayInfo;
    unsigned long * SizePtrCountArray;
    unsigned long * SizePtrOffsetArray;
    unsigned long * SizePtrLengthArray;




    void * pArgQueue;

    unsigned long dwStubPhase;

    void * LowStackMark;




    PNDR_ASYNC_MESSAGE pAsyncMsg;
    PNDR_CORRELATION_INFO pCorrInfo;
    unsigned char * pCorrMemory;

    void * pMemoryList;
#line 744 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
    INT_PTR pCSInfo;

    unsigned char * ConformanceMark;
    unsigned char * VarianceMark;




    INT_PTR Unused;


    struct _NDR_PROC_CONTEXT * pContext;
#line 767 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
    void * ContextHandleHash;
    void * pUserMarshalList;
    INT_PTR Reserved51_3;
    INT_PTR Reserved51_4;
    INT_PTR Reserved51_5;






    } MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;


typedef struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;




typedef void *
        ( __stdcall * GENERIC_BINDING_ROUTINE)
        (void *);
typedef void
        ( __stdcall * GENERIC_UNBIND_ROUTINE)
        (void *, unsigned char *);

typedef struct _GENERIC_BINDING_ROUTINE_PAIR
    {
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
    } GENERIC_BINDING_ROUTINE_PAIR, *PGENERIC_BINDING_ROUTINE_PAIR;

typedef struct __GENERIC_BINDING_INFO
    {
    void * pObj;
    unsigned int Size;
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
    } GENERIC_BINDING_INFO, *PGENERIC_BINDING_INFO;
#line 818 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
typedef void ( __stdcall * XMIT_HELPER_ROUTINE)
    ( PMIDL_STUB_MESSAGE );

typedef struct _XMIT_ROUTINE_QUINTUPLE
    {
    XMIT_HELPER_ROUTINE pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE pfnFreeXmit;
    XMIT_HELPER_ROUTINE pfnFreeInst;
    } XMIT_ROUTINE_QUINTUPLE, *PXMIT_ROUTINE_QUINTUPLE;

typedef unsigned long
( __stdcall * USER_MARSHAL_SIZING_ROUTINE)
    (unsigned long *,
     unsigned long,
     void * );

typedef unsigned char *
( __stdcall * USER_MARSHAL_MARSHALLING_ROUTINE)
    (unsigned long *,
     unsigned char * ,
     void * );

typedef unsigned char *
( __stdcall * USER_MARSHAL_UNMARSHALLING_ROUTINE)
    (unsigned long *,
     unsigned char *,
     void * );

typedef void ( __stdcall * USER_MARSHAL_FREEING_ROUTINE)
    (unsigned long *,
     void * );

typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
    {
    USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE pfnFree;
    } USER_MARSHAL_ROUTINE_QUADRUPLE;



typedef enum _USER_MARSHAL_CB_TYPE
{
    USER_MARSHAL_CB_BUFFER_SIZE,
    USER_MARSHAL_CB_MARSHALL,
    USER_MARSHAL_CB_UNMARSHALL,
    USER_MARSHAL_CB_FREE
} USER_MARSHAL_CB_TYPE;

typedef struct _USER_MARSHAL_CB
{
    unsigned long Flags;
    PMIDL_STUB_MESSAGE pStubMsg;
    PFORMAT_STRING pReserve;
    unsigned long Signature;
    USER_MARSHAL_CB_TYPE CBType;
    PFORMAT_STRING pFormat;
    PFORMAT_STRING pTypeFormat;
} USER_MARSHAL_CB;
#line 888 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
typedef struct _MALLOC_FREE_STRUCT
    {
    void * ( __stdcall * pfnAllocate)(size_t);
    void ( __stdcall * pfnFree)(void *);
    } MALLOC_FREE_STRUCT;

typedef struct _COMM_FAULT_OFFSETS
    {
    short CommOffset;
    short FaultOffset;
    } COMM_FAULT_OFFSETS;





typedef enum _IDL_CS_CONVERT
    {
    IDL_CS_NO_CONVERT,
    IDL_CS_IN_PLACE_CONVERT,
    IDL_CS_NEW_BUFFER_CONVERT
    } IDL_CS_CONVERT;

typedef void
( __stdcall * CS_TYPE_NET_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     unsigned long ulLocalBufferSize,
     IDL_CS_CONVERT * conversionType,
     unsigned long * pulNetworkBufferSize,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_LOCAL_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     unsigned long ulNetworkBufferSize,
     IDL_CS_CONVERT * conversionType,
     unsigned long * pulLocalBufferSize,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_TO_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     void * pLocalData,
     unsigned long ulLocalDataLength,
     byte * pNetworkData,
     unsigned long * pulNetworkDataLength,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_FROM_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     byte * pNetworkData,
     unsigned long ulNetworkDataLength,
     unsigned long ulLocalBufferSize,
     void * pLocalData,
     unsigned long * pulLocalDataLength,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TAG_GETTING_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     int fServerSide,
     unsigned long * pulSendingTag,
     unsigned long * pulDesiredReceivingTag,
     unsigned long * pulReceivingTag,
     error_status_t * pStatus);

void __stdcall
RpcCsGetTags(
     RPC_BINDING_HANDLE hBinding,
     int fServerSide,
     unsigned long * pulSendingTag,
     unsigned long * pulDesiredReceivingTag,
     unsigned long * pulReceivingTag,
     error_status_t * pStatus);

typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES
    {
    CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
    } NDR_CS_SIZE_CONVERT_ROUTINES;

typedef struct _NDR_CS_ROUTINES
    {
    NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE *pTagGettingRoutines;
    } NDR_CS_ROUTINES;

typedef struct _NDR_EXPR_DESC
{
    const unsigned short * pOffset;
    PFORMAT_STRING pFormatExpr;
} NDR_EXPR_DESC;




typedef struct _MIDL_STUB_DESC
    {
    void * RpcInterfaceInformation;

    void * ( __stdcall * pfnAllocate)(size_t);
    void ( __stdcall * pfnFree)(void *);

    union
        {
        handle_t * pAutoHandle;
        handle_t * pPrimitiveHandle;
        PGENERIC_BINDING_INFO pGenericBindingInfo;
        } IMPLICIT_HANDLE_INFO;

    const NDR_RUNDOWN * apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR * aGenericBindingRoutinePairs;
    const EXPR_EVAL * apfnExprEval;
    const XMIT_ROUTINE_QUINTUPLE * aXmitQuintuple;

    const unsigned char * pFormatTypes;

    int fCheckBounds;


    unsigned long Version;

    MALLOC_FREE_STRUCT * pMallocFreeStruct;

    long MIDLVersion;

    const COMM_FAULT_OFFSETS * CommFaultOffsets;


    const USER_MARSHAL_ROUTINE_QUADRUPLE * aUserMarshalQuadruple;


    const NDR_NOTIFY_ROUTINE * NotifyRoutineTable;





    ULONG_PTR mFlags;


    const NDR_CS_ROUTINES * CsRoutineTables;

    void * ProxyServerInfo;
    const NDR_EXPR_DESC * pExprInfo;



    } MIDL_STUB_DESC;


typedef const MIDL_STUB_DESC * PMIDL_STUB_DESC;

typedef void * PMIDL_XMIT_TYPE;







#pragma warning(push)

#pragma warning( disable:4200 )

typedef struct _MIDL_FORMAT_STRING
    {
    short Pad;
    unsigned char Format[];
    } MIDL_FORMAT_STRING;


#pragma warning(pop)
#line 1077 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
typedef void ( __stdcall * STUB_THUNK)( PMIDL_STUB_MESSAGE );


typedef long ( __stdcall * SERVER_ROUTINE)();







typedef struct _MIDL_SERVER_INFO_
    {
    PMIDL_STUB_DESC pStubDesc;
    const SERVER_ROUTINE * DispatchTable;
    PFORMAT_STRING ProcString;
    const unsigned short * FmtStringOffset;
    const STUB_THUNK * ThunkTable;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
    } MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;






typedef struct _MIDL_STUBLESS_PROXY_INFO
    {
    PMIDL_STUB_DESC pStubDesc;
    PFORMAT_STRING ProcFormatString;
    const unsigned short * FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
    } MIDL_STUBLESS_PROXY_INFO;

typedef MIDL_STUBLESS_PROXY_INFO * PMIDL_STUBLESS_PROXY_INFO;




typedef struct _MIDL_SYNTAX_INFO
{
RPC_SYNTAX_IDENTIFIER TransferSyntax;
RPC_DISPATCH_TABLE * DispatchTable;
PFORMAT_STRING ProcString;
const unsigned short * FmtStringOffset;
PFORMAT_STRING TypeString;
const void * aUserMarshalQuadruple;
ULONG_PTR pReserved1;
ULONG_PTR pReserved2;
} MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

typedef unsigned short * PARAM_OFFSETTABLE, *PPARAM_OFFSETTABLE;




typedef union _CLIENT_CALL_RETURN
    {
    void * Pointer;
    LONG_PTR Simple;
    } CLIENT_CALL_RETURN;


typedef enum
        {
        XLAT_SERVER = 1,
        XLAT_CLIENT
        } XLAT_SIDE;

typedef struct _FULL_PTR_XLAT_TABLES
{
    void * RefIdToPointer;
    void * PointerToRefId;
    unsigned long NextRefId;
    XLAT_SIDE XlatSide;
} FULL_PTR_XLAT_TABLES, *PFULL_PTR_XLAT_TABLES;





RPC_STATUS __stdcall
NdrClientGetSupportedSyntaxes(
         RPC_CLIENT_INTERFACE * pInf,
          unsigned long * pCount,
          MIDL_SYNTAX_INFO ** pArr );


RPC_STATUS __stdcall
NdrServerGetSupportedSyntaxes(
         RPC_SERVER_INTERFACE * pInf,
          unsigned long * pCount,
          MIDL_SYNTAX_INFO ** pArr,
          unsigned long * pPreferSyntaxIndex);





__declspec(dllimport)
void
__stdcall
NdrSimpleTypeMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    unsigned char FormatChar
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrPointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrCsArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrCsTagMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrSimpleStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrFixedArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrNonConformantStringMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStringMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNonEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrByteCountPointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrXmitOrRepAsMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrUserMarshalMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrInterfacePointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_CCONTEXT ContextHandle,
    int fCheck
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_SCONTEXT ContextHandle,
    NDR_RUNDOWN RundownRoutine
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextNewMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_SCONTEXT ContextHandle,
    NDR_RUNDOWN RundownRoutine,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrSimpleTypeUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    unsigned char FormatChar
    );

__declspec(dllimport)
unsigned char * __stdcall
__stdcall
NdrCsArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char * __stdcall
__stdcall
NdrCsTagUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char * __stdcall
NdrRangeUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationInitialize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory,
    unsigned long CacheSize,
    unsigned long flags
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationPass(
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationFree(
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrPointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrSimpleStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrFixedArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrNonConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNonEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrByteCountPointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrXmitOrRepAsUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrUserMarshalUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrInterfacePointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_CCONTEXT * pContextHandle,
    RPC_BINDING_HANDLE BindHandle
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg
    );



__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrContextHandleInitialize(
          PMIDL_STUB_MESSAGE pStubMsg,
          PFORMAT_STRING pFormat
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextNewUnmarshall(
          PMIDL_STUB_MESSAGE pStubMsg,
          PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsTagBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrConformantStringBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonConformantStringBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrContextHandleSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
unsigned long
__stdcall
NdrPointerMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrContextHandleMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );




__declspec(dllimport)
unsigned long
__stdcall
NdrCsArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrCsTagMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrSimpleStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrFixedArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStringMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonConformantStringMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrXmitOrRepAsMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrUserMarshalMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrInterfacePointerMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrConvert2(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat,
    long NumberParams
    );

__declspec(dllimport)
void
__stdcall
NdrConvert(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );
#line 2310 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
__declspec(dllimport)
unsigned char *
__stdcall
NdrUserMarshalSimpleTypeConvert(
    unsigned long * pFlags,
    unsigned char * pBuffer,
    unsigned char FormatChar
    );





__declspec(dllimport)
void
__stdcall
NdrClientInitializeNew(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned int ProcNum
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrServerInitializeNew(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializePartial(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned long RequestedBufferSize
    );

__declspec(dllimport)
void
__stdcall
NdrClientInitialize(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned int ProcNum
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrServerInitialize(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrServerInitializeUnmarshall (
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializeMarshall (
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrGetBuffer(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long BufferLength,
    RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNsGetBuffer(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long BufferLength,
    RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrSendReceive(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pBufferEnd
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNsSendReceive(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pBufferEnd,
    RPC_BINDING_HANDLE * pAutoHandle
    );

__declspec(dllimport)
void
__stdcall
NdrFreeBuffer(
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
NdrGetDcomProtocolVersion(
    PMIDL_STUB_MESSAGE pStubMsg,
    RPC_VERSION * pVersion );
#line 2444 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
CLIENT_CALL_RETURN __cdecl
NdrClientCall2(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );


CLIENT_CALL_RETURN __cdecl
NdrClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrAsyncClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrDcomAsyncClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );


typedef enum {
    STUB_UNMARSHAL,
    STUB_CALL_SERVER,
    STUB_MARSHAL,
    STUB_CALL_SERVER_NO_HRESULT
}STUB_PHASE;

typedef enum {
    PROXY_CALCSIZE,
    PROXY_GETBUFFER,
    PROXY_MARSHAL,
    PROXY_SENDRECEIVE,
    PROXY_UNMARSHAL
}PROXY_PHASE;

struct IRpcStubBuffer;


__declspec(dllimport)
void
__stdcall
NdrAsyncServerCall(
    PRPC_MESSAGE pRpcMsg
    );


__declspec(dllimport)
long
__stdcall
NdrAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );


__declspec(dllimport)
long
__stdcall
NdrDcomAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall2(
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall2(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall (
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
int
__stdcall
NdrServerUnmarshall(
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    void * pParamList
    );

__declspec(dllimport)
void
__stdcall
NdrServerMarshall(
    void * pThis,
    void * pChannel,
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
NdrMapCommAndFaultStatus(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long * pCommStatus,
    unsigned long * pFaultStatus,
    RPC_STATUS Status
    );







typedef void * RPC_SS_THREAD_HANDLE;

typedef void * __stdcall
RPC_CLIENT_ALLOC (
         size_t Size
    );

typedef void __stdcall
RPC_CLIENT_FREE (
         void * Ptr
    );





__declspec(dllimport)
void *
__stdcall
RpcSsAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
RpcSsDisableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsEnableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsFree (
         void * NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSsGetThreadHandle (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetThreadHandle (
         RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
void
__stdcall
RpcSsSwapClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree,
          RPC_CLIENT_ALLOC * * OldClientAlloc,
          RPC_CLIENT_FREE * * OldClientFree
    );





__declspec(dllimport)
void *
__stdcall
RpcSmAllocate (
          size_t Size,
          RPC_STATUS * pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmClientFree (
          void * pNodeToFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDestroyClientContext (
         void * * ContextHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDisableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmEnableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmFree (
         void * NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSmGetThreadHandle (
          RPC_STATUS * pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetThreadHandle (
         RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSwapClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree,
          RPC_CLIENT_ALLOC * * OldClientAlloc,
          RPC_CLIENT_FREE * * OldClientFree
    );





__declspec(dllimport)
void
__stdcall
NdrRpcSsEnableAllocate(
    PMIDL_STUB_MESSAGE pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDisableAllocate(
    PMIDL_STUB_MESSAGE pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSmSetClientToOsf(
    PMIDL_STUB_MESSAGE pMessage );

__declspec(dllimport)
void *
__stdcall
NdrRpcSmClientAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSmClientFree (
         void * NodeToFree
    );

__declspec(dllimport)
void *
__stdcall
NdrRpcSsDefaultAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDefaultFree (
         void * NodeToFree
    );
#line 2808 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
__declspec(dllimport)
PFULL_PTR_XLAT_TABLES
__stdcall
NdrFullPointerXlatInit(
    unsigned long NumberOfPointers,
    XLAT_SIDE XlatSide
    );

__declspec(dllimport)
void
__stdcall
NdrFullPointerXlatFree(
    PFULL_PTR_XLAT_TABLES pXlatTables
    );


__declspec(dllimport)
void *
__stdcall
NdrAllocate(
    PMIDL_STUB_MESSAGE pStubMsg,
    size_t Len
    );

__declspec(dllimport)
void
__stdcall
NdrClearOutParameters(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat,
    void * ArgAddr
    );






__declspec(dllimport)
void *
__stdcall
NdrOleAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrOleFree (
         void * NodeToFree
    );
#line 2907 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
    void * Buffer;
    unsigned long BufferSize;
    void *(__stdcall * pfnAllocate)(size_t);
    void (__stdcall * pfnFree)(void *);
    struct IRpcChannelBuffer * pRpcChannelBuffer;
    ULONG_PTR Reserved[5];
} NDR_USER_MARSHAL_INFO_LEVEL1;



#pragma warning(push)

#pragma warning(disable:4201)


typedef struct _NDR_USER_MARSHAL_INFO
{
    unsigned long InformationLevel;
    union {
        NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    } ;
} NDR_USER_MARSHAL_INFO;



#pragma warning(pop)





RPC_STATUS
__stdcall
NdrGetUserMarshalInfo (
         unsigned long * pFlags,
         unsigned long InformationLevel,
          NDR_USER_MARSHAL_INFO * pMarshalInfo
    );




RPC_STATUS __stdcall
NdrCreateServerInterfaceFromStub(
                 struct IRpcStubBuffer* pStub,
                    RPC_SERVER_INTERFACE *pServerIf );




CLIENT_CALL_RETURN __cdecl
NdrClientCall3(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );

CLIENT_CALL_RETURN __cdecl
Ndr64AsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );

CLIENT_CALL_RETURN __cdecl
Ndr64DcomAsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );

struct IRpcStubBuffer;

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCall(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCall64(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCallAll(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
Ndr64AsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );


__declspec(dllimport)
long
__stdcall
Ndr64DcomAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall3 (
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCallAll(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerCallNdr64(
    PRPC_MESSAGE pRpcMsg
    );


__declspec(dllimport)
void
__stdcall
NdrServerCall3(
    PRPC_MESSAGE pRpcMsg
    );



__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreClientMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreServerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    void ** ppMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreClientBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreServerInitialize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void ** ppMemory,
    PFORMAT_STRING pFormat
    );


void __stdcall
RpcUserFree( handle_t AsyncHandle, void * pBuffer );


}



#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#line 27 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/poppack.h"
#pragma warning(disable:4103)

#pragma pack(pop)
#line 3102 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include/rpcndr.h"
#line 31 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wtypes.h"
#line 49 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wtypes.h"
#line 1 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\guiddef.h"
#line 49 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wtypes.h"



extern "C"{
#line 70 "C:/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/include\\wtypes.h"
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec;







typedef struct tagRemHGLOBAL
    {
    long fNullHGlobal;
    unsigned long cbData;
    byte data[ 1 ];
    } RemHGLOBAL;

typedef struct tagRemHMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    unsigned long cbData;
    byte data[ 1 ];
    } RemHMETAFILEPICT;

typedef struct tagRemHENHMETAFILE
    {
    unsigned long cbData;
    byte data[ 1 ];
    } RemHENHMETAFILE;

typedef struct tagRemH